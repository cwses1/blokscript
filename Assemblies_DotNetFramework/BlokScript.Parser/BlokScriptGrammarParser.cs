//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		STATEMENTEND=74, WS=75, STRINGLITERAL=76, VARID=77, INTLITERAL=78, REGEXLITERAL=79;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_loginStatement = 3, 
		RULE_loginOnlyStatement = 4, RULE_loginWithGlobalUserNameStatement = 5, 
		RULE_loginWithGlobalPasswordStatement = 6, RULE_loginWithGlobalTokenStatement = 7, 
		RULE_loginWithGlobalUserNameAndPasswordStatement = 8, RULE_varStatement = 9, 
		RULE_spaceVarStatement = 10, RULE_blockVarStatement = 11, RULE_stringVarStatement = 12, 
		RULE_regexVarStatement = 13, RULE_storyVarStatement = 14, RULE_spaceSpec = 15, 
		RULE_blockSpec = 16, RULE_storySpec = 17, RULE_assignmentStatement = 18, 
		RULE_spaceAssignmentStatement = 19, RULE_blockAssignmentStatement = 20, 
		RULE_stringAssignmentStatement = 21, RULE_copyStatement = 22, RULE_copyBlockStatement = 23, 
		RULE_copySpaceStatement = 24, RULE_copySpacesStatement = 25, RULE_printStatement = 26, 
		RULE_printSpacesStatement = 27, RULE_printVarStatement = 28, RULE_printSpaceStatement = 29, 
		RULE_printStringLiteralStatement = 30, RULE_printSymbolTableStatement = 31, 
		RULE_printLocalCacheStatement = 32, RULE_realDataLocation = 33, RULE_spacesOutputLocation = 34, 
		RULE_fileSpec = 35, RULE_blockOutputLocation = 36, RULE_blocksOutputLocation = 37, 
		RULE_storyOutputLocation = 38, RULE_filesSpec = 39, RULE_spaceOutputLocation = 40, 
		RULE_varGetFrom = 41, RULE_copyBlocksStatement = 42, RULE_copyStoryStatement = 43, 
		RULE_blockConstraintList = 44, RULE_blockConstraint = 45, RULE_intExprList = 46, 
		RULE_intExpr = 47, RULE_verbosityStatement = 48, RULE_waitStatement = 49, 
		RULE_compareStatement = 50, RULE_compareSpacesStatement = 51, RULE_compareBlocksStatement = 52, 
		RULE_compareAllBlocksStatement = 53, RULE_publishStoryStatement = 54, 
		RULE_unpublishStoryStatement = 55, RULE_deleteStoryStatement = 56, RULE_storiesInputLocation = 57, 
		RULE_storiesOutputLocation = 58, RULE_copyStoriesStatement = 59, RULE_publishStoriesStatement = 60, 
		RULE_unpublishStoriesStatement = 61, RULE_deleteStoriesStatement = 62, 
		RULE_storyConstraintList = 63, RULE_storyConstraint = 64, RULE_regexExpr = 65, 
		RULE_regexExprList = 66, RULE_copyDatasourceStatement = 67, RULE_copyDatasourcesStatement = 68, 
		RULE_datasourceConstraintList = 69, RULE_datasourceConstraint = 70, RULE_stringExpr = 71, 
		RULE_stringExprList = 72, RULE_forEachStatement = 73;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "loginStatement", "loginOnlyStatement", 
		"loginWithGlobalUserNameStatement", "loginWithGlobalPasswordStatement", 
		"loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "spaceSpec", "blockSpec", "storySpec", 
		"assignmentStatement", "spaceAssignmentStatement", "blockAssignmentStatement", 
		"stringAssignmentStatement", "copyStatement", "copyBlockStatement", "copySpaceStatement", 
		"copySpacesStatement", "printStatement", "printSpacesStatement", "printVarStatement", 
		"printSpaceStatement", "printStringLiteralStatement", "printSymbolTableStatement", 
		"printLocalCacheStatement", "realDataLocation", "spacesOutputLocation", 
		"fileSpec", "blockOutputLocation", "blocksOutputLocation", "storyOutputLocation", 
		"filesSpec", "spaceOutputLocation", "varGetFrom", "copyBlocksStatement", 
		"copyStoryStatement", "blockConstraintList", "blockConstraint", "intExprList", 
		"intExpr", "verbosityStatement", "waitStatement", "compareStatement", 
		"compareSpacesStatement", "compareBlocksStatement", "compareAllBlocksStatement", 
		"publishStoryStatement", "unpublishStoryStatement", "deleteStoryStatement", 
		"storiesInputLocation", "storiesOutputLocation", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintList", "storyConstraint", "regexExpr", "regexExprList", 
		"copyDatasourceStatement", "copyDatasourcesStatement", "datasourceConstraintList", 
		"datasourceConstraint", "stringExpr", "stringExprList", "forEachStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'login'", "'with'", "'global'", "'username'", "'password'", "'token'", 
		"'and'", "'space'", "'='", "'block'", "'string'", "'regex'", "'story'", 
		"'in'", "'from'", "'copy'", "'to'", "'all'", "'spaces'", "'print'", "'symbol'", 
		"'tables'", "'local'", "'cache'", "'server'", "'console'", "'file'", "'files'", 
		"'on'", "'demand'", "'blocks'", "'where'", "'or'", "'id'", "'!='", "'not'", 
		"'('", "')'", "'name'", "'matches'", "'does'", "'match'", "'like'", "'starts'", 
		"'start'", "'ends'", "'end'", "','", "'+'", "'-'", "'*'", "'%'", "'be'", 
		"'verbose'", "'quiet'", "'wait'", "'compare'", "'publish'", "'unpublish'", 
		"'delete'", "'stories'", "'url'", "'any'", "'tag'", "'tags'", "'do'", 
		"'no'", "'datasource'", "'datasources'", "'slug'", "'foreach'", "'{'", 
		"'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STATEMENTEND", "WS", "STRINGLITERAL", "VARID", "INTLITERAL", 
		"REGEXLITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENTEND() { return GetTokens(BlokScriptGrammarParser.STATEMENTEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND(int i) {
			return GetToken(BlokScriptGrammarParser.STATEMENTEND, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				statement();
				State = 151;
				Match(STATEMENTEND);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2296835809960082690L) != 0) || _la==VARID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStatementContext copyStatement() {
			return GetRuleContext<CopyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoryStatementContext publishStoryStatement() {
			return GetRuleContext<PublishStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoryStatementContext unpublishStoryStatement() {
			return GetRuleContext<UnpublishStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoryStatementContext deleteStoryStatement() {
			return GetRuleContext<DeleteStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				loginStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				varStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				copyStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				assignmentStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				printStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 162;
				verbosityStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 163;
				waitStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 164;
				compareStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 165;
				publishStoryStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 166;
				unpublishStoryStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 167;
				deleteStoryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 168;
				copyStoriesStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 169;
				publishStoriesStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 170;
				unpublishStoriesStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 171;
				deleteStoriesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_loginStatement);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(T__0);
			State = 184;
			Match(T__1);
			State = 185;
			Match(T__2);
			State = 186;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__0);
			State = 189;
			Match(T__1);
			State = 190;
			Match(T__2);
			State = 191;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__0);
			State = 194;
			Match(T__1);
			State = 195;
			Match(T__2);
			State = 196;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__0);
			State = 199;
			Match(T__1);
			State = 200;
			Match(T__2);
			State = 201;
			Match(T__3);
			State = 202;
			Match(T__6);
			State = 203;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_varStatement);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				spaceVarStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				blockVarStatement();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207;
				stringVarStatement();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208;
				regexVarStatement();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 209;
				storyVarStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__7);
			State = 213;
			Match(VARID);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 214;
				Match(T__8);
				State = 215;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(T__9);
			State = 219;
			Match(VARID);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 220;
				Match(T__8);
				State = 221;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(T__10);
			State = 225;
			Match(VARID);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 226;
				Match(T__8);
				State = 230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 227;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 228;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 229;
					stringExpr();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(T__11);
			State = 235;
			Match(VARID);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 236;
				Match(T__8);
				State = 237;
				_la = TokenStream.LA(1);
				if ( !(_la==VARID || _la==REGEXLITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__12);
			State = 241;
			Match(VARID);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 242;
				Match(T__8);
				State = 243;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_spaceSpec);
		int _la;
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(T__7);
				State = 247;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 248;
					varGetFrom();
					}
					break;
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_blockSpec);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				Match(T__9);
				State = 255;
				Match(STRINGLITERAL);
				State = 256;
				Match(T__13);
				State = 259;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
				case VARID:
					{
					State = 257;
					spaceSpec();
					}
					break;
				case T__26:
					{
					State = 258;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				Match(T__9);
				State = 262;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 34, RULE_storySpec);
		int _la;
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 266;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
				case VARID:
					{
					State = 267;
					spaceSpec();
					}
					break;
				case T__26:
					{
					State = 268;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentStatement);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				Match(VARID);
				State = 275;
				Match(T__8);
				State = 276;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(VARID);
			State = 283;
			Match(T__8);
			State = 284;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(VARID);
			State = 287;
			Match(T__8);
			State = 288;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(VARID);
			State = 291;
			Match(T__8);
			State = 292;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoryStatementContext copyStoryStatement() {
			return GetRuleContext<CopyStoryStatementContext>(0);
		}
		public CopyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStatementContext copyStatement() {
		CopyStatementContext _localctx = new CopyStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_copyStatement);
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				copyBlockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				copySpaceStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296;
				copySpacesStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 297;
				copyBlocksStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 298;
				copyStoryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__15);
			State = 302;
			blockSpec();
			State = 303;
			Match(T__16);
			State = 304;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(T__15);
			State = 307;
			spaceSpec();
			State = 308;
			Match(T__16);
			State = 309;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(T__15);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 312;
				Match(T__17);
				}
			}

			State = 315;
			Match(T__18);
			State = 316;
			Match(T__14);
			State = 317;
			realDataLocation();
			State = 318;
			Match(T__16);
			State = 319;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_printStatement);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 324;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 325;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 326;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(T__19);
			State = 330;
			Match(T__18);
			State = 331;
			Match(T__14);
			State = 332;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(T__19);
			State = 335;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(T__19);
			State = 338;
			Match(T__7);
			State = 339;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(T__19);
			State = 342;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(T__19);
			State = 345;
			Match(T__20);
			State = 346;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(T__19);
			State = 349;
			Match(T__22);
			State = 350;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 66, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				{
				State = 352;
				Match(T__24);
				}
				break;
			case T__22:
				{
				State = 353;
				Match(T__22);
				State = 354;
				Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 68, RULE_spacesOutputLocation);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				Match(T__22);
				State = 359;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 70, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__26);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL || _la==VARID) {
				{
				State = 364;
				_la = TokenStream.LA(1);
				if ( !(_la==STRINGLITERAL || _la==VARID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 72, RULE_blockOutputLocation);
		int _la;
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(T__22);
				State = 369;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370;
				Match(T__26);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRINGLITERAL) {
					{
					State = 371;
					Match(STRINGLITERAL);
					}
				}

				}
				break;
			case T__7:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 374;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 74, RULE_blocksOutputLocation);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 377;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				Match(T__22);
				State = 379;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 380;
				fileSpec();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 381;
				filesSpec();
				}
				break;
			case T__7:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 382;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 76, RULE_storyOutputLocation);
		try {
			State = 390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386;
				Match(T__22);
				State = 387;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388;
				fileSpec();
				}
				break;
			case T__7:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilesSpecContext : ParserRuleContext {
		public FilesSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filesSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilesSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilesSpecContext filesSpec() {
		FilesSpecContext _localctx = new FilesSpecContext(Context, State);
		EnterRule(_localctx, 78, RULE_filesSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 80, RULE_spaceOutputLocation);
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				Match(T__22);
				State = 396;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 397;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 82, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 400;
				Match(T__28);
				State = 401;
				Match(T__29);
				}
				break;
			case 2:
				{
				State = 402;
				Match(T__13);
				State = 403;
				Match(T__22);
				State = 404;
				Match(T__23);
				}
				break;
			case 3:
				{
				State = 405;
				Match(T__28);
				State = 406;
				Match(T__24);
				}
				break;
			case 4:
				{
				State = 407;
				Match(T__13);
				State = 408;
				fileSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintListContext blockConstraintList() {
			return GetRuleContext<BlockConstraintListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(T__15);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 412;
				Match(T__17);
				}
			}

			State = 415;
			Match(T__30);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31) {
				{
				State = 416;
				Match(T__31);
				State = 417;
				blockConstraintList();
				}
			}

			State = 420;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 421;
			spaceSpec();
			State = 422;
			Match(T__16);
			State = 423;
			blocksOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryOutputLocationContext storyOutputLocation() {
			return GetRuleContext<StoryOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public CopyStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoryStatementContext copyStoryStatement() {
		CopyStoryStatementContext _localctx = new CopyStoryStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_copyStoryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__15);
			State = 426;
			Match(T__12);
			State = 427;
			storySpec();
			State = 428;
			Match(T__16);
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 429;
				storyOutputLocation();
				}
				break;
			case 2:
				{
				State = 430;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintListContext blockConstraintList() {
			return GetRuleContext<BlockConstraintListContext>(0);
		}
		public BlockConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintListContext blockConstraintList() {
		BlockConstraintListContext _localctx = new BlockConstraintListContext(Context, State);
		EnterRule(_localctx, 88, RULE_blockConstraintList);
		int _la;
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				blockConstraint();
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 434;
					Match(T__6);
					State = 435;
					blockConstraintList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				blockConstraint();
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 439;
					Match(T__32);
					State = 440;
					blockConstraintList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 90, RULE_blockConstraint);
		int _la;
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				Match(T__33);
				State = 446;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 447;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				Match(T__33);
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 449;
					Match(T__35);
					}
				}

				State = 452;
				Match(T__13);
				State = 453;
				Match(T__36);
				State = 454;
				intExprList();
				State = 455;
				Match(T__37);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 457;
				Match(T__38);
				State = 458;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 459;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 460;
				Match(T__38);
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 461;
					Match(T__35);
					}
				}

				State = 464;
				Match(T__13);
				State = 465;
				Match(T__36);
				State = 466;
				stringExprList();
				State = 467;
				Match(T__37);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 469;
				Match(T__38);
				State = 474;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 470;
					Match(T__39);
					}
					break;
				case T__40:
					{
					State = 471;
					Match(T__40);
					State = 472;
					Match(T__35);
					State = 473;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 476;
					Match(T__11);
					}
				}

				State = 479;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 480;
				Match(T__38);
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 481;
					Match(T__35);
					}
				}

				State = 484;
				Match(T__13);
				State = 485;
				Match(T__36);
				State = 486;
				regexExprList();
				State = 487;
				Match(T__37);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 489;
				Match(T__38);
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 490;
					Match(T__35);
					}
				}

				State = 493;
				Match(T__42);
				State = 494;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 495;
				Match(T__38);
				State = 500;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 496;
					Match(T__43);
					}
					break;
				case T__40:
					{
					State = 497;
					Match(T__40);
					State = 498;
					Match(T__35);
					State = 499;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 502;
				Match(T__1);
				State = 503;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 504;
				Match(T__38);
				State = 509;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 505;
					Match(T__45);
					}
					break;
				case T__40:
					{
					State = 506;
					Match(T__40);
					State = 507;
					Match(T__35);
					State = 508;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 511;
				Match(T__1);
				State = 512;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 92, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			intExpr();
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__47) {
				{
				State = 516;
				Match(T__47);
				State = 517;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 94, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) {
				{
				State = 521;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 522;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__52) {
				{
				State = 525;
				Match(T__52);
				}
			}

			State = 528;
			_la = TokenStream.LA(1);
			if ( !(_la==T__53 || _la==T__54) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(T__55);
			State = 531;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_compareStatement);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(T__56);
			State = 539;
			spaceSpec();
			State = 540;
			Match(T__6);
			State = 541;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			Match(T__56);
			State = 544;
			blockSpec();
			State = 545;
			Match(T__6);
			State = 546;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(T__56);
			State = 549;
			Match(T__17);
			State = 550;
			Match(T__30);
			State = 551;
			Match(T__13);
			State = 552;
			spaceSpec();
			State = 553;
			Match(T__6);
			State = 554;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public PublishStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoryStatementContext publishStoryStatement() {
		PublishStoryStatementContext _localctx = new PublishStoryStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_publishStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__57);
			State = 557;
			Match(T__12);
			State = 558;
			storySpec();
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 559;
				Match(T__13);
				State = 560;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public UnpublishStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoryStatementContext unpublishStoryStatement() {
		UnpublishStoryStatementContext _localctx = new UnpublishStoryStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_unpublishStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(T__58);
			State = 564;
			Match(T__12);
			State = 565;
			storySpec();
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 566;
				Match(T__13);
				State = 567;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public DeleteStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoryStatementContext deleteStoryStatement() {
		DeleteStoryStatementContext _localctx = new DeleteStoryStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_deleteStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(T__59);
			State = 571;
			Match(T__12);
			State = 572;
			storySpec();
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 573;
				Match(T__13);
				State = 574;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 114, RULE_storiesInputLocation);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577;
				Match(T__22);
				State = 578;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				fileSpec();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580;
				filesSpec();
				}
				break;
			case T__7:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 581;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 116, RULE_storiesOutputLocation);
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(T__25);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				Match(T__22);
				State = 586;
				Match(T__23);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587;
				fileSpec();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 588;
				filesSpec();
				}
				break;
			case T__7:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 589;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(T__15);
			State = 593;
			Match(T__60);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__31) {
				{
				State = 594;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 595;
				storyConstraintList();
				}
			}

			State = 598;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 599;
			storiesInputLocation();
			State = 600;
			Match(T__16);
			State = 601;
			storiesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(T__57);
			State = 604;
			Match(T__60);
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__31) {
				{
				State = 605;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 606;
				storyConstraintList();
				}
			}

			State = 609;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 610;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(T__58);
			State = 613;
			Match(T__60);
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__31) {
				{
				State = 614;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 615;
				storyConstraintList();
				}
			}

			State = 618;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 619;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(T__59);
			State = 622;
			Match(T__60);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__31) {
				{
				State = 623;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 624;
				storyConstraintList();
				}
			}

			State = 627;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 628;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public StoryConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintListContext storyConstraintList() {
		StoryConstraintListContext _localctx = new StoryConstraintListContext(Context, State);
		EnterRule(_localctx, 126, RULE_storyConstraintList);
		int _la;
		try {
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				storyConstraint();
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 631;
					Match(T__6);
					State = 632;
					storyConstraintList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				storyConstraint();
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 636;
					Match(T__32);
					State = 637;
					storyConstraintList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 128, RULE_storyConstraint);
		int _la;
		try {
			State = 853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642;
				Match(T__33);
				State = 643;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 644;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645;
				Match(T__33);
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 646;
					Match(T__35);
					}
				}

				State = 649;
				Match(T__13);
				State = 650;
				Match(T__36);
				State = 651;
				intExprList();
				State = 652;
				Match(T__37);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 654;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 655;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 656;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 658;
					Match(T__35);
					}
				}

				State = 661;
				Match(T__13);
				State = 662;
				Match(T__36);
				State = 663;
				stringExprList();
				State = 664;
				Match(T__37);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 666;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 671;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 667;
					Match(T__39);
					}
					break;
				case T__40:
					{
					State = 668;
					Match(T__40);
					State = 669;
					Match(T__35);
					State = 670;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 673;
					Match(T__11);
					}
				}

				State = 676;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 677;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 678;
					Match(T__35);
					}
				}

				State = 681;
				Match(T__13);
				State = 682;
				Match(T__36);
				State = 683;
				stringExprList();
				State = 684;
				Match(T__37);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 686;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 687;
					Match(T__35);
					}
				}

				State = 690;
				Match(T__42);
				State = 691;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 692;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 697;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 693;
					Match(T__43);
					}
					break;
				case T__40:
					{
					State = 694;
					Match(T__40);
					State = 695;
					Match(T__35);
					State = 696;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 699;
				Match(T__1);
				State = 700;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 701;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__61) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 706;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 702;
					Match(T__45);
					}
					break;
				case T__40:
					{
					State = 703;
					Match(T__40);
					State = 704;
					Match(T__35);
					State = 705;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 708;
				Match(T__1);
				State = 709;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 718;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__62:
				case T__63:
					{
					{
					State = 711;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__62) {
						{
						State = 710;
						Match(T__62);
						}
					}

					State = 713;
					Match(T__63);
					}
					}
					break;
				case T__17:
				case T__64:
					{
					{
					State = 715;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__17) {
						{
						State = 714;
						Match(T__17);
						}
					}

					State = 717;
					Match(T__64);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 720;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 721;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 730;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__62:
				case T__63:
					{
					{
					State = 723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__62) {
						{
						State = 722;
						Match(T__62);
						}
					}

					State = 725;
					Match(T__63);
					}
					}
					break;
				case T__17:
				case T__64:
					{
					{
					State = 727;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__17) {
						{
						State = 726;
						Match(T__17);
						}
					}

					State = 729;
					Match(T__64);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 732;
					Match(T__35);
					}
				}

				State = 735;
				Match(T__13);
				State = 736;
				Match(T__36);
				State = 737;
				stringExprList();
				State = 738;
				Match(T__37);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__62) {
					{
					State = 740;
					Match(T__62);
					}
				}

				State = 743;
				Match(T__63);
				State = 748;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 744;
					Match(T__39);
					}
					break;
				case T__40:
					{
					State = 745;
					Match(T__40);
					State = 746;
					Match(T__35);
					State = 747;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 750;
					Match(T__11);
					}
				}

				State = 753;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__62) {
					{
					State = 754;
					Match(T__62);
					}
				}

				State = 757;
				Match(T__63);
				State = 762;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 758;
					Match(T__43);
					}
					break;
				case T__40:
					{
					State = 759;
					Match(T__40);
					State = 760;
					Match(T__35);
					State = 761;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 764;
				Match(T__1);
				State = 765;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__62) {
					{
					State = 766;
					Match(T__62);
					}
				}

				State = 769;
				Match(T__63);
				State = 774;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 770;
					Match(T__45);
					}
					break;
				case T__40:
					{
					State = 771;
					Match(T__40);
					State = 772;
					Match(T__35);
					State = 773;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 776;
				Match(T__1);
				State = 777;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 778;
					Match(T__17);
					}
				}

				State = 781;
				Match(T__64);
				State = 786;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__41:
					{
					State = 782;
					Match(T__41);
					}
					break;
				case T__65:
					{
					State = 783;
					Match(T__65);
					State = 784;
					Match(T__35);
					State = 785;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 788;
					Match(T__11);
					}
				}

				State = 791;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 792;
					Match(T__17);
					}
				}

				State = 795;
				Match(T__64);
				State = 800;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__44:
					{
					State = 796;
					Match(T__44);
					}
					break;
				case T__65:
					{
					State = 797;
					Match(T__65);
					State = 798;
					Match(T__35);
					State = 799;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 802;
				Match(T__1);
				State = 803;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 804;
					Match(T__17);
					}
				}

				State = 807;
				Match(T__64);
				State = 812;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
					{
					State = 808;
					Match(T__46);
					}
					break;
				case T__65:
					{
					State = 809;
					Match(T__65);
					State = 810;
					Match(T__35);
					State = 811;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 814;
				Match(T__1);
				State = 815;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 824;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__62:
				case T__63:
					{
					{
					State = 817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__62) {
						{
						State = 816;
						Match(T__62);
						}
					}

					State = 819;
					Match(T__63);
					}
					}
					break;
				case T__17:
				case T__64:
					{
					{
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__17) {
						{
						State = 820;
						Match(T__17);
						}
					}

					State = 823;
					Match(T__64);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 826;
					Match(T__35);
					}
				}

				State = 829;
				Match(T__13);
				State = 830;
				Match(T__36);
				State = 831;
				regexExprList();
				State = 832;
				Match(T__37);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 842;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__62:
				case T__63:
					{
					{
					State = 835;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__62) {
						{
						State = 834;
						Match(T__62);
						}
					}

					State = 837;
					Match(T__63);
					}
					}
					break;
				case T__17:
				case T__64:
					{
					{
					State = 839;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__17) {
						{
						State = 838;
						Match(T__17);
						}
					}

					State = 841;
					Match(T__64);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 844;
					Match(T__35);
					}
				}

				State = 847;
				Match(T__42);
				State = 848;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 849;
				Match(T__66);
				State = 850;
				Match(T__64);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 851;
				Match(T__62);
				State = 852;
				Match(T__64);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 130, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 132, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			regexExpr();
			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__47) {
				{
				State = 858;
				Match(T__47);
				State = 859;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_copyDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(T__15);
			State = 863;
			Match(T__67);
			State = 864;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 865;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 866;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 867;
				Match(VARID);
				}
				break;
			}
			State = 870;
			Match(T__16);
			State = 873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 871;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 872;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintListContext datasourceConstraintList() {
			return GetRuleContext<DatasourceConstraintListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(T__15);
			State = 876;
			Match(T__68);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 68719476769L) != 0)) {
				{
				State = 877;
				datasourceConstraintList();
				}
			}

			State = 880;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 881;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 882;
				Match(VARID);
				}
				break;
			}
			State = 885;
			Match(T__16);
			State = 888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 886;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 887;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintListContext datasourceConstraintList() {
			return GetRuleContext<DatasourceConstraintListContext>(0);
		}
		public DatasourceConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintListContext datasourceConstraintList() {
		DatasourceConstraintListContext _localctx = new DatasourceConstraintListContext(Context, State);
		EnterRule(_localctx, 138, RULE_datasourceConstraintList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			datasourceConstraint();
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==T__32) {
				{
				State = 891;
				_la = TokenStream.LA(1);
				if ( !(_la==T__6 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 892;
				datasourceConstraintList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 140, RULE_datasourceConstraint);
		int _la;
		try {
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				Match(T__33);
				State = 896;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 897;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898;
				Match(T__33);
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 899;
					Match(T__35);
					}
				}

				State = 902;
				Match(T__13);
				State = 903;
				Match(T__36);
				State = 904;
				intExprList();
				State = 905;
				Match(T__37);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 907;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 908;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 909;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 910;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 911;
					Match(T__35);
					}
				}

				State = 914;
				Match(T__13);
				State = 915;
				Match(T__36);
				State = 916;
				stringExprList();
				State = 917;
				Match(T__37);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 919;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 924;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 920;
					Match(T__39);
					}
					break;
				case T__40:
					{
					State = 921;
					Match(T__40);
					State = 922;
					Match(T__35);
					State = 923;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 926;
					Match(T__11);
					}
				}

				State = 931;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRINGLITERAL:
				case VARID:
					{
					State = 929;
					stringExpr();
					}
					break;
				case REGEXLITERAL:
					{
					State = 930;
					Match(REGEXLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 933;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 934;
					Match(T__35);
					}
				}

				State = 937;
				Match(T__13);
				State = 938;
				Match(T__36);
				State = 939;
				regexExprList();
				State = 940;
				Match(T__37);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 942;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__35) {
					{
					State = 943;
					Match(T__35);
					}
				}

				State = 946;
				Match(T__42);
				State = 947;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 948;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 953;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 949;
					Match(T__43);
					}
					break;
				case T__40:
					{
					State = 950;
					Match(T__40);
					State = 951;
					Match(T__35);
					State = 952;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 955;
				Match(T__1);
				State = 956;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 957;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 962;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 958;
					Match(T__45);
					}
					break;
				case T__40:
					{
					State = 959;
					Match(T__40);
					State = 960;
					Match(T__35);
					State = 961;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 964;
				Match(T__1);
				{
				State = 965;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 142, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__48) {
				{
				State = 969;
				Match(T__48);
				State = 970;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 144, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			stringExpr();
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__47) {
				{
				State = 974;
				Match(T__47);
				State = 975;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(T__70);
			State = 979;
			Match(T__36);
			State = 980;
			Match(T__37);
			State = 981;
			Match(T__71);
			State = 982;
			statementList();
			State = 983;
			Match(T__72);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,79,986,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,1,0,1,0,1,1,1,1,1,1,4,1,154,8,1,11,1,12,
		1,155,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
		173,8,2,1,3,1,3,1,3,1,3,1,3,3,3,180,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,9,3,9,211,8,9,1,10,1,10,1,10,1,10,3,10,217,8,10,1,11,1,11,
		1,11,1,11,3,11,223,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,231,8,12,3,
		12,233,8,12,1,13,1,13,1,13,1,13,3,13,239,8,13,1,14,1,14,1,14,1,14,3,14,
		245,8,14,1,15,1,15,1,15,3,15,250,8,15,1,15,3,15,253,8,15,1,16,1,16,1,16,
		1,16,1,16,3,16,260,8,16,1,16,1,16,3,16,264,8,16,1,17,1,17,1,17,1,17,3,
		17,270,8,17,1,17,3,17,273,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,281,
		8,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,
		1,22,1,22,1,22,1,22,3,22,300,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,25,1,25,3,25,314,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
		1,26,1,26,1,26,1,26,1,26,3,26,328,8,26,1,27,1,27,1,27,1,27,1,27,1,28,1,
		28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
		32,1,32,1,32,1,33,1,33,1,33,3,33,356,8,33,1,34,1,34,1,34,1,34,3,34,362,
		8,34,1,35,1,35,3,35,366,8,35,1,36,1,36,1,36,1,36,1,36,3,36,373,8,36,1,
		36,3,36,376,8,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,384,8,37,1,38,1,38,
		1,38,1,38,1,38,3,38,391,8,38,1,39,1,39,1,40,1,40,1,40,1,40,3,40,399,8,
		40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,410,8,41,1,42,1,42,
		3,42,414,8,42,1,42,1,42,1,42,3,42,419,8,42,1,42,1,42,1,42,1,42,1,42,1,
		43,1,43,1,43,1,43,1,43,1,43,3,43,432,8,43,1,44,1,44,1,44,3,44,437,8,44,
		1,44,1,44,1,44,3,44,442,8,44,3,44,444,8,44,1,45,1,45,1,45,1,45,1,45,3,
		45,451,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,463,
		8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,475,8,45,1,
		45,3,45,478,8,45,1,45,1,45,1,45,3,45,483,8,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,3,45,492,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,501,8,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,510,8,45,1,45,1,45,3,45,514,
		8,45,1,46,1,46,1,46,3,46,519,8,46,1,47,1,47,1,47,3,47,524,8,47,1,48,3,
		48,527,8,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,3,50,537,8,50,1,51,
		1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
		1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,562,8,54,1,55,1,55,1,55,1,
		55,1,55,3,55,569,8,55,1,56,1,56,1,56,1,56,1,56,3,56,576,8,56,1,57,1,57,
		1,57,1,57,1,57,3,57,583,8,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,591,8,
		58,1,59,1,59,1,59,1,59,3,59,597,8,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,
		1,60,1,60,3,60,608,8,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,3,61,617,8,
		61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,626,8,62,1,62,1,62,1,62,1,63,
		1,63,1,63,3,63,634,8,63,1,63,1,63,1,63,3,63,639,8,63,3,63,641,8,63,1,64,
		1,64,1,64,1,64,1,64,3,64,648,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,3,64,660,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,3,64,672,8,64,1,64,3,64,675,8,64,1,64,1,64,1,64,3,64,680,8,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,3,64,689,8,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,3,64,698,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,707,8,64,
		1,64,1,64,1,64,3,64,712,8,64,1,64,1,64,3,64,716,8,64,1,64,3,64,719,8,64,
		1,64,1,64,1,64,3,64,724,8,64,1,64,1,64,3,64,728,8,64,1,64,3,64,731,8,64,
		1,64,3,64,734,8,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,742,8,64,1,64,1,
		64,1,64,1,64,1,64,3,64,749,8,64,1,64,3,64,752,8,64,1,64,1,64,3,64,756,
		8,64,1,64,1,64,1,64,1,64,1,64,3,64,763,8,64,1,64,1,64,1,64,3,64,768,8,
		64,1,64,1,64,1,64,1,64,1,64,3,64,775,8,64,1,64,1,64,1,64,3,64,780,8,64,
		1,64,1,64,1,64,1,64,1,64,3,64,787,8,64,1,64,3,64,790,8,64,1,64,1,64,3,
		64,794,8,64,1,64,1,64,1,64,1,64,1,64,3,64,801,8,64,1,64,1,64,1,64,3,64,
		806,8,64,1,64,1,64,1,64,1,64,1,64,3,64,813,8,64,1,64,1,64,1,64,3,64,818,
		8,64,1,64,1,64,3,64,822,8,64,1,64,3,64,825,8,64,1,64,3,64,828,8,64,1,64,
		1,64,1,64,1,64,1,64,1,64,3,64,836,8,64,1,64,1,64,3,64,840,8,64,1,64,3,
		64,843,8,64,1,64,3,64,846,8,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,854,
		8,64,1,65,1,65,1,66,1,66,1,66,3,66,861,8,66,1,67,1,67,1,67,1,67,1,67,1,
		67,3,67,869,8,67,1,67,1,67,1,67,3,67,874,8,67,1,68,1,68,1,68,3,68,879,
		8,68,1,68,1,68,1,68,3,68,884,8,68,1,68,1,68,1,68,3,68,889,8,68,1,69,1,
		69,1,69,3,69,894,8,69,1,70,1,70,1,70,1,70,1,70,3,70,901,8,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,913,8,70,1,70,1,70,1,70,1,
		70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,925,8,70,1,70,3,70,928,8,70,1,70,
		1,70,3,70,932,8,70,1,70,1,70,3,70,936,8,70,1,70,1,70,1,70,1,70,1,70,1,
		70,1,70,3,70,945,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,954,8,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,963,8,70,1,70,1,70,3,70,967,8,
		70,1,71,1,71,1,71,3,71,972,8,71,1,72,1,72,1,72,3,72,977,8,72,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,0,0,74,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,0,13,2,
		0,77,77,79,79,1,0,76,78,1,0,14,15,1,0,76,77,2,0,9,9,35,35,1,0,77,78,1,
		0,49,52,1,0,54,55,2,0,2,2,32,32,2,0,39,39,62,62,2,0,76,77,79,79,2,0,7,
		7,33,33,2,0,39,39,70,70,1107,0,148,1,0,0,0,2,153,1,0,0,0,4,172,1,0,0,0,
		6,179,1,0,0,0,8,181,1,0,0,0,10,183,1,0,0,0,12,188,1,0,0,0,14,193,1,0,0,
		0,16,198,1,0,0,0,18,210,1,0,0,0,20,212,1,0,0,0,22,218,1,0,0,0,24,224,1,
		0,0,0,26,234,1,0,0,0,28,240,1,0,0,0,30,252,1,0,0,0,32,263,1,0,0,0,34,272,
		1,0,0,0,36,280,1,0,0,0,38,282,1,0,0,0,40,286,1,0,0,0,42,290,1,0,0,0,44,
		299,1,0,0,0,46,301,1,0,0,0,48,306,1,0,0,0,50,311,1,0,0,0,52,327,1,0,0,
		0,54,329,1,0,0,0,56,334,1,0,0,0,58,337,1,0,0,0,60,341,1,0,0,0,62,344,1,
		0,0,0,64,348,1,0,0,0,66,355,1,0,0,0,68,361,1,0,0,0,70,363,1,0,0,0,72,375,
		1,0,0,0,74,383,1,0,0,0,76,390,1,0,0,0,78,392,1,0,0,0,80,398,1,0,0,0,82,
		409,1,0,0,0,84,411,1,0,0,0,86,425,1,0,0,0,88,443,1,0,0,0,90,513,1,0,0,
		0,92,515,1,0,0,0,94,520,1,0,0,0,96,526,1,0,0,0,98,530,1,0,0,0,100,536,
		1,0,0,0,102,538,1,0,0,0,104,543,1,0,0,0,106,548,1,0,0,0,108,556,1,0,0,
		0,110,563,1,0,0,0,112,570,1,0,0,0,114,582,1,0,0,0,116,590,1,0,0,0,118,
		592,1,0,0,0,120,603,1,0,0,0,122,612,1,0,0,0,124,621,1,0,0,0,126,640,1,
		0,0,0,128,853,1,0,0,0,130,855,1,0,0,0,132,857,1,0,0,0,134,862,1,0,0,0,
		136,875,1,0,0,0,138,890,1,0,0,0,140,966,1,0,0,0,142,968,1,0,0,0,144,973,
		1,0,0,0,146,978,1,0,0,0,148,149,3,2,1,0,149,1,1,0,0,0,150,151,3,4,2,0,
		151,152,5,74,0,0,152,154,1,0,0,0,153,150,1,0,0,0,154,155,1,0,0,0,155,153,
		1,0,0,0,155,156,1,0,0,0,156,3,1,0,0,0,157,173,3,6,3,0,158,173,3,18,9,0,
		159,173,3,44,22,0,160,173,3,36,18,0,161,173,3,52,26,0,162,173,3,96,48,
		0,163,173,3,98,49,0,164,173,3,100,50,0,165,173,3,108,54,0,166,173,3,110,
		55,0,167,173,3,112,56,0,168,173,3,118,59,0,169,173,3,120,60,0,170,173,
		3,122,61,0,171,173,3,124,62,0,172,157,1,0,0,0,172,158,1,0,0,0,172,159,
		1,0,0,0,172,160,1,0,0,0,172,161,1,0,0,0,172,162,1,0,0,0,172,163,1,0,0,
		0,172,164,1,0,0,0,172,165,1,0,0,0,172,166,1,0,0,0,172,167,1,0,0,0,172,
		168,1,0,0,0,172,169,1,0,0,0,172,170,1,0,0,0,172,171,1,0,0,0,173,5,1,0,
		0,0,174,180,3,8,4,0,175,180,3,10,5,0,176,180,3,12,6,0,177,180,3,14,7,0,
		178,180,3,16,8,0,179,174,1,0,0,0,179,175,1,0,0,0,179,176,1,0,0,0,179,177,
		1,0,0,0,179,178,1,0,0,0,180,7,1,0,0,0,181,182,5,1,0,0,182,9,1,0,0,0,183,
		184,5,1,0,0,184,185,5,2,0,0,185,186,5,3,0,0,186,187,5,4,0,0,187,11,1,0,
		0,0,188,189,5,1,0,0,189,190,5,2,0,0,190,191,5,3,0,0,191,192,5,5,0,0,192,
		13,1,0,0,0,193,194,5,1,0,0,194,195,5,2,0,0,195,196,5,3,0,0,196,197,5,6,
		0,0,197,15,1,0,0,0,198,199,5,1,0,0,199,200,5,2,0,0,200,201,5,3,0,0,201,
		202,5,4,0,0,202,203,5,7,0,0,203,204,5,5,0,0,204,17,1,0,0,0,205,211,3,20,
		10,0,206,211,3,22,11,0,207,211,3,24,12,0,208,211,3,26,13,0,209,211,3,28,
		14,0,210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,0,210,208,1,0,0,0,210,
		209,1,0,0,0,211,19,1,0,0,0,212,213,5,8,0,0,213,216,5,77,0,0,214,215,5,
		9,0,0,215,217,3,30,15,0,216,214,1,0,0,0,216,217,1,0,0,0,217,21,1,0,0,0,
		218,219,5,10,0,0,219,222,5,77,0,0,220,221,5,9,0,0,221,223,3,32,16,0,222,
		220,1,0,0,0,222,223,1,0,0,0,223,23,1,0,0,0,224,225,5,11,0,0,225,232,5,
		77,0,0,226,230,5,9,0,0,227,231,5,76,0,0,228,231,5,77,0,0,229,231,3,142,
		71,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,233,1,0,0,0,232,
		226,1,0,0,0,232,233,1,0,0,0,233,25,1,0,0,0,234,235,5,12,0,0,235,238,5,
		77,0,0,236,237,5,9,0,0,237,239,7,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,
		239,27,1,0,0,0,240,241,5,13,0,0,241,244,5,77,0,0,242,243,5,9,0,0,243,245,
		3,34,17,0,244,242,1,0,0,0,244,245,1,0,0,0,245,29,1,0,0,0,246,247,5,8,0,
		0,247,249,7,1,0,0,248,250,3,82,41,0,249,248,1,0,0,0,249,250,1,0,0,0,250,
		253,1,0,0,0,251,253,5,77,0,0,252,246,1,0,0,0,252,251,1,0,0,0,253,31,1,
		0,0,0,254,255,5,10,0,0,255,256,5,76,0,0,256,259,5,14,0,0,257,260,3,30,
		15,0,258,260,3,70,35,0,259,257,1,0,0,0,259,258,1,0,0,0,260,264,1,0,0,0,
		261,262,5,10,0,0,262,264,5,77,0,0,263,254,1,0,0,0,263,261,1,0,0,0,264,
		33,1,0,0,0,265,266,7,1,0,0,266,269,7,2,0,0,267,270,3,30,15,0,268,270,3,
		70,35,0,269,267,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,273,5,77,0,
		0,272,265,1,0,0,0,272,271,1,0,0,0,273,35,1,0,0,0,274,275,5,77,0,0,275,
		276,5,9,0,0,276,281,5,77,0,0,277,281,3,38,19,0,278,281,3,42,21,0,279,281,
		3,40,20,0,280,274,1,0,0,0,280,277,1,0,0,0,280,278,1,0,0,0,280,279,1,0,
		0,0,281,37,1,0,0,0,282,283,5,77,0,0,283,284,5,9,0,0,284,285,3,30,15,0,
		285,39,1,0,0,0,286,287,5,77,0,0,287,288,5,9,0,0,288,289,3,32,16,0,289,
		41,1,0,0,0,290,291,5,77,0,0,291,292,5,9,0,0,292,293,5,76,0,0,293,43,1,
		0,0,0,294,300,3,46,23,0,295,300,3,48,24,0,296,300,3,50,25,0,297,300,3,
		84,42,0,298,300,3,86,43,0,299,294,1,0,0,0,299,295,1,0,0,0,299,296,1,0,
		0,0,299,297,1,0,0,0,299,298,1,0,0,0,300,45,1,0,0,0,301,302,5,16,0,0,302,
		303,3,32,16,0,303,304,5,17,0,0,304,305,3,72,36,0,305,47,1,0,0,0,306,307,
		5,16,0,0,307,308,3,30,15,0,308,309,5,17,0,0,309,310,3,80,40,0,310,49,1,
		0,0,0,311,313,5,16,0,0,312,314,5,18,0,0,313,312,1,0,0,0,313,314,1,0,0,
		0,314,315,1,0,0,0,315,316,5,19,0,0,316,317,5,15,0,0,317,318,3,66,33,0,
		318,319,5,17,0,0,319,320,3,68,34,0,320,51,1,0,0,0,321,328,3,54,27,0,322,
		328,3,56,28,0,323,328,3,58,29,0,324,328,3,60,30,0,325,328,3,62,31,0,326,
		328,3,64,32,0,327,321,1,0,0,0,327,322,1,0,0,0,327,323,1,0,0,0,327,324,
		1,0,0,0,327,325,1,0,0,0,327,326,1,0,0,0,328,53,1,0,0,0,329,330,5,20,0,
		0,330,331,5,19,0,0,331,332,5,15,0,0,332,333,3,66,33,0,333,55,1,0,0,0,334,
		335,5,20,0,0,335,336,5,77,0,0,336,57,1,0,0,0,337,338,5,20,0,0,338,339,
		5,8,0,0,339,340,7,3,0,0,340,59,1,0,0,0,341,342,5,20,0,0,342,343,5,76,0,
		0,343,61,1,0,0,0,344,345,5,20,0,0,345,346,5,21,0,0,346,347,5,22,0,0,347,
		63,1,0,0,0,348,349,5,20,0,0,349,350,5,23,0,0,350,351,5,24,0,0,351,65,1,
		0,0,0,352,356,5,25,0,0,353,354,5,23,0,0,354,356,5,24,0,0,355,352,1,0,0,
		0,355,353,1,0,0,0,356,67,1,0,0,0,357,362,5,26,0,0,358,359,5,23,0,0,359,
		362,5,24,0,0,360,362,3,70,35,0,361,357,1,0,0,0,361,358,1,0,0,0,361,360,
		1,0,0,0,362,69,1,0,0,0,363,365,5,27,0,0,364,366,7,3,0,0,365,364,1,0,0,
		0,365,366,1,0,0,0,366,71,1,0,0,0,367,376,5,26,0,0,368,369,5,23,0,0,369,
		376,5,24,0,0,370,372,5,27,0,0,371,373,5,76,0,0,372,371,1,0,0,0,372,373,
		1,0,0,0,373,376,1,0,0,0,374,376,3,30,15,0,375,367,1,0,0,0,375,368,1,0,
		0,0,375,370,1,0,0,0,375,374,1,0,0,0,376,73,1,0,0,0,377,384,5,26,0,0,378,
		379,5,23,0,0,379,384,5,24,0,0,380,384,3,70,35,0,381,384,3,78,39,0,382,
		384,3,30,15,0,383,377,1,0,0,0,383,378,1,0,0,0,383,380,1,0,0,0,383,381,
		1,0,0,0,383,382,1,0,0,0,384,75,1,0,0,0,385,391,5,26,0,0,386,387,5,23,0,
		0,387,391,5,24,0,0,388,391,3,70,35,0,389,391,3,30,15,0,390,385,1,0,0,0,
		390,386,1,0,0,0,390,388,1,0,0,0,390,389,1,0,0,0,391,77,1,0,0,0,392,393,
		5,28,0,0,393,79,1,0,0,0,394,399,5,26,0,0,395,396,5,23,0,0,396,399,5,24,
		0,0,397,399,3,70,35,0,398,394,1,0,0,0,398,395,1,0,0,0,398,397,1,0,0,0,
		399,81,1,0,0,0,400,401,5,29,0,0,401,410,5,30,0,0,402,403,5,14,0,0,403,
		404,5,23,0,0,404,410,5,24,0,0,405,406,5,29,0,0,406,410,5,25,0,0,407,408,
		5,14,0,0,408,410,3,70,35,0,409,400,1,0,0,0,409,402,1,0,0,0,409,405,1,0,
		0,0,409,407,1,0,0,0,410,83,1,0,0,0,411,413,5,16,0,0,412,414,5,18,0,0,413,
		412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,418,5,31,0,0,416,417,5,
		32,0,0,417,419,3,88,44,0,418,416,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,
		0,420,421,7,2,0,0,421,422,3,30,15,0,422,423,5,17,0,0,423,424,3,74,37,0,
		424,85,1,0,0,0,425,426,5,16,0,0,426,427,5,13,0,0,427,428,3,34,17,0,428,
		431,5,17,0,0,429,432,3,76,38,0,430,432,5,77,0,0,431,429,1,0,0,0,431,430,
		1,0,0,0,432,87,1,0,0,0,433,436,3,90,45,0,434,435,5,7,0,0,435,437,3,88,
		44,0,436,434,1,0,0,0,436,437,1,0,0,0,437,444,1,0,0,0,438,441,3,90,45,0,
		439,440,5,33,0,0,440,442,3,88,44,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
		444,1,0,0,0,443,433,1,0,0,0,443,438,1,0,0,0,444,89,1,0,0,0,445,446,5,34,
		0,0,446,447,7,4,0,0,447,514,3,94,47,0,448,450,5,34,0,0,449,451,5,36,0,
		0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,5,14,0,0,453,
		454,5,37,0,0,454,455,3,92,46,0,455,456,5,38,0,0,456,514,1,0,0,0,457,458,
		5,39,0,0,458,459,7,4,0,0,459,514,3,142,71,0,460,462,5,39,0,0,461,463,5,
		36,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,5,14,0,
		0,465,466,5,37,0,0,466,467,3,144,72,0,467,468,5,38,0,0,468,514,1,0,0,0,
		469,474,5,39,0,0,470,475,5,40,0,0,471,472,5,41,0,0,472,473,5,36,0,0,473,
		475,5,42,0,0,474,470,1,0,0,0,474,471,1,0,0,0,475,477,1,0,0,0,476,478,5,
		12,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,514,3,130,65,
		0,480,482,5,39,0,0,481,483,5,36,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,
		484,1,0,0,0,484,485,5,14,0,0,485,486,5,37,0,0,486,487,3,132,66,0,487,488,
		5,38,0,0,488,514,1,0,0,0,489,491,5,39,0,0,490,492,5,36,0,0,491,490,1,0,
		0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,5,43,0,0,494,514,3,142,71,
		0,495,500,5,39,0,0,496,501,5,44,0,0,497,498,5,41,0,0,498,499,5,36,0,0,
		499,501,5,45,0,0,500,496,1,0,0,0,500,497,1,0,0,0,501,502,1,0,0,0,502,503,
		5,2,0,0,503,514,3,142,71,0,504,509,5,39,0,0,505,510,5,46,0,0,506,507,5,
		41,0,0,507,508,5,36,0,0,508,510,5,47,0,0,509,505,1,0,0,0,509,506,1,0,0,
		0,510,511,1,0,0,0,511,512,5,2,0,0,512,514,3,142,71,0,513,445,1,0,0,0,513,
		448,1,0,0,0,513,457,1,0,0,0,513,460,1,0,0,0,513,469,1,0,0,0,513,480,1,
		0,0,0,513,489,1,0,0,0,513,495,1,0,0,0,513,504,1,0,0,0,514,91,1,0,0,0,515,
		518,3,94,47,0,516,517,5,48,0,0,517,519,3,92,46,0,518,516,1,0,0,0,518,519,
		1,0,0,0,519,93,1,0,0,0,520,523,7,5,0,0,521,522,7,6,0,0,522,524,3,94,47,
		0,523,521,1,0,0,0,523,524,1,0,0,0,524,95,1,0,0,0,525,527,5,53,0,0,526,
		525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,7,7,0,0,529,97,1,0,
		0,0,530,531,5,56,0,0,531,532,5,78,0,0,532,99,1,0,0,0,533,537,3,102,51,
		0,534,537,3,104,52,0,535,537,3,106,53,0,536,533,1,0,0,0,536,534,1,0,0,
		0,536,535,1,0,0,0,537,101,1,0,0,0,538,539,5,57,0,0,539,540,3,30,15,0,540,
		541,5,7,0,0,541,542,3,30,15,0,542,103,1,0,0,0,543,544,5,57,0,0,544,545,
		3,32,16,0,545,546,5,7,0,0,546,547,3,32,16,0,547,105,1,0,0,0,548,549,5,
		57,0,0,549,550,5,18,0,0,550,551,5,31,0,0,551,552,5,14,0,0,552,553,3,30,
		15,0,553,554,5,7,0,0,554,555,3,30,15,0,555,107,1,0,0,0,556,557,5,58,0,
		0,557,558,5,13,0,0,558,561,3,34,17,0,559,560,5,14,0,0,560,562,3,30,15,
		0,561,559,1,0,0,0,561,562,1,0,0,0,562,109,1,0,0,0,563,564,5,59,0,0,564,
		565,5,13,0,0,565,568,3,34,17,0,566,567,5,14,0,0,567,569,3,30,15,0,568,
		566,1,0,0,0,568,569,1,0,0,0,569,111,1,0,0,0,570,571,5,60,0,0,571,572,5,
		13,0,0,572,575,3,34,17,0,573,574,5,14,0,0,574,576,3,30,15,0,575,573,1,
		0,0,0,575,576,1,0,0,0,576,113,1,0,0,0,577,578,5,23,0,0,578,583,5,24,0,
		0,579,583,3,70,35,0,580,583,3,78,39,0,581,583,3,30,15,0,582,577,1,0,0,
		0,582,579,1,0,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,115,1,0,0,0,584,
		591,5,26,0,0,585,586,5,23,0,0,586,591,5,24,0,0,587,591,3,70,35,0,588,591,
		3,78,39,0,589,591,3,30,15,0,590,584,1,0,0,0,590,585,1,0,0,0,590,587,1,
		0,0,0,590,588,1,0,0,0,590,589,1,0,0,0,591,117,1,0,0,0,592,593,5,16,0,0,
		593,596,5,61,0,0,594,595,7,8,0,0,595,597,3,126,63,0,596,594,1,0,0,0,596,
		597,1,0,0,0,597,598,1,0,0,0,598,599,7,2,0,0,599,600,3,114,57,0,600,601,
		5,17,0,0,601,602,3,116,58,0,602,119,1,0,0,0,603,604,5,58,0,0,604,607,5,
		61,0,0,605,606,7,8,0,0,606,608,3,126,63,0,607,605,1,0,0,0,607,608,1,0,
		0,0,608,609,1,0,0,0,609,610,7,2,0,0,610,611,3,30,15,0,611,121,1,0,0,0,
		612,613,5,59,0,0,613,616,5,61,0,0,614,615,7,8,0,0,615,617,3,126,63,0,616,
		614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,7,2,0,0,619,620,3,
		30,15,0,620,123,1,0,0,0,621,622,5,60,0,0,622,625,5,61,0,0,623,624,7,8,
		0,0,624,626,3,126,63,0,625,623,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,
		627,628,7,2,0,0,628,629,3,30,15,0,629,125,1,0,0,0,630,633,3,128,64,0,631,
		632,5,7,0,0,632,634,3,126,63,0,633,631,1,0,0,0,633,634,1,0,0,0,634,641,
		1,0,0,0,635,638,3,128,64,0,636,637,5,33,0,0,637,639,3,126,63,0,638,636,
		1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,630,1,0,0,0,640,635,1,0,0,
		0,641,127,1,0,0,0,642,643,5,34,0,0,643,644,7,4,0,0,644,854,3,94,47,0,645,
		647,5,34,0,0,646,648,5,36,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,
		1,0,0,0,649,650,5,14,0,0,650,651,5,37,0,0,651,652,3,92,46,0,652,653,5,
		38,0,0,653,854,1,0,0,0,654,655,7,9,0,0,655,656,7,4,0,0,656,854,3,142,71,
		0,657,659,7,9,0,0,658,660,5,36,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,
		661,1,0,0,0,661,662,5,14,0,0,662,663,5,37,0,0,663,664,3,144,72,0,664,665,
		5,38,0,0,665,854,1,0,0,0,666,671,7,9,0,0,667,672,5,40,0,0,668,669,5,41,
		0,0,669,670,5,36,0,0,670,672,5,42,0,0,671,667,1,0,0,0,671,668,1,0,0,0,
		672,674,1,0,0,0,673,675,5,12,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,
		1,0,0,0,676,854,3,130,65,0,677,679,7,9,0,0,678,680,5,36,0,0,679,678,1,
		0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,682,5,14,0,0,682,683,5,37,0,
		0,683,684,3,144,72,0,684,685,5,38,0,0,685,854,1,0,0,0,686,688,7,9,0,0,
		687,689,5,36,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,691,
		5,43,0,0,691,854,3,142,71,0,692,697,7,9,0,0,693,698,5,44,0,0,694,695,5,
		41,0,0,695,696,5,36,0,0,696,698,5,45,0,0,697,693,1,0,0,0,697,694,1,0,0,
		0,698,699,1,0,0,0,699,700,5,2,0,0,700,854,3,142,71,0,701,706,7,9,0,0,702,
		707,5,46,0,0,703,704,5,41,0,0,704,705,5,36,0,0,705,707,5,47,0,0,706,702,
		1,0,0,0,706,703,1,0,0,0,707,708,1,0,0,0,708,709,5,2,0,0,709,854,3,142,
		71,0,710,712,5,63,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,
		713,719,5,64,0,0,714,716,5,18,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,
		717,1,0,0,0,717,719,5,65,0,0,718,711,1,0,0,0,718,715,1,0,0,0,719,720,1,
		0,0,0,720,721,7,4,0,0,721,854,3,142,71,0,722,724,5,63,0,0,723,722,1,0,
		0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,731,5,64,0,0,726,728,5,18,0,0,
		727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,731,5,65,0,0,730,723,
		1,0,0,0,730,727,1,0,0,0,731,733,1,0,0,0,732,734,5,36,0,0,733,732,1,0,0,
		0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,5,14,0,0,736,737,5,37,0,0,737,
		738,3,144,72,0,738,739,5,38,0,0,739,854,1,0,0,0,740,742,5,63,0,0,741,740,
		1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,748,5,64,0,0,744,749,5,40,
		0,0,745,746,5,41,0,0,746,747,5,36,0,0,747,749,5,42,0,0,748,744,1,0,0,0,
		748,745,1,0,0,0,749,751,1,0,0,0,750,752,5,12,0,0,751,750,1,0,0,0,751,752,
		1,0,0,0,752,753,1,0,0,0,753,854,3,130,65,0,754,756,5,63,0,0,755,754,1,
		0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,762,5,64,0,0,758,763,5,44,0,
		0,759,760,5,41,0,0,760,761,5,36,0,0,761,763,5,45,0,0,762,758,1,0,0,0,762,
		759,1,0,0,0,763,764,1,0,0,0,764,765,5,2,0,0,765,854,3,142,71,0,766,768,
		5,63,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,774,5,64,
		0,0,770,775,5,46,0,0,771,772,5,41,0,0,772,773,5,36,0,0,773,775,5,47,0,
		0,774,770,1,0,0,0,774,771,1,0,0,0,775,776,1,0,0,0,776,777,5,2,0,0,777,
		854,3,142,71,0,778,780,5,18,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,
		1,0,0,0,781,786,5,65,0,0,782,787,5,42,0,0,783,784,5,66,0,0,784,785,5,36,
		0,0,785,787,5,42,0,0,786,782,1,0,0,0,786,783,1,0,0,0,787,789,1,0,0,0,788,
		790,5,12,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,854,3,
		130,65,0,792,794,5,18,0,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,1,0,
		0,0,795,800,5,65,0,0,796,801,5,45,0,0,797,798,5,66,0,0,798,799,5,36,0,
		0,799,801,5,45,0,0,800,796,1,0,0,0,800,797,1,0,0,0,801,802,1,0,0,0,802,
		803,5,2,0,0,803,854,3,142,71,0,804,806,5,18,0,0,805,804,1,0,0,0,805,806,
		1,0,0,0,806,807,1,0,0,0,807,812,5,65,0,0,808,813,5,47,0,0,809,810,5,66,
		0,0,810,811,5,36,0,0,811,813,5,47,0,0,812,808,1,0,0,0,812,809,1,0,0,0,
		813,814,1,0,0,0,814,815,5,2,0,0,815,854,3,142,71,0,816,818,5,63,0,0,817,
		816,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,825,5,64,0,0,820,822,5,
		18,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,825,5,65,0,
		0,824,817,1,0,0,0,824,821,1,0,0,0,825,827,1,0,0,0,826,828,5,36,0,0,827,
		826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,14,0,0,830,831,5,
		37,0,0,831,832,3,132,66,0,832,833,5,38,0,0,833,854,1,0,0,0,834,836,5,63,
		0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,843,5,64,0,0,838,
		840,5,18,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,843,5,
		65,0,0,842,835,1,0,0,0,842,839,1,0,0,0,843,845,1,0,0,0,844,846,5,36,0,
		0,845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,848,5,43,0,0,848,
		854,3,142,71,0,849,850,5,67,0,0,850,854,5,65,0,0,851,852,5,63,0,0,852,
		854,5,65,0,0,853,642,1,0,0,0,853,645,1,0,0,0,853,654,1,0,0,0,853,657,1,
		0,0,0,853,666,1,0,0,0,853,677,1,0,0,0,853,686,1,0,0,0,853,692,1,0,0,0,
		853,701,1,0,0,0,853,718,1,0,0,0,853,730,1,0,0,0,853,741,1,0,0,0,853,755,
		1,0,0,0,853,767,1,0,0,0,853,779,1,0,0,0,853,793,1,0,0,0,853,805,1,0,0,
		0,853,824,1,0,0,0,853,842,1,0,0,0,853,849,1,0,0,0,853,851,1,0,0,0,854,
		129,1,0,0,0,855,856,7,10,0,0,856,131,1,0,0,0,857,860,3,130,65,0,858,859,
		5,48,0,0,859,861,3,132,66,0,860,858,1,0,0,0,860,861,1,0,0,0,861,133,1,
		0,0,0,862,863,5,16,0,0,863,864,5,68,0,0,864,865,7,1,0,0,865,868,7,2,0,
		0,866,869,3,30,15,0,867,869,5,77,0,0,868,866,1,0,0,0,868,867,1,0,0,0,869,
		870,1,0,0,0,870,873,5,17,0,0,871,874,3,30,15,0,872,874,5,77,0,0,873,871,
		1,0,0,0,873,872,1,0,0,0,874,135,1,0,0,0,875,876,5,16,0,0,876,878,5,69,
		0,0,877,879,3,138,69,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,
		880,883,7,2,0,0,881,884,3,30,15,0,882,884,5,77,0,0,883,881,1,0,0,0,883,
		882,1,0,0,0,884,885,1,0,0,0,885,888,5,17,0,0,886,889,3,30,15,0,887,889,
		5,77,0,0,888,886,1,0,0,0,888,887,1,0,0,0,889,137,1,0,0,0,890,893,3,140,
		70,0,891,892,7,11,0,0,892,894,3,138,69,0,893,891,1,0,0,0,893,894,1,0,0,
		0,894,139,1,0,0,0,895,896,5,34,0,0,896,897,7,4,0,0,897,967,3,94,47,0,898,
		900,5,34,0,0,899,901,5,36,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,
		1,0,0,0,902,903,5,14,0,0,903,904,5,37,0,0,904,905,3,92,46,0,905,906,5,
		38,0,0,906,967,1,0,0,0,907,908,7,12,0,0,908,909,7,4,0,0,909,967,3,142,
		71,0,910,912,7,12,0,0,911,913,5,36,0,0,912,911,1,0,0,0,912,913,1,0,0,0,
		913,914,1,0,0,0,914,915,5,14,0,0,915,916,5,37,0,0,916,917,3,144,72,0,917,
		918,5,38,0,0,918,967,1,0,0,0,919,924,7,12,0,0,920,925,5,40,0,0,921,922,
		5,41,0,0,922,923,5,36,0,0,923,925,5,42,0,0,924,920,1,0,0,0,924,921,1,0,
		0,0,925,927,1,0,0,0,926,928,5,12,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
		931,1,0,0,0,929,932,3,142,71,0,930,932,5,79,0,0,931,929,1,0,0,0,931,930,
		1,0,0,0,932,967,1,0,0,0,933,935,7,12,0,0,934,936,5,36,0,0,935,934,1,0,
		0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,938,5,14,0,0,938,939,5,37,0,0,
		939,940,3,132,66,0,940,941,5,38,0,0,941,967,1,0,0,0,942,944,7,12,0,0,943,
		945,5,36,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,947,5,
		43,0,0,947,967,3,142,71,0,948,953,7,12,0,0,949,954,5,44,0,0,950,951,5,
		41,0,0,951,952,5,36,0,0,952,954,5,45,0,0,953,949,1,0,0,0,953,950,1,0,0,
		0,954,955,1,0,0,0,955,956,5,2,0,0,956,967,3,142,71,0,957,962,7,12,0,0,
		958,963,5,46,0,0,959,960,5,41,0,0,960,961,5,36,0,0,961,963,5,47,0,0,962,
		958,1,0,0,0,962,959,1,0,0,0,963,964,1,0,0,0,964,965,5,2,0,0,965,967,3,
		142,71,0,966,895,1,0,0,0,966,898,1,0,0,0,966,907,1,0,0,0,966,910,1,0,0,
		0,966,919,1,0,0,0,966,933,1,0,0,0,966,942,1,0,0,0,966,948,1,0,0,0,966,
		957,1,0,0,0,967,141,1,0,0,0,968,971,7,3,0,0,969,970,5,49,0,0,970,972,3,
		142,71,0,971,969,1,0,0,0,971,972,1,0,0,0,972,143,1,0,0,0,973,976,3,142,
		71,0,974,975,5,48,0,0,975,977,3,144,72,0,976,974,1,0,0,0,976,977,1,0,0,
		0,977,145,1,0,0,0,978,979,5,71,0,0,979,980,5,37,0,0,980,981,5,38,0,0,981,
		982,5,72,0,0,982,983,3,2,1,0,983,984,5,73,0,0,984,147,1,0,0,0,117,155,
		172,179,210,216,222,230,232,238,244,249,252,259,263,269,272,280,299,313,
		327,355,361,365,372,375,383,390,398,409,413,418,431,436,441,443,450,462,
		474,477,482,491,500,509,513,518,523,526,536,561,568,575,582,590,596,607,
		616,625,633,638,640,647,659,671,674,679,688,697,706,711,715,718,723,727,
		730,733,741,748,751,755,762,767,774,779,786,789,793,800,805,812,817,821,
		824,827,835,839,842,845,853,860,868,873,878,883,888,893,900,912,924,927,
		931,935,944,953,962,966,971,976
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
