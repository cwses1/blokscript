//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, STATEMENTEND=96, WS=97, STRINGLITERAL=98, VARID=99, INTLITERAL=100, 
		REGEXLITERAL=101, LINE_COMMENT=102, BLOCK_COMMENT=103;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createSpaceStatement = 3, 
		RULE_copySpaceStatement = 4, RULE_updateSpaceStatement = 5, RULE_deleteSpaceStatement = 6, 
		RULE_spaceUpdateList = 7, RULE_spaceUpdate = 8, RULE_copySpacesStatement = 9, 
		RULE_selectSpacesStatement = 10, RULE_selectFieldList = 11, RULE_selectFieldAlias = 12, 
		RULE_selectFnExpr = 13, RULE_selectFnCallActualArgList = 14, RULE_selectFnActualArg = 15, 
		RULE_generalExpr = 16, RULE_generalExprList = 17, RULE_constrainedSpaceList = 18, 
		RULE_completeSpaceList = 19, RULE_createBlockStatement = 20, RULE_copyBlockStatement = 21, 
		RULE_updateBlockStatement = 22, RULE_deleteBlockStatement = 23, RULE_longOrShortBlockSpec = 24, 
		RULE_shortBlockSpec = 25, RULE_scriptBlockDef = 26, RULE_createDatasourceStatement = 27, 
		RULE_copyDatasourceStatement = 28, RULE_deleteDatasourceStatement = 29, 
		RULE_updateDatasourceStatement = 30, RULE_datasourceUpdateList = 31, RULE_datasourceUpdate = 32, 
		RULE_createDatasourceEntryStatement = 33, RULE_copyDatasourceEntryStatement = 34, 
		RULE_deleteDatasourceEntryStatement = 35, RULE_updateDatasourceEntryStatement = 36, 
		RULE_longOrShortDatasourceEntrySpec = 37, RULE_datasourceEntryFullSpec = 38, 
		RULE_datasourceEntryShortSpec = 39, RULE_datasourceEntryIdentifier = 40, 
		RULE_datasourceEntryOutputLocation = 41, RULE_updateDatasourceEntriesStatement = 42, 
		RULE_deleteDatasourceEntriesStatement = 43, RULE_copyDatasourceEntriesStatement = 44, 
		RULE_syncDatasourceEntriesStatement = 45, RULE_datasourceEntryCopyOptionList = 46, 
		RULE_datasourceEntryCopyOption = 47, RULE_datasourceEntryUpdateList = 48, 
		RULE_datasourceEntryUpdate = 49, RULE_datasourceEntriesSourceLocation = 50, 
		RULE_urlSpec = 51, RULE_datasourceEntriesTargetLocation = 52, RULE_datasourceEntryConstraintExprList = 53, 
		RULE_datasourceEntryConstraintExpr = 54, RULE_datasourceEntryConstraint = 55, 
		RULE_loginStatement = 56, RULE_loginOnlyStatement = 57, RULE_loginWithGlobalUserNameStatement = 58, 
		RULE_loginWithGlobalPasswordStatement = 59, RULE_loginWithGlobalTokenStatement = 60, 
		RULE_loginWithGlobalUserNameAndPasswordStatement = 61, RULE_varStatement = 62, 
		RULE_spaceVarStatement = 63, RULE_blockVarStatement = 64, RULE_stringVarStatement = 65, 
		RULE_regexVarStatement = 66, RULE_storyVarStatement = 67, RULE_datasourceEntryVarStatement = 68, 
		RULE_spaceSpec = 69, RULE_shortSpaceSpec = 70, RULE_longOrShortSpaceSpec = 71, 
		RULE_blockSpec = 72, RULE_storySpec = 73, RULE_datasourceEntrySpec = 74, 
		RULE_datasourceSpec = 75, RULE_datasourceShortSpec = 76, RULE_assignmentStatement = 77, 
		RULE_spaceAssignmentStatement = 78, RULE_blockAssignmentStatement = 79, 
		RULE_stringAssignmentStatement = 80, RULE_printStatement = 81, RULE_printSpacesStatement = 82, 
		RULE_printVarStatement = 83, RULE_printSpaceStatement = 84, RULE_printStringLiteralStatement = 85, 
		RULE_printSymbolTableStatement = 86, RULE_printLocalCacheStatement = 87, 
		RULE_realDataLocation = 88, RULE_fileSpec = 89, RULE_completeFileSpec = 90, 
		RULE_spaceInputLocation = 91, RULE_spaceOutputLocation = 92, RULE_spacesInputLocation = 93, 
		RULE_spacesOutputLocation = 94, RULE_shortFileSpec = 95, RULE_blockInputLocation = 96, 
		RULE_blockOutputLocation = 97, RULE_blocksInputLocation = 98, RULE_blocksOutputLocation = 99, 
		RULE_storyInputLocation = 100, RULE_storyOutputLocation = 101, RULE_storiesInputLocation = 102, 
		RULE_storiesOutputLocation = 103, RULE_varGetFrom = 104, RULE_updateBlocksStatement = 105, 
		RULE_copyBlocksStatement = 106, RULE_deleteBlocksStatement = 107, RULE_blockConstraintExprList = 108, 
		RULE_blockConstraintExpr = 109, RULE_blockConstraint = 110, RULE_blockUpdateList = 111, 
		RULE_blockUpdate = 112, RULE_intExprList = 113, RULE_intExpr = 114, RULE_verbosityStatement = 115, 
		RULE_waitStatement = 116, RULE_compareStatement = 117, RULE_compareSpacesStatement = 118, 
		RULE_compareBlocksStatement = 119, RULE_compareAllBlocksStatement = 120, 
		RULE_copyStoriesStatement = 121, RULE_publishStoriesStatement = 122, RULE_unpublishStoriesStatement = 123, 
		RULE_deleteStoriesStatement = 124, RULE_storyConstraintExprList = 125, 
		RULE_storyConstraintExpr = 126, RULE_storyConstraint = 127, RULE_regexExpr = 128, 
		RULE_regexExprList = 129, RULE_copyDatasourcesStatement = 130, RULE_updateDatasourcesStatement = 131, 
		RULE_deleteDatasourcesStatement = 132, RULE_syncDatasourcesStatement = 133, 
		RULE_datasourceCopyOptionList = 134, RULE_datasourceCopyOption = 135, 
		RULE_datasourceConstraintExprList = 136, RULE_datasourceConstraintExpr = 137, 
		RULE_datasourceConstraint = 138, RULE_stringExprList = 139, RULE_stringExpr = 140, 
		RULE_varFieldExpr = 141, RULE_fnCallExpr = 142, RULE_fnCallActualArgList = 143, 
		RULE_fnActualArg = 144, RULE_spaceConstraintExprList = 145, RULE_spaceConstraintExpr = 146, 
		RULE_spaceConstraint = 147, RULE_datasourcesInputLocation = 148, RULE_datasourcesOutputLocation = 149, 
		RULE_datasourceInputLocation = 150, RULE_datasourceOutputLocation = 151, 
		RULE_dirSpec = 152, RULE_forEachStatement = 153, RULE_foreachEntityListForTypedVarDecl = 154, 
		RULE_foreachEntityListForUntypedVarDecl = 155, RULE_foreachSpaceListForTypedVarDecl = 156, 
		RULE_foreachSpaceListForUntypedVarDecl = 157, RULE_foreachBlockListForTypedVarDecl = 158, 
		RULE_foreachBlockListForUntypedVarDecl = 159, RULE_foreachDatasourceListForTypedVarDecl = 160, 
		RULE_foreachDatasourceListForUntypedVarDecl = 161, RULE_foreachDatasourceEntryListForTypedVarDecl = 162, 
		RULE_foreachDatasourceEntryListForUntypedVarDecl = 163, RULE_foreachStoryListForTypedVarDecl = 164, 
		RULE_foreachStoryListForUntypedVarDecl = 165, RULE_foreachStringListForTypedVarDecl = 166, 
		RULE_foreachStringListForUntypedVarDecl = 167, RULE_foreachRegexListForTypedVarDecl = 168, 
		RULE_foreachRegexListForUntypedVarDecl = 169, RULE_foreachIntegerListForTypedVarDecl = 170, 
		RULE_foreachIntegerListForUntypedVarDecl = 171, RULE_stringArrayLiteral = 172, 
		RULE_regexArrayLiteral = 173, RULE_intArrayLiteral = 174, RULE_longOrShortDatasourceSpec = 175, 
		RULE_spaceFileSpec = 176, RULE_blockFileSpec = 177, RULE_datasourceFileSpec = 178, 
		RULE_datasourceEntryFileSpec = 179, RULE_storyFileSpec = 180, RULE_untypedVarDecl = 181, 
		RULE_typedVarDecl = 182, RULE_spaceVarDecl = 183, RULE_blockVarDecl = 184, 
		RULE_datasourceVarDecl = 185, RULE_datasourceEntryVarDecl = 186, RULE_storyVarDecl = 187, 
		RULE_stringVarDecl = 188, RULE_regexVarDecl = 189, RULE_integerVarDecl = 190, 
		RULE_datasourceEntriesInputLocation = 191;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createSpaceStatement", "copySpaceStatement", 
		"updateSpaceStatement", "deleteSpaceStatement", "spaceUpdateList", "spaceUpdate", 
		"copySpacesStatement", "selectSpacesStatement", "selectFieldList", "selectFieldAlias", 
		"selectFnExpr", "selectFnCallActualArgList", "selectFnActualArg", "generalExpr", 
		"generalExprList", "constrainedSpaceList", "completeSpaceList", "createBlockStatement", 
		"copyBlockStatement", "updateBlockStatement", "deleteBlockStatement", 
		"longOrShortBlockSpec", "shortBlockSpec", "scriptBlockDef", "createDatasourceStatement", 
		"copyDatasourceStatement", "deleteDatasourceStatement", "updateDatasourceStatement", 
		"datasourceUpdateList", "datasourceUpdate", "createDatasourceEntryStatement", 
		"copyDatasourceEntryStatement", "deleteDatasourceEntryStatement", "updateDatasourceEntryStatement", 
		"longOrShortDatasourceEntrySpec", "datasourceEntryFullSpec", "datasourceEntryShortSpec", 
		"datasourceEntryIdentifier", "datasourceEntryOutputLocation", "updateDatasourceEntriesStatement", 
		"deleteDatasourceEntriesStatement", "copyDatasourceEntriesStatement", 
		"syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", "datasourceEntryCopyOption", 
		"datasourceEntryUpdateList", "datasourceEntryUpdate", "datasourceEntriesSourceLocation", 
		"urlSpec", "datasourceEntriesTargetLocation", "datasourceEntryConstraintExprList", 
		"datasourceEntryConstraintExpr", "datasourceEntryConstraint", "loginStatement", 
		"loginOnlyStatement", "loginWithGlobalUserNameStatement", "loginWithGlobalPasswordStatement", 
		"loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"printStatement", "printSpacesStatement", "printVarStatement", "printSpaceStatement", 
		"printStringLiteralStatement", "printSymbolTableStatement", "printLocalCacheStatement", 
		"realDataLocation", "fileSpec", "completeFileSpec", "spaceInputLocation", 
		"spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "updateBlocksStatement", "copyBlocksStatement", 
		"deleteBlocksStatement", "blockConstraintExprList", "blockConstraintExpr", 
		"blockConstraint", "blockUpdateList", "blockUpdate", "intExprList", "intExpr", 
		"verbosityStatement", "waitStatement", "compareStatement", "compareSpacesStatement", 
		"compareBlocksStatement", "compareAllBlocksStatement", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintExprList", "storyConstraintExpr", "storyConstraint", "regexExpr", 
		"regexExprList", "copyDatasourcesStatement", "updateDatasourcesStatement", 
		"deleteDatasourcesStatement", "syncDatasourcesStatement", "datasourceCopyOptionList", 
		"datasourceCopyOption", "datasourceConstraintExprList", "datasourceConstraintExpr", 
		"datasourceConstraint", "stringExprList", "stringExpr", "varFieldExpr", 
		"fnCallExpr", "fnCallActualArgList", "fnActualArg", "spaceConstraintExprList", 
		"spaceConstraintExpr", "spaceConstraint", "datasourcesInputLocation", 
		"datasourcesOutputLocation", "datasourceInputLocation", "datasourceOutputLocation", 
		"dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", "foreachEntityListForUntypedVarDecl", 
		"foreachSpaceListForTypedVarDecl", "foreachSpaceListForUntypedVarDecl", 
		"foreachBlockListForTypedVarDecl", "foreachBlockListForUntypedVarDecl", 
		"foreachDatasourceListForTypedVarDecl", "foreachDatasourceListForUntypedVarDecl", 
		"foreachDatasourceEntryListForTypedVarDecl", "foreachDatasourceEntryListForUntypedVarDecl", 
		"foreachStoryListForTypedVarDecl", "foreachStoryListForUntypedVarDecl", 
		"foreachStringListForTypedVarDecl", "foreachStringListForUntypedVarDecl", 
		"foreachRegexListForTypedVarDecl", "foreachRegexListForUntypedVarDecl", 
		"foreachIntegerListForTypedVarDecl", "foreachIntegerListForUntypedVarDecl", 
		"stringArrayLiteral", "regexArrayLiteral", "intArrayLiteral", "longOrShortDatasourceSpec", 
		"spaceFileSpec", "blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", 
		"storyFileSpec", "untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", 
		"datasourceVarDecl", "datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", 
		"regexVarDecl", "integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'create'", "'space'", "'('", "')'", "'copy'", "'to'", 
		"'update'", "'set'", "'delete'", "','", "'='", "'spaces'", "'from'", "'select'", 
		"'*'", "'as'", "'where'", "'in'", "'block'", "'{'", "'}'", "'datasource'", 
		"'for'", "'entry'", "'entries'", "'sync'", "'skip'", "'updates'", "'creates'", 
		"'csv'", "'json'", "'url'", "'and'", "'or'", "'!='", "'not'", "'matches'", 
		"'does'", "'match'", "'regex'", "'like'", "'starts'", "'start'", "'with'", 
		"'ends'", "'end'", "'login'", "'global'", "'username'", "'password'", 
		"'token'", "'var'", "'string'", "'story'", "'print'", "'symbol'", "'tables'", 
		"'local'", "'cache'", "'server'", "'file'", "'on'", "'blocks'", "'+'", 
		"'-'", "'%'", "'be'", "'quiet'", "'verbose'", "'debugger'", "'wait'", 
		"'compare'", "'all'", "'stories'", "'content'", "'publish'", "'unpublish'", 
		"'is'", "'null'", "'undefined'", "'any'", "'tag'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'include'", "'['", "']'", "'defined'", "'directory'", 
		"'foreach'", "'int'", "'datasource entry'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STATEMENTEND", "WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135391662966867278L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2181039679L) != 0)) {
				{
				{
				State = 386;
				statement();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpaceStatementContext createSpaceStatement() {
			return GetRuleContext<CreateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSpaceStatementContext updateSpaceStatement() {
			return GetRuleContext<UpdateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteSpaceStatementContext deleteSpaceStatement() {
			return GetRuleContext<DeleteSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpacesStatementContext selectSpacesStatement() {
			return GetRuleContext<SelectSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateBlockStatementContext createBlockStatement() {
			return GetRuleContext<CreateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateBlockStatementContext updateBlockStatement() {
			return GetRuleContext<UpdateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlockStatementContext deleteBlockStatement() {
			return GetRuleContext<DeleteBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceStatementContext copyDatasourceStatement() {
			return GetRuleContext<CopyDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
			return GetRuleContext<CopyDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392;
				loginStatement();
				State = 393;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				varStatement();
				State = 396;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398;
				assignmentStatement();
				State = 399;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 401;
				printStatement();
				State = 402;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 404;
				verbosityStatement();
				State = 405;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 407;
				waitStatement();
				State = 408;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 410;
				compareStatement();
				State = 411;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 413;
				createSpaceStatement();
				State = 414;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 416;
				copySpaceStatement();
				State = 417;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 419;
				updateSpaceStatement();
				State = 420;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 422;
				deleteSpaceStatement();
				State = 423;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 425;
				selectSpacesStatement();
				State = 426;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 428;
				copySpacesStatement();
				State = 429;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 431;
				createBlockStatement();
				State = 432;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 434;
				copyBlockStatement();
				State = 435;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 437;
				updateBlockStatement();
				State = 438;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 440;
				deleteBlockStatement();
				State = 441;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 443;
				copyBlocksStatement();
				State = 444;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 446;
				deleteBlocksStatement();
				State = 447;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 449;
				createDatasourceStatement();
				State = 450;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 452;
				copyDatasourceStatement();
				State = 453;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 455;
				updateDatasourceStatement();
				State = 456;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 458;
				deleteDatasourceStatement();
				State = 459;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 461;
				copyDatasourcesStatement();
				State = 462;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 464;
				deleteDatasourcesStatement();
				State = 465;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 467;
				updateDatasourcesStatement();
				State = 468;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 470;
				copyStoriesStatement();
				State = 471;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 473;
				publishStoriesStatement();
				State = 474;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 476;
				unpublishStoriesStatement();
				State = 477;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 479;
				deleteStoriesStatement();
				State = 480;
				Match(STATEMENTEND);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 482;
				createDatasourceEntryStatement();
				State = 483;
				Match(STATEMENTEND);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 485;
				copyDatasourceEntryStatement();
				State = 486;
				Match(STATEMENTEND);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 488;
				deleteDatasourceEntryStatement();
				State = 489;
				Match(STATEMENTEND);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 491;
				updateDatasourceEntryStatement();
				State = 492;
				Match(STATEMENTEND);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 494;
				updateDatasourceEntriesStatement();
				State = 495;
				Match(STATEMENTEND);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 497;
				deleteDatasourceEntriesStatement();
				State = 498;
				Match(STATEMENTEND);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 500;
				copyDatasourceEntriesStatement();
				State = 501;
				Match(STATEMENTEND);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 503;
				syncDatasourceEntriesStatement();
				State = 504;
				Match(STATEMENTEND);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 506;
				Match(T__0);
				State = 507;
				Match(STATEMENTEND);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 508;
				scriptBlockDef();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 509;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public CreateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpaceStatementContext createSpaceStatement() {
		CreateSpaceStatementContext _localctx = new CreateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(T__1);
			State = 513;
			Match(T__2);
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 514;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 515;
				Match(T__3);
				State = 516;
				spaceUpdateList();
				State = 517;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			Match(T__5);
			State = 522;
			Match(T__2);
			State = 523;
			longOrShortSpaceSpec();
			State = 524;
			Match(T__6);
			State = 525;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public UpdateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSpaceStatementContext updateSpaceStatement() {
		UpdateSpaceStatementContext _localctx = new UpdateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(T__7);
			State = 528;
			Match(T__2);
			State = 529;
			longOrShortSpaceSpec();
			State = 530;
			Match(T__8);
			State = 531;
			spaceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DeleteSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSpaceStatementContext deleteSpaceStatement() {
		DeleteSpaceStatementContext _localctx = new DeleteSpaceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_deleteSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(T__9);
			State = 534;
			Match(T__2);
			State = 535;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateContext spaceUpdate() {
			return GetRuleContext<SpaceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public SpaceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateListContext spaceUpdateList() {
		SpaceUpdateListContext _localctx = new SpaceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_spaceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			spaceUpdate();
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 538;
				Match(T__10);
				State = 539;
				spaceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public SpaceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateContext spaceUpdate() {
		SpaceUpdateContext _localctx = new SpaceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_spaceUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(VARID);
			State = 543;
			Match(T__11);
			State = 544;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(T__5);
			State = 547;
			Match(T__12);
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 548;
				Match(T__13);
				State = 549;
				spacesInputLocation();
				}
			}

			State = 552;
			Match(T__6);
			State = 553;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrainedSpaceListContext constrainedSpaceList() {
			return GetRuleContext<ConstrainedSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		public SelectSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpacesStatementContext selectSpacesStatement() {
		SelectSpacesStatementContext _localctx = new SelectSpacesStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectSpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(T__14);
			State = 556;
			selectFieldList();
			State = 557;
			Match(T__13);
			State = 558;
			constrainedSpaceList();
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 559;
				Match(T__6);
				State = 560;
				spacesOutputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnExprContext selectFnExpr() {
			return GetRuleContext<SelectFnExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldAliasContext selectFieldAlias() {
			return GetRuleContext<SelectFieldAliasContext>(0);
		}
		public SelectFieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldListContext selectFieldList() {
		SelectFieldListContext _localctx = new SelectFieldListContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectFieldList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 563;
				Match(T__15);
				}
				break;
			case 2:
				{
				State = 564;
				Match(VARID);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 565;
					selectFieldAlias();
					}
				}

				}
				break;
			case 3:
				{
				State = 568;
				selectFnExpr();
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 569;
					selectFieldAlias();
					}
				}

				}
				break;
			}
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 574;
				Match(T__10);
				State = 575;
				selectFieldList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SelectFieldAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldAliasContext selectFieldAlias() {
		SelectFieldAliasContext _localctx = new SelectFieldAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectFieldAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(T__16);
			State = 579;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnCallActualArgListContext selectFnCallActualArgList() {
			return GetRuleContext<SelectFnCallActualArgListContext>(0);
		}
		public SelectFnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnExprContext selectFnExpr() {
		SelectFnExprContext _localctx = new SelectFnExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectFnExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(VARID);
			State = 582;
			Match(T__3);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 15L) != 0)) {
				{
				State = 583;
				selectFnCallActualArgList();
				}
			}

			State = 586;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnCallActualArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnActualArgContext selectFnActualArg() {
			return GetRuleContext<SelectFnActualArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnCallActualArgListContext selectFnCallActualArgList() {
			return GetRuleContext<SelectFnCallActualArgListContext>(0);
		}
		public SelectFnCallActualArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnCallActualArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnCallActualArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnCallActualArgListContext selectFnCallActualArgList() {
		SelectFnCallActualArgListContext _localctx = new SelectFnCallActualArgListContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectFnCallActualArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			selectFnActualArg();
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 589;
				Match(T__10);
				State = 590;
				selectFnCallActualArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnActualArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		public SelectFnActualArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnActualArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnActualArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnActualArgContext selectFnActualArg() {
		SelectFnActualArgContext _localctx = new SelectFnActualArgContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectFnActualArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			generalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public GeneralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralExprContext generalExpr() {
		GeneralExprContext _localctx = new GeneralExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_generalExpr);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 595;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596;
				regexExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 597;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 598;
				intExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public GeneralExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralExprListContext generalExprList() {
		GeneralExprListContext _localctx = new GeneralExprListContext(Context, State);
		EnterRule(_localctx, 34, RULE_generalExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			generalExpr();
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 602;
				Match(T__10);
				State = 603;
				generalExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainedSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompleteSpaceListContext completeSpaceList() {
			return GetRuleContext<CompleteSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ConstrainedSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrainedSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrainedSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrainedSpaceListContext constrainedSpaceList() {
		ConstrainedSpaceListContext _localctx = new ConstrainedSpaceListContext(Context, State);
		EnterRule(_localctx, 36, RULE_constrainedSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			completeSpaceList();
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 607;
				Match(T__17);
				State = 608;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CompleteSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteSpaceListContext completeSpaceList() {
		CompleteSpaceListContext _localctx = new CompleteSpaceListContext(Context, State);
		EnterRule(_localctx, 38, RULE_completeSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(T__12);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__18) {
				{
				State = 612;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 613;
				spacesInputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(T__1);
			State = 617;
			Match(T__19);
			State = 618;
			Match(T__3);
			State = 619;
			blockUpdateList();
			State = 620;
			Match(T__4);
			State = 621;
			Match(T__18);
			State = 622;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(T__5);
			State = 625;
			Match(T__19);
			State = 626;
			longOrShortBlockSpec();
			State = 627;
			Match(T__6);
			State = 628;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public UpdateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlockStatementContext updateBlockStatement() {
		UpdateBlockStatementContext _localctx = new UpdateBlockStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_updateBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			Match(T__7);
			State = 631;
			Match(T__19);
			State = 632;
			longOrShortBlockSpec();
			State = 633;
			Match(T__8);
			State = 634;
			blockUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		public DeleteBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlockStatementContext deleteBlockStatement() {
		DeleteBlockStatementContext _localctx = new DeleteBlockStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_deleteBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(T__9);
			State = 637;
			Match(T__19);
			State = 638;
			longOrShortBlockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortBlockSpecContext shortBlockSpec() {
			return GetRuleContext<ShortBlockSpecContext>(0);
		}
		public LongOrShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortBlockSpecContext longOrShortBlockSpec() {
		LongOrShortBlockSpecContext _localctx = new LongOrShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_longOrShortBlockSpec);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640;
				blockSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				shortBlockSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public ShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortBlockSpecContext shortBlockSpec() {
		ShortBlockSpecContext _localctx = new ShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_shortBlockSpec);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 644;
					stringExpr();
					}
					break;
				case 2:
					{
					State = 645;
					Match(VARID);
					}
					break;
				}
				State = 648;
				Match(T__18);
				State = 649;
				longOrShortSpaceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 650;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 52, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(T__20);
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 654;
				statementList();
				}
				break;
			}
			State = 657;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(T__1);
			State = 660;
			Match(T__22);
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 661;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 662;
				Match(T__3);
				State = 663;
				datasourceUpdateList();
				State = 664;
				Match(T__4);
				}
				break;
			}
			State = 668;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 669;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 670;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceOutputLocationContext datasourceOutputLocation() {
			return GetRuleContext<DatasourceOutputLocationContext>(0);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_copyDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(T__5);
			State = 674;
			Match(T__22);
			State = 675;
			longOrShortDatasourceSpec();
			State = 676;
			Match(T__6);
			State = 677;
			datasourceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(T__9);
			State = 680;
			Match(T__22);
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 681;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 682;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(T__7);
			State = 686;
			Match(T__22);
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 687;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 688;
				datasourceSpec();
				}
				break;
			}
			State = 691;
			Match(T__8);
			State = 692;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 62, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			datasourceUpdate();
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 695;
				Match(T__10);
				State = 696;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 64, RULE_datasourceUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(VARID);
			State = 700;
			Match(T__11);
			State = 701;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(T__1);
			State = 704;
			Match(T__22);
			State = 705;
			Match(T__24);
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 706;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 707;
				datasourceEntryUpdateList();
				}
				break;
			}
			State = 710;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 711;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 712;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
			return GetRuleContext<LongOrShortDatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
			return GetRuleContext<DatasourceEntryOutputLocationContext>(0);
		}
		public CopyDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
		CopyDatasourceEntryStatementContext _localctx = new CopyDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_copyDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(T__5);
			State = 716;
			Match(T__22);
			State = 717;
			Match(T__24);
			State = 718;
			longOrShortDatasourceEntrySpec();
			State = 719;
			Match(T__6);
			State = 720;
			datasourceEntryOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(T__9);
			State = 723;
			Match(T__22);
			State = 724;
			Match(T__24);
			State = 725;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(T__7);
			State = 728;
			Match(T__22);
			State = 729;
			Match(T__24);
			State = 730;
			datasourceEntryShortSpec();
			State = 731;
			Match(T__8);
			State = 732;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
			return GetRuleContext<DatasourceEntryFullSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public LongOrShortDatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
		LongOrShortDatasourceEntrySpecContext _localctx = new LongOrShortDatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 74, RULE_longOrShortDatasourceEntrySpec);
		try {
			State = 736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 734;
				datasourceEntryFullSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735;
				datasourceEntryShortSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 76, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(T__22);
			State = 739;
			Match(T__24);
			State = 740;
			datasourceEntryIdentifier();
			State = 741;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 742;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 78, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			datasourceEntryIdentifier();
			State = 745;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 746;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 748;
				intExpr();
				}
				break;
			case 2:
				{
				State = 749;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 750;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
		DatasourceEntryOutputLocationContext _localctx = new DatasourceEntryOutputLocationContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceEntryOutputLocation);
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 753;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 754;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(T__7);
			State = 758;
			Match(T__22);
			State = 759;
			Match(T__25);
			State = 760;
			Match(T__18);
			State = 761;
			datasourceSpec();
			State = 762;
			Match(T__8);
			State = 763;
			datasourceEntryUpdateList();
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 764;
				Match(T__17);
				State = 765;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			Match(T__9);
			State = 769;
			Match(T__22);
			State = 770;
			Match(T__25);
			State = 771;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 772;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 773;
				datasourceShortSpec();
				}
				break;
			}
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 776;
				Match(T__17);
				State = 777;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(T__5);
			State = 781;
			Match(T__22);
			State = 782;
			Match(T__25);
			State = 783;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 784;
			datasourceEntriesSourceLocation();
			State = 785;
			Match(T__6);
			State = 786;
			datasourceEntriesTargetLocation();
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 787;
				Match(T__17);
				State = 788;
				datasourceEntryConstraintExprList();
				}
			}

			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 791;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(T__26);
			State = 795;
			Match(T__22);
			State = 796;
			Match(T__25);
			State = 797;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 798;
			datasourceEntriesSourceLocation();
			State = 799;
			Match(T__6);
			State = 800;
			datasourceEntriesSourceLocation();
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 801;
				Match(T__17);
				State = 802;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 92, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			datasourceEntryCopyOption();
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 806;
				Match(T__10);
				State = 807;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(T__27);
			State = 811;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612996L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			datasourceEntryUpdate();
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 814;
				Match(T__10);
				State = 815;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 98, RULE_datasourceEntryUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(VARID);
			State = 819;
			Match(T__11);
			State = 820;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 100, RULE_datasourceEntriesSourceLocation);
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 823;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 102, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 826;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 829;
			Match(T__32);
			State = 830;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 104, RULE_datasourceEntriesTargetLocation);
		try {
			State = 834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 106, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			datasourceEntryConstraintExpr();
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 837;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 838;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 108, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841;
				datasourceEntryConstraint();
				State = 844;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 842;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 843;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 846;
				Match(T__3);
				State = 847;
				datasourceEntryConstraint();
				State = 850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 848;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 849;
					datasourceEntryConstraintExpr();
					}
				}

				State = 852;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 854;
				Match(T__3);
				State = 855;
				datasourceEntryConstraintExpr();
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 856;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 857;
					datasourceEntryConstraintExpr();
					}
				}

				State = 860;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 110, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				Match(VARID);
				State = 865;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 866;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867;
				Match(VARID);
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 868;
					Match(T__36);
					}
				}

				State = 871;
				Match(T__18);
				State = 872;
				Match(T__3);
				State = 873;
				generalExprList();
				State = 874;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 876;
				Match(VARID);
				State = 881;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 877;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 878;
					Match(T__38);
					State = 879;
					Match(T__36);
					State = 880;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 883;
					Match(T__40);
					}
				}

				State = 886;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 887;
				Match(VARID);
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 888;
					Match(T__36);
					}
				}

				State = 891;
				Match(T__41);
				State = 892;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 893;
				Match(VARID);
				State = 898;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 894;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 895;
					Match(T__38);
					State = 896;
					Match(T__36);
					State = 897;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 900;
				Match(T__44);
				State = 901;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 902;
				Match(VARID);
				State = 907;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 903;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 904;
					Match(T__38);
					State = 905;
					Match(T__36);
					State = 906;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 909;
				Match(T__44);
				State = 910;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_loginStatement);
		try {
			State = 918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 913;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 914;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 915;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 916;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 917;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(T__47);
			State = 923;
			Match(T__44);
			State = 924;
			Match(T__48);
			State = 925;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(T__47);
			State = 928;
			Match(T__44);
			State = 929;
			Match(T__48);
			State = 930;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			Match(T__47);
			State = 933;
			Match(T__44);
			State = 934;
			Match(T__48);
			State = 935;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			Match(T__47);
			State = 938;
			Match(T__44);
			State = 939;
			Match(T__48);
			State = 940;
			Match(T__49);
			State = 941;
			Match(T__33);
			State = 942;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_varStatement);
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 944;
				spaceVarStatement();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 945;
				blockVarStatement();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 946;
				stringVarStatement();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 947;
				regexVarStatement();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 5);
				{
				State = 948;
				storyVarStatement();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 949;
				datasourceEntryVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 7);
				{
				State = 950;
				Match(T__52);
				State = 951;
				Match(VARID);
				State = 952;
				Match(T__11);
				State = 962;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 953;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 954;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 955;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 956;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 957;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 958;
					storySpec();
					}
					break;
				case 7:
					{
					State = 959;
					intExpr();
					}
					break;
				case 8:
					{
					State = 960;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 961;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(T__2);
			State = 967;
			Match(VARID);
			State = 970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 968;
				Match(T__11);
				State = 969;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(T__19);
			State = 973;
			Match(VARID);
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 974;
				Match(T__11);
				State = 975;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(T__53);
			State = 979;
			Match(VARID);
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 980;
				Match(T__11);
				State = 981;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			Match(T__40);
			State = 985;
			Match(VARID);
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 986;
				Match(T__11);
				State = 987;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(T__54);
			State = 991;
			Match(VARID);
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 992;
				Match(T__11);
				State = 993;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			Match(T__22);
			State = 997;
			Match(T__24);
			State = 998;
			Match(VARID);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 999;
				Match(T__11);
				State = 1000;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 138, RULE_spaceSpec);
		int _la;
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003;
				Match(T__2);
				State = 1004;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18 || _la==T__62) {
					{
					State = 1005;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1008;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 140, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 142, RULE_longOrShortSpaceSpec);
		try {
			State = 1015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 144, RULE_blockSpec);
		try {
			State = 1026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017;
				Match(T__19);
				State = 1018;
				Match(STRINGLITERAL);
				State = 1019;
				Match(T__18);
				State = 1022;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1020;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 1021;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024;
				Match(T__19);
				State = 1025;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 146, RULE_storySpec);
		int _la;
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1029;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1032;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1030;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 1031;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1034;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 148, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 1047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				Match(T__22);
				State = 1038;
				Match(T__24);
				State = 1042;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 1039;
					intExpr();
					}
					break;
				case 2:
					{
					State = 1040;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 1041;
					Match(VARID);
					}
					break;
				}
				State = 1044;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1045;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1046;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 150, RULE_datasourceSpec);
		int _la;
		try {
			State = 1057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1049;
				Match(T__22);
				State = 1050;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1051;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1054;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1052;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 1053;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 152, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1060;
			Match(T__18);
			State = 1063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 1061;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 1062;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_assignmentStatement);
		try {
			State = 1071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065;
				Match(VARID);
				State = 1066;
				Match(T__11);
				State = 1067;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1068;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1069;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1070;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			Match(VARID);
			State = 1074;
			Match(T__11);
			State = 1075;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(VARID);
			State = 1078;
			Match(T__11);
			State = 1079;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			Match(VARID);
			State = 1082;
			Match(T__11);
			State = 1083;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_printStatement);
		try {
			State = 1091;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1085;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1086;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1087;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1088;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1089;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1090;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			Match(T__55);
			State = 1094;
			Match(T__12);
			State = 1095;
			Match(T__13);
			State = 1096;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(T__55);
			State = 1099;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(T__55);
			State = 1102;
			Match(T__2);
			State = 1103;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(T__55);
			State = 1106;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(T__55);
			State = 1109;
			Match(T__56);
			State = 1110;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(T__55);
			State = 1113;
			Match(T__58);
			State = 1114;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 176, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				{
				State = 1116;
				Match(T__60);
				}
				break;
			case T__58:
				{
				State = 1117;
				Match(T__58);
				State = 1118;
				Match(T__59);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 178, RULE_fileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(T__61);
			State = 1122;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public CompleteFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteFileSpecContext completeFileSpec() {
		CompleteFileSpecContext _localctx = new CompleteFileSpecContext(Context, State);
		EnterRule(_localctx, 180, RULE_completeFileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1124;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1127;
			Match(T__61);
			State = 1128;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 182, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 186, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_spacesOutputLocation);
		try {
			State = 1138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136;
				fileSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1137;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 190, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 192, RULE_blockInputLocation);
		try {
			State = 1144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1142;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1143;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 194, RULE_blockOutputLocation);
		try {
			State = 1148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 196, RULE_blocksInputLocation);
		try {
			State = 1152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 198, RULE_blocksOutputLocation);
		try {
			State = 1156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1154;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1155;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 200, RULE_storyInputLocation);
		try {
			State = 1160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1158;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1159;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 202, RULE_storyOutputLocation);
		try {
			State = 1164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1162;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 204, RULE_storiesInputLocation);
		try {
			State = 1168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1166;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1167;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 206, RULE_storiesOutputLocation);
		try {
			State = 1172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1170;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1171;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 208, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				{
				State = 1174;
				Match(T__62);
				State = 1175;
				Match(T__60);
				}
				break;
			case T__18:
				{
				State = 1176;
				Match(T__18);
				State = 1177;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(T__7);
			State = 1181;
			Match(T__63);
			State = 1182;
			Match(T__18);
			State = 1183;
			longOrShortSpaceSpec();
			State = 1184;
			Match(T__8);
			State = 1185;
			blockUpdateList();
			State = 1188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1186;
				Match(T__17);
				State = 1187;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(T__5);
			State = 1191;
			Match(T__63);
			State = 1192;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1193;
			longOrShortSpaceSpec();
			State = 1194;
			Match(T__6);
			State = 1195;
			blocksOutputLocation();
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1196;
				Match(T__17);
				State = 1197;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(T__9);
			State = 1201;
			Match(T__63);
			State = 1202;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1203;
			longOrShortSpaceSpec();
			State = 1206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1204;
				Match(T__17);
				State = 1205;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 216, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			blockConstraintExpr();
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1209;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1210;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 218, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1213;
				blockConstraint();
				State = 1216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 1214;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1215;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1218;
				Match(T__3);
				State = 1219;
				blockConstraint();
				State = 1222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1220;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1221;
					blockConstraintExpr();
					}
				}

				State = 1224;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1226;
				Match(T__3);
				State = 1227;
				blockConstraintExpr();
				State = 1230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1228;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1229;
					blockConstraintExpr();
					}
				}

				State = 1232;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 220, RULE_blockConstraint);
		int _la;
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1236;
				Match(VARID);
				State = 1237;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1238;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239;
				Match(VARID);
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1240;
					Match(T__36);
					}
				}

				State = 1243;
				Match(T__18);
				State = 1244;
				Match(T__3);
				State = 1245;
				generalExprList();
				State = 1246;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1248;
				Match(VARID);
				State = 1253;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1249;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1250;
					Match(T__38);
					State = 1251;
					Match(T__36);
					State = 1252;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1255;
					Match(T__40);
					}
				}

				State = 1258;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1259;
				Match(VARID);
				State = 1261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1260;
					Match(T__36);
					}
				}

				State = 1263;
				Match(T__41);
				State = 1264;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1265;
				Match(VARID);
				State = 1270;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1266;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1267;
					Match(T__38);
					State = 1268;
					Match(T__36);
					State = 1269;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1272;
				Match(T__44);
				State = 1273;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1274;
				Match(VARID);
				State = 1279;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1275;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1276;
					Match(T__38);
					State = 1277;
					Match(T__36);
					State = 1278;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1281;
				Match(T__44);
				State = 1282;
				generalExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 222, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			blockUpdate();
			State = 1288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1286;
				Match(T__10);
				State = 1287;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 224, RULE_blockUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			Match(VARID);
			State = 1291;
			Match(T__11);
			State = 1292;
			generalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 226, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			intExpr();
			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1295;
				Match(T__10);
				State = 1296;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 228, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 3940649673949185L) != 0)) {
				{
				State = 1300;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 3940649673949185L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1301;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__67) {
				{
				State = 1304;
				Match(T__67);
				}
			}

			State = 1307;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			Match(T__71);
			State = 1310;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_compareStatement);
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1312;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1313;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1314;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			Match(T__72);
			State = 1318;
			spaceSpec();
			State = 1319;
			Match(T__33);
			State = 1320;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 238, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			Match(T__72);
			State = 1323;
			blockSpec();
			State = 1324;
			Match(T__33);
			State = 1325;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 240, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			Match(T__72);
			State = 1328;
			Match(T__73);
			State = 1329;
			Match(T__63);
			State = 1330;
			Match(T__18);
			State = 1331;
			spaceSpec();
			State = 1332;
			Match(T__33);
			State = 1333;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			Match(T__5);
			State = 1336;
			Match(T__74);
			State = 1339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 1337;
				Match(T__44);
				State = 1338;
				Match(T__75);
				}
			}

			State = 1341;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1342;
			storiesInputLocation();
			State = 1343;
			Match(T__6);
			State = 1344;
			storiesOutputLocation();
			State = 1347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1345;
				Match(T__17);
				State = 1346;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			Match(T__76);
			State = 1350;
			Match(T__74);
			State = 1351;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1352;
			longOrShortSpaceSpec();
			State = 1355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1353;
				Match(T__17);
				State = 1354;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 246, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1357;
			Match(T__77);
			State = 1358;
			Match(T__74);
			State = 1359;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1360;
			longOrShortSpaceSpec();
			State = 1363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1361;
				Match(T__17);
				State = 1362;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			Match(T__9);
			State = 1366;
			Match(T__74);
			State = 1367;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1368;
			longOrShortSpaceSpec();
			State = 1371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1369;
				Match(T__17);
				State = 1370;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 250, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373;
			storyConstraintExpr();
			State = 1376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1374;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1375;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 252, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1378;
				storyConstraint();
				State = 1381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1379;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1380;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1383;
				Match(T__3);
				State = 1384;
				storyConstraint();
				State = 1387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1385;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1386;
					storyConstraintExpr();
					}
				}

				State = 1389;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1391;
				Match(T__3);
				State = 1392;
				storyConstraintExpr();
				State = 1395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1393;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1394;
					storyConstraintExpr();
					}
				}

				State = 1397;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 254, RULE_storyConstraint);
		int _la;
		try {
			State = 1603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1401;
				Match(VARID);
				State = 1402;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1403;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1404;
				Match(VARID);
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1405;
					Match(T__36);
					}
				}

				State = 1408;
				Match(T__18);
				State = 1409;
				Match(T__3);
				State = 1410;
				generalExprList();
				State = 1411;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1413;
				Match(VARID);
				State = 1418;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1414;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1415;
					Match(T__38);
					State = 1416;
					Match(T__36);
					State = 1417;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1420;
					Match(T__40);
					}
				}

				State = 1423;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1424;
				Match(VARID);
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1425;
					Match(T__36);
					}
				}

				State = 1428;
				Match(T__41);
				State = 1429;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1430;
				Match(VARID);
				State = 1435;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1431;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1432;
					Match(T__38);
					State = 1433;
					Match(T__36);
					State = 1434;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1437;
				Match(T__44);
				State = 1438;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1439;
				Match(VARID);
				State = 1444;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1440;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1441;
					Match(T__38);
					State = 1442;
					Match(T__36);
					State = 1443;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1446;
				Match(T__44);
				State = 1447;
				generalExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1448;
				Match(VARID);
				State = 1449;
				Match(T__78);
				State = 1451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1450;
					Match(T__36);
					}
				}

				State = 1453;
				Match(T__79);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1454;
				Match(VARID);
				State = 1455;
				Match(T__78);
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1456;
					Match(T__36);
					}
				}

				State = 1459;
				Match(T__80);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1468;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1460;
						Match(T__81);
						}
					}

					State = 1463;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1465;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1464;
						Match(T__73);
						}
					}

					State = 1467;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1470;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1471;
				generalExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1480;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1472;
						Match(T__81);
						}
					}

					State = 1475;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1476;
						Match(T__73);
						}
					}

					State = 1479;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1482;
					Match(T__36);
					}
				}

				State = 1485;
				Match(T__18);
				State = 1486;
				Match(T__3);
				State = 1487;
				generalExprList();
				State = 1488;
				Match(T__4);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1490;
					Match(T__81);
					}
				}

				State = 1493;
				Match(T__82);
				State = 1498;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1494;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1495;
					Match(T__38);
					State = 1496;
					Match(T__36);
					State = 1497;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1500;
					Match(T__40);
					}
				}

				State = 1503;
				generalExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1504;
					Match(T__81);
					}
				}

				State = 1507;
				Match(T__82);
				State = 1512;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1508;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1509;
					Match(T__38);
					State = 1510;
					Match(T__36);
					State = 1511;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1514;
				Match(T__44);
				State = 1515;
				generalExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1516;
					Match(T__81);
					}
				}

				State = 1519;
				Match(T__82);
				State = 1524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1520;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1521;
					Match(T__38);
					State = 1522;
					Match(T__36);
					State = 1523;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1526;
				Match(T__44);
				State = 1527;
				generalExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1528;
					Match(T__73);
					}
				}

				State = 1531;
				Match(T__83);
				State = 1536;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1532;
					Match(T__39);
					}
					break;
				case T__84:
					{
					State = 1533;
					Match(T__84);
					State = 1534;
					Match(T__36);
					State = 1535;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1538;
					Match(T__40);
					}
				}

				State = 1541;
				generalExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1542;
					Match(T__73);
					}
				}

				State = 1545;
				Match(T__83);
				State = 1550;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1546;
					Match(T__43);
					}
					break;
				case T__84:
					{
					State = 1547;
					Match(T__84);
					State = 1548;
					Match(T__36);
					State = 1549;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1552;
				Match(T__44);
				State = 1553;
				generalExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1554;
					Match(T__73);
					}
				}

				State = 1557;
				Match(T__83);
				State = 1562;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
					{
					State = 1558;
					Match(T__46);
					}
					break;
				case T__84:
					{
					State = 1559;
					Match(T__84);
					State = 1560;
					Match(T__36);
					State = 1561;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1564;
				Match(T__44);
				State = 1565;
				generalExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1574;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1566;
						Match(T__81);
						}
					}

					State = 1569;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1570;
						Match(T__73);
						}
					}

					State = 1573;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1576;
					Match(T__36);
					}
				}

				State = 1579;
				Match(T__18);
				State = 1580;
				Match(T__3);
				State = 1581;
				generalExprList();
				State = 1582;
				Match(T__4);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1592;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1585;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1584;
						Match(T__81);
						}
					}

					State = 1587;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1588;
						Match(T__73);
						}
					}

					State = 1591;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1594;
					Match(T__36);
					}
				}

				State = 1597;
				Match(T__41);
				State = 1598;
				generalExpr();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1599;
				Match(T__85);
				State = 1600;
				Match(T__83);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1601;
				Match(T__81);
				State = 1602;
				Match(T__83);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 256, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==REGEXLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 258, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			regexExpr();
			State = 1610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1608;
				Match(T__10);
				State = 1609;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 260, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			Match(T__5);
			State = 1613;
			Match(T__86);
			State = 1614;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1615;
			longOrShortSpaceSpec();
			State = 1616;
			Match(T__6);
			State = 1617;
			longOrShortSpaceSpec();
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1618;
				Match(T__17);
				State = 1619;
				datasourceConstraintExprList();
				}
			}

			State = 1623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27 || _la==T__87) {
				{
				State = 1622;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 262, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			Match(T__7);
			State = 1626;
			Match(T__86);
			State = 1627;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1628;
			longOrShortSpaceSpec();
			State = 1629;
			Match(T__8);
			State = 1630;
			datasourceUpdateList();
			State = 1633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1631;
				Match(T__17);
				State = 1632;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635;
			Match(T__9);
			State = 1636;
			Match(T__86);
			State = 1637;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1638;
			longOrShortSpaceSpec();
			State = 1641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1639;
				Match(T__17);
				State = 1640;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643;
			Match(T__5);
			State = 1644;
			Match(T__86);
			State = 1645;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1646;
			longOrShortSpaceSpec();
			State = 1647;
			Match(T__6);
			State = 1648;
			longOrShortSpaceSpec();
			State = 1651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1649;
				Match(T__17);
				State = 1650;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 268, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653;
			datasourceCopyOption();
			State = 1656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1654;
				Match(T__10);
				State = 1655;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 270, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1658;
				Match(T__27);
				State = 1659;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612996L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1660;
				Match(T__87);
				State = 1661;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 272, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1664;
			datasourceConstraintExpr();
			State = 1667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1665;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1666;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 274, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1669;
				datasourceConstraint();
				State = 1672;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 1670;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1671;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1674;
				Match(T__3);
				State = 1675;
				datasourceConstraint();
				State = 1678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1676;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1677;
					datasourceConstraintExpr();
					}
				}

				State = 1680;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1682;
				Match(T__3);
				State = 1683;
				datasourceConstraintExpr();
				State = 1686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1684;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1685;
					datasourceConstraintExpr();
					}
				}

				State = 1688;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 276, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1692;
				Match(VARID);
				State = 1693;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1694;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1695;
				Match(VARID);
				State = 1697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1696;
					Match(T__36);
					}
				}

				State = 1699;
				Match(T__18);
				State = 1700;
				Match(T__3);
				State = 1701;
				generalExprList();
				State = 1702;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1704;
				Match(VARID);
				State = 1709;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1705;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1706;
					Match(T__38);
					State = 1707;
					Match(T__36);
					State = 1708;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1711;
					Match(T__40);
					}
				}

				State = 1714;
				regexExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1715;
				Match(VARID);
				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1716;
					Match(T__36);
					}
				}

				State = 1719;
				Match(T__41);
				State = 1720;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1721;
				Match(VARID);
				State = 1726;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1722;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1723;
					Match(T__38);
					State = 1724;
					Match(T__36);
					State = 1725;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1728;
				Match(T__44);
				State = 1729;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1730;
				Match(VARID);
				State = 1735;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1731;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1732;
					Match(T__38);
					State = 1733;
					Match(T__36);
					State = 1734;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1737;
				Match(T__44);
				State = 1738;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 278, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741;
			stringExpr();
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1742;
				Match(T__10);
				State = 1743;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarFieldExprContext varFieldExpr() {
			return GetRuleContext<VarFieldExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallExprContext fnCallExpr() {
			return GetRuleContext<FnCallExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 280, RULE_stringExpr);
		int _la;
		try {
			State = 1775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
				case 1:
					{
					State = 1746;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1747;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1748;
					varFieldExpr();
					}
					break;
				case 4:
					{
					State = 1749;
					fnCallExpr();
					}
					break;
				}
				State = 1754;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1752;
					Match(T__64);
					State = 1753;
					stringExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1756;
				Match(T__3);
				State = 1760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1757;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1758;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1759;
					varFieldExpr();
					}
					break;
				}
				State = 1764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 1762;
					Match(T__64);
					State = 1763;
					stringExpr();
					}
				}

				State = 1766;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1767;
				Match(T__3);
				State = 1768;
				stringExpr();
				State = 1771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 1769;
					Match(T__64);
					State = 1770;
					stringExpr();
					}
				}

				State = 1773;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFieldExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public VarFieldExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFieldExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFieldExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFieldExprContext varFieldExpr() {
		VarFieldExprContext _localctx = new VarFieldExprContext(Context, State);
		EnterRule(_localctx, 282, RULE_varFieldExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777;
			Match(VARID);
			State = 1778;
			Match(T__88);
			State = 1779;
			stringExpr();
			State = 1780;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallExprContext fnCallExpr() {
		FnCallExprContext _localctx = new FnCallExprContext(Context, State);
		EnterRule(_localctx, 284, RULE_fnCallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			Match(VARID);
			State = 1783;
			Match(T__3);
			State = 1785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 1784;
				fnCallActualArgList();
				}
			}

			State = 1787;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallActualArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FnActualArgContext fnActualArg() {
			return GetRuleContext<FnActualArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallActualArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallActualArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallActualArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallActualArgListContext fnCallActualArgList() {
		FnCallActualArgListContext _localctx = new FnCallActualArgListContext(Context, State);
		EnterRule(_localctx, 286, RULE_fnCallActualArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			fnActualArg();
			State = 1792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1790;
				Match(T__10);
				State = 1791;
				fnCallActualArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnActualArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FnActualArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnActualArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnActualArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnActualArgContext fnActualArg() {
		FnActualArgContext _localctx = new FnActualArgContext(Context, State);
		EnterRule(_localctx, 288, RULE_fnActualArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1794;
				Match(VARID);
				State = 1795;
				Match(T__11);
				}
				break;
			}
			State = 1798;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 290, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800;
			spaceConstraintExpr();
			State = 1803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1801;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1802;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 292, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1805;
				spaceConstraint();
				State = 1808;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1806;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1807;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1810;
				Match(T__3);
				State = 1811;
				spaceConstraint();
				State = 1814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1812;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1813;
					spaceConstraintExpr();
					}
				}

				State = 1816;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1818;
				Match(T__3);
				State = 1819;
				spaceConstraintExpr();
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1820;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1821;
					spaceConstraintExpr();
					}
				}

				State = 1824;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 294, RULE_spaceConstraint);
		int _la;
		try {
			State = 1893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1828;
				Match(VARID);
				State = 1829;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1830;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1831;
				Match(VARID);
				State = 1833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1832;
					Match(T__36);
					}
				}

				State = 1835;
				Match(T__18);
				State = 1836;
				Match(T__3);
				State = 1837;
				generalExprList();
				State = 1838;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1840;
				Match(VARID);
				State = 1845;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1841;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1842;
					Match(T__38);
					State = 1843;
					Match(T__36);
					State = 1844;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1847;
					Match(T__40);
					}
				}

				State = 1850;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1851;
				Match(VARID);
				State = 1853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1852;
					Match(T__36);
					}
				}

				State = 1855;
				Match(T__41);
				State = 1856;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1857;
				Match(VARID);
				State = 1862;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1858;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1859;
					Match(T__38);
					State = 1860;
					Match(T__36);
					State = 1861;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1864;
				Match(T__44);
				State = 1865;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1866;
				Match(VARID);
				State = 1871;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1867;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1868;
					Match(T__38);
					State = 1869;
					Match(T__36);
					State = 1870;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1873;
				Match(T__44);
				State = 1874;
				generalExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1875;
				Match(VARID);
				State = 1876;
				Match(T__78);
				State = 1878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1877;
					Match(T__36);
					}
				}

				State = 1880;
				Match(T__79);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1881;
				Match(VARID);
				State = 1882;
				Match(T__78);
				State = 1884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1883;
					Match(T__36);
					}
				}

				State = 1886;
				Match(T__80);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1887;
				Match(VARID);
				State = 1888;
				Match(T__78);
				State = 1890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1889;
					Match(T__36);
					}
				}

				State = 1892;
				Match(T__90);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 296, RULE_datasourcesInputLocation);
		try {
			State = 1897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1895;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1896;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 298, RULE_datasourcesOutputLocation);
		try {
			State = 1901;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1900;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 300, RULE_datasourceInputLocation);
		try {
			State = 1905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1903;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 302, RULE_datasourceOutputLocation);
		try {
			State = 1909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1908;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 304, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			Match(T__91);
			State = 1912;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 306, RULE_forEachStatement);
		try {
			State = 1930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1914;
				Match(T__92);
				State = 1915;
				Match(T__3);
				State = 1916;
				typedVarDecl();
				State = 1917;
				Match(T__18);
				State = 1918;
				foreachEntityListForTypedVarDecl();
				State = 1919;
				Match(T__4);
				State = 1920;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1922;
				Match(T__92);
				State = 1923;
				Match(T__3);
				State = 1924;
				untypedVarDecl();
				State = 1925;
				Match(T__18);
				State = 1926;
				foreachEntityListForUntypedVarDecl();
				State = 1927;
				Match(T__4);
				State = 1928;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 1940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1932;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1934;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1935;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1936;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1937;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1938;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1939;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 1950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1942;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1943;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1944;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1945;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1946;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1947;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1948;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1949;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1952;
				fileSpec();
				}
				break;
			case T__2:
				{
				State = 1953;
				spaceFileSpec();
				}
				break;
			case T__12:
				{
				State = 1954;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1957;
				Match(T__17);
				State = 1958;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 1961;
				spaceFileSpec();
				}
				break;
			case T__12:
				{
				State = 1962;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1965;
				Match(T__17);
				State = 1966;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 316, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1969;
				fileSpec();
				}
				break;
			case T__19:
				{
				State = 1970;
				blockFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1971;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1974;
				Match(T__17);
				State = 1975;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 318, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 1978;
				blockFileSpec();
				}
				break;
			case T__63:
				{
				State = 1979;
				Match(T__63);
				State = 1980;
				Match(T__18);
				State = 1981;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1984;
				Match(T__17);
				State = 1985;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 320, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1988;
				fileSpec();
				}
				break;
			case T__22:
				{
				State = 1989;
				datasourceFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1990;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1993;
				Match(T__17);
				State = 1994;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 322, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				{
				State = 1997;
				datasourceFileSpec();
				}
				break;
			case T__86:
				{
				State = 1998;
				Match(T__86);
				State = 1999;
				Match(T__18);
				State = 2000;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2003;
				Match(T__17);
				State = 2004;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 324, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 2007;
				fileSpec();
				}
				break;
			case T__94:
				{
				State = 2008;
				datasourceEntryFileSpec();
				}
				break;
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2009;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2012;
				Match(T__17);
				State = 2013;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 326, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__94:
				{
				State = 2016;
				datasourceEntryFileSpec();
				}
				break;
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2017;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2020;
				Match(T__17);
				State = 2021;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 328, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 2024;
				fileSpec();
				}
				break;
			case T__54:
				{
				State = 2025;
				storyFileSpec();
				}
				break;
			case T__2:
			case VARID:
				{
				State = 2026;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2029;
				Match(T__17);
				State = 2030;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 330, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2037;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
				{
				State = 2033;
				storyFileSpec();
				}
				break;
			case T__74:
				{
				State = 2034;
				Match(T__74);
				State = 2035;
				Match(T__18);
				State = 2036;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2039;
				Match(T__17);
				State = 2040;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 332, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 2047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2043;
				fileSpec();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044;
				Match(T__53);
				State = 2045;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2046;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 334, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 2052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2049;
				Match(T__53);
				State = 2050;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 336, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 2058;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2054;
				fileSpec();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2055;
				Match(T__40);
				State = 2056;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2057;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 338, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 2063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2060;
				Match(T__40);
				State = 2061;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2062;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 340, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 2069;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2065;
				fileSpec();
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2066;
				Match(T__93);
				State = 2067;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2068;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 342, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 2074;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__93:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2071;
				Match(T__93);
				State = 2072;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2073;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringArrayLiteralContext stringArrayLiteral() {
		StringArrayLiteralContext _localctx = new StringArrayLiteralContext(Context, State);
		EnterRule(_localctx, 344, RULE_stringArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076;
			Match(T__88);
			State = 2078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 2077;
				stringExprList();
				}
			}

			State = 2080;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexArrayLiteralContext regexArrayLiteral() {
		RegexArrayLiteralContext _localctx = new RegexArrayLiteralContext(Context, State);
		EnterRule(_localctx, 346, RULE_regexArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			Match(T__88);
			State = 2084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==REGEXLITERAL) {
				{
				State = 2083;
				regexExprList();
				}
			}

			State = 2086;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntArrayLiteralContext intArrayLiteral() {
		IntArrayLiteralContext _localctx = new IntArrayLiteralContext(Context, State);
		EnterRule(_localctx, 348, RULE_intArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088;
			Match(T__88);
			State = 2090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==INTLITERAL) {
				{
				State = 2089;
				intExprList();
				}
			}

			State = 2092;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 350, RULE_longOrShortDatasourceSpec);
		try {
			State = 2096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2094;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2095;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 352, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2098;
			Match(T__2);
			State = 2099;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 354, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2101;
			Match(T__19);
			State = 2102;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 356, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104;
			Match(T__22);
			State = 2105;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 358, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2107;
			Match(T__94);
			State = 2108;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 360, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2110;
			Match(T__54);
			State = 2111;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 362, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2113;
			Match(T__52);
			State = 2114;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 364, RULE_typedVarDecl);
		try {
			State = 2124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2116;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2117;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2118;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2119;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2120;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2121;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2122;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2123;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 366, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126;
			Match(T__2);
			State = 2127;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 368, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2129;
			Match(T__19);
			State = 2130;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 370, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			Match(T__22);
			State = 2133;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 372, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2135;
			Match(T__22);
			State = 2136;
			Match(T__24);
			State = 2137;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 374, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			Match(T__54);
			State = 2140;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 376, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2142;
			Match(T__53);
			State = 2143;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 378, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			Match(T__40);
			State = 2146;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 380, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148;
			Match(T__93);
			State = 2149;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 382, RULE_datasourceEntriesInputLocation);
		try {
			State = 2153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2151;
				fileSpec();
				}
				break;
			case T__22:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2152;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,103,2156,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,1,0,1,0,1,1,5,1,388,8,1,10,1,12,1,
		391,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,511,8,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,520,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,541,8,7,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,3,9,551,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,562,8,10,1,11,1,11,1,11,3,11,567,8,11,1,11,1,11,3,11,571,8,11,
		3,11,573,8,11,1,11,1,11,3,11,577,8,11,1,12,1,12,1,12,1,13,1,13,1,13,3,
		13,585,8,13,1,13,1,13,1,14,1,14,1,14,3,14,592,8,14,1,15,1,15,1,16,1,16,
		1,16,1,16,3,16,600,8,16,1,17,1,17,1,17,3,17,605,8,17,1,18,1,18,1,18,3,
		18,610,8,18,1,19,1,19,1,19,3,19,615,8,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,24,1,24,3,24,643,8,24,1,25,1,25,3,25,647,8,25,1,
		25,1,25,1,25,3,25,652,8,25,1,26,1,26,3,26,656,8,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,3,27,667,8,27,1,27,1,27,1,27,3,27,672,8,27,1,
		28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,684,8,29,1,30,1,30,
		1,30,1,30,3,30,690,8,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,698,8,31,1,
		32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,3,33,709,8,33,1,33,1,33,1,33,
		3,33,714,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,737,8,37,1,38,1,38,
		1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,752,8,40,1,
		41,1,41,3,41,756,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
		767,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,775,8,43,1,43,1,43,3,43,779,
		8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,790,8,44,1,44,3,
		44,793,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,804,8,45,
		1,46,1,46,1,46,3,46,809,8,46,1,47,1,47,1,47,1,48,1,48,1,48,3,48,817,8,
		48,1,49,1,49,1,49,1,49,1,50,1,50,3,50,825,8,50,1,51,3,51,828,8,51,1,51,
		1,51,1,51,1,52,1,52,3,52,835,8,52,1,53,1,53,1,53,3,53,840,8,53,1,54,1,
		54,1,54,3,54,845,8,54,1,54,1,54,1,54,1,54,3,54,851,8,54,1,54,1,54,1,54,
		1,54,1,54,1,54,3,54,859,8,54,1,54,1,54,3,54,863,8,54,1,55,1,55,1,55,1,
		55,1,55,3,55,870,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
		3,55,882,8,55,1,55,3,55,885,8,55,1,55,1,55,1,55,3,55,890,8,55,1,55,1,55,
		1,55,1,55,1,55,1,55,1,55,3,55,899,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,3,55,908,8,55,1,55,1,55,3,55,912,8,55,1,56,1,56,1,56,1,56,1,56,3,56,
		919,8,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
		60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,1,62,3,62,963,8,62,3,62,965,8,62,1,63,1,63,1,63,1,63,3,63,971,8,63,
		1,64,1,64,1,64,1,64,3,64,977,8,64,1,65,1,65,1,65,1,65,3,65,983,8,65,1,
		66,1,66,1,66,1,66,3,66,989,8,66,1,67,1,67,1,67,1,67,3,67,995,8,67,1,68,
		1,68,1,68,1,68,1,68,3,68,1002,8,68,1,69,1,69,1,69,3,69,1007,8,69,1,69,
		3,69,1010,8,69,1,70,1,70,1,71,1,71,3,71,1016,8,71,1,72,1,72,1,72,1,72,
		1,72,3,72,1023,8,72,1,72,1,72,3,72,1027,8,72,1,73,1,73,1,73,1,73,3,73,
		1033,8,73,1,73,3,73,1036,8,73,1,74,1,74,1,74,1,74,1,74,3,74,1043,8,74,
		1,74,1,74,1,74,3,74,1048,8,74,1,75,1,75,1,75,1,75,1,75,3,75,1055,8,75,
		1,75,3,75,1058,8,75,1,76,1,76,1,76,1,76,3,76,1064,8,76,1,77,1,77,1,77,
		1,77,1,77,1,77,3,77,1072,8,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,
		1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1092,8,81,1,82,
		1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,
		1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,3,88,1120,8,88,
		1,89,1,89,1,89,1,90,3,90,1126,8,90,1,90,1,90,1,90,1,91,1,91,1,92,1,92,
		1,93,1,93,1,94,1,94,3,94,1139,8,94,1,95,1,95,1,96,1,96,3,96,1145,8,96,
		1,97,1,97,3,97,1149,8,97,1,98,1,98,3,98,1153,8,98,1,99,1,99,3,99,1157,
		8,99,1,100,1,100,3,100,1161,8,100,1,101,1,101,3,101,1165,8,101,1,102,1,
		102,3,102,1169,8,102,1,103,1,103,3,103,1173,8,103,1,104,1,104,1,104,1,
		104,3,104,1179,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,
		105,1189,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1199,
		8,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1207,8,107,1,108,1,108,
		1,108,3,108,1212,8,108,1,109,1,109,1,109,3,109,1217,8,109,1,109,1,109,
		1,109,1,109,3,109,1223,8,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,
		1231,8,109,1,109,1,109,3,109,1235,8,109,1,110,1,110,1,110,1,110,1,110,
		3,110,1242,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
		1,110,3,110,1254,8,110,1,110,3,110,1257,8,110,1,110,1,110,1,110,3,110,
		1262,8,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1271,8,110,
		1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1280,8,110,1,110,1,110,
		3,110,1284,8,110,1,111,1,111,1,111,3,111,1289,8,111,1,112,1,112,1,112,
		1,112,1,113,1,113,1,113,3,113,1298,8,113,1,114,1,114,1,114,3,114,1303,
		8,114,1,115,3,115,1306,8,115,1,115,1,115,1,116,1,116,1,116,1,117,1,117,
		1,117,3,117,1316,8,117,1,118,1,118,1,118,1,118,1,118,1,119,1,119,1,119,
		1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,121,1,121,
		1,121,1,121,3,121,1340,8,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
		1348,8,121,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1356,8,122,1,123,
		1,123,1,123,1,123,1,123,1,123,3,123,1364,8,123,1,124,1,124,1,124,1,124,
		1,124,1,124,3,124,1372,8,124,1,125,1,125,1,125,3,125,1377,8,125,1,126,
		1,126,1,126,3,126,1382,8,126,1,126,1,126,1,126,1,126,3,126,1388,8,126,
		1,126,1,126,1,126,1,126,1,126,1,126,3,126,1396,8,126,1,126,1,126,3,126,
		1400,8,126,1,127,1,127,1,127,1,127,1,127,3,127,1407,8,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1419,8,127,1,127,
		3,127,1422,8,127,1,127,1,127,1,127,3,127,1427,8,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,3,127,1436,8,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,3,127,1445,8,127,1,127,1,127,1,127,1,127,1,127,3,127,1452,
		8,127,1,127,1,127,1,127,1,127,3,127,1458,8,127,1,127,1,127,3,127,1462,
		8,127,1,127,1,127,3,127,1466,8,127,1,127,3,127,1469,8,127,1,127,1,127,
		1,127,3,127,1474,8,127,1,127,1,127,3,127,1478,8,127,1,127,3,127,1481,8,
		127,1,127,3,127,1484,8,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1492,
		8,127,1,127,1,127,1,127,1,127,1,127,3,127,1499,8,127,1,127,3,127,1502,
		8,127,1,127,1,127,3,127,1506,8,127,1,127,1,127,1,127,1,127,1,127,3,127,
		1513,8,127,1,127,1,127,1,127,3,127,1518,8,127,1,127,1,127,1,127,1,127,
		1,127,3,127,1525,8,127,1,127,1,127,1,127,3,127,1530,8,127,1,127,1,127,
		1,127,1,127,1,127,3,127,1537,8,127,1,127,3,127,1540,8,127,1,127,1,127,
		3,127,1544,8,127,1,127,1,127,1,127,1,127,1,127,3,127,1551,8,127,1,127,
		1,127,1,127,3,127,1556,8,127,1,127,1,127,1,127,1,127,1,127,3,127,1563,
		8,127,1,127,1,127,1,127,3,127,1568,8,127,1,127,1,127,3,127,1572,8,127,
		1,127,3,127,1575,8,127,1,127,3,127,1578,8,127,1,127,1,127,1,127,1,127,
		1,127,1,127,3,127,1586,8,127,1,127,1,127,3,127,1590,8,127,1,127,3,127,
		1593,8,127,1,127,3,127,1596,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
		3,127,1604,8,127,1,128,1,128,1,129,1,129,1,129,3,129,1611,8,129,1,130,
		1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,1621,8,130,1,130,3,130,
		1624,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1634,
		8,131,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1642,8,132,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,1,133,3,133,1652,8,133,1,134,1,134,1,134,
		3,134,1657,8,134,1,135,1,135,1,135,1,135,3,135,1663,8,135,1,136,1,136,
		1,136,3,136,1668,8,136,1,137,1,137,1,137,3,137,1673,8,137,1,137,1,137,
		1,137,1,137,3,137,1679,8,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,
		1687,8,137,1,137,1,137,3,137,1691,8,137,1,138,1,138,1,138,1,138,1,138,
		3,138,1698,8,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,3,138,1710,8,138,1,138,3,138,1713,8,138,1,138,1,138,1,138,3,138,
		1718,8,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,1727,8,138,
		1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,1736,8,138,1,138,1,138,
		3,138,1740,8,138,1,139,1,139,1,139,3,139,1745,8,139,1,140,1,140,1,140,
		1,140,3,140,1751,8,140,1,140,1,140,3,140,1755,8,140,1,140,1,140,1,140,
		1,140,3,140,1761,8,140,1,140,1,140,3,140,1765,8,140,1,140,1,140,1,140,
		1,140,1,140,3,140,1772,8,140,1,140,1,140,3,140,1776,8,140,1,141,1,141,
		1,141,1,141,1,141,1,142,1,142,1,142,3,142,1786,8,142,1,142,1,142,1,143,
		1,143,1,143,3,143,1793,8,143,1,144,1,144,3,144,1797,8,144,1,144,1,144,
		1,145,1,145,1,145,3,145,1804,8,145,1,146,1,146,1,146,3,146,1809,8,146,
		1,146,1,146,1,146,1,146,3,146,1815,8,146,1,146,1,146,1,146,1,146,1,146,
		1,146,3,146,1823,8,146,1,146,1,146,3,146,1827,8,146,1,147,1,147,1,147,
		1,147,1,147,3,147,1834,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
		1,147,1,147,1,147,3,147,1846,8,147,1,147,3,147,1849,8,147,1,147,1,147,
		1,147,3,147,1854,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,
		1863,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1872,8,147,
		1,147,1,147,1,147,1,147,1,147,3,147,1879,8,147,1,147,1,147,1,147,1,147,
		3,147,1885,8,147,1,147,1,147,1,147,1,147,3,147,1891,8,147,1,147,3,147,
		1894,8,147,1,148,1,148,3,148,1898,8,148,1,149,1,149,3,149,1902,8,149,1,
		150,1,150,3,150,1906,8,150,1,151,1,151,3,151,1910,8,151,1,152,1,152,1,
		152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
		1,153,1,153,1,153,1,153,1,153,3,153,1931,8,153,1,154,1,154,1,154,1,154,
		1,154,1,154,1,154,1,154,3,154,1941,8,154,1,155,1,155,1,155,1,155,1,155,
		1,155,1,155,1,155,3,155,1951,8,155,1,156,1,156,1,156,3,156,1956,8,156,
		1,156,1,156,3,156,1960,8,156,1,157,1,157,3,157,1964,8,157,1,157,1,157,
		3,157,1968,8,157,1,158,1,158,1,158,3,158,1973,8,158,1,158,1,158,3,158,
		1977,8,158,1,159,1,159,1,159,1,159,3,159,1983,8,159,1,159,1,159,3,159,
		1987,8,159,1,160,1,160,1,160,3,160,1992,8,160,1,160,1,160,3,160,1996,8,
		160,1,161,1,161,1,161,1,161,3,161,2002,8,161,1,161,1,161,3,161,2006,8,
		161,1,162,1,162,1,162,3,162,2011,8,162,1,162,1,162,3,162,2015,8,162,1,
		163,1,163,3,163,2019,8,163,1,163,1,163,3,163,2023,8,163,1,164,1,164,1,
		164,3,164,2028,8,164,1,164,1,164,3,164,2032,8,164,1,165,1,165,1,165,1,
		165,3,165,2038,8,165,1,165,1,165,3,165,2042,8,165,1,166,1,166,1,166,1,
		166,3,166,2048,8,166,1,167,1,167,1,167,3,167,2053,8,167,1,168,1,168,1,
		168,1,168,3,168,2059,8,168,1,169,1,169,1,169,3,169,2064,8,169,1,170,1,
		170,1,170,1,170,3,170,2070,8,170,1,171,1,171,1,171,3,171,2075,8,171,1,
		172,1,172,3,172,2079,8,172,1,172,1,172,1,173,1,173,3,173,2085,8,173,1,
		173,1,173,1,174,1,174,3,174,2091,8,174,1,174,1,174,1,175,1,175,3,175,2097,
		8,175,1,176,1,176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,1,179,1,179,
		1,179,1,180,1,180,1,180,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,
		1,182,1,182,1,182,3,182,2125,8,182,1,183,1,183,1,183,1,184,1,184,1,184,
		1,185,1,185,1,185,1,186,1,186,1,186,1,186,1,187,1,187,1,187,1,188,1,188,
		1,188,1,189,1,189,1,189,1,190,1,190,1,190,1,191,1,191,3,191,2154,8,191,
		1,191,0,0,192,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,0,13,2,0,14,14,19,19,2,0,19,19,24,24,3,0,2,2,8,8,29,30,1,0,31,
		32,1,0,34,35,2,0,12,12,36,36,1,0,98,100,2,0,98,98,100,100,1,0,98,99,1,
		0,99,100,2,0,16,16,65,67,1,0,69,71,2,0,99,99,101,101,2341,0,384,1,0,0,
		0,2,389,1,0,0,0,4,510,1,0,0,0,6,512,1,0,0,0,8,521,1,0,0,0,10,527,1,0,0,
		0,12,533,1,0,0,0,14,537,1,0,0,0,16,542,1,0,0,0,18,546,1,0,0,0,20,555,1,
		0,0,0,22,572,1,0,0,0,24,578,1,0,0,0,26,581,1,0,0,0,28,588,1,0,0,0,30,593,
		1,0,0,0,32,599,1,0,0,0,34,601,1,0,0,0,36,606,1,0,0,0,38,611,1,0,0,0,40,
		616,1,0,0,0,42,624,1,0,0,0,44,630,1,0,0,0,46,636,1,0,0,0,48,642,1,0,0,
		0,50,651,1,0,0,0,52,653,1,0,0,0,54,659,1,0,0,0,56,673,1,0,0,0,58,679,1,
		0,0,0,60,685,1,0,0,0,62,694,1,0,0,0,64,699,1,0,0,0,66,703,1,0,0,0,68,715,
		1,0,0,0,70,722,1,0,0,0,72,727,1,0,0,0,74,736,1,0,0,0,76,738,1,0,0,0,78,
		744,1,0,0,0,80,751,1,0,0,0,82,755,1,0,0,0,84,757,1,0,0,0,86,768,1,0,0,
		0,88,780,1,0,0,0,90,794,1,0,0,0,92,805,1,0,0,0,94,810,1,0,0,0,96,813,1,
		0,0,0,98,818,1,0,0,0,100,824,1,0,0,0,102,827,1,0,0,0,104,834,1,0,0,0,106,
		836,1,0,0,0,108,862,1,0,0,0,110,911,1,0,0,0,112,918,1,0,0,0,114,920,1,
		0,0,0,116,922,1,0,0,0,118,927,1,0,0,0,120,932,1,0,0,0,122,937,1,0,0,0,
		124,964,1,0,0,0,126,966,1,0,0,0,128,972,1,0,0,0,130,978,1,0,0,0,132,984,
		1,0,0,0,134,990,1,0,0,0,136,996,1,0,0,0,138,1009,1,0,0,0,140,1011,1,0,
		0,0,142,1015,1,0,0,0,144,1026,1,0,0,0,146,1035,1,0,0,0,148,1047,1,0,0,
		0,150,1057,1,0,0,0,152,1059,1,0,0,0,154,1071,1,0,0,0,156,1073,1,0,0,0,
		158,1077,1,0,0,0,160,1081,1,0,0,0,162,1091,1,0,0,0,164,1093,1,0,0,0,166,
		1098,1,0,0,0,168,1101,1,0,0,0,170,1105,1,0,0,0,172,1108,1,0,0,0,174,1112,
		1,0,0,0,176,1119,1,0,0,0,178,1121,1,0,0,0,180,1125,1,0,0,0,182,1130,1,
		0,0,0,184,1132,1,0,0,0,186,1134,1,0,0,0,188,1138,1,0,0,0,190,1140,1,0,
		0,0,192,1144,1,0,0,0,194,1148,1,0,0,0,196,1152,1,0,0,0,198,1156,1,0,0,
		0,200,1160,1,0,0,0,202,1164,1,0,0,0,204,1168,1,0,0,0,206,1172,1,0,0,0,
		208,1178,1,0,0,0,210,1180,1,0,0,0,212,1190,1,0,0,0,214,1200,1,0,0,0,216,
		1208,1,0,0,0,218,1234,1,0,0,0,220,1283,1,0,0,0,222,1285,1,0,0,0,224,1290,
		1,0,0,0,226,1294,1,0,0,0,228,1299,1,0,0,0,230,1305,1,0,0,0,232,1309,1,
		0,0,0,234,1315,1,0,0,0,236,1317,1,0,0,0,238,1322,1,0,0,0,240,1327,1,0,
		0,0,242,1335,1,0,0,0,244,1349,1,0,0,0,246,1357,1,0,0,0,248,1365,1,0,0,
		0,250,1373,1,0,0,0,252,1399,1,0,0,0,254,1603,1,0,0,0,256,1605,1,0,0,0,
		258,1607,1,0,0,0,260,1612,1,0,0,0,262,1625,1,0,0,0,264,1635,1,0,0,0,266,
		1643,1,0,0,0,268,1653,1,0,0,0,270,1662,1,0,0,0,272,1664,1,0,0,0,274,1690,
		1,0,0,0,276,1739,1,0,0,0,278,1741,1,0,0,0,280,1775,1,0,0,0,282,1777,1,
		0,0,0,284,1782,1,0,0,0,286,1789,1,0,0,0,288,1796,1,0,0,0,290,1800,1,0,
		0,0,292,1826,1,0,0,0,294,1893,1,0,0,0,296,1897,1,0,0,0,298,1901,1,0,0,
		0,300,1905,1,0,0,0,302,1909,1,0,0,0,304,1911,1,0,0,0,306,1930,1,0,0,0,
		308,1940,1,0,0,0,310,1950,1,0,0,0,312,1955,1,0,0,0,314,1963,1,0,0,0,316,
		1972,1,0,0,0,318,1982,1,0,0,0,320,1991,1,0,0,0,322,2001,1,0,0,0,324,2010,
		1,0,0,0,326,2018,1,0,0,0,328,2027,1,0,0,0,330,2037,1,0,0,0,332,2047,1,
		0,0,0,334,2052,1,0,0,0,336,2058,1,0,0,0,338,2063,1,0,0,0,340,2069,1,0,
		0,0,342,2074,1,0,0,0,344,2076,1,0,0,0,346,2082,1,0,0,0,348,2088,1,0,0,
		0,350,2096,1,0,0,0,352,2098,1,0,0,0,354,2101,1,0,0,0,356,2104,1,0,0,0,
		358,2107,1,0,0,0,360,2110,1,0,0,0,362,2113,1,0,0,0,364,2124,1,0,0,0,366,
		2126,1,0,0,0,368,2129,1,0,0,0,370,2132,1,0,0,0,372,2135,1,0,0,0,374,2139,
		1,0,0,0,376,2142,1,0,0,0,378,2145,1,0,0,0,380,2148,1,0,0,0,382,2153,1,
		0,0,0,384,385,3,2,1,0,385,1,1,0,0,0,386,388,3,4,2,0,387,386,1,0,0,0,388,
		391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,3,1,0,0,0,391,389,1,0,
		0,0,392,393,3,112,56,0,393,394,5,96,0,0,394,511,1,0,0,0,395,396,3,124,
		62,0,396,397,5,96,0,0,397,511,1,0,0,0,398,399,3,154,77,0,399,400,5,96,
		0,0,400,511,1,0,0,0,401,402,3,162,81,0,402,403,5,96,0,0,403,511,1,0,0,
		0,404,405,3,230,115,0,405,406,5,96,0,0,406,511,1,0,0,0,407,408,3,232,116,
		0,408,409,5,96,0,0,409,511,1,0,0,0,410,411,3,234,117,0,411,412,5,96,0,
		0,412,511,1,0,0,0,413,414,3,6,3,0,414,415,5,96,0,0,415,511,1,0,0,0,416,
		417,3,8,4,0,417,418,5,96,0,0,418,511,1,0,0,0,419,420,3,10,5,0,420,421,
		5,96,0,0,421,511,1,0,0,0,422,423,3,12,6,0,423,424,5,96,0,0,424,511,1,0,
		0,0,425,426,3,20,10,0,426,427,5,96,0,0,427,511,1,0,0,0,428,429,3,18,9,
		0,429,430,5,96,0,0,430,511,1,0,0,0,431,432,3,40,20,0,432,433,5,96,0,0,
		433,511,1,0,0,0,434,435,3,42,21,0,435,436,5,96,0,0,436,511,1,0,0,0,437,
		438,3,44,22,0,438,439,5,96,0,0,439,511,1,0,0,0,440,441,3,46,23,0,441,442,
		5,96,0,0,442,511,1,0,0,0,443,444,3,212,106,0,444,445,5,96,0,0,445,511,
		1,0,0,0,446,447,3,214,107,0,447,448,5,96,0,0,448,511,1,0,0,0,449,450,3,
		54,27,0,450,451,5,96,0,0,451,511,1,0,0,0,452,453,3,56,28,0,453,454,5,96,
		0,0,454,511,1,0,0,0,455,456,3,60,30,0,456,457,5,96,0,0,457,511,1,0,0,0,
		458,459,3,58,29,0,459,460,5,96,0,0,460,511,1,0,0,0,461,462,3,260,130,0,
		462,463,5,96,0,0,463,511,1,0,0,0,464,465,3,264,132,0,465,466,5,96,0,0,
		466,511,1,0,0,0,467,468,3,262,131,0,468,469,5,96,0,0,469,511,1,0,0,0,470,
		471,3,242,121,0,471,472,5,96,0,0,472,511,1,0,0,0,473,474,3,244,122,0,474,
		475,5,96,0,0,475,511,1,0,0,0,476,477,3,246,123,0,477,478,5,96,0,0,478,
		511,1,0,0,0,479,480,3,248,124,0,480,481,5,96,0,0,481,511,1,0,0,0,482,483,
		3,66,33,0,483,484,5,96,0,0,484,511,1,0,0,0,485,486,3,68,34,0,486,487,5,
		96,0,0,487,511,1,0,0,0,488,489,3,70,35,0,489,490,5,96,0,0,490,511,1,0,
		0,0,491,492,3,72,36,0,492,493,5,96,0,0,493,511,1,0,0,0,494,495,3,84,42,
		0,495,496,5,96,0,0,496,511,1,0,0,0,497,498,3,86,43,0,498,499,5,96,0,0,
		499,511,1,0,0,0,500,501,3,88,44,0,501,502,5,96,0,0,502,511,1,0,0,0,503,
		504,3,90,45,0,504,505,5,96,0,0,505,511,1,0,0,0,506,507,5,1,0,0,507,511,
		5,96,0,0,508,511,3,52,26,0,509,511,3,306,153,0,510,392,1,0,0,0,510,395,
		1,0,0,0,510,398,1,0,0,0,510,401,1,0,0,0,510,404,1,0,0,0,510,407,1,0,0,
		0,510,410,1,0,0,0,510,413,1,0,0,0,510,416,1,0,0,0,510,419,1,0,0,0,510,
		422,1,0,0,0,510,425,1,0,0,0,510,428,1,0,0,0,510,431,1,0,0,0,510,434,1,
		0,0,0,510,437,1,0,0,0,510,440,1,0,0,0,510,443,1,0,0,0,510,446,1,0,0,0,
		510,449,1,0,0,0,510,452,1,0,0,0,510,455,1,0,0,0,510,458,1,0,0,0,510,461,
		1,0,0,0,510,464,1,0,0,0,510,467,1,0,0,0,510,470,1,0,0,0,510,473,1,0,0,
		0,510,476,1,0,0,0,510,479,1,0,0,0,510,482,1,0,0,0,510,485,1,0,0,0,510,
		488,1,0,0,0,510,491,1,0,0,0,510,494,1,0,0,0,510,497,1,0,0,0,510,500,1,
		0,0,0,510,503,1,0,0,0,510,506,1,0,0,0,510,508,1,0,0,0,510,509,1,0,0,0,
		511,5,1,0,0,0,512,513,5,2,0,0,513,519,5,3,0,0,514,520,3,280,140,0,515,
		516,5,4,0,0,516,517,3,14,7,0,517,518,5,5,0,0,518,520,1,0,0,0,519,514,1,
		0,0,0,519,515,1,0,0,0,520,7,1,0,0,0,521,522,5,6,0,0,522,523,5,3,0,0,523,
		524,3,142,71,0,524,525,5,7,0,0,525,526,3,184,92,0,526,9,1,0,0,0,527,528,
		5,8,0,0,528,529,5,3,0,0,529,530,3,142,71,0,530,531,5,9,0,0,531,532,3,14,
		7,0,532,11,1,0,0,0,533,534,5,10,0,0,534,535,5,3,0,0,535,536,3,142,71,0,
		536,13,1,0,0,0,537,540,3,16,8,0,538,539,5,11,0,0,539,541,3,14,7,0,540,
		538,1,0,0,0,540,541,1,0,0,0,541,15,1,0,0,0,542,543,5,99,0,0,543,544,5,
		12,0,0,544,545,3,280,140,0,545,17,1,0,0,0,546,547,5,6,0,0,547,550,5,13,
		0,0,548,549,5,14,0,0,549,551,3,186,93,0,550,548,1,0,0,0,550,551,1,0,0,
		0,551,552,1,0,0,0,552,553,5,7,0,0,553,554,3,188,94,0,554,19,1,0,0,0,555,
		556,5,15,0,0,556,557,3,22,11,0,557,558,5,14,0,0,558,561,3,36,18,0,559,
		560,5,7,0,0,560,562,3,188,94,0,561,559,1,0,0,0,561,562,1,0,0,0,562,21,
		1,0,0,0,563,573,5,16,0,0,564,566,5,99,0,0,565,567,3,24,12,0,566,565,1,
		0,0,0,566,567,1,0,0,0,567,573,1,0,0,0,568,570,3,26,13,0,569,571,3,24,12,
		0,570,569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,563,1,0,0,0,572,
		564,1,0,0,0,572,568,1,0,0,0,573,576,1,0,0,0,574,575,5,11,0,0,575,577,3,
		22,11,0,576,574,1,0,0,0,576,577,1,0,0,0,577,23,1,0,0,0,578,579,5,17,0,
		0,579,580,5,99,0,0,580,25,1,0,0,0,581,582,5,99,0,0,582,584,5,4,0,0,583,
		585,3,28,14,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,
		5,5,0,0,587,27,1,0,0,0,588,591,3,30,15,0,589,590,5,11,0,0,590,592,3,28,
		14,0,591,589,1,0,0,0,591,592,1,0,0,0,592,29,1,0,0,0,593,594,3,32,16,0,
		594,31,1,0,0,0,595,600,5,99,0,0,596,600,3,256,128,0,597,600,3,280,140,
		0,598,600,3,228,114,0,599,595,1,0,0,0,599,596,1,0,0,0,599,597,1,0,0,0,
		599,598,1,0,0,0,600,33,1,0,0,0,601,604,3,32,16,0,602,603,5,11,0,0,603,
		605,3,34,17,0,604,602,1,0,0,0,604,605,1,0,0,0,605,35,1,0,0,0,606,609,3,
		38,19,0,607,608,5,18,0,0,608,610,3,290,145,0,609,607,1,0,0,0,609,610,1,
		0,0,0,610,37,1,0,0,0,611,614,5,13,0,0,612,613,7,0,0,0,613,615,3,186,93,
		0,614,612,1,0,0,0,614,615,1,0,0,0,615,39,1,0,0,0,616,617,5,2,0,0,617,618,
		5,20,0,0,618,619,5,4,0,0,619,620,3,222,111,0,620,621,5,5,0,0,621,622,5,
		19,0,0,622,623,3,142,71,0,623,41,1,0,0,0,624,625,5,6,0,0,625,626,5,20,
		0,0,626,627,3,48,24,0,627,628,5,7,0,0,628,629,3,194,97,0,629,43,1,0,0,
		0,630,631,5,8,0,0,631,632,5,20,0,0,632,633,3,48,24,0,633,634,5,9,0,0,634,
		635,3,222,111,0,635,45,1,0,0,0,636,637,5,10,0,0,637,638,5,20,0,0,638,639,
		3,48,24,0,639,47,1,0,0,0,640,643,3,144,72,0,641,643,3,50,25,0,642,640,
		1,0,0,0,642,641,1,0,0,0,643,49,1,0,0,0,644,647,3,280,140,0,645,647,5,99,
		0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,648,1,0,0,0,648,649,5,19,0,0,649,
		652,3,142,71,0,650,652,5,99,0,0,651,646,1,0,0,0,651,650,1,0,0,0,652,51,
		1,0,0,0,653,655,5,21,0,0,654,656,3,2,1,0,655,654,1,0,0,0,655,656,1,0,0,
		0,656,657,1,0,0,0,657,658,5,22,0,0,658,53,1,0,0,0,659,660,5,2,0,0,660,
		666,5,23,0,0,661,667,3,280,140,0,662,663,5,4,0,0,663,664,3,62,31,0,664,
		665,5,5,0,0,665,667,1,0,0,0,666,661,1,0,0,0,666,662,1,0,0,0,667,668,1,
		0,0,0,668,671,7,1,0,0,669,672,3,138,69,0,670,672,3,140,70,0,671,669,1,
		0,0,0,671,670,1,0,0,0,672,55,1,0,0,0,673,674,5,6,0,0,674,675,5,23,0,0,
		675,676,3,350,175,0,676,677,5,7,0,0,677,678,3,302,151,0,678,57,1,0,0,0,
		679,680,5,10,0,0,680,683,5,23,0,0,681,684,3,152,76,0,682,684,3,150,75,
		0,683,681,1,0,0,0,683,682,1,0,0,0,684,59,1,0,0,0,685,686,5,8,0,0,686,689,
		5,23,0,0,687,690,3,152,76,0,688,690,3,150,75,0,689,687,1,0,0,0,689,688,
		1,0,0,0,690,691,1,0,0,0,691,692,5,9,0,0,692,693,3,62,31,0,693,61,1,0,0,
		0,694,697,3,64,32,0,695,696,5,11,0,0,696,698,3,62,31,0,697,695,1,0,0,0,
		697,698,1,0,0,0,698,63,1,0,0,0,699,700,5,99,0,0,700,701,5,12,0,0,701,702,
		3,280,140,0,702,65,1,0,0,0,703,704,5,2,0,0,704,705,5,23,0,0,705,708,5,
		25,0,0,706,709,3,280,140,0,707,709,3,96,48,0,708,706,1,0,0,0,708,707,1,
		0,0,0,709,710,1,0,0,0,710,713,7,1,0,0,711,714,3,150,75,0,712,714,3,152,
		76,0,713,711,1,0,0,0,713,712,1,0,0,0,714,67,1,0,0,0,715,716,5,6,0,0,716,
		717,5,23,0,0,717,718,5,25,0,0,718,719,3,74,37,0,719,720,5,7,0,0,720,721,
		3,82,41,0,721,69,1,0,0,0,722,723,5,10,0,0,723,724,5,23,0,0,724,725,5,25,
		0,0,725,726,3,78,39,0,726,71,1,0,0,0,727,728,5,8,0,0,728,729,5,23,0,0,
		729,730,5,25,0,0,730,731,3,78,39,0,731,732,5,9,0,0,732,733,3,96,48,0,733,
		73,1,0,0,0,734,737,3,76,38,0,735,737,3,78,39,0,736,734,1,0,0,0,736,735,
		1,0,0,0,737,75,1,0,0,0,738,739,5,23,0,0,739,740,5,25,0,0,740,741,3,80,
		40,0,741,742,7,0,0,0,742,743,3,150,75,0,743,77,1,0,0,0,744,745,3,80,40,
		0,745,746,7,0,0,0,746,747,3,150,75,0,747,79,1,0,0,0,748,752,3,228,114,
		0,749,752,3,280,140,0,750,752,5,99,0,0,751,748,1,0,0,0,751,749,1,0,0,0,
		751,750,1,0,0,0,752,81,1,0,0,0,753,756,3,350,175,0,754,756,3,180,90,0,
		755,753,1,0,0,0,755,754,1,0,0,0,756,83,1,0,0,0,757,758,5,8,0,0,758,759,
		5,23,0,0,759,760,5,26,0,0,760,761,5,19,0,0,761,762,3,150,75,0,762,763,
		5,9,0,0,763,766,3,96,48,0,764,765,5,18,0,0,765,767,3,106,53,0,766,764,
		1,0,0,0,766,767,1,0,0,0,767,85,1,0,0,0,768,769,5,10,0,0,769,770,5,23,0,
		0,770,771,5,26,0,0,771,774,7,0,0,0,772,775,3,150,75,0,773,775,3,152,76,
		0,774,772,1,0,0,0,774,773,1,0,0,0,775,778,1,0,0,0,776,777,5,18,0,0,777,
		779,3,106,53,0,778,776,1,0,0,0,778,779,1,0,0,0,779,87,1,0,0,0,780,781,
		5,6,0,0,781,782,5,23,0,0,782,783,5,26,0,0,783,784,7,0,0,0,784,785,3,100,
		50,0,785,786,5,7,0,0,786,789,3,104,52,0,787,788,5,18,0,0,788,790,3,106,
		53,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,793,3,92,46,0,
		792,791,1,0,0,0,792,793,1,0,0,0,793,89,1,0,0,0,794,795,5,27,0,0,795,796,
		5,23,0,0,796,797,5,26,0,0,797,798,7,0,0,0,798,799,3,100,50,0,799,800,5,
		7,0,0,800,803,3,100,50,0,801,802,5,18,0,0,802,804,3,106,53,0,803,801,1,
		0,0,0,803,804,1,0,0,0,804,91,1,0,0,0,805,808,3,94,47,0,806,807,5,11,0,
		0,807,809,3,92,46,0,808,806,1,0,0,0,808,809,1,0,0,0,809,93,1,0,0,0,810,
		811,5,28,0,0,811,812,7,2,0,0,812,95,1,0,0,0,813,816,3,98,49,0,814,815,
		5,11,0,0,815,817,3,96,48,0,816,814,1,0,0,0,816,817,1,0,0,0,817,97,1,0,
		0,0,818,819,5,99,0,0,819,820,5,12,0,0,820,821,3,280,140,0,821,99,1,0,0,
		0,822,825,3,350,175,0,823,825,3,180,90,0,824,822,1,0,0,0,824,823,1,0,0,
		0,825,101,1,0,0,0,826,828,7,3,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
		829,1,0,0,0,829,830,5,33,0,0,830,831,3,280,140,0,831,103,1,0,0,0,832,835,
		3,350,175,0,833,835,3,180,90,0,834,832,1,0,0,0,834,833,1,0,0,0,835,105,
		1,0,0,0,836,839,3,108,54,0,837,838,7,4,0,0,838,840,3,106,53,0,839,837,
		1,0,0,0,839,840,1,0,0,0,840,107,1,0,0,0,841,844,3,110,55,0,842,843,7,4,
		0,0,843,845,3,108,54,0,844,842,1,0,0,0,844,845,1,0,0,0,845,863,1,0,0,0,
		846,847,5,4,0,0,847,850,3,110,55,0,848,849,7,4,0,0,849,851,3,108,54,0,
		850,848,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,5,5,0,0,853,863,
		1,0,0,0,854,855,5,4,0,0,855,858,3,108,54,0,856,857,7,4,0,0,857,859,3,108,
		54,0,858,856,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,861,5,5,0,0,861,
		863,1,0,0,0,862,841,1,0,0,0,862,846,1,0,0,0,862,854,1,0,0,0,863,109,1,
		0,0,0,864,865,5,99,0,0,865,866,7,5,0,0,866,912,3,32,16,0,867,869,5,99,
		0,0,868,870,5,37,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,
		872,5,19,0,0,872,873,5,4,0,0,873,874,3,34,17,0,874,875,5,5,0,0,875,912,
		1,0,0,0,876,881,5,99,0,0,877,882,5,38,0,0,878,879,5,39,0,0,879,880,5,37,
		0,0,880,882,5,40,0,0,881,877,1,0,0,0,881,878,1,0,0,0,882,884,1,0,0,0,883,
		885,5,41,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,912,3,
		32,16,0,887,889,5,99,0,0,888,890,5,37,0,0,889,888,1,0,0,0,889,890,1,0,
		0,0,890,891,1,0,0,0,891,892,5,42,0,0,892,912,3,280,140,0,893,898,5,99,
		0,0,894,899,5,43,0,0,895,896,5,39,0,0,896,897,5,37,0,0,897,899,5,44,0,
		0,898,894,1,0,0,0,898,895,1,0,0,0,899,900,1,0,0,0,900,901,5,45,0,0,901,
		912,3,280,140,0,902,907,5,99,0,0,903,908,5,46,0,0,904,905,5,39,0,0,905,
		906,5,37,0,0,906,908,5,47,0,0,907,903,1,0,0,0,907,904,1,0,0,0,908,909,
		1,0,0,0,909,910,5,45,0,0,910,912,3,280,140,0,911,864,1,0,0,0,911,867,1,
		0,0,0,911,876,1,0,0,0,911,887,1,0,0,0,911,893,1,0,0,0,911,902,1,0,0,0,
		912,111,1,0,0,0,913,919,3,114,57,0,914,919,3,116,58,0,915,919,3,118,59,
		0,916,919,3,120,60,0,917,919,3,122,61,0,918,913,1,0,0,0,918,914,1,0,0,
		0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,113,1,0,0,0,920,
		921,5,48,0,0,921,115,1,0,0,0,922,923,5,48,0,0,923,924,5,45,0,0,924,925,
		5,49,0,0,925,926,5,50,0,0,926,117,1,0,0,0,927,928,5,48,0,0,928,929,5,45,
		0,0,929,930,5,49,0,0,930,931,5,51,0,0,931,119,1,0,0,0,932,933,5,48,0,0,
		933,934,5,45,0,0,934,935,5,49,0,0,935,936,5,52,0,0,936,121,1,0,0,0,937,
		938,5,48,0,0,938,939,5,45,0,0,939,940,5,49,0,0,940,941,5,50,0,0,941,942,
		5,34,0,0,942,943,5,51,0,0,943,123,1,0,0,0,944,965,3,126,63,0,945,965,3,
		128,64,0,946,965,3,130,65,0,947,965,3,132,66,0,948,965,3,134,67,0,949,
		965,3,136,68,0,950,951,5,53,0,0,951,952,5,99,0,0,952,962,5,12,0,0,953,
		963,5,99,0,0,954,963,3,138,69,0,955,963,3,144,72,0,956,963,3,280,140,0,
		957,963,3,256,128,0,958,963,3,146,73,0,959,963,3,228,114,0,960,963,3,148,
		74,0,961,963,3,150,75,0,962,953,1,0,0,0,962,954,1,0,0,0,962,955,1,0,0,
		0,962,956,1,0,0,0,962,957,1,0,0,0,962,958,1,0,0,0,962,959,1,0,0,0,962,
		960,1,0,0,0,962,961,1,0,0,0,963,965,1,0,0,0,964,944,1,0,0,0,964,945,1,
		0,0,0,964,946,1,0,0,0,964,947,1,0,0,0,964,948,1,0,0,0,964,949,1,0,0,0,
		964,950,1,0,0,0,965,125,1,0,0,0,966,967,5,3,0,0,967,970,5,99,0,0,968,969,
		5,12,0,0,969,971,3,138,69,0,970,968,1,0,0,0,970,971,1,0,0,0,971,127,1,
		0,0,0,972,973,5,20,0,0,973,976,5,99,0,0,974,975,5,12,0,0,975,977,3,144,
		72,0,976,974,1,0,0,0,976,977,1,0,0,0,977,129,1,0,0,0,978,979,5,54,0,0,
		979,982,5,99,0,0,980,981,5,12,0,0,981,983,3,280,140,0,982,980,1,0,0,0,
		982,983,1,0,0,0,983,131,1,0,0,0,984,985,5,41,0,0,985,988,5,99,0,0,986,
		987,5,12,0,0,987,989,3,256,128,0,988,986,1,0,0,0,988,989,1,0,0,0,989,133,
		1,0,0,0,990,991,5,55,0,0,991,994,5,99,0,0,992,993,5,12,0,0,993,995,3,146,
		73,0,994,992,1,0,0,0,994,995,1,0,0,0,995,135,1,0,0,0,996,997,5,23,0,0,
		997,998,5,25,0,0,998,1001,5,99,0,0,999,1000,5,12,0,0,1000,1002,3,148,74,
		0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,137,1,0,0,0,1003,1004,5,3,0,
		0,1004,1006,7,6,0,0,1005,1007,3,208,104,0,1006,1005,1,0,0,0,1006,1007,
		1,0,0,0,1007,1010,1,0,0,0,1008,1010,5,99,0,0,1009,1003,1,0,0,0,1009,1008,
		1,0,0,0,1010,139,1,0,0,0,1011,1012,7,7,0,0,1012,141,1,0,0,0,1013,1016,
		3,138,69,0,1014,1016,3,140,70,0,1015,1013,1,0,0,0,1015,1014,1,0,0,0,1016,
		143,1,0,0,0,1017,1018,5,20,0,0,1018,1019,5,98,0,0,1019,1022,5,19,0,0,1020,
		1023,3,138,69,0,1021,1023,3,178,89,0,1022,1020,1,0,0,0,1022,1021,1,0,0,
		0,1023,1027,1,0,0,0,1024,1025,5,20,0,0,1025,1027,5,99,0,0,1026,1017,1,
		0,0,0,1026,1024,1,0,0,0,1027,145,1,0,0,0,1028,1029,7,6,0,0,1029,1032,7,
		0,0,0,1030,1033,3,138,69,0,1031,1033,3,178,89,0,1032,1030,1,0,0,0,1032,
		1031,1,0,0,0,1033,1036,1,0,0,0,1034,1036,5,99,0,0,1035,1028,1,0,0,0,1035,
		1034,1,0,0,0,1036,147,1,0,0,0,1037,1038,5,23,0,0,1038,1042,5,25,0,0,1039,
		1043,3,228,114,0,1040,1043,3,280,140,0,1041,1043,5,99,0,0,1042,1039,1,
		0,0,0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1045,
		7,0,0,0,1045,1048,3,150,75,0,1046,1048,5,99,0,0,1047,1037,1,0,0,0,1047,
		1046,1,0,0,0,1048,149,1,0,0,0,1049,1050,5,23,0,0,1050,1051,7,6,0,0,1051,
		1054,7,0,0,0,1052,1055,3,138,69,0,1053,1055,3,140,70,0,1054,1052,1,0,0,
		0,1054,1053,1,0,0,0,1055,1058,1,0,0,0,1056,1058,5,99,0,0,1057,1049,1,0,
		0,0,1057,1056,1,0,0,0,1058,151,1,0,0,0,1059,1060,7,6,0,0,1060,1063,5,19,
		0,0,1061,1064,3,138,69,0,1062,1064,3,140,70,0,1063,1061,1,0,0,0,1063,1062,
		1,0,0,0,1064,153,1,0,0,0,1065,1066,5,99,0,0,1066,1067,5,12,0,0,1067,1072,
		5,99,0,0,1068,1072,3,156,78,0,1069,1072,3,160,80,0,1070,1072,3,158,79,
		0,1071,1065,1,0,0,0,1071,1068,1,0,0,0,1071,1069,1,0,0,0,1071,1070,1,0,
		0,0,1072,155,1,0,0,0,1073,1074,5,99,0,0,1074,1075,5,12,0,0,1075,1076,3,
		138,69,0,1076,157,1,0,0,0,1077,1078,5,99,0,0,1078,1079,5,12,0,0,1079,1080,
		3,144,72,0,1080,159,1,0,0,0,1081,1082,5,99,0,0,1082,1083,5,12,0,0,1083,
		1084,5,98,0,0,1084,161,1,0,0,0,1085,1092,3,164,82,0,1086,1092,3,166,83,
		0,1087,1092,3,168,84,0,1088,1092,3,170,85,0,1089,1092,3,172,86,0,1090,
		1092,3,174,87,0,1091,1085,1,0,0,0,1091,1086,1,0,0,0,1091,1087,1,0,0,0,
		1091,1088,1,0,0,0,1091,1089,1,0,0,0,1091,1090,1,0,0,0,1092,163,1,0,0,0,
		1093,1094,5,56,0,0,1094,1095,5,13,0,0,1095,1096,5,14,0,0,1096,1097,3,176,
		88,0,1097,165,1,0,0,0,1098,1099,5,56,0,0,1099,1100,5,99,0,0,1100,167,1,
		0,0,0,1101,1102,5,56,0,0,1102,1103,5,3,0,0,1103,1104,7,8,0,0,1104,169,
		1,0,0,0,1105,1106,5,56,0,0,1106,1107,5,98,0,0,1107,171,1,0,0,0,1108,1109,
		5,56,0,0,1109,1110,5,57,0,0,1110,1111,5,58,0,0,1111,173,1,0,0,0,1112,1113,
		5,56,0,0,1113,1114,5,59,0,0,1114,1115,5,60,0,0,1115,175,1,0,0,0,1116,1120,
		5,61,0,0,1117,1118,5,59,0,0,1118,1120,5,60,0,0,1119,1116,1,0,0,0,1119,
		1117,1,0,0,0,1120,177,1,0,0,0,1121,1122,5,62,0,0,1122,1123,3,280,140,0,
		1123,179,1,0,0,0,1124,1126,7,3,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,
		1126,1127,1,0,0,0,1127,1128,5,62,0,0,1128,1129,3,280,140,0,1129,181,1,
		0,0,0,1130,1131,3,178,89,0,1131,183,1,0,0,0,1132,1133,3,178,89,0,1133,
		185,1,0,0,0,1134,1135,3,178,89,0,1135,187,1,0,0,0,1136,1139,3,178,89,0,
		1137,1139,3,190,95,0,1138,1136,1,0,0,0,1138,1137,1,0,0,0,1139,189,1,0,
		0,0,1140,1141,3,280,140,0,1141,191,1,0,0,0,1142,1145,3,178,89,0,1143,1145,
		3,142,71,0,1144,1142,1,0,0,0,1144,1143,1,0,0,0,1145,193,1,0,0,0,1146,1149,
		3,178,89,0,1147,1149,3,142,71,0,1148,1146,1,0,0,0,1148,1147,1,0,0,0,1149,
		195,1,0,0,0,1150,1153,3,178,89,0,1151,1153,3,142,71,0,1152,1150,1,0,0,
		0,1152,1151,1,0,0,0,1153,197,1,0,0,0,1154,1157,3,178,89,0,1155,1157,3,
		142,71,0,1156,1154,1,0,0,0,1156,1155,1,0,0,0,1157,199,1,0,0,0,1158,1161,
		3,178,89,0,1159,1161,3,142,71,0,1160,1158,1,0,0,0,1160,1159,1,0,0,0,1161,
		201,1,0,0,0,1162,1165,3,178,89,0,1163,1165,3,142,71,0,1164,1162,1,0,0,
		0,1164,1163,1,0,0,0,1165,203,1,0,0,0,1166,1169,3,178,89,0,1167,1169,3,
		142,71,0,1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,205,1,0,0,0,1170,1173,
		3,178,89,0,1171,1173,3,142,71,0,1172,1170,1,0,0,0,1172,1171,1,0,0,0,1173,
		207,1,0,0,0,1174,1175,5,63,0,0,1175,1179,5,61,0,0,1176,1177,5,19,0,0,1177,
		1179,3,178,89,0,1178,1174,1,0,0,0,1178,1176,1,0,0,0,1179,209,1,0,0,0,1180,
		1181,5,8,0,0,1181,1182,5,64,0,0,1182,1183,5,19,0,0,1183,1184,3,142,71,
		0,1184,1185,5,9,0,0,1185,1188,3,222,111,0,1186,1187,5,18,0,0,1187,1189,
		3,216,108,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,211,1,0,0,0,1190,
		1191,5,6,0,0,1191,1192,5,64,0,0,1192,1193,7,0,0,0,1193,1194,3,142,71,0,
		1194,1195,5,7,0,0,1195,1198,3,198,99,0,1196,1197,5,18,0,0,1197,1199,3,
		216,108,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,213,1,0,0,0,1200,1201,
		5,10,0,0,1201,1202,5,64,0,0,1202,1203,7,0,0,0,1203,1206,3,142,71,0,1204,
		1205,5,18,0,0,1205,1207,3,216,108,0,1206,1204,1,0,0,0,1206,1207,1,0,0,
		0,1207,215,1,0,0,0,1208,1211,3,218,109,0,1209,1210,7,4,0,0,1210,1212,3,
		216,108,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,217,1,0,0,0,1213,1216,
		3,220,110,0,1214,1215,7,4,0,0,1215,1217,3,218,109,0,1216,1214,1,0,0,0,
		1216,1217,1,0,0,0,1217,1235,1,0,0,0,1218,1219,5,4,0,0,1219,1222,3,220,
		110,0,1220,1221,7,4,0,0,1221,1223,3,218,109,0,1222,1220,1,0,0,0,1222,1223,
		1,0,0,0,1223,1224,1,0,0,0,1224,1225,5,5,0,0,1225,1235,1,0,0,0,1226,1227,
		5,4,0,0,1227,1230,3,218,109,0,1228,1229,7,4,0,0,1229,1231,3,218,109,0,
		1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,1232,1,0,0,0,1232,1233,5,5,0,
		0,1233,1235,1,0,0,0,1234,1213,1,0,0,0,1234,1218,1,0,0,0,1234,1226,1,0,
		0,0,1235,219,1,0,0,0,1236,1237,5,99,0,0,1237,1238,7,5,0,0,1238,1284,3,
		32,16,0,1239,1241,5,99,0,0,1240,1242,5,37,0,0,1241,1240,1,0,0,0,1241,1242,
		1,0,0,0,1242,1243,1,0,0,0,1243,1244,5,19,0,0,1244,1245,5,4,0,0,1245,1246,
		3,34,17,0,1246,1247,5,5,0,0,1247,1284,1,0,0,0,1248,1253,5,99,0,0,1249,
		1254,5,38,0,0,1250,1251,5,39,0,0,1251,1252,5,37,0,0,1252,1254,5,40,0,0,
		1253,1249,1,0,0,0,1253,1250,1,0,0,0,1254,1256,1,0,0,0,1255,1257,5,41,0,
		0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1284,3,32,
		16,0,1259,1261,5,99,0,0,1260,1262,5,37,0,0,1261,1260,1,0,0,0,1261,1262,
		1,0,0,0,1262,1263,1,0,0,0,1263,1264,5,42,0,0,1264,1284,3,32,16,0,1265,
		1270,5,99,0,0,1266,1271,5,43,0,0,1267,1268,5,39,0,0,1268,1269,5,37,0,0,
		1269,1271,5,44,0,0,1270,1266,1,0,0,0,1270,1267,1,0,0,0,1271,1272,1,0,0,
		0,1272,1273,5,45,0,0,1273,1284,3,32,16,0,1274,1279,5,99,0,0,1275,1280,
		5,46,0,0,1276,1277,5,39,0,0,1277,1278,5,37,0,0,1278,1280,5,47,0,0,1279,
		1275,1,0,0,0,1279,1276,1,0,0,0,1280,1281,1,0,0,0,1281,1282,5,45,0,0,1282,
		1284,3,32,16,0,1283,1236,1,0,0,0,1283,1239,1,0,0,0,1283,1248,1,0,0,0,1283,
		1259,1,0,0,0,1283,1265,1,0,0,0,1283,1274,1,0,0,0,1284,221,1,0,0,0,1285,
		1288,3,224,112,0,1286,1287,5,11,0,0,1287,1289,3,222,111,0,1288,1286,1,
		0,0,0,1288,1289,1,0,0,0,1289,223,1,0,0,0,1290,1291,5,99,0,0,1291,1292,
		5,12,0,0,1292,1293,3,32,16,0,1293,225,1,0,0,0,1294,1297,3,228,114,0,1295,
		1296,5,11,0,0,1296,1298,3,226,113,0,1297,1295,1,0,0,0,1297,1298,1,0,0,
		0,1298,227,1,0,0,0,1299,1302,7,9,0,0,1300,1301,7,10,0,0,1301,1303,3,228,
		114,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,229,1,0,0,0,1304,1306,5,
		68,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,1308,
		7,11,0,0,1308,231,1,0,0,0,1309,1310,5,72,0,0,1310,1311,5,100,0,0,1311,
		233,1,0,0,0,1312,1316,3,236,118,0,1313,1316,3,238,119,0,1314,1316,3,240,
		120,0,1315,1312,1,0,0,0,1315,1313,1,0,0,0,1315,1314,1,0,0,0,1316,235,1,
		0,0,0,1317,1318,5,73,0,0,1318,1319,3,138,69,0,1319,1320,5,34,0,0,1320,
		1321,3,138,69,0,1321,237,1,0,0,0,1322,1323,5,73,0,0,1323,1324,3,144,72,
		0,1324,1325,5,34,0,0,1325,1326,3,144,72,0,1326,239,1,0,0,0,1327,1328,5,
		73,0,0,1328,1329,5,74,0,0,1329,1330,5,64,0,0,1330,1331,5,19,0,0,1331,1332,
		3,138,69,0,1332,1333,5,34,0,0,1333,1334,3,138,69,0,1334,241,1,0,0,0,1335,
		1336,5,6,0,0,1336,1339,5,75,0,0,1337,1338,5,45,0,0,1338,1340,5,76,0,0,
		1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1342,7,0,0,
		0,1342,1343,3,204,102,0,1343,1344,5,7,0,0,1344,1347,3,206,103,0,1345,1346,
		5,18,0,0,1346,1348,3,250,125,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,
		243,1,0,0,0,1349,1350,5,77,0,0,1350,1351,5,75,0,0,1351,1352,7,0,0,0,1352,
		1355,3,142,71,0,1353,1354,5,18,0,0,1354,1356,3,250,125,0,1355,1353,1,0,
		0,0,1355,1356,1,0,0,0,1356,245,1,0,0,0,1357,1358,5,78,0,0,1358,1359,5,
		75,0,0,1359,1360,7,0,0,0,1360,1363,3,142,71,0,1361,1362,5,18,0,0,1362,
		1364,3,250,125,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,247,1,0,0,0,
		1365,1366,5,10,0,0,1366,1367,5,75,0,0,1367,1368,7,0,0,0,1368,1371,3,142,
		71,0,1369,1370,5,18,0,0,1370,1372,3,250,125,0,1371,1369,1,0,0,0,1371,1372,
		1,0,0,0,1372,249,1,0,0,0,1373,1376,3,252,126,0,1374,1375,7,4,0,0,1375,
		1377,3,250,125,0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,251,1,0,0,0,
		1378,1381,3,254,127,0,1379,1380,7,4,0,0,1380,1382,3,252,126,0,1381,1379,
		1,0,0,0,1381,1382,1,0,0,0,1382,1400,1,0,0,0,1383,1384,5,4,0,0,1384,1387,
		3,254,127,0,1385,1386,7,4,0,0,1386,1388,3,252,126,0,1387,1385,1,0,0,0,
		1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1390,5,5,0,0,1390,1400,1,0,0,
		0,1391,1392,5,4,0,0,1392,1395,3,252,126,0,1393,1394,7,4,0,0,1394,1396,
		3,252,126,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,
		1398,5,5,0,0,1398,1400,1,0,0,0,1399,1378,1,0,0,0,1399,1383,1,0,0,0,1399,
		1391,1,0,0,0,1400,253,1,0,0,0,1401,1402,5,99,0,0,1402,1403,7,5,0,0,1403,
		1604,3,32,16,0,1404,1406,5,99,0,0,1405,1407,5,37,0,0,1406,1405,1,0,0,0,
		1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,5,19,0,0,1409,1410,5,4,0,
		0,1410,1411,3,34,17,0,1411,1412,5,5,0,0,1412,1604,1,0,0,0,1413,1418,5,
		99,0,0,1414,1419,5,38,0,0,1415,1416,5,39,0,0,1416,1417,5,37,0,0,1417,1419,
		5,40,0,0,1418,1414,1,0,0,0,1418,1415,1,0,0,0,1419,1421,1,0,0,0,1420,1422,
		5,41,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,1604,
		3,32,16,0,1424,1426,5,99,0,0,1425,1427,5,37,0,0,1426,1425,1,0,0,0,1426,
		1427,1,0,0,0,1427,1428,1,0,0,0,1428,1429,5,42,0,0,1429,1604,3,32,16,0,
		1430,1435,5,99,0,0,1431,1436,5,43,0,0,1432,1433,5,39,0,0,1433,1434,5,37,
		0,0,1434,1436,5,44,0,0,1435,1431,1,0,0,0,1435,1432,1,0,0,0,1436,1437,1,
		0,0,0,1437,1438,5,45,0,0,1438,1604,3,32,16,0,1439,1444,5,99,0,0,1440,1445,
		5,46,0,0,1441,1442,5,39,0,0,1442,1443,5,37,0,0,1443,1445,5,47,0,0,1444,
		1440,1,0,0,0,1444,1441,1,0,0,0,1445,1446,1,0,0,0,1446,1447,5,45,0,0,1447,
		1604,3,32,16,0,1448,1449,5,99,0,0,1449,1451,5,79,0,0,1450,1452,5,37,0,
		0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,1453,1604,5,80,
		0,0,1454,1455,5,99,0,0,1455,1457,5,79,0,0,1456,1458,5,37,0,0,1457,1456,
		1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1604,5,81,0,0,1460,1462,
		5,82,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1469,
		5,83,0,0,1464,1466,5,74,0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,
		1,0,0,0,1467,1469,5,84,0,0,1468,1461,1,0,0,0,1468,1465,1,0,0,0,1469,1470,
		1,0,0,0,1470,1471,7,5,0,0,1471,1604,3,32,16,0,1472,1474,5,82,0,0,1473,
		1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1481,5,83,0,0,1476,
		1478,5,74,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
		1481,5,84,0,0,1480,1473,1,0,0,0,1480,1477,1,0,0,0,1481,1483,1,0,0,0,1482,
		1484,5,37,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,
		1486,5,19,0,0,1486,1487,5,4,0,0,1487,1488,3,34,17,0,1488,1489,5,5,0,0,
		1489,1604,1,0,0,0,1490,1492,5,82,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,
		0,1492,1493,1,0,0,0,1493,1498,5,83,0,0,1494,1499,5,38,0,0,1495,1496,5,
		39,0,0,1496,1497,5,37,0,0,1497,1499,5,40,0,0,1498,1494,1,0,0,0,1498,1495,
		1,0,0,0,1499,1501,1,0,0,0,1500,1502,5,41,0,0,1501,1500,1,0,0,0,1501,1502,
		1,0,0,0,1502,1503,1,0,0,0,1503,1604,3,32,16,0,1504,1506,5,82,0,0,1505,
		1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1512,5,83,0,0,1508,
		1513,5,43,0,0,1509,1510,5,39,0,0,1510,1511,5,37,0,0,1511,1513,5,44,0,0,
		1512,1508,1,0,0,0,1512,1509,1,0,0,0,1513,1514,1,0,0,0,1514,1515,5,45,0,
		0,1515,1604,3,32,16,0,1516,1518,5,82,0,0,1517,1516,1,0,0,0,1517,1518,1,
		0,0,0,1518,1519,1,0,0,0,1519,1524,5,83,0,0,1520,1525,5,46,0,0,1521,1522,
		5,39,0,0,1522,1523,5,37,0,0,1523,1525,5,47,0,0,1524,1520,1,0,0,0,1524,
		1521,1,0,0,0,1525,1526,1,0,0,0,1526,1527,5,45,0,0,1527,1604,3,32,16,0,
		1528,1530,5,74,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,1531,1,0,0,
		0,1531,1536,5,84,0,0,1532,1537,5,40,0,0,1533,1534,5,85,0,0,1534,1535,5,
		37,0,0,1535,1537,5,40,0,0,1536,1532,1,0,0,0,1536,1533,1,0,0,0,1537,1539,
		1,0,0,0,1538,1540,5,41,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,
		1,0,0,0,1541,1604,3,32,16,0,1542,1544,5,74,0,0,1543,1542,1,0,0,0,1543,
		1544,1,0,0,0,1544,1545,1,0,0,0,1545,1550,5,84,0,0,1546,1551,5,44,0,0,1547,
		1548,5,85,0,0,1548,1549,5,37,0,0,1549,1551,5,44,0,0,1550,1546,1,0,0,0,
		1550,1547,1,0,0,0,1551,1552,1,0,0,0,1552,1553,5,45,0,0,1553,1604,3,32,
		16,0,1554,1556,5,74,0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,
		1,0,0,0,1557,1562,5,84,0,0,1558,1563,5,47,0,0,1559,1560,5,85,0,0,1560,
		1561,5,37,0,0,1561,1563,5,47,0,0,1562,1558,1,0,0,0,1562,1559,1,0,0,0,1563,
		1564,1,0,0,0,1564,1565,5,45,0,0,1565,1604,3,32,16,0,1566,1568,5,82,0,0,
		1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1575,5,83,0,
		0,1570,1572,5,74,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,
		0,0,1573,1575,5,84,0,0,1574,1567,1,0,0,0,1574,1571,1,0,0,0,1575,1577,1,
		0,0,0,1576,1578,5,37,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,
		1,0,0,0,1579,1580,5,19,0,0,1580,1581,5,4,0,0,1581,1582,3,34,17,0,1582,
		1583,5,5,0,0,1583,1604,1,0,0,0,1584,1586,5,82,0,0,1585,1584,1,0,0,0,1585,
		1586,1,0,0,0,1586,1587,1,0,0,0,1587,1593,5,83,0,0,1588,1590,5,74,0,0,1589,
		1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1593,5,84,0,0,1592,
		1585,1,0,0,0,1592,1589,1,0,0,0,1593,1595,1,0,0,0,1594,1596,5,37,0,0,1595,
		1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1598,5,42,0,0,1598,
		1604,3,32,16,0,1599,1600,5,86,0,0,1600,1604,5,84,0,0,1601,1602,5,82,0,
		0,1602,1604,5,84,0,0,1603,1401,1,0,0,0,1603,1404,1,0,0,0,1603,1413,1,0,
		0,0,1603,1424,1,0,0,0,1603,1430,1,0,0,0,1603,1439,1,0,0,0,1603,1448,1,
		0,0,0,1603,1454,1,0,0,0,1603,1468,1,0,0,0,1603,1480,1,0,0,0,1603,1491,
		1,0,0,0,1603,1505,1,0,0,0,1603,1517,1,0,0,0,1603,1529,1,0,0,0,1603,1543,
		1,0,0,0,1603,1555,1,0,0,0,1603,1574,1,0,0,0,1603,1592,1,0,0,0,1603,1599,
		1,0,0,0,1603,1601,1,0,0,0,1604,255,1,0,0,0,1605,1606,7,12,0,0,1606,257,
		1,0,0,0,1607,1610,3,256,128,0,1608,1609,5,11,0,0,1609,1611,3,258,129,0,
		1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,259,1,0,0,0,1612,1613,5,6,0,0,
		1613,1614,5,87,0,0,1614,1615,7,0,0,0,1615,1616,3,142,71,0,1616,1617,5,
		7,0,0,1617,1620,3,142,71,0,1618,1619,5,18,0,0,1619,1621,3,272,136,0,1620,
		1618,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1624,3,268,134,0,
		1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,261,1,0,0,0,1625,1626,5,8,0,0,
		1626,1627,5,87,0,0,1627,1628,7,0,0,0,1628,1629,3,142,71,0,1629,1630,5,
		9,0,0,1630,1633,3,62,31,0,1631,1632,5,18,0,0,1632,1634,3,272,136,0,1633,
		1631,1,0,0,0,1633,1634,1,0,0,0,1634,263,1,0,0,0,1635,1636,5,10,0,0,1636,
		1637,5,87,0,0,1637,1638,7,0,0,0,1638,1641,3,142,71,0,1639,1640,5,18,0,
		0,1640,1642,3,272,136,0,1641,1639,1,0,0,0,1641,1642,1,0,0,0,1642,265,1,
		0,0,0,1643,1644,5,6,0,0,1644,1645,5,87,0,0,1645,1646,7,0,0,0,1646,1647,
		3,142,71,0,1647,1648,5,7,0,0,1648,1651,3,142,71,0,1649,1650,5,18,0,0,1650,
		1652,3,272,136,0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,267,1,0,0,0,
		1653,1656,3,270,135,0,1654,1655,5,11,0,0,1655,1657,3,268,134,0,1656,1654,
		1,0,0,0,1656,1657,1,0,0,0,1657,269,1,0,0,0,1658,1659,5,28,0,0,1659,1663,
		7,2,0,0,1660,1661,5,88,0,0,1661,1663,5,26,0,0,1662,1658,1,0,0,0,1662,1660,
		1,0,0,0,1663,271,1,0,0,0,1664,1667,3,274,137,0,1665,1666,7,4,0,0,1666,
		1668,3,272,136,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,273,1,0,0,0,
		1669,1672,3,276,138,0,1670,1671,7,4,0,0,1671,1673,3,274,137,0,1672,1670,
		1,0,0,0,1672,1673,1,0,0,0,1673,1691,1,0,0,0,1674,1675,5,4,0,0,1675,1678,
		3,276,138,0,1676,1677,7,4,0,0,1677,1679,3,274,137,0,1678,1676,1,0,0,0,
		1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,1681,5,5,0,0,1681,1691,1,0,0,
		0,1682,1683,5,4,0,0,1683,1686,3,274,137,0,1684,1685,7,4,0,0,1685,1687,
		3,274,137,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,
		1689,5,5,0,0,1689,1691,1,0,0,0,1690,1669,1,0,0,0,1690,1674,1,0,0,0,1690,
		1682,1,0,0,0,1691,275,1,0,0,0,1692,1693,5,99,0,0,1693,1694,7,5,0,0,1694,
		1740,3,32,16,0,1695,1697,5,99,0,0,1696,1698,5,37,0,0,1697,1696,1,0,0,0,
		1697,1698,1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,19,0,0,1700,1701,5,4,0,
		0,1701,1702,3,34,17,0,1702,1703,5,5,0,0,1703,1740,1,0,0,0,1704,1709,5,
		99,0,0,1705,1710,5,38,0,0,1706,1707,5,39,0,0,1707,1708,5,37,0,0,1708,1710,
		5,40,0,0,1709,1705,1,0,0,0,1709,1706,1,0,0,0,1710,1712,1,0,0,0,1711,1713,
		5,41,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1740,
		3,256,128,0,1715,1717,5,99,0,0,1716,1718,5,37,0,0,1717,1716,1,0,0,0,1717,
		1718,1,0,0,0,1718,1719,1,0,0,0,1719,1720,5,42,0,0,1720,1740,3,280,140,
		0,1721,1726,5,99,0,0,1722,1727,5,43,0,0,1723,1724,5,39,0,0,1724,1725,5,
		37,0,0,1725,1727,5,44,0,0,1726,1722,1,0,0,0,1726,1723,1,0,0,0,1727,1728,
		1,0,0,0,1728,1729,5,45,0,0,1729,1740,3,280,140,0,1730,1735,5,99,0,0,1731,
		1736,5,46,0,0,1732,1733,5,39,0,0,1733,1734,5,37,0,0,1734,1736,5,47,0,0,
		1735,1731,1,0,0,0,1735,1732,1,0,0,0,1736,1737,1,0,0,0,1737,1738,5,45,0,
		0,1738,1740,3,280,140,0,1739,1692,1,0,0,0,1739,1695,1,0,0,0,1739,1704,
		1,0,0,0,1739,1715,1,0,0,0,1739,1721,1,0,0,0,1739,1730,1,0,0,0,1740,277,
		1,0,0,0,1741,1744,3,280,140,0,1742,1743,5,11,0,0,1743,1745,3,278,139,0,
		1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,279,1,0,0,0,1746,1751,5,98,0,
		0,1747,1751,5,99,0,0,1748,1751,3,282,141,0,1749,1751,3,284,142,0,1750,
		1746,1,0,0,0,1750,1747,1,0,0,0,1750,1748,1,0,0,0,1750,1749,1,0,0,0,1751,
		1754,1,0,0,0,1752,1753,5,65,0,0,1753,1755,3,280,140,0,1754,1752,1,0,0,
		0,1754,1755,1,0,0,0,1755,1776,1,0,0,0,1756,1760,5,4,0,0,1757,1761,5,98,
		0,0,1758,1761,5,99,0,0,1759,1761,3,282,141,0,1760,1757,1,0,0,0,1760,1758,
		1,0,0,0,1760,1759,1,0,0,0,1761,1764,1,0,0,0,1762,1763,5,65,0,0,1763,1765,
		3,280,140,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1766,1,0,0,0,1766,
		1776,5,5,0,0,1767,1768,5,4,0,0,1768,1771,3,280,140,0,1769,1770,5,65,0,
		0,1770,1772,3,280,140,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,1773,
		1,0,0,0,1773,1774,5,5,0,0,1774,1776,1,0,0,0,1775,1750,1,0,0,0,1775,1756,
		1,0,0,0,1775,1767,1,0,0,0,1776,281,1,0,0,0,1777,1778,5,99,0,0,1778,1779,
		5,89,0,0,1779,1780,3,280,140,0,1780,1781,5,90,0,0,1781,283,1,0,0,0,1782,
		1783,5,99,0,0,1783,1785,5,4,0,0,1784,1786,3,286,143,0,1785,1784,1,0,0,
		0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1788,5,5,0,0,1788,285,1,0,0,
		0,1789,1792,3,288,144,0,1790,1791,5,11,0,0,1791,1793,3,286,143,0,1792,
		1790,1,0,0,0,1792,1793,1,0,0,0,1793,287,1,0,0,0,1794,1795,5,99,0,0,1795,
		1797,5,12,0,0,1796,1794,1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,1798,
		1799,3,280,140,0,1799,289,1,0,0,0,1800,1803,3,292,146,0,1801,1802,7,4,
		0,0,1802,1804,3,290,145,0,1803,1801,1,0,0,0,1803,1804,1,0,0,0,1804,291,
		1,0,0,0,1805,1808,3,294,147,0,1806,1807,7,4,0,0,1807,1809,3,292,146,0,
		1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,1827,1,0,0,0,1810,1811,5,4,0,
		0,1811,1814,3,294,147,0,1812,1813,7,4,0,0,1813,1815,3,292,146,0,1814,1812,
		1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,5,0,0,1817,1827,
		1,0,0,0,1818,1819,5,4,0,0,1819,1822,3,292,146,0,1820,1821,7,4,0,0,1821,
		1823,3,292,146,0,1822,1820,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,
		1824,1825,5,5,0,0,1825,1827,1,0,0,0,1826,1805,1,0,0,0,1826,1810,1,0,0,
		0,1826,1818,1,0,0,0,1827,293,1,0,0,0,1828,1829,5,99,0,0,1829,1830,7,5,
		0,0,1830,1894,3,32,16,0,1831,1833,5,99,0,0,1832,1834,5,37,0,0,1833,1832,
		1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,19,0,0,1836,1837,
		5,4,0,0,1837,1838,3,34,17,0,1838,1839,5,5,0,0,1839,1894,1,0,0,0,1840,1845,
		5,99,0,0,1841,1846,5,38,0,0,1842,1843,5,39,0,0,1843,1844,5,37,0,0,1844,
		1846,5,40,0,0,1845,1841,1,0,0,0,1845,1842,1,0,0,0,1846,1848,1,0,0,0,1847,
		1849,5,41,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,
		1894,3,32,16,0,1851,1853,5,99,0,0,1852,1854,5,37,0,0,1853,1852,1,0,0,0,
		1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,1856,5,42,0,0,1856,1894,3,32,
		16,0,1857,1862,5,99,0,0,1858,1863,5,43,0,0,1859,1860,5,39,0,0,1860,1861,
		5,37,0,0,1861,1863,5,44,0,0,1862,1858,1,0,0,0,1862,1859,1,0,0,0,1863,1864,
		1,0,0,0,1864,1865,5,45,0,0,1865,1894,3,32,16,0,1866,1871,5,99,0,0,1867,
		1872,5,46,0,0,1868,1869,5,39,0,0,1869,1870,5,37,0,0,1870,1872,5,47,0,0,
		1871,1867,1,0,0,0,1871,1868,1,0,0,0,1872,1873,1,0,0,0,1873,1874,5,45,0,
		0,1874,1894,3,32,16,0,1875,1876,5,99,0,0,1876,1878,5,79,0,0,1877,1879,
		5,37,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1894,
		5,80,0,0,1881,1882,5,99,0,0,1882,1884,5,79,0,0,1883,1885,5,37,0,0,1884,
		1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,1894,5,81,0,0,1887,
		1888,5,99,0,0,1888,1890,5,79,0,0,1889,1891,5,37,0,0,1890,1889,1,0,0,0,
		1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1894,5,91,0,0,1893,1828,1,0,0,
		0,1893,1831,1,0,0,0,1893,1840,1,0,0,0,1893,1851,1,0,0,0,1893,1857,1,0,
		0,0,1893,1866,1,0,0,0,1893,1875,1,0,0,0,1893,1881,1,0,0,0,1893,1887,1,
		0,0,0,1894,295,1,0,0,0,1895,1898,3,178,89,0,1896,1898,3,142,71,0,1897,
		1895,1,0,0,0,1897,1896,1,0,0,0,1898,297,1,0,0,0,1899,1902,3,178,89,0,1900,
		1902,3,142,71,0,1901,1899,1,0,0,0,1901,1900,1,0,0,0,1902,299,1,0,0,0,1903,
		1906,3,178,89,0,1904,1906,3,142,71,0,1905,1903,1,0,0,0,1905,1904,1,0,0,
		0,1906,301,1,0,0,0,1907,1910,3,178,89,0,1908,1910,3,142,71,0,1909,1907,
		1,0,0,0,1909,1908,1,0,0,0,1910,303,1,0,0,0,1911,1912,5,92,0,0,1912,1913,
		7,8,0,0,1913,305,1,0,0,0,1914,1915,5,93,0,0,1915,1916,5,4,0,0,1916,1917,
		3,364,182,0,1917,1918,5,19,0,0,1918,1919,3,308,154,0,1919,1920,5,5,0,0,
		1920,1921,3,52,26,0,1921,1931,1,0,0,0,1922,1923,5,93,0,0,1923,1924,5,4,
		0,0,1924,1925,3,362,181,0,1925,1926,5,19,0,0,1926,1927,3,310,155,0,1927,
		1928,5,5,0,0,1928,1929,3,52,26,0,1929,1931,1,0,0,0,1930,1914,1,0,0,0,1930,
		1922,1,0,0,0,1931,307,1,0,0,0,1932,1941,3,312,156,0,1933,1941,3,316,158,
		0,1934,1941,3,320,160,0,1935,1941,3,324,162,0,1936,1941,3,328,164,0,1937,
		1941,3,332,166,0,1938,1941,3,336,168,0,1939,1941,3,340,170,0,1940,1932,
		1,0,0,0,1940,1933,1,0,0,0,1940,1934,1,0,0,0,1940,1935,1,0,0,0,1940,1936,
		1,0,0,0,1940,1937,1,0,0,0,1940,1938,1,0,0,0,1940,1939,1,0,0,0,1941,309,
		1,0,0,0,1942,1951,3,314,157,0,1943,1951,3,318,159,0,1944,1951,3,322,161,
		0,1945,1951,3,326,163,0,1946,1951,3,330,165,0,1947,1951,3,334,167,0,1948,
		1951,3,338,169,0,1949,1951,3,342,171,0,1950,1942,1,0,0,0,1950,1943,1,0,
		0,0,1950,1944,1,0,0,0,1950,1945,1,0,0,0,1950,1946,1,0,0,0,1950,1947,1,
		0,0,0,1950,1948,1,0,0,0,1950,1949,1,0,0,0,1951,311,1,0,0,0,1952,1956,3,
		178,89,0,1953,1956,3,352,176,0,1954,1956,5,13,0,0,1955,1952,1,0,0,0,1955,
		1953,1,0,0,0,1955,1954,1,0,0,0,1956,1959,1,0,0,0,1957,1958,5,18,0,0,1958,
		1960,3,290,145,0,1959,1957,1,0,0,0,1959,1960,1,0,0,0,1960,313,1,0,0,0,
		1961,1964,3,352,176,0,1962,1964,5,13,0,0,1963,1961,1,0,0,0,1963,1962,1,
		0,0,0,1964,1967,1,0,0,0,1965,1966,5,18,0,0,1966,1968,3,290,145,0,1967,
		1965,1,0,0,0,1967,1968,1,0,0,0,1968,315,1,0,0,0,1969,1973,3,178,89,0,1970,
		1973,3,354,177,0,1971,1973,3,142,71,0,1972,1969,1,0,0,0,1972,1970,1,0,
		0,0,1972,1971,1,0,0,0,1973,1976,1,0,0,0,1974,1975,5,18,0,0,1975,1977,3,
		216,108,0,1976,1974,1,0,0,0,1976,1977,1,0,0,0,1977,317,1,0,0,0,1978,1983,
		3,354,177,0,1979,1980,5,64,0,0,1980,1981,5,19,0,0,1981,1983,3,138,69,0,
		1982,1978,1,0,0,0,1982,1979,1,0,0,0,1983,1986,1,0,0,0,1984,1985,5,18,0,
		0,1985,1987,3,216,108,0,1986,1984,1,0,0,0,1986,1987,1,0,0,0,1987,319,1,
		0,0,0,1988,1992,3,178,89,0,1989,1992,3,356,178,0,1990,1992,3,142,71,0,
		1991,1988,1,0,0,0,1991,1989,1,0,0,0,1991,1990,1,0,0,0,1992,1995,1,0,0,
		0,1993,1994,5,18,0,0,1994,1996,3,272,136,0,1995,1993,1,0,0,0,1995,1996,
		1,0,0,0,1996,321,1,0,0,0,1997,2002,3,356,178,0,1998,1999,5,87,0,0,1999,
		2000,5,19,0,0,2000,2002,3,138,69,0,2001,1997,1,0,0,0,2001,1998,1,0,0,0,
		2002,2005,1,0,0,0,2003,2004,5,18,0,0,2004,2006,3,272,136,0,2005,2003,1,
		0,0,0,2005,2006,1,0,0,0,2006,323,1,0,0,0,2007,2011,3,178,89,0,2008,2011,
		3,358,179,0,2009,2011,3,350,175,0,2010,2007,1,0,0,0,2010,2008,1,0,0,0,
		2010,2009,1,0,0,0,2011,2014,1,0,0,0,2012,2013,5,18,0,0,2013,2015,3,106,
		53,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,2015,325,1,0,0,0,2016,2019,3,
		358,179,0,2017,2019,3,350,175,0,2018,2016,1,0,0,0,2018,2017,1,0,0,0,2019,
		2022,1,0,0,0,2020,2021,5,18,0,0,2021,2023,3,106,53,0,2022,2020,1,0,0,0,
		2022,2023,1,0,0,0,2023,327,1,0,0,0,2024,2028,3,178,89,0,2025,2028,3,360,
		180,0,2026,2028,3,138,69,0,2027,2024,1,0,0,0,2027,2025,1,0,0,0,2027,2026,
		1,0,0,0,2028,2031,1,0,0,0,2029,2030,5,18,0,0,2030,2032,3,250,125,0,2031,
		2029,1,0,0,0,2031,2032,1,0,0,0,2032,329,1,0,0,0,2033,2038,3,360,180,0,
		2034,2035,5,75,0,0,2035,2036,5,19,0,0,2036,2038,3,138,69,0,2037,2033,1,
		0,0,0,2037,2034,1,0,0,0,2038,2041,1,0,0,0,2039,2040,5,18,0,0,2040,2042,
		3,250,125,0,2041,2039,1,0,0,0,2041,2042,1,0,0,0,2042,331,1,0,0,0,2043,
		2048,3,178,89,0,2044,2045,5,54,0,0,2045,2048,3,178,89,0,2046,2048,3,344,
		172,0,2047,2043,1,0,0,0,2047,2044,1,0,0,0,2047,2046,1,0,0,0,2048,333,1,
		0,0,0,2049,2050,5,54,0,0,2050,2053,3,178,89,0,2051,2053,3,344,172,0,2052,
		2049,1,0,0,0,2052,2051,1,0,0,0,2053,335,1,0,0,0,2054,2059,3,178,89,0,2055,
		2056,5,41,0,0,2056,2059,3,178,89,0,2057,2059,3,346,173,0,2058,2054,1,0,
		0,0,2058,2055,1,0,0,0,2058,2057,1,0,0,0,2059,337,1,0,0,0,2060,2061,5,41,
		0,0,2061,2064,3,178,89,0,2062,2064,3,346,173,0,2063,2060,1,0,0,0,2063,
		2062,1,0,0,0,2064,339,1,0,0,0,2065,2070,3,178,89,0,2066,2067,5,94,0,0,
		2067,2070,3,178,89,0,2068,2070,3,348,174,0,2069,2065,1,0,0,0,2069,2066,
		1,0,0,0,2069,2068,1,0,0,0,2070,341,1,0,0,0,2071,2072,5,94,0,0,2072,2075,
		3,178,89,0,2073,2075,3,348,174,0,2074,2071,1,0,0,0,2074,2073,1,0,0,0,2075,
		343,1,0,0,0,2076,2078,5,89,0,0,2077,2079,3,278,139,0,2078,2077,1,0,0,0,
		2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2081,5,90,0,0,2081,345,1,0,0,
		0,2082,2084,5,89,0,0,2083,2085,3,258,129,0,2084,2083,1,0,0,0,2084,2085,
		1,0,0,0,2085,2086,1,0,0,0,2086,2087,5,90,0,0,2087,347,1,0,0,0,2088,2090,
		5,89,0,0,2089,2091,3,226,113,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,
		2092,1,0,0,0,2092,2093,5,90,0,0,2093,349,1,0,0,0,2094,2097,3,150,75,0,
		2095,2097,3,152,76,0,2096,2094,1,0,0,0,2096,2095,1,0,0,0,2097,351,1,0,
		0,0,2098,2099,5,3,0,0,2099,2100,3,178,89,0,2100,353,1,0,0,0,2101,2102,
		5,20,0,0,2102,2103,3,178,89,0,2103,355,1,0,0,0,2104,2105,5,23,0,0,2105,
		2106,3,178,89,0,2106,357,1,0,0,0,2107,2108,5,95,0,0,2108,2109,3,178,89,
		0,2109,359,1,0,0,0,2110,2111,5,55,0,0,2111,2112,3,178,89,0,2112,361,1,
		0,0,0,2113,2114,5,53,0,0,2114,2115,5,99,0,0,2115,363,1,0,0,0,2116,2125,
		3,366,183,0,2117,2125,3,368,184,0,2118,2125,3,370,185,0,2119,2125,3,372,
		186,0,2120,2125,3,374,187,0,2121,2125,3,376,188,0,2122,2125,3,378,189,
		0,2123,2125,3,380,190,0,2124,2116,1,0,0,0,2124,2117,1,0,0,0,2124,2118,
		1,0,0,0,2124,2119,1,0,0,0,2124,2120,1,0,0,0,2124,2121,1,0,0,0,2124,2122,
		1,0,0,0,2124,2123,1,0,0,0,2125,365,1,0,0,0,2126,2127,5,3,0,0,2127,2128,
		5,99,0,0,2128,367,1,0,0,0,2129,2130,5,20,0,0,2130,2131,5,99,0,0,2131,369,
		1,0,0,0,2132,2133,5,23,0,0,2133,2134,5,99,0,0,2134,371,1,0,0,0,2135,2136,
		5,23,0,0,2136,2137,5,25,0,0,2137,2138,5,99,0,0,2138,373,1,0,0,0,2139,2140,
		5,55,0,0,2140,2141,5,99,0,0,2141,375,1,0,0,0,2142,2143,5,54,0,0,2143,2144,
		5,99,0,0,2144,377,1,0,0,0,2145,2146,5,41,0,0,2146,2147,5,99,0,0,2147,379,
		1,0,0,0,2148,2149,5,94,0,0,2149,2150,5,99,0,0,2150,381,1,0,0,0,2151,2154,
		3,178,89,0,2152,2154,3,150,75,0,2153,2151,1,0,0,0,2153,2152,1,0,0,0,2154,
		383,1,0,0,0,240,389,510,519,540,550,561,566,570,572,576,584,591,599,604,
		609,614,642,646,651,655,666,671,683,689,697,708,713,736,751,755,766,774,
		778,789,792,803,808,816,824,827,834,839,844,850,858,862,869,881,884,889,
		898,907,911,918,962,964,970,976,982,988,994,1001,1006,1009,1015,1022,1026,
		1032,1035,1042,1047,1054,1057,1063,1071,1091,1119,1125,1138,1144,1148,
		1152,1156,1160,1164,1168,1172,1178,1188,1198,1206,1211,1216,1222,1230,
		1234,1241,1253,1256,1261,1270,1279,1283,1288,1297,1302,1305,1315,1339,
		1347,1355,1363,1371,1376,1381,1387,1395,1399,1406,1418,1421,1426,1435,
		1444,1451,1457,1461,1465,1468,1473,1477,1480,1483,1491,1498,1501,1505,
		1512,1517,1524,1529,1536,1539,1543,1550,1555,1562,1567,1571,1574,1577,
		1585,1589,1592,1595,1603,1610,1620,1623,1633,1641,1651,1656,1662,1667,
		1672,1678,1686,1690,1697,1709,1712,1717,1726,1735,1739,1744,1750,1754,
		1760,1764,1771,1775,1785,1792,1796,1803,1808,1814,1822,1826,1833,1845,
		1848,1853,1862,1871,1878,1884,1890,1893,1897,1901,1905,1909,1930,1940,
		1950,1955,1959,1963,1967,1972,1976,1982,1986,1991,1995,2001,2005,2010,
		2014,2018,2022,2027,2031,2037,2041,2047,2052,2058,2063,2069,2074,2078,
		2084,2090,2096,2124,2153
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
