//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		STATEMENTEND=108, WS=109, STRINGLITERAL=110, VARID=111, INTLITERAL=112, 
		REGEXLITERAL=113, LINE_COMMENT=114, BLOCK_COMMENT=115;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createSpaceStatement = 3, 
		RULE_copySpaceStatement = 4, RULE_updateSpaceStatement = 5, RULE_deleteSpaceStatement = 6, 
		RULE_spaceUpdateList = 7, RULE_spaceUpdate = 8, RULE_copySpacesStatement = 9, 
		RULE_selectSpacesStatement = 10, RULE_selectFieldList = 11, RULE_constrainedSpaceList = 12, 
		RULE_completeSpaceList = 13, RULE_createBlockStatement = 14, RULE_copyBlockStatement = 15, 
		RULE_updateBlockStatement = 16, RULE_deleteBlockStatement = 17, RULE_longOrShortBlockSpec = 18, 
		RULE_shortBlockSpec = 19, RULE_scriptBlockDef = 20, RULE_createDatasourceStatement = 21, 
		RULE_copyDatasourceStatement = 22, RULE_deleteDatasourceStatement = 23, 
		RULE_updateDatasourceStatement = 24, RULE_datasourceUpdateList = 25, RULE_datasourceUpdate = 26, 
		RULE_createDatasourceEntryStatement = 27, RULE_copyDatasourceEntryStatement = 28, 
		RULE_deleteDatasourceEntryStatement = 29, RULE_updateDatasourceEntryStatement = 30, 
		RULE_longOrShortDatasourceEntrySpec = 31, RULE_datasourceEntryFullSpec = 32, 
		RULE_datasourceEntryShortSpec = 33, RULE_datasourceEntryIdentifier = 34, 
		RULE_datasourceEntryOutputLocation = 35, RULE_updateDatasourceEntriesStatement = 36, 
		RULE_deleteDatasourceEntriesStatement = 37, RULE_copyDatasourceEntriesStatement = 38, 
		RULE_syncDatasourceEntriesStatement = 39, RULE_datasourceEntryCopyOptionList = 40, 
		RULE_datasourceEntryCopyOption = 41, RULE_datasourceEntryUpdateList = 42, 
		RULE_datasourceEntryUpdate = 43, RULE_datasourceEntriesSourceLocation = 44, 
		RULE_urlSpec = 45, RULE_datasourceEntriesTargetLocation = 46, RULE_datasourceEntryConstraintExprList = 47, 
		RULE_datasourceEntryConstraintExpr = 48, RULE_datasourceEntryConstraint = 49, 
		RULE_loginStatement = 50, RULE_loginOnlyStatement = 51, RULE_loginWithGlobalUserNameStatement = 52, 
		RULE_loginWithGlobalPasswordStatement = 53, RULE_loginWithGlobalTokenStatement = 54, 
		RULE_loginWithGlobalUserNameAndPasswordStatement = 55, RULE_varStatement = 56, 
		RULE_spaceVarStatement = 57, RULE_blockVarStatement = 58, RULE_stringVarStatement = 59, 
		RULE_regexVarStatement = 60, RULE_storyVarStatement = 61, RULE_datasourceEntryVarStatement = 62, 
		RULE_spaceSpec = 63, RULE_shortSpaceSpec = 64, RULE_longOrShortSpaceSpec = 65, 
		RULE_blockSpec = 66, RULE_storySpec = 67, RULE_datasourceEntrySpec = 68, 
		RULE_datasourceSpec = 69, RULE_datasourceShortSpec = 70, RULE_assignmentStatement = 71, 
		RULE_spaceAssignmentStatement = 72, RULE_blockAssignmentStatement = 73, 
		RULE_stringAssignmentStatement = 74, RULE_printStatement = 75, RULE_printSpacesStatement = 76, 
		RULE_printVarStatement = 77, RULE_printSpaceStatement = 78, RULE_printStringLiteralStatement = 79, 
		RULE_printSymbolTableStatement = 80, RULE_printLocalCacheStatement = 81, 
		RULE_realDataLocation = 82, RULE_fileSpec = 83, RULE_completeFileSpec = 84, 
		RULE_spaceInputLocation = 85, RULE_spaceOutputLocation = 86, RULE_spacesInputLocation = 87, 
		RULE_spacesOutputLocation = 88, RULE_shortFileSpec = 89, RULE_blockInputLocation = 90, 
		RULE_blockOutputLocation = 91, RULE_blocksInputLocation = 92, RULE_blocksOutputLocation = 93, 
		RULE_storyInputLocation = 94, RULE_storyOutputLocation = 95, RULE_storiesInputLocation = 96, 
		RULE_storiesOutputLocation = 97, RULE_varGetFrom = 98, RULE_updateBlocksStatement = 99, 
		RULE_copyBlocksStatement = 100, RULE_deleteBlocksStatement = 101, RULE_blockConstraintExprList = 102, 
		RULE_blockConstraintExpr = 103, RULE_blockConstraint = 104, RULE_blockUpdateList = 105, 
		RULE_blockUpdate = 106, RULE_intExprList = 107, RULE_intExpr = 108, RULE_verbosityStatement = 109, 
		RULE_waitStatement = 110, RULE_compareStatement = 111, RULE_compareSpacesStatement = 112, 
		RULE_compareBlocksStatement = 113, RULE_compareAllBlocksStatement = 114, 
		RULE_copyStoriesStatement = 115, RULE_publishStoriesStatement = 116, RULE_unpublishStoriesStatement = 117, 
		RULE_deleteStoriesStatement = 118, RULE_storyConstraintExprList = 119, 
		RULE_storyConstraintExpr = 120, RULE_storyConstraint = 121, RULE_regexExpr = 122, 
		RULE_regexExprList = 123, RULE_copyDatasourcesStatement = 124, RULE_updateDatasourcesStatement = 125, 
		RULE_deleteDatasourcesStatement = 126, RULE_syncDatasourcesStatement = 127, 
		RULE_datasourceCopyOptionList = 128, RULE_datasourceCopyOption = 129, 
		RULE_datasourceConstraintExprList = 130, RULE_datasourceConstraintExpr = 131, 
		RULE_datasourceConstraint = 132, RULE_stringExprList = 133, RULE_stringExpr = 134, 
		RULE_varFieldExpr = 135, RULE_fnCallExpr = 136, RULE_fnCallActualArgList = 137, 
		RULE_fnActualArg = 138, RULE_spaceConstraintExprList = 139, RULE_spaceConstraintExpr = 140, 
		RULE_spaceConstraint = 141, RULE_datasourcesInputLocation = 142, RULE_datasourcesOutputLocation = 143, 
		RULE_datasourceInputLocation = 144, RULE_datasourceOutputLocation = 145, 
		RULE_dirSpec = 146, RULE_forEachStatement = 147, RULE_foreachEntityListForTypedVarDecl = 148, 
		RULE_foreachEntityListForUntypedVarDecl = 149, RULE_foreachSpaceListForTypedVarDecl = 150, 
		RULE_foreachSpaceListForUntypedVarDecl = 151, RULE_foreachBlockListForTypedVarDecl = 152, 
		RULE_foreachBlockListForUntypedVarDecl = 153, RULE_foreachDatasourceListForTypedVarDecl = 154, 
		RULE_foreachDatasourceListForUntypedVarDecl = 155, RULE_foreachDatasourceEntryListForTypedVarDecl = 156, 
		RULE_foreachDatasourceEntryListForUntypedVarDecl = 157, RULE_foreachStoryListForTypedVarDecl = 158, 
		RULE_foreachStoryListForUntypedVarDecl = 159, RULE_foreachStringListForTypedVarDecl = 160, 
		RULE_foreachStringListForUntypedVarDecl = 161, RULE_foreachRegexListForTypedVarDecl = 162, 
		RULE_foreachRegexListForUntypedVarDecl = 163, RULE_foreachIntegerListForTypedVarDecl = 164, 
		RULE_foreachIntegerListForUntypedVarDecl = 165, RULE_stringArrayLiteral = 166, 
		RULE_regexArrayLiteral = 167, RULE_intArrayLiteral = 168, RULE_longOrShortDatasourceSpec = 169, 
		RULE_spaceFileSpec = 170, RULE_blockFileSpec = 171, RULE_datasourceFileSpec = 172, 
		RULE_datasourceEntryFileSpec = 173, RULE_storyFileSpec = 174, RULE_untypedVarDecl = 175, 
		RULE_typedVarDecl = 176, RULE_spaceVarDecl = 177, RULE_blockVarDecl = 178, 
		RULE_datasourceVarDecl = 179, RULE_datasourceEntryVarDecl = 180, RULE_storyVarDecl = 181, 
		RULE_stringVarDecl = 182, RULE_regexVarDecl = 183, RULE_integerVarDecl = 184, 
		RULE_datasourceEntriesInputLocation = 185;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createSpaceStatement", "copySpaceStatement", 
		"updateSpaceStatement", "deleteSpaceStatement", "spaceUpdateList", "spaceUpdate", 
		"copySpacesStatement", "selectSpacesStatement", "selectFieldList", "constrainedSpaceList", 
		"completeSpaceList", "createBlockStatement", "copyBlockStatement", "updateBlockStatement", 
		"deleteBlockStatement", "longOrShortBlockSpec", "shortBlockSpec", "scriptBlockDef", 
		"createDatasourceStatement", "copyDatasourceStatement", "deleteDatasourceStatement", 
		"updateDatasourceStatement", "datasourceUpdateList", "datasourceUpdate", 
		"createDatasourceEntryStatement", "copyDatasourceEntryStatement", "deleteDatasourceEntryStatement", 
		"updateDatasourceEntryStatement", "longOrShortDatasourceEntrySpec", "datasourceEntryFullSpec", 
		"datasourceEntryShortSpec", "datasourceEntryIdentifier", "datasourceEntryOutputLocation", 
		"updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"printStatement", "printSpacesStatement", "printVarStatement", "printSpaceStatement", 
		"printStringLiteralStatement", "printSymbolTableStatement", "printLocalCacheStatement", 
		"realDataLocation", "fileSpec", "completeFileSpec", "spaceInputLocation", 
		"spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "updateBlocksStatement", "copyBlocksStatement", 
		"deleteBlocksStatement", "blockConstraintExprList", "blockConstraintExpr", 
		"blockConstraint", "blockUpdateList", "blockUpdate", "intExprList", "intExpr", 
		"verbosityStatement", "waitStatement", "compareStatement", "compareSpacesStatement", 
		"compareBlocksStatement", "compareAllBlocksStatement", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintExprList", "storyConstraintExpr", "storyConstraint", "regexExpr", 
		"regexExprList", "copyDatasourcesStatement", "updateDatasourcesStatement", 
		"deleteDatasourcesStatement", "syncDatasourcesStatement", "datasourceCopyOptionList", 
		"datasourceCopyOption", "datasourceConstraintExprList", "datasourceConstraintExpr", 
		"datasourceConstraint", "stringExprList", "stringExpr", "varFieldExpr", 
		"fnCallExpr", "fnCallActualArgList", "fnActualArg", "spaceConstraintExprList", 
		"spaceConstraintExpr", "spaceConstraint", "datasourcesInputLocation", 
		"datasourcesOutputLocation", "datasourceInputLocation", "datasourceOutputLocation", 
		"dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", "foreachEntityListForUntypedVarDecl", 
		"foreachSpaceListForTypedVarDecl", "foreachSpaceListForUntypedVarDecl", 
		"foreachBlockListForTypedVarDecl", "foreachBlockListForUntypedVarDecl", 
		"foreachDatasourceListForTypedVarDecl", "foreachDatasourceListForUntypedVarDecl", 
		"foreachDatasourceEntryListForTypedVarDecl", "foreachDatasourceEntryListForUntypedVarDecl", 
		"foreachStoryListForTypedVarDecl", "foreachStoryListForUntypedVarDecl", 
		"foreachStringListForTypedVarDecl", "foreachStringListForUntypedVarDecl", 
		"foreachRegexListForTypedVarDecl", "foreachRegexListForUntypedVarDecl", 
		"foreachIntegerListForTypedVarDecl", "foreachIntegerListForUntypedVarDecl", 
		"stringArrayLiteral", "regexArrayLiteral", "intArrayLiteral", "longOrShortDatasourceSpec", 
		"spaceFileSpec", "blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", 
		"storyFileSpec", "untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", 
		"datasourceVarDecl", "datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", 
		"regexVarDecl", "integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'create'", "'space'", "'('", "')'", "'copy'", "'to'", 
		"'update'", "'set'", "'delete'", "','", "'name'", "'='", "'server'", "'location'", 
		"'default'", "'content'", "'type'", "'spaces'", "'from'", "'select'", 
		"'*'", "'where'", "'in'", "'block'", "'{'", "'}'", "'datasource'", "'for'", 
		"'slug'", "'entry'", "'entries'", "'sync'", "'skip'", "'updates'", "'creates'", 
		"'value'", "'csv'", "'json'", "'url'", "'and'", "'or'", "'id'", "'!='", 
		"'not'", "'matches'", "'does'", "'match'", "'regex'", "'like'", "'starts'", 
		"'start'", "'with'", "'ends'", "'end'", "'login'", "'global'", "'username'", 
		"'password'", "'token'", "'var'", "'string'", "'story'", "'print'", "'symbol'", 
		"'tables'", "'local'", "'cache'", "'file'", "'on'", "'blocks'", "'technical'", 
		"'display'", "'nestable'", "'universal'", "'add'", "'tag'", "'remove'", 
		"'preview'", "'field'", "'template'", "'screenshot'", "'+'", "'-'", "'%'", 
		"'be'", "'quiet'", "'verbose'", "'debugger'", "'wait'", "'compare'", "'all'", 
		"'stories'", "'publish'", "'unpublish'", "'any'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'include'", "'['", "']'", "'directory'", "'foreach'", 
		"'int'", "'datasource entry'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STATEMENTEND", "WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2233222456263310002L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 142939997077505L) != 0)) {
				{
				{
				State = 374;
				statement();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpaceStatementContext createSpaceStatement() {
			return GetRuleContext<CreateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSpaceStatementContext updateSpaceStatement() {
			return GetRuleContext<UpdateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteSpaceStatementContext deleteSpaceStatement() {
			return GetRuleContext<DeleteSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateBlockStatementContext createBlockStatement() {
			return GetRuleContext<CreateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateBlockStatementContext updateBlockStatement() {
			return GetRuleContext<UpdateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlockStatementContext deleteBlockStatement() {
			return GetRuleContext<DeleteBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceStatementContext copyDatasourceStatement() {
			return GetRuleContext<CopyDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
			return GetRuleContext<CopyDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				loginStatement();
				State = 381;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				varStatement();
				State = 384;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386;
				assignmentStatement();
				State = 387;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389;
				printStatement();
				State = 390;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 392;
				verbosityStatement();
				State = 393;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 395;
				waitStatement();
				State = 396;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 398;
				compareStatement();
				State = 399;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 401;
				createSpaceStatement();
				State = 402;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 404;
				copySpaceStatement();
				State = 405;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 407;
				updateSpaceStatement();
				State = 408;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 410;
				deleteSpaceStatement();
				State = 411;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 413;
				copySpacesStatement();
				State = 414;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 416;
				createBlockStatement();
				State = 417;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 419;
				copyBlockStatement();
				State = 420;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 422;
				updateBlockStatement();
				State = 423;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 425;
				deleteBlockStatement();
				State = 426;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 428;
				copyBlocksStatement();
				State = 429;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 431;
				deleteBlocksStatement();
				State = 432;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 434;
				createDatasourceStatement();
				State = 435;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 437;
				copyDatasourceStatement();
				State = 438;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 440;
				updateDatasourceStatement();
				State = 441;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 443;
				deleteDatasourceStatement();
				State = 444;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 446;
				copyDatasourcesStatement();
				State = 447;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 449;
				deleteDatasourcesStatement();
				State = 450;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 452;
				updateDatasourcesStatement();
				State = 453;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 455;
				copyStoriesStatement();
				State = 456;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 458;
				publishStoriesStatement();
				State = 459;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 461;
				unpublishStoriesStatement();
				State = 462;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 464;
				deleteStoriesStatement();
				State = 465;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 467;
				createDatasourceEntryStatement();
				State = 468;
				Match(STATEMENTEND);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 470;
				copyDatasourceEntryStatement();
				State = 471;
				Match(STATEMENTEND);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 473;
				deleteDatasourceEntryStatement();
				State = 474;
				Match(STATEMENTEND);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 476;
				updateDatasourceEntryStatement();
				State = 477;
				Match(STATEMENTEND);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 479;
				updateDatasourceEntriesStatement();
				State = 480;
				Match(STATEMENTEND);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 482;
				deleteDatasourceEntriesStatement();
				State = 483;
				Match(STATEMENTEND);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 485;
				copyDatasourceEntriesStatement();
				State = 486;
				Match(STATEMENTEND);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 488;
				syncDatasourceEntriesStatement();
				State = 489;
				Match(STATEMENTEND);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 491;
				Match(T__0);
				State = 492;
				Match(STATEMENTEND);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 493;
				scriptBlockDef();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 494;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public CreateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpaceStatementContext createSpaceStatement() {
		CreateSpaceStatementContext _localctx = new CreateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(T__1);
			State = 498;
			Match(T__2);
			State = 504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 499;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 500;
				Match(T__3);
				State = 501;
				spaceUpdateList();
				State = 502;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(T__5);
			State = 507;
			Match(T__2);
			State = 508;
			longOrShortSpaceSpec();
			State = 509;
			Match(T__6);
			State = 510;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public UpdateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSpaceStatementContext updateSpaceStatement() {
		UpdateSpaceStatementContext _localctx = new UpdateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(T__7);
			State = 513;
			Match(T__2);
			State = 514;
			longOrShortSpaceSpec();
			State = 515;
			Match(T__8);
			State = 516;
			spaceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DeleteSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSpaceStatementContext deleteSpaceStatement() {
		DeleteSpaceStatementContext _localctx = new DeleteSpaceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_deleteSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(T__9);
			State = 519;
			Match(T__2);
			State = 520;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateContext spaceUpdate() {
			return GetRuleContext<SpaceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public SpaceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateListContext spaceUpdateList() {
		SpaceUpdateListContext _localctx = new SpaceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_spaceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			spaceUpdate();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 523;
				Match(T__10);
				State = 524;
				spaceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public SpaceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateContext spaceUpdate() {
		SpaceUpdateContext _localctx = new SpaceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_spaceUpdate);
		try {
			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				Match(T__11);
				State = 528;
				Match(T__12);
				State = 529;
				stringExpr();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				Match(T__13);
				State = 531;
				Match(T__14);
				State = 532;
				Match(T__12);
				State = 533;
				stringExpr();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 3);
				{
				State = 534;
				Match(T__15);
				State = 535;
				Match(T__16);
				State = 536;
				Match(T__17);
				State = 537;
				Match(T__12);
				State = 538;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(T__5);
			State = 542;
			Match(T__18);
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 543;
				Match(T__19);
				State = 544;
				spacesInputLocation();
				}
			}

			State = 547;
			Match(T__6);
			State = 548;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrainedSpaceListContext constrainedSpaceList() {
			return GetRuleContext<ConstrainedSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		public SelectSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpacesStatementContext selectSpacesStatement() {
		SelectSpacesStatementContext _localctx = new SelectSpacesStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectSpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(T__20);
			State = 551;
			selectFieldList();
			State = 552;
			Match(T__19);
			State = 553;
			constrainedSpaceList();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 554;
				Match(T__6);
				State = 555;
				spacesOutputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SelectFieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldListContext selectFieldList() {
		SelectFieldListContext _localctx = new SelectFieldListContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectFieldList);
		int _la;
		try {
			State = 569;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 558;
				Match(T__21);
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 559;
					Match(T__10);
					State = 560;
					selectFieldList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563;
				Match(VARID);
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 564;
					Match(T__10);
					State = 565;
					selectFieldList();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 568;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainedSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompleteSpaceListContext completeSpaceList() {
			return GetRuleContext<CompleteSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ConstrainedSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrainedSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrainedSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrainedSpaceListContext constrainedSpaceList() {
		ConstrainedSpaceListContext _localctx = new ConstrainedSpaceListContext(Context, State);
		EnterRule(_localctx, 24, RULE_constrainedSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			completeSpaceList();
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 572;
				Match(T__22);
				State = 573;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CompleteSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteSpaceListContext completeSpaceList() {
		CompleteSpaceListContext _localctx = new CompleteSpaceListContext(Context, State);
		EnterRule(_localctx, 26, RULE_completeSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(T__18);
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19 || _la==T__23) {
				{
				State = 577;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 578;
				spacesInputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(T__1);
			State = 582;
			Match(T__24);
			State = 583;
			Match(T__3);
			State = 584;
			blockUpdateList();
			State = 585;
			Match(T__4);
			State = 586;
			Match(T__23);
			State = 587;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(T__5);
			State = 590;
			Match(T__24);
			State = 591;
			longOrShortBlockSpec();
			State = 592;
			Match(T__6);
			State = 593;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public UpdateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlockStatementContext updateBlockStatement() {
		UpdateBlockStatementContext _localctx = new UpdateBlockStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_updateBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(T__7);
			State = 596;
			Match(T__24);
			State = 597;
			longOrShortBlockSpec();
			State = 598;
			Match(T__8);
			State = 599;
			blockUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		public DeleteBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlockStatementContext deleteBlockStatement() {
		DeleteBlockStatementContext _localctx = new DeleteBlockStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_deleteBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(T__9);
			State = 602;
			Match(T__24);
			State = 603;
			longOrShortBlockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortBlockSpecContext shortBlockSpec() {
			return GetRuleContext<ShortBlockSpecContext>(0);
		}
		public LongOrShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortBlockSpecContext longOrShortBlockSpec() {
		LongOrShortBlockSpecContext _localctx = new LongOrShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_longOrShortBlockSpec);
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605;
				blockSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				shortBlockSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public ShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortBlockSpecContext shortBlockSpec() {
		ShortBlockSpecContext _localctx = new ShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 38, RULE_shortBlockSpec);
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 609;
					stringExpr();
					}
					break;
				case 2:
					{
					State = 610;
					Match(VARID);
					}
					break;
				}
				State = 613;
				Match(T__23);
				State = 614;
				longOrShortSpaceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(T__25);
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 619;
				statementList();
				}
				break;
			}
			State = 622;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(T__1);
			State = 625;
			Match(T__27);
			State = 631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 626;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 627;
				Match(T__3);
				State = 628;
				datasourceUpdateList();
				State = 629;
				Match(T__4);
				}
				break;
			}
			State = 633;
			_la = TokenStream.LA(1);
			if ( !(_la==T__23 || _la==T__28) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 634;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 635;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceOutputLocationContext datasourceOutputLocation() {
			return GetRuleContext<DatasourceOutputLocationContext>(0);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_copyDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(T__5);
			State = 639;
			Match(T__27);
			State = 640;
			longOrShortDatasourceSpec();
			State = 641;
			Match(T__6);
			State = 642;
			datasourceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(T__9);
			State = 645;
			Match(T__27);
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 646;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 647;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(T__7);
			State = 651;
			Match(T__27);
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 652;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 653;
				datasourceSpec();
				}
				break;
			}
			State = 656;
			Match(T__8);
			State = 657;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 50, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			datasourceUpdate();
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 660;
				Match(T__10);
				State = 661;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 52, RULE_datasourceUpdate);
		try {
			State = 670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664;
				Match(T__11);
				State = 665;
				Match(T__12);
				State = 666;
				stringExpr();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 667;
				Match(T__29);
				State = 668;
				Match(T__12);
				State = 669;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(T__1);
			State = 673;
			Match(T__27);
			State = 674;
			Match(T__30);
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case STRINGLITERAL:
			case VARID:
				{
				State = 675;
				stringExpr();
				}
				break;
			case T__11:
			case T__36:
				{
				State = 676;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 679;
			_la = TokenStream.LA(1);
			if ( !(_la==T__23 || _la==T__28) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 680;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 681;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
			return GetRuleContext<LongOrShortDatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
			return GetRuleContext<DatasourceEntryOutputLocationContext>(0);
		}
		public CopyDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
		CopyDatasourceEntryStatementContext _localctx = new CopyDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_copyDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(T__5);
			State = 685;
			Match(T__27);
			State = 686;
			Match(T__30);
			State = 687;
			longOrShortDatasourceEntrySpec();
			State = 688;
			Match(T__6);
			State = 689;
			datasourceEntryOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(T__9);
			State = 692;
			Match(T__27);
			State = 693;
			Match(T__30);
			State = 694;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(T__7);
			State = 697;
			Match(T__27);
			State = 698;
			Match(T__30);
			State = 699;
			datasourceEntryShortSpec();
			State = 700;
			Match(T__8);
			State = 701;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
			return GetRuleContext<DatasourceEntryFullSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public LongOrShortDatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
		LongOrShortDatasourceEntrySpecContext _localctx = new LongOrShortDatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 62, RULE_longOrShortDatasourceEntrySpec);
		try {
			State = 705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703;
				datasourceEntryFullSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				datasourceEntryShortSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 64, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(T__27);
			State = 708;
			Match(T__30);
			State = 709;
			datasourceEntryIdentifier();
			State = 710;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 711;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			datasourceEntryIdentifier();
			State = 714;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 715;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 717;
				intExpr();
				}
				break;
			case 2:
				{
				State = 718;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 719;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
		DatasourceEntryOutputLocationContext _localctx = new DatasourceEntryOutputLocationContext(Context, State);
		EnterRule(_localctx, 70, RULE_datasourceEntryOutputLocation);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 722;
				longOrShortDatasourceSpec();
				}
				break;
			case T__37:
			case T__38:
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(T__7);
			State = 727;
			Match(T__27);
			State = 728;
			Match(T__31);
			State = 729;
			Match(T__23);
			State = 730;
			datasourceSpec();
			State = 731;
			Match(T__8);
			State = 732;
			datasourceEntryUpdateList();
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 733;
				Match(T__22);
				State = 734;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(T__9);
			State = 738;
			Match(T__27);
			State = 739;
			Match(T__31);
			State = 740;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 741;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 742;
				datasourceShortSpec();
				}
				break;
			}
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 745;
				Match(T__22);
				State = 746;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(T__5);
			State = 750;
			Match(T__27);
			State = 751;
			Match(T__31);
			State = 752;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 753;
			datasourceEntriesSourceLocation();
			State = 754;
			Match(T__6);
			State = 755;
			datasourceEntriesTargetLocation();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 756;
				Match(T__22);
				State = 757;
				datasourceEntryConstraintExprList();
				}
			}

			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 760;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(T__32);
			State = 764;
			Match(T__27);
			State = 765;
			Match(T__31);
			State = 766;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 767;
			datasourceEntriesSourceLocation();
			State = 768;
			Match(T__6);
			State = 769;
			datasourceEntriesSourceLocation();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 770;
				Match(T__22);
				State = 771;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			datasourceEntryCopyOption();
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 775;
				Match(T__10);
				State = 776;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(T__33);
			State = 780;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 103079215364L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 84, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			datasourceEntryUpdate();
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 783;
				Match(T__10);
				State = 784;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 86, RULE_datasourceEntryUpdate);
		try {
			State = 793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787;
				Match(T__11);
				State = 788;
				Match(T__12);
				State = 789;
				stringExpr();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				Match(T__36);
				State = 791;
				Match(T__12);
				State = 792;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 88, RULE_datasourceEntriesSourceLocation);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 795;
				longOrShortDatasourceSpec();
				}
				break;
			case T__37:
			case T__38:
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 90, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37 || _la==T__38) {
				{
				State = 799;
				_la = TokenStream.LA(1);
				if ( !(_la==T__37 || _la==T__38) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 802;
			Match(T__39);
			State = 803;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 92, RULE_datasourceEntriesTargetLocation);
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 805;
				longOrShortDatasourceSpec();
				}
				break;
			case T__37:
			case T__38:
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			datasourceEntryConstraintExpr();
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==T__41) {
				{
				State = 810;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 811;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814;
				datasourceEntryConstraint();
				State = 817;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 815;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 816;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 819;
				Match(T__3);
				State = 820;
				datasourceEntryConstraint();
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 821;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 822;
					datasourceEntryConstraintExpr();
					}
				}

				State = 825;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 827;
				Match(T__3);
				State = 828;
				datasourceEntryConstraintExpr();
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 829;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 830;
					datasourceEntryConstraintExpr();
					}
				}

				State = 833;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 98, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837;
				Match(T__42);
				State = 838;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 839;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 840;
				Match(T__42);
				State = 842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 841;
					Match(T__44);
					}
				}

				State = 844;
				Match(T__23);
				State = 845;
				Match(T__3);
				State = 846;
				intExprList();
				State = 847;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 849;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 850;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 851;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 852;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 853;
					Match(T__44);
					}
				}

				State = 856;
				Match(T__23);
				State = 857;
				Match(T__3);
				State = 860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 858;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 859;
					regexExprList();
					}
					break;
				}
				State = 862;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 864;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 869;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 865;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 866;
					Match(T__46);
					State = 867;
					Match(T__44);
					State = 868;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 871;
					Match(T__48);
					}
				}

				State = 874;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 875;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 876;
					Match(T__44);
					}
				}

				State = 879;
				Match(T__23);
				State = 880;
				Match(T__3);
				State = 881;
				stringExprList();
				State = 882;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 884;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 885;
					Match(T__44);
					}
				}

				State = 888;
				Match(T__49);
				State = 889;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 890;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 895;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 891;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 892;
					Match(T__46);
					State = 893;
					Match(T__44);
					State = 894;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 897;
				Match(T__52);
				State = 898;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 899;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 904;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 900;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 901;
					Match(T__46);
					State = 902;
					Match(T__44);
					State = 903;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 906;
				Match(T__52);
				State = 907;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_loginStatement);
		try {
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 910;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 911;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 912;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 913;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 914;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(T__55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			Match(T__55);
			State = 920;
			Match(T__52);
			State = 921;
			Match(T__56);
			State = 922;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(T__55);
			State = 925;
			Match(T__52);
			State = 926;
			Match(T__56);
			State = 927;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			Match(T__55);
			State = 930;
			Match(T__52);
			State = 931;
			Match(T__56);
			State = 932;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(T__55);
			State = 935;
			Match(T__52);
			State = 936;
			Match(T__56);
			State = 937;
			Match(T__57);
			State = 938;
			Match(T__40);
			State = 939;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_varStatement);
		try {
			State = 961;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 941;
				spaceVarStatement();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 942;
				blockVarStatement();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 943;
				stringVarStatement();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 4);
				{
				State = 944;
				regexVarStatement();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 5);
				{
				State = 945;
				storyVarStatement();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 6);
				{
				State = 946;
				datasourceEntryVarStatement();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 7);
				{
				State = 947;
				Match(T__60);
				State = 948;
				Match(VARID);
				State = 949;
				Match(T__12);
				State = 959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 950;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 951;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 952;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 953;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 954;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 955;
					storySpec();
					}
					break;
				case 7:
					{
					State = 956;
					intExpr();
					}
					break;
				case 8:
					{
					State = 957;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 958;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(T__2);
			State = 964;
			Match(VARID);
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 965;
				Match(T__12);
				State = 966;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			Match(T__24);
			State = 970;
			Match(VARID);
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 971;
				Match(T__12);
				State = 972;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			Match(T__61);
			State = 976;
			Match(VARID);
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 977;
				Match(T__12);
				State = 978;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(T__48);
			State = 982;
			Match(VARID);
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 983;
				Match(T__12);
				State = 984;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(T__62);
			State = 988;
			Match(VARID);
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 989;
				Match(T__12);
				State = 990;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			Match(T__27);
			State = 994;
			Match(T__30);
			State = 995;
			Match(VARID);
			State = 998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 996;
				Match(T__12);
				State = 997;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_spaceSpec);
		int _la;
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1000;
				Match(T__2);
				State = 1001;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23 || _la==T__69) {
					{
					State = 1002;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 128, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 130, RULE_longOrShortSpaceSpec);
		try {
			State = 1012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1010;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 132, RULE_blockSpec);
		try {
			State = 1023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1014;
				Match(T__24);
				State = 1015;
				Match(STRINGLITERAL);
				State = 1016;
				Match(T__23);
				State = 1019;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1017;
					spaceSpec();
					}
					break;
				case T__68:
					{
					State = 1018;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				Match(T__24);
				State = 1022;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 134, RULE_storySpec);
		int _la;
		try {
			State = 1032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1025;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1026;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1029;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1027;
					spaceSpec();
					}
					break;
				case T__68:
					{
					State = 1028;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1031;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 136, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 1044;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				Match(T__27);
				State = 1035;
				Match(T__30);
				State = 1039;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 1036;
					intExpr();
					}
					break;
				case 2:
					{
					State = 1037;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 1038;
					Match(VARID);
					}
					break;
				}
				State = 1041;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1042;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1043;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 138, RULE_datasourceSpec);
		int _la;
		try {
			State = 1054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1046;
				Match(T__27);
				State = 1047;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1048;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1051;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1049;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 1050;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1053;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 140, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1057;
			Match(T__23);
			State = 1060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 1058;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 1059;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_assignmentStatement);
		try {
			State = 1068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1062;
				Match(VARID);
				State = 1063;
				Match(T__12);
				State = 1064;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1065;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1066;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1067;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(VARID);
			State = 1071;
			Match(T__12);
			State = 1072;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1074;
			Match(VARID);
			State = 1075;
			Match(T__12);
			State = 1076;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1078;
			Match(VARID);
			State = 1079;
			Match(T__12);
			State = 1080;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_printStatement);
		try {
			State = 1088;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1083;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1084;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1085;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1086;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1087;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			Match(T__63);
			State = 1091;
			Match(T__18);
			State = 1092;
			Match(T__19);
			State = 1093;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(T__63);
			State = 1096;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(T__63);
			State = 1099;
			Match(T__2);
			State = 1100;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			Match(T__63);
			State = 1103;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(T__63);
			State = 1106;
			Match(T__64);
			State = 1107;
			Match(T__65);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			Match(T__63);
			State = 1110;
			Match(T__66);
			State = 1111;
			Match(T__67);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 164, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 1113;
				Match(T__13);
				}
				break;
			case T__66:
				{
				State = 1114;
				Match(T__66);
				State = 1115;
				Match(T__67);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 166, RULE_fileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(T__68);
			State = 1119;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public CompleteFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteFileSpecContext completeFileSpec() {
		CompleteFileSpecContext _localctx = new CompleteFileSpecContext(Context, State);
		EnterRule(_localctx, 168, RULE_completeFileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37 || _la==T__38) {
				{
				State = 1121;
				_la = TokenStream.LA(1);
				if ( !(_la==T__37 || _la==T__38) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1124;
			Match(T__68);
			State = 1125;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 170, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 172, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 174, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 176, RULE_spacesOutputLocation);
		try {
			State = 1135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1133;
				fileSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1134;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 178, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 180, RULE_blockInputLocation);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1139;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1140;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 182, RULE_blockOutputLocation);
		try {
			State = 1145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1143;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1144;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_blocksInputLocation);
		try {
			State = 1149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 186, RULE_blocksOutputLocation);
		try {
			State = 1153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1151;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1152;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_storyInputLocation);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1155;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1156;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 190, RULE_storyOutputLocation);
		try {
			State = 1161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1160;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 192, RULE_storiesInputLocation);
		try {
			State = 1165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1163;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 194, RULE_storiesOutputLocation);
		try {
			State = 1169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1167;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1168;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 196, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
				{
				State = 1171;
				Match(T__69);
				State = 1172;
				Match(T__13);
				}
				break;
			case T__23:
				{
				State = 1173;
				Match(T__23);
				State = 1174;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			Match(T__7);
			State = 1178;
			Match(T__70);
			State = 1179;
			Match(T__23);
			State = 1180;
			longOrShortSpaceSpec();
			State = 1181;
			Match(T__8);
			State = 1182;
			blockUpdateList();
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1183;
				Match(T__22);
				State = 1184;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187;
			Match(T__5);
			State = 1188;
			Match(T__70);
			State = 1189;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1190;
			longOrShortSpaceSpec();
			State = 1191;
			Match(T__6);
			State = 1192;
			blocksOutputLocation();
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1193;
				Match(T__22);
				State = 1194;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1197;
			Match(T__9);
			State = 1198;
			Match(T__70);
			State = 1199;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1200;
			longOrShortSpaceSpec();
			State = 1203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1201;
				Match(T__22);
				State = 1202;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 204, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205;
			blockConstraintExpr();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==T__41) {
				{
				State = 1206;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1207;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 206, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1210;
				blockConstraint();
				State = 1213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 1211;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1212;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1215;
				Match(T__3);
				State = 1216;
				blockConstraint();
				State = 1219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1217;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1218;
					blockConstraintExpr();
					}
				}

				State = 1221;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1223;
				Match(T__3);
				State = 1224;
				blockConstraintExpr();
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1225;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1226;
					blockConstraintExpr();
					}
				}

				State = 1229;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 208, RULE_blockConstraint);
		int _la;
		try {
			State = 1301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1233;
				Match(T__42);
				State = 1234;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1235;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1236;
				Match(T__42);
				State = 1238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1237;
					Match(T__44);
					}
				}

				State = 1240;
				Match(T__23);
				State = 1241;
				Match(T__3);
				State = 1242;
				intExprList();
				State = 1243;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1245;
				Match(T__11);
				State = 1246;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1247;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1248;
				Match(T__11);
				State = 1250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1249;
					Match(T__44);
					}
				}

				State = 1252;
				Match(T__23);
				State = 1253;
				Match(T__3);
				State = 1254;
				stringExprList();
				State = 1255;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1257;
				Match(T__11);
				State = 1262;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1258;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 1259;
					Match(T__46);
					State = 1260;
					Match(T__44);
					State = 1261;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1264;
					Match(T__48);
					}
				}

				State = 1267;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1268;
				Match(T__11);
				State = 1270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1269;
					Match(T__44);
					}
				}

				State = 1272;
				Match(T__23);
				State = 1273;
				Match(T__3);
				State = 1274;
				regexExprList();
				State = 1275;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1277;
				Match(T__11);
				State = 1279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1278;
					Match(T__44);
					}
				}

				State = 1281;
				Match(T__49);
				State = 1282;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1283;
				Match(T__11);
				State = 1288;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 1284;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 1285;
					Match(T__46);
					State = 1286;
					Match(T__44);
					State = 1287;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1290;
				Match(T__52);
				State = 1291;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1292;
				Match(T__11);
				State = 1297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 1293;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 1294;
					Match(T__46);
					State = 1295;
					Match(T__44);
					State = 1296;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1299;
				Match(T__52);
				State = 1300;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 210, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			blockUpdate();
			State = 1306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1304;
				Match(T__10);
				State = 1305;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 212, RULE_blockUpdate);
		int _la;
		try {
			State = 1337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1308;
				Match(T__71);
				State = 1309;
				Match(T__11);
				State = 1310;
				Match(T__12);
				State = 1311;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312;
				Match(T__72);
				State = 1313;
				Match(T__11);
				State = 1314;
				Match(T__12);
				State = 1315;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1316;
				Match(T__17);
				State = 1317;
				Match(T__12);
				State = 1318;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & 432345564227567617L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1319;
				Match(T__75);
				State = 1320;
				Match(T__76);
				State = 1321;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1322;
				Match(T__77);
				State = 1323;
				Match(T__76);
				State = 1324;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1325;
				Match(T__78);
				State = 1326;
				Match(T__79);
				State = 1327;
				Match(T__12);
				State = 1328;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1329;
				Match(T__78);
				State = 1330;
				Match(T__80);
				State = 1331;
				Match(T__12);
				State = 1332;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1333;
				Match(T__78);
				State = 1334;
				Match(T__81);
				State = 1335;
				Match(T__12);
				State = 1336;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 214, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			intExpr();
			State = 1342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1340;
				Match(T__10);
				State = 1341;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 216, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -2305843009213693951L) != 0)) {
				{
				State = 1345;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -2305843009213693951L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1346;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__85) {
				{
				State = 1349;
				Match(T__85);
				}
			}

			State = 1352;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			Match(T__89);
			State = 1355;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 222, RULE_compareStatement);
		try {
			State = 1360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1357;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1358;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1359;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 224, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362;
			Match(T__90);
			State = 1363;
			spaceSpec();
			State = 1364;
			Match(T__40);
			State = 1365;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			Match(T__90);
			State = 1368;
			blockSpec();
			State = 1369;
			Match(T__40);
			State = 1370;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372;
			Match(T__90);
			State = 1373;
			Match(T__91);
			State = 1374;
			Match(T__70);
			State = 1375;
			Match(T__23);
			State = 1376;
			spaceSpec();
			State = 1377;
			Match(T__40);
			State = 1378;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1380;
			Match(T__5);
			State = 1381;
			Match(T__92);
			State = 1384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__52) {
				{
				State = 1382;
				Match(T__52);
				State = 1383;
				Match(T__16);
				}
			}

			State = 1386;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1387;
			storiesInputLocation();
			State = 1388;
			Match(T__6);
			State = 1389;
			storiesOutputLocation();
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1390;
				Match(T__22);
				State = 1391;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			Match(T__93);
			State = 1395;
			Match(T__92);
			State = 1396;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1397;
			longOrShortSpaceSpec();
			State = 1400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1398;
				Match(T__22);
				State = 1399;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1402;
			Match(T__94);
			State = 1403;
			Match(T__92);
			State = 1404;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1405;
			longOrShortSpaceSpec();
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1406;
				Match(T__22);
				State = 1407;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			Match(T__9);
			State = 1411;
			Match(T__92);
			State = 1412;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1413;
			longOrShortSpaceSpec();
			State = 1416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1414;
				Match(T__22);
				State = 1415;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 238, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			storyConstraintExpr();
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==T__41) {
				{
				State = 1419;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1420;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 240, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1423;
				storyConstraint();
				State = 1426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 1424;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1425;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428;
				Match(T__3);
				State = 1429;
				storyConstraint();
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1430;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1431;
					storyConstraintExpr();
					}
				}

				State = 1434;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1436;
				Match(T__3);
				State = 1437;
				storyConstraintExpr();
				State = 1440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1438;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1439;
					storyConstraintExpr();
					}
				}

				State = 1442;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 242, RULE_storyConstraint);
		int _la;
		try {
			State = 1657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1446;
				Match(T__42);
				State = 1447;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1448;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1449;
				Match(T__42);
				State = 1451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1450;
					Match(T__44);
					}
				}

				State = 1453;
				Match(T__23);
				State = 1454;
				Match(T__3);
				State = 1455;
				intExprList();
				State = 1456;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1458;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1459;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1460;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1461;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1462;
					Match(T__44);
					}
				}

				State = 1465;
				Match(T__23);
				State = 1466;
				Match(T__3);
				State = 1467;
				stringExprList();
				State = 1468;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1470;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1475;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1471;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 1472;
					Match(T__46);
					State = 1473;
					Match(T__44);
					State = 1474;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1477;
					Match(T__48);
					}
				}

				State = 1480;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1481;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1482;
					Match(T__44);
					}
				}

				State = 1485;
				Match(T__23);
				State = 1486;
				Match(T__3);
				State = 1487;
				stringExprList();
				State = 1488;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1490;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1491;
					Match(T__44);
					}
				}

				State = 1494;
				Match(T__49);
				State = 1495;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1496;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1501;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 1497;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 1498;
					Match(T__46);
					State = 1499;
					Match(T__44);
					State = 1500;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1503;
				Match(T__52);
				State = 1504;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1505;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1510;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 1506;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 1507;
					Match(T__46);
					State = 1508;
					Match(T__44);
					State = 1509;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1512;
				Match(T__52);
				State = 1513;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1522;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__76:
				case T__95:
					{
					{
					State = 1515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__95) {
						{
						State = 1514;
						Match(T__95);
						}
					}

					State = 1517;
					Match(T__76);
					}
					}
					break;
				case T__91:
				case T__96:
					{
					{
					State = 1519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1518;
						Match(T__91);
						}
					}

					State = 1521;
					Match(T__96);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1524;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1525;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1534;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__76:
				case T__95:
					{
					{
					State = 1527;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__95) {
						{
						State = 1526;
						Match(T__95);
						}
					}

					State = 1529;
					Match(T__76);
					}
					}
					break;
				case T__91:
				case T__96:
					{
					{
					State = 1531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1530;
						Match(T__91);
						}
					}

					State = 1533;
					Match(T__96);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1536;
					Match(T__44);
					}
				}

				State = 1539;
				Match(T__23);
				State = 1540;
				Match(T__3);
				State = 1541;
				stringExprList();
				State = 1542;
				Match(T__4);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__95) {
					{
					State = 1544;
					Match(T__95);
					}
				}

				State = 1547;
				Match(T__76);
				State = 1552;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1548;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 1549;
					Match(T__46);
					State = 1550;
					Match(T__44);
					State = 1551;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1554;
					Match(T__48);
					}
				}

				State = 1557;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__95) {
					{
					State = 1558;
					Match(T__95);
					}
				}

				State = 1561;
				Match(T__76);
				State = 1566;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 1562;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 1563;
					Match(T__46);
					State = 1564;
					Match(T__44);
					State = 1565;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1568;
				Match(T__52);
				State = 1569;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__95) {
					{
					State = 1570;
					Match(T__95);
					}
				}

				State = 1573;
				Match(T__76);
				State = 1578;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 1574;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 1575;
					Match(T__46);
					State = 1576;
					Match(T__44);
					State = 1577;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1580;
				Match(T__52);
				State = 1581;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1582;
					Match(T__91);
					}
				}

				State = 1585;
				Match(T__96);
				State = 1590;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__47:
					{
					State = 1586;
					Match(T__47);
					}
					break;
				case T__97:
					{
					State = 1587;
					Match(T__97);
					State = 1588;
					Match(T__44);
					State = 1589;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1592;
					Match(T__48);
					}
				}

				State = 1595;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1596;
					Match(T__91);
					}
				}

				State = 1599;
				Match(T__96);
				State = 1604;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1600;
					Match(T__51);
					}
					break;
				case T__97:
					{
					State = 1601;
					Match(T__97);
					State = 1602;
					Match(T__44);
					State = 1603;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1606;
				Match(T__52);
				State = 1607;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1608;
					Match(T__91);
					}
				}

				State = 1611;
				Match(T__96);
				State = 1616;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__54:
					{
					State = 1612;
					Match(T__54);
					}
					break;
				case T__97:
					{
					State = 1613;
					Match(T__97);
					State = 1614;
					Match(T__44);
					State = 1615;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1618;
				Match(T__52);
				State = 1619;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1628;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__76:
				case T__95:
					{
					{
					State = 1621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__95) {
						{
						State = 1620;
						Match(T__95);
						}
					}

					State = 1623;
					Match(T__76);
					}
					}
					break;
				case T__91:
				case T__96:
					{
					{
					State = 1625;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1624;
						Match(T__91);
						}
					}

					State = 1627;
					Match(T__96);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1630;
					Match(T__44);
					}
				}

				State = 1633;
				Match(T__23);
				State = 1634;
				Match(T__3);
				State = 1635;
				regexExprList();
				State = 1636;
				Match(T__4);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1646;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__76:
				case T__95:
					{
					{
					State = 1639;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__95) {
						{
						State = 1638;
						Match(T__95);
						}
					}

					State = 1641;
					Match(T__76);
					}
					}
					break;
				case T__91:
				case T__96:
					{
					{
					State = 1643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1642;
						Match(T__91);
						}
					}

					State = 1645;
					Match(T__96);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1648;
					Match(T__44);
					}
				}

				State = 1651;
				Match(T__49);
				State = 1652;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1653;
				Match(T__98);
				State = 1654;
				Match(T__96);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1655;
				Match(T__95);
				State = 1656;
				Match(T__96);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 244, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 246, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661;
			regexExpr();
			State = 1664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1662;
				Match(T__10);
				State = 1663;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666;
			Match(T__5);
			State = 1667;
			Match(T__99);
			State = 1668;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1669;
			longOrShortSpaceSpec();
			State = 1670;
			Match(T__6);
			State = 1671;
			longOrShortSpaceSpec();
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1672;
				Match(T__22);
				State = 1673;
				datasourceConstraintExprList();
				}
			}

			State = 1677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__100) {
				{
				State = 1676;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 250, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679;
			Match(T__7);
			State = 1680;
			Match(T__99);
			State = 1681;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1682;
			longOrShortSpaceSpec();
			State = 1683;
			Match(T__8);
			State = 1684;
			datasourceUpdateList();
			State = 1687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1685;
				Match(T__22);
				State = 1686;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 252, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689;
			Match(T__9);
			State = 1690;
			Match(T__99);
			State = 1691;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1692;
			longOrShortSpaceSpec();
			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1693;
				Match(T__22);
				State = 1694;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 254, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697;
			Match(T__5);
			State = 1698;
			Match(T__99);
			State = 1699;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1700;
			longOrShortSpaceSpec();
			State = 1701;
			Match(T__6);
			State = 1702;
			longOrShortSpaceSpec();
			State = 1705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1703;
				Match(T__22);
				State = 1704;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 256, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707;
			datasourceCopyOption();
			State = 1710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1708;
				Match(T__10);
				State = 1709;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 258, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1712;
				Match(T__33);
				State = 1713;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 103079215364L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1714;
				Match(T__100);
				State = 1715;
				Match(T__31);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 260, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718;
			datasourceConstraintExpr();
			State = 1721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==T__41) {
				{
				State = 1719;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1720;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 262, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1723;
				datasourceConstraint();
				State = 1726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
				case 1:
					{
					State = 1724;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1725;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				Match(T__3);
				State = 1729;
				datasourceConstraint();
				State = 1732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1730;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1731;
					datasourceConstraintExpr();
					}
				}

				State = 1734;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1736;
				Match(T__3);
				State = 1737;
				datasourceConstraintExpr();
				State = 1740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1738;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1739;
					datasourceConstraintExpr();
					}
				}

				State = 1742;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 264, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1746;
				Match(T__42);
				State = 1747;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1748;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1749;
				Match(T__42);
				State = 1751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1750;
					Match(T__44);
					}
				}

				State = 1753;
				Match(T__23);
				State = 1754;
				Match(T__3);
				State = 1755;
				intExprList();
				State = 1756;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1758;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1759;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1760;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1761;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1762;
					Match(T__44);
					}
				}

				State = 1765;
				Match(T__23);
				State = 1766;
				Match(T__3);
				State = 1767;
				stringExprList();
				State = 1768;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1770;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1775;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1771;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 1772;
					Match(T__46);
					State = 1773;
					Match(T__44);
					State = 1774;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1777;
					Match(T__48);
					}
				}

				State = 1780;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1781;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1782;
					Match(T__44);
					}
				}

				State = 1785;
				Match(T__23);
				State = 1786;
				Match(T__3);
				State = 1787;
				regexExprList();
				State = 1788;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1790;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1791;
					Match(T__44);
					}
				}

				State = 1794;
				Match(T__49);
				State = 1795;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1796;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1801;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 1797;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 1798;
					Match(T__46);
					State = 1799;
					Match(T__44);
					State = 1800;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1803;
				Match(T__52);
				State = 1804;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1805;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1810;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 1806;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 1807;
					Match(T__46);
					State = 1808;
					Match(T__44);
					State = 1809;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1812;
				Match(T__52);
				{
				State = 1813;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 266, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			stringExpr();
			State = 1819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1817;
				Match(T__10);
				State = 1818;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarFieldExprContext varFieldExpr() {
			return GetRuleContext<VarFieldExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallExprContext fnCallExpr() {
			return GetRuleContext<FnCallExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 268, RULE_stringExpr);
		int _la;
		try {
			State = 1850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1821;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1822;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1823;
					varFieldExpr();
					}
					break;
				case 4:
					{
					State = 1824;
					fnCallExpr();
					}
					break;
				}
				State = 1829;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1827;
					Match(T__82);
					State = 1828;
					stringExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1831;
				Match(T__3);
				State = 1835;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1832;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1833;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1834;
					varFieldExpr();
					}
					break;
				}
				State = 1839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__82) {
					{
					State = 1837;
					Match(T__82);
					State = 1838;
					stringExpr();
					}
				}

				State = 1841;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1842;
				Match(T__3);
				State = 1843;
				stringExpr();
				State = 1846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__82) {
					{
					State = 1844;
					Match(T__82);
					State = 1845;
					stringExpr();
					}
				}

				State = 1848;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFieldExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public VarFieldExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFieldExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFieldExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFieldExprContext varFieldExpr() {
		VarFieldExprContext _localctx = new VarFieldExprContext(Context, State);
		EnterRule(_localctx, 270, RULE_varFieldExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			Match(VARID);
			State = 1853;
			Match(T__101);
			State = 1854;
			stringExpr();
			State = 1855;
			Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallExprContext fnCallExpr() {
		FnCallExprContext _localctx = new FnCallExprContext(Context, State);
		EnterRule(_localctx, 272, RULE_fnCallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			Match(VARID);
			State = 1858;
			Match(T__3);
			State = 1860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 1859;
				fnCallActualArgList();
				}
			}

			State = 1862;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallActualArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FnActualArgContext fnActualArg() {
			return GetRuleContext<FnActualArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallActualArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallActualArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallActualArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallActualArgListContext fnCallActualArgList() {
		FnCallActualArgListContext _localctx = new FnCallActualArgListContext(Context, State);
		EnterRule(_localctx, 274, RULE_fnCallActualArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864;
			fnActualArg();
			State = 1867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1865;
				Match(T__10);
				State = 1866;
				fnCallActualArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnActualArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FnActualArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnActualArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnActualArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnActualArgContext fnActualArg() {
		FnActualArgContext _localctx = new FnActualArgContext(Context, State);
		EnterRule(_localctx, 276, RULE_fnActualArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1869;
				Match(VARID);
				State = 1870;
				Match(T__12);
				}
				break;
			}
			State = 1873;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 278, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			spaceConstraintExpr();
			State = 1878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40 || _la==T__41) {
				{
				State = 1876;
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1877;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 280, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				spaceConstraint();
				State = 1883;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1881;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1882;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1885;
				Match(T__3);
				State = 1886;
				spaceConstraint();
				State = 1889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1887;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1888;
					spaceConstraintExpr();
					}
				}

				State = 1891;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1893;
				Match(T__3);
				State = 1894;
				spaceConstraintExpr();
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40 || _la==T__41) {
					{
					State = 1895;
					_la = TokenStream.LA(1);
					if ( !(_la==T__40 || _la==T__41) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1896;
					spaceConstraintExpr();
					}
				}

				State = 1899;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 282, RULE_spaceConstraint);
		int _la;
		try {
			State = 1971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1903;
				Match(T__42);
				State = 1904;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1905;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1906;
				Match(T__42);
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1907;
					Match(T__44);
					}
				}

				State = 1910;
				Match(T__23);
				State = 1911;
				Match(T__3);
				State = 1912;
				intExprList();
				State = 1913;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1915;
				Match(T__11);
				State = 1916;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1917;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1918;
				Match(T__11);
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1919;
					Match(T__44);
					}
				}

				State = 1922;
				Match(T__23);
				State = 1923;
				Match(T__3);
				State = 1924;
				stringExprList();
				State = 1925;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1927;
				Match(T__11);
				State = 1932;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1928;
					Match(T__45);
					}
					break;
				case T__46:
					{
					State = 1929;
					Match(T__46);
					State = 1930;
					Match(T__44);
					State = 1931;
					Match(T__47);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__48) {
					{
					State = 1934;
					Match(T__48);
					}
				}

				State = 1937;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1938;
				Match(T__11);
				State = 1940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1939;
					Match(T__44);
					}
				}

				State = 1942;
				Match(T__23);
				State = 1943;
				Match(T__3);
				State = 1944;
				regexExprList();
				State = 1945;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1947;
				Match(T__11);
				State = 1949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__44) {
					{
					State = 1948;
					Match(T__44);
					}
				}

				State = 1951;
				Match(T__49);
				State = 1952;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1953;
				Match(T__11);
				State = 1958;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
					{
					State = 1954;
					Match(T__50);
					}
					break;
				case T__46:
					{
					State = 1955;
					Match(T__46);
					State = 1956;
					Match(T__44);
					State = 1957;
					Match(T__51);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1960;
				Match(T__52);
				State = 1961;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1962;
				Match(T__11);
				State = 1967;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
					{
					State = 1963;
					Match(T__53);
					}
					break;
				case T__46:
					{
					State = 1964;
					Match(T__46);
					State = 1965;
					Match(T__44);
					State = 1966;
					Match(T__54);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1969;
				Match(T__52);
				{
				State = 1970;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 284, RULE_datasourcesInputLocation);
		try {
			State = 1975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1973;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1974;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 286, RULE_datasourcesOutputLocation);
		try {
			State = 1979;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1977;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1978;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 288, RULE_datasourceInputLocation);
		try {
			State = 1983;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1981;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1982;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 290, RULE_datasourceOutputLocation);
		try {
			State = 1987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1985;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1986;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 292, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1989;
			Match(T__103);
			State = 1990;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 294, RULE_forEachStatement);
		try {
			State = 2008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992;
				Match(T__104);
				State = 1993;
				Match(T__3);
				State = 1994;
				typedVarDecl();
				State = 1995;
				Match(T__23);
				State = 1996;
				foreachEntityListForTypedVarDecl();
				State = 1997;
				Match(T__4);
				State = 1998;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2000;
				Match(T__104);
				State = 2001;
				Match(T__3);
				State = 2002;
				untypedVarDecl();
				State = 2003;
				Match(T__23);
				State = 2004;
				foreachEntityListForUntypedVarDecl();
				State = 2005;
				Match(T__4);
				State = 2006;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 296, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 2018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2010;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2011;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2012;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2013;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2014;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2015;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2016;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2017;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 298, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 2028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2020;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2021;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2022;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2023;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2024;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2025;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2026;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2027;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 300, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				{
				State = 2030;
				fileSpec();
				}
				break;
			case T__2:
				{
				State = 2031;
				spaceFileSpec();
				}
				break;
			case T__18:
				{
				State = 2032;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2035;
				Match(T__22);
				State = 2036;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 302, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 2039;
				spaceFileSpec();
				}
				break;
			case T__18:
				{
				State = 2040;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2043;
				Match(T__22);
				State = 2044;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 304, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				{
				State = 2047;
				fileSpec();
				}
				break;
			case T__24:
				{
				State = 2048;
				blockFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2049;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2052;
				Match(T__22);
				State = 2053;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 306, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				{
				State = 2056;
				blockFileSpec();
				}
				break;
			case T__70:
				{
				State = 2057;
				Match(T__70);
				State = 2058;
				Match(T__23);
				State = 2059;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2062;
				Match(T__22);
				State = 2063;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				{
				State = 2066;
				fileSpec();
				}
				break;
			case T__27:
				{
				State = 2067;
				datasourceFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2068;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2071;
				Match(T__22);
				State = 2072;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				{
				State = 2075;
				datasourceFileSpec();
				}
				break;
			case T__99:
				{
				State = 2076;
				Match(T__99);
				State = 2077;
				Match(T__23);
				State = 2078;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2081;
				Match(T__22);
				State = 2082;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				{
				State = 2085;
				fileSpec();
				}
				break;
			case T__106:
				{
				State = 2086;
				datasourceEntryFileSpec();
				}
				break;
			case T__27:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2087;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2090;
				Match(T__22);
				State = 2091;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__106:
				{
				State = 2094;
				datasourceEntryFileSpec();
				}
				break;
			case T__27:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2095;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2098;
				Match(T__22);
				State = 2099;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 316, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				{
				State = 2102;
				fileSpec();
				}
				break;
			case T__62:
				{
				State = 2103;
				storyFileSpec();
				}
				break;
			case T__2:
			case VARID:
				{
				State = 2104;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2107;
				Match(T__22);
				State = 2108;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 318, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				{
				State = 2111;
				storyFileSpec();
				}
				break;
			case T__92:
				{
				State = 2112;
				Match(T__92);
				State = 2113;
				Match(T__23);
				State = 2114;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 2117;
				Match(T__22);
				State = 2118;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 320, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 2125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2121;
				fileSpec();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2122;
				Match(T__61);
				State = 2123;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2124;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 322, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 2130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2127;
				Match(T__61);
				State = 2128;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2129;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 324, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 2136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2132;
				fileSpec();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2133;
				Match(T__48);
				State = 2134;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2135;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 326, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 2141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__48:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2138;
				Match(T__48);
				State = 2139;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2140;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 328, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 2147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2143;
				fileSpec();
				}
				break;
			case T__105:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2144;
				Match(T__105);
				State = 2145;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2146;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 330, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 2152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__105:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2149;
				Match(T__105);
				State = 2150;
				fileSpec();
				}
				break;
			case T__101:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2151;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringArrayLiteralContext stringArrayLiteral() {
		StringArrayLiteralContext _localctx = new StringArrayLiteralContext(Context, State);
		EnterRule(_localctx, 332, RULE_stringArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154;
			Match(T__101);
			State = 2156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 2155;
				stringExprList();
				}
			}

			State = 2158;
			Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexArrayLiteralContext regexArrayLiteral() {
		RegexArrayLiteralContext _localctx = new RegexArrayLiteralContext(Context, State);
		EnterRule(_localctx, 334, RULE_regexArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160;
			Match(T__101);
			State = 2162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 11L) != 0)) {
				{
				State = 2161;
				regexExprList();
				}
			}

			State = 2164;
			Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntArrayLiteralContext intArrayLiteral() {
		IntArrayLiteralContext _localctx = new IntArrayLiteralContext(Context, State);
		EnterRule(_localctx, 336, RULE_intArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2166;
			Match(T__101);
			State = 2168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==INTLITERAL) {
				{
				State = 2167;
				intExprList();
				}
			}

			State = 2170;
			Match(T__102);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 338, RULE_longOrShortDatasourceSpec);
		try {
			State = 2174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2172;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2173;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 340, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176;
			Match(T__2);
			State = 2177;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 342, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179;
			Match(T__24);
			State = 2180;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 344, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182;
			Match(T__27);
			State = 2183;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 346, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2185;
			Match(T__106);
			State = 2186;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 348, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2188;
			Match(T__62);
			State = 2189;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 350, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2191;
			Match(T__60);
			State = 2192;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 352, RULE_typedVarDecl);
		try {
			State = 2202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2194;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2195;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2196;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2197;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2198;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2199;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2200;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2201;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 354, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204;
			Match(T__2);
			State = 2205;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 356, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			Match(T__24);
			State = 2208;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 358, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210;
			Match(T__27);
			State = 2211;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 360, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2213;
			Match(T__27);
			State = 2214;
			Match(T__30);
			State = 2215;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 362, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2217;
			Match(T__62);
			State = 2218;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 364, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2220;
			Match(T__61);
			State = 2221;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 366, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223;
			Match(T__48);
			State = 2224;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 368, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			Match(T__105);
			State = 2227;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 370, RULE_datasourceEntriesInputLocation);
		try {
			State = 2231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__68:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2229;
				fileSpec();
				}
				break;
			case T__27:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2230;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,115,2234,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,1,0,1,0,1,1,5,1,376,8,1,10,1,12,1,
		379,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,496,8,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,3,3,505,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,526,8,7,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,540,8,8,1,9,1,9,1,9,1,9,3,9,546,8,9,1,9,
		1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,557,8,10,1,11,1,11,1,11,3,11,
		562,8,11,1,11,1,11,1,11,3,11,567,8,11,1,11,3,11,570,8,11,1,12,1,12,1,12,
		3,12,575,8,12,1,13,1,13,1,13,3,13,580,8,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,18,1,18,3,18,608,8,18,1,19,1,19,3,19,612,8,19,
		1,19,1,19,1,19,3,19,617,8,19,1,20,1,20,3,20,621,8,20,1,20,1,20,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,3,21,632,8,21,1,21,1,21,1,21,3,21,637,8,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,649,8,23,1,24,1,
		24,1,24,1,24,3,24,655,8,24,1,24,1,24,1,24,1,25,1,25,1,25,3,25,663,8,25,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,671,8,26,1,27,1,27,1,27,1,27,1,27,3,
		27,678,8,27,1,27,1,27,1,27,3,27,683,8,27,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
		1,31,3,31,706,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,3,34,721,8,34,1,35,1,35,3,35,725,8,35,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,3,36,736,8,36,1,37,1,37,1,37,1,37,1,37,1,37,3,
		37,744,8,37,1,37,1,37,3,37,748,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,3,38,759,8,38,1,38,3,38,762,8,38,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,3,39,773,8,39,1,40,1,40,1,40,3,40,778,8,40,1,41,1,41,
		1,41,1,42,1,42,1,42,3,42,786,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,794,
		8,43,1,44,1,44,3,44,798,8,44,1,45,3,45,801,8,45,1,45,1,45,1,45,1,46,1,
		46,3,46,808,8,46,1,47,1,47,1,47,3,47,813,8,47,1,48,1,48,1,48,3,48,818,
		8,48,1,48,1,48,1,48,1,48,3,48,824,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,
		48,832,8,48,1,48,1,48,3,48,836,8,48,1,49,1,49,1,49,1,49,1,49,3,49,843,
		8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,855,8,49,1,
		49,1,49,1,49,1,49,3,49,861,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
		870,8,49,1,49,3,49,873,8,49,1,49,1,49,1,49,3,49,878,8,49,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,3,49,887,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,
		49,896,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,905,8,49,1,49,1,49,
		3,49,909,8,49,1,50,1,50,1,50,1,50,1,50,3,50,916,8,50,1,51,1,51,1,52,1,
		52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,
		55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,960,8,56,3,56,
		962,8,56,1,57,1,57,1,57,1,57,3,57,968,8,57,1,58,1,58,1,58,1,58,3,58,974,
		8,58,1,59,1,59,1,59,1,59,3,59,980,8,59,1,60,1,60,1,60,1,60,3,60,986,8,
		60,1,61,1,61,1,61,1,61,3,61,992,8,61,1,62,1,62,1,62,1,62,1,62,3,62,999,
		8,62,1,63,1,63,1,63,3,63,1004,8,63,1,63,3,63,1007,8,63,1,64,1,64,1,65,
		1,65,3,65,1013,8,65,1,66,1,66,1,66,1,66,1,66,3,66,1020,8,66,1,66,1,66,
		3,66,1024,8,66,1,67,1,67,1,67,1,67,3,67,1030,8,67,1,67,3,67,1033,8,67,
		1,68,1,68,1,68,1,68,1,68,3,68,1040,8,68,1,68,1,68,1,68,3,68,1045,8,68,
		1,69,1,69,1,69,1,69,1,69,3,69,1052,8,69,1,69,3,69,1055,8,69,1,70,1,70,
		1,70,1,70,3,70,1061,8,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1069,8,71,
		1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,
		1,75,1,75,1,75,1,75,3,75,1089,8,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,
		1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,
		1,81,1,81,1,82,1,82,1,82,3,82,1117,8,82,1,83,1,83,1,83,1,84,3,84,1123,
		8,84,1,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,3,88,1136,
		8,88,1,89,1,89,1,90,1,90,3,90,1142,8,90,1,91,1,91,3,91,1146,8,91,1,92,
		1,92,3,92,1150,8,92,1,93,1,93,3,93,1154,8,93,1,94,1,94,3,94,1158,8,94,
		1,95,1,95,3,95,1162,8,95,1,96,1,96,3,96,1166,8,96,1,97,1,97,3,97,1170,
		8,97,1,98,1,98,1,98,1,98,3,98,1176,8,98,1,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,3,99,1186,8,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
		3,100,1196,8,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1204,8,101,
		1,102,1,102,1,102,3,102,1209,8,102,1,103,1,103,1,103,3,103,1214,8,103,
		1,103,1,103,1,103,1,103,3,103,1220,8,103,1,103,1,103,1,103,1,103,1,103,
		1,103,3,103,1228,8,103,1,103,1,103,3,103,1232,8,103,1,104,1,104,1,104,
		1,104,1,104,3,104,1239,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,104,3,104,1251,8,104,1,104,1,104,1,104,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,3,104,1263,8,104,1,104,3,104,1266,8,104,1,104,
		1,104,1,104,3,104,1271,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
		3,104,1280,8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1289,
		8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1298,8,104,1,104,
		1,104,3,104,1302,8,104,1,105,1,105,1,105,3,105,1307,8,105,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,3,106,1338,8,106,1,107,1,107,1,107,3,107,1343,8,107,
		1,108,1,108,1,108,3,108,1348,8,108,1,109,3,109,1351,8,109,1,109,1,109,
		1,110,1,110,1,110,1,111,1,111,1,111,3,111,1361,8,111,1,112,1,112,1,112,
		1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
		1,114,1,114,1,114,1,115,1,115,1,115,1,115,3,115,1385,8,115,1,115,1,115,
		1,115,1,115,1,115,1,115,3,115,1393,8,115,1,116,1,116,1,116,1,116,1,116,
		1,116,3,116,1401,8,116,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1409,
		8,117,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1417,8,118,1,119,1,119,
		1,119,3,119,1422,8,119,1,120,1,120,1,120,3,120,1427,8,120,1,120,1,120,
		1,120,1,120,3,120,1433,8,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,
		1441,8,120,1,120,1,120,3,120,1445,8,120,1,121,1,121,1,121,1,121,1,121,
		3,121,1452,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
		1,121,3,121,1464,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
		1,121,1,121,3,121,1476,8,121,1,121,3,121,1479,8,121,1,121,1,121,1,121,
		3,121,1484,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1493,
		8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1502,8,121,1,121,
		1,121,1,121,1,121,1,121,1,121,1,121,3,121,1511,8,121,1,121,1,121,1,121,
		3,121,1516,8,121,1,121,1,121,3,121,1520,8,121,1,121,3,121,1523,8,121,1,
		121,1,121,1,121,3,121,1528,8,121,1,121,1,121,3,121,1532,8,121,1,121,3,
		121,1535,8,121,1,121,3,121,1538,8,121,1,121,1,121,1,121,1,121,1,121,1,
		121,3,121,1546,8,121,1,121,1,121,1,121,1,121,1,121,3,121,1553,8,121,1,
		121,3,121,1556,8,121,1,121,1,121,3,121,1560,8,121,1,121,1,121,1,121,1,
		121,1,121,3,121,1567,8,121,1,121,1,121,1,121,3,121,1572,8,121,1,121,1,
		121,1,121,1,121,1,121,3,121,1579,8,121,1,121,1,121,1,121,3,121,1584,8,
		121,1,121,1,121,1,121,1,121,1,121,3,121,1591,8,121,1,121,3,121,1594,8,
		121,1,121,1,121,3,121,1598,8,121,1,121,1,121,1,121,1,121,1,121,3,121,1605,
		8,121,1,121,1,121,1,121,3,121,1610,8,121,1,121,1,121,1,121,1,121,1,121,
		3,121,1617,8,121,1,121,1,121,1,121,3,121,1622,8,121,1,121,1,121,3,121,
		1626,8,121,1,121,3,121,1629,8,121,1,121,3,121,1632,8,121,1,121,1,121,1,
		121,1,121,1,121,1,121,3,121,1640,8,121,1,121,1,121,3,121,1644,8,121,1,
		121,3,121,1647,8,121,1,121,3,121,1650,8,121,1,121,1,121,1,121,1,121,1,
		121,1,121,3,121,1658,8,121,1,122,1,122,1,123,1,123,1,123,3,123,1665,8,
		123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1675,8,124,1,
		124,3,124,1678,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,
		125,1688,8,125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1696,8,126,1,
		127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1706,8,127,1,128,1,
		128,1,128,3,128,1711,8,128,1,129,1,129,1,129,1,129,3,129,1717,8,129,1,
		130,1,130,1,130,3,130,1722,8,130,1,131,1,131,1,131,3,131,1727,8,131,1,
		131,1,131,1,131,1,131,3,131,1733,8,131,1,131,1,131,1,131,1,131,1,131,1,
		131,3,131,1741,8,131,1,131,1,131,3,131,1745,8,131,1,132,1,132,1,132,1,
		132,1,132,3,132,1752,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,
		132,1,132,1,132,3,132,1764,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,
		132,1,132,1,132,1,132,3,132,1776,8,132,1,132,3,132,1779,8,132,1,132,1,
		132,1,132,3,132,1784,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,
		132,1793,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1802,8,
		132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1811,8,132,1,132,1,
		132,3,132,1815,8,132,1,133,1,133,1,133,3,133,1820,8,133,1,134,1,134,1,
		134,1,134,3,134,1826,8,134,1,134,1,134,3,134,1830,8,134,1,134,1,134,1,
		134,1,134,3,134,1836,8,134,1,134,1,134,3,134,1840,8,134,1,134,1,134,1,
		134,1,134,1,134,3,134,1847,8,134,1,134,1,134,3,134,1851,8,134,1,135,1,
		135,1,135,1,135,1,135,1,136,1,136,1,136,3,136,1861,8,136,1,136,1,136,1,
		137,1,137,1,137,3,137,1868,8,137,1,138,1,138,3,138,1872,8,138,1,138,1,
		138,1,139,1,139,1,139,3,139,1879,8,139,1,140,1,140,1,140,3,140,1884,8,
		140,1,140,1,140,1,140,1,140,3,140,1890,8,140,1,140,1,140,1,140,1,140,1,
		140,1,140,3,140,1898,8,140,1,140,1,140,3,140,1902,8,140,1,141,1,141,1,
		141,1,141,1,141,3,141,1909,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,
		141,1,141,1,141,1,141,3,141,1921,8,141,1,141,1,141,1,141,1,141,1,141,1,
		141,1,141,1,141,1,141,1,141,3,141,1933,8,141,1,141,3,141,1936,8,141,1,
		141,1,141,1,141,3,141,1941,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,
		141,3,141,1950,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,1959,
		8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,1968,8,141,1,141,
		1,141,3,141,1972,8,141,1,142,1,142,3,142,1976,8,142,1,143,1,143,3,143,
		1980,8,143,1,144,1,144,3,144,1984,8,144,1,145,1,145,3,145,1988,8,145,1,
		146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
		1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2009,8,147,1,148,1,148,
		1,148,1,148,1,148,1,148,1,148,1,148,3,148,2019,8,148,1,149,1,149,1,149,
		1,149,1,149,1,149,1,149,1,149,3,149,2029,8,149,1,150,1,150,1,150,3,150,
		2034,8,150,1,150,1,150,3,150,2038,8,150,1,151,1,151,3,151,2042,8,151,1,
		151,1,151,3,151,2046,8,151,1,152,1,152,1,152,3,152,2051,8,152,1,152,1,
		152,3,152,2055,8,152,1,153,1,153,1,153,1,153,3,153,2061,8,153,1,153,1,
		153,3,153,2065,8,153,1,154,1,154,1,154,3,154,2070,8,154,1,154,1,154,3,
		154,2074,8,154,1,155,1,155,1,155,1,155,3,155,2080,8,155,1,155,1,155,3,
		155,2084,8,155,1,156,1,156,1,156,3,156,2089,8,156,1,156,1,156,3,156,2093,
		8,156,1,157,1,157,3,157,2097,8,157,1,157,1,157,3,157,2101,8,157,1,158,
		1,158,1,158,3,158,2106,8,158,1,158,1,158,3,158,2110,8,158,1,159,1,159,
		1,159,1,159,3,159,2116,8,159,1,159,1,159,3,159,2120,8,159,1,160,1,160,
		1,160,1,160,3,160,2126,8,160,1,161,1,161,1,161,3,161,2131,8,161,1,162,
		1,162,1,162,1,162,3,162,2137,8,162,1,163,1,163,1,163,3,163,2142,8,163,
		1,164,1,164,1,164,1,164,3,164,2148,8,164,1,165,1,165,1,165,3,165,2153,
		8,165,1,166,1,166,3,166,2157,8,166,1,166,1,166,1,167,1,167,3,167,2163,
		8,167,1,167,1,167,1,168,1,168,3,168,2169,8,168,1,168,1,168,1,169,1,169,
		3,169,2175,8,169,1,170,1,170,1,170,1,171,1,171,1,171,1,172,1,172,1,172,
		1,173,1,173,1,173,1,174,1,174,1,174,1,175,1,175,1,175,1,176,1,176,1,176,
		1,176,1,176,1,176,1,176,1,176,3,176,2203,8,176,1,177,1,177,1,177,1,178,
		1,178,1,178,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,181,1,181,1,181,
		1,182,1,182,1,182,1,183,1,183,1,183,1,184,1,184,1,184,1,185,1,185,3,185,
		2232,8,185,1,185,0,0,186,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
		230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
		266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
		302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
		338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,0,
		17,2,0,20,20,24,24,2,0,24,24,29,29,3,0,2,2,8,8,35,36,1,0,38,39,1,0,41,
		42,2,0,13,13,44,44,2,0,12,12,37,37,1,0,110,112,2,0,110,110,112,112,1,0,
		110,111,2,0,17,17,74,75,1,0,111,112,2,0,22,22,83,85,1,0,87,89,2,0,12,12,
		40,40,2,0,110,111,113,113,2,0,12,12,30,30,2444,0,372,1,0,0,0,2,377,1,0,
		0,0,4,495,1,0,0,0,6,497,1,0,0,0,8,506,1,0,0,0,10,512,1,0,0,0,12,518,1,
		0,0,0,14,522,1,0,0,0,16,539,1,0,0,0,18,541,1,0,0,0,20,550,1,0,0,0,22,569,
		1,0,0,0,24,571,1,0,0,0,26,576,1,0,0,0,28,581,1,0,0,0,30,589,1,0,0,0,32,
		595,1,0,0,0,34,601,1,0,0,0,36,607,1,0,0,0,38,616,1,0,0,0,40,618,1,0,0,
		0,42,624,1,0,0,0,44,638,1,0,0,0,46,644,1,0,0,0,48,650,1,0,0,0,50,659,1,
		0,0,0,52,670,1,0,0,0,54,672,1,0,0,0,56,684,1,0,0,0,58,691,1,0,0,0,60,696,
		1,0,0,0,62,705,1,0,0,0,64,707,1,0,0,0,66,713,1,0,0,0,68,720,1,0,0,0,70,
		724,1,0,0,0,72,726,1,0,0,0,74,737,1,0,0,0,76,749,1,0,0,0,78,763,1,0,0,
		0,80,774,1,0,0,0,82,779,1,0,0,0,84,782,1,0,0,0,86,793,1,0,0,0,88,797,1,
		0,0,0,90,800,1,0,0,0,92,807,1,0,0,0,94,809,1,0,0,0,96,835,1,0,0,0,98,908,
		1,0,0,0,100,915,1,0,0,0,102,917,1,0,0,0,104,919,1,0,0,0,106,924,1,0,0,
		0,108,929,1,0,0,0,110,934,1,0,0,0,112,961,1,0,0,0,114,963,1,0,0,0,116,
		969,1,0,0,0,118,975,1,0,0,0,120,981,1,0,0,0,122,987,1,0,0,0,124,993,1,
		0,0,0,126,1006,1,0,0,0,128,1008,1,0,0,0,130,1012,1,0,0,0,132,1023,1,0,
		0,0,134,1032,1,0,0,0,136,1044,1,0,0,0,138,1054,1,0,0,0,140,1056,1,0,0,
		0,142,1068,1,0,0,0,144,1070,1,0,0,0,146,1074,1,0,0,0,148,1078,1,0,0,0,
		150,1088,1,0,0,0,152,1090,1,0,0,0,154,1095,1,0,0,0,156,1098,1,0,0,0,158,
		1102,1,0,0,0,160,1105,1,0,0,0,162,1109,1,0,0,0,164,1116,1,0,0,0,166,1118,
		1,0,0,0,168,1122,1,0,0,0,170,1127,1,0,0,0,172,1129,1,0,0,0,174,1131,1,
		0,0,0,176,1135,1,0,0,0,178,1137,1,0,0,0,180,1141,1,0,0,0,182,1145,1,0,
		0,0,184,1149,1,0,0,0,186,1153,1,0,0,0,188,1157,1,0,0,0,190,1161,1,0,0,
		0,192,1165,1,0,0,0,194,1169,1,0,0,0,196,1175,1,0,0,0,198,1177,1,0,0,0,
		200,1187,1,0,0,0,202,1197,1,0,0,0,204,1205,1,0,0,0,206,1231,1,0,0,0,208,
		1301,1,0,0,0,210,1303,1,0,0,0,212,1337,1,0,0,0,214,1339,1,0,0,0,216,1344,
		1,0,0,0,218,1350,1,0,0,0,220,1354,1,0,0,0,222,1360,1,0,0,0,224,1362,1,
		0,0,0,226,1367,1,0,0,0,228,1372,1,0,0,0,230,1380,1,0,0,0,232,1394,1,0,
		0,0,234,1402,1,0,0,0,236,1410,1,0,0,0,238,1418,1,0,0,0,240,1444,1,0,0,
		0,242,1657,1,0,0,0,244,1659,1,0,0,0,246,1661,1,0,0,0,248,1666,1,0,0,0,
		250,1679,1,0,0,0,252,1689,1,0,0,0,254,1697,1,0,0,0,256,1707,1,0,0,0,258,
		1716,1,0,0,0,260,1718,1,0,0,0,262,1744,1,0,0,0,264,1814,1,0,0,0,266,1816,
		1,0,0,0,268,1850,1,0,0,0,270,1852,1,0,0,0,272,1857,1,0,0,0,274,1864,1,
		0,0,0,276,1871,1,0,0,0,278,1875,1,0,0,0,280,1901,1,0,0,0,282,1971,1,0,
		0,0,284,1975,1,0,0,0,286,1979,1,0,0,0,288,1983,1,0,0,0,290,1987,1,0,0,
		0,292,1989,1,0,0,0,294,2008,1,0,0,0,296,2018,1,0,0,0,298,2028,1,0,0,0,
		300,2033,1,0,0,0,302,2041,1,0,0,0,304,2050,1,0,0,0,306,2060,1,0,0,0,308,
		2069,1,0,0,0,310,2079,1,0,0,0,312,2088,1,0,0,0,314,2096,1,0,0,0,316,2105,
		1,0,0,0,318,2115,1,0,0,0,320,2125,1,0,0,0,322,2130,1,0,0,0,324,2136,1,
		0,0,0,326,2141,1,0,0,0,328,2147,1,0,0,0,330,2152,1,0,0,0,332,2154,1,0,
		0,0,334,2160,1,0,0,0,336,2166,1,0,0,0,338,2174,1,0,0,0,340,2176,1,0,0,
		0,342,2179,1,0,0,0,344,2182,1,0,0,0,346,2185,1,0,0,0,348,2188,1,0,0,0,
		350,2191,1,0,0,0,352,2202,1,0,0,0,354,2204,1,0,0,0,356,2207,1,0,0,0,358,
		2210,1,0,0,0,360,2213,1,0,0,0,362,2217,1,0,0,0,364,2220,1,0,0,0,366,2223,
		1,0,0,0,368,2226,1,0,0,0,370,2231,1,0,0,0,372,373,3,2,1,0,373,1,1,0,0,
		0,374,376,3,4,2,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,
		378,1,0,0,0,378,3,1,0,0,0,379,377,1,0,0,0,380,381,3,100,50,0,381,382,5,
		108,0,0,382,496,1,0,0,0,383,384,3,112,56,0,384,385,5,108,0,0,385,496,1,
		0,0,0,386,387,3,142,71,0,387,388,5,108,0,0,388,496,1,0,0,0,389,390,3,150,
		75,0,390,391,5,108,0,0,391,496,1,0,0,0,392,393,3,218,109,0,393,394,5,108,
		0,0,394,496,1,0,0,0,395,396,3,220,110,0,396,397,5,108,0,0,397,496,1,0,
		0,0,398,399,3,222,111,0,399,400,5,108,0,0,400,496,1,0,0,0,401,402,3,6,
		3,0,402,403,5,108,0,0,403,496,1,0,0,0,404,405,3,8,4,0,405,406,5,108,0,
		0,406,496,1,0,0,0,407,408,3,10,5,0,408,409,5,108,0,0,409,496,1,0,0,0,410,
		411,3,12,6,0,411,412,5,108,0,0,412,496,1,0,0,0,413,414,3,18,9,0,414,415,
		5,108,0,0,415,496,1,0,0,0,416,417,3,28,14,0,417,418,5,108,0,0,418,496,
		1,0,0,0,419,420,3,30,15,0,420,421,5,108,0,0,421,496,1,0,0,0,422,423,3,
		32,16,0,423,424,5,108,0,0,424,496,1,0,0,0,425,426,3,34,17,0,426,427,5,
		108,0,0,427,496,1,0,0,0,428,429,3,200,100,0,429,430,5,108,0,0,430,496,
		1,0,0,0,431,432,3,202,101,0,432,433,5,108,0,0,433,496,1,0,0,0,434,435,
		3,42,21,0,435,436,5,108,0,0,436,496,1,0,0,0,437,438,3,44,22,0,438,439,
		5,108,0,0,439,496,1,0,0,0,440,441,3,48,24,0,441,442,5,108,0,0,442,496,
		1,0,0,0,443,444,3,46,23,0,444,445,5,108,0,0,445,496,1,0,0,0,446,447,3,
		248,124,0,447,448,5,108,0,0,448,496,1,0,0,0,449,450,3,252,126,0,450,451,
		5,108,0,0,451,496,1,0,0,0,452,453,3,250,125,0,453,454,5,108,0,0,454,496,
		1,0,0,0,455,456,3,230,115,0,456,457,5,108,0,0,457,496,1,0,0,0,458,459,
		3,232,116,0,459,460,5,108,0,0,460,496,1,0,0,0,461,462,3,234,117,0,462,
		463,5,108,0,0,463,496,1,0,0,0,464,465,3,236,118,0,465,466,5,108,0,0,466,
		496,1,0,0,0,467,468,3,54,27,0,468,469,5,108,0,0,469,496,1,0,0,0,470,471,
		3,56,28,0,471,472,5,108,0,0,472,496,1,0,0,0,473,474,3,58,29,0,474,475,
		5,108,0,0,475,496,1,0,0,0,476,477,3,60,30,0,477,478,5,108,0,0,478,496,
		1,0,0,0,479,480,3,72,36,0,480,481,5,108,0,0,481,496,1,0,0,0,482,483,3,
		74,37,0,483,484,5,108,0,0,484,496,1,0,0,0,485,486,3,76,38,0,486,487,5,
		108,0,0,487,496,1,0,0,0,488,489,3,78,39,0,489,490,5,108,0,0,490,496,1,
		0,0,0,491,492,5,1,0,0,492,496,5,108,0,0,493,496,3,40,20,0,494,496,3,294,
		147,0,495,380,1,0,0,0,495,383,1,0,0,0,495,386,1,0,0,0,495,389,1,0,0,0,
		495,392,1,0,0,0,495,395,1,0,0,0,495,398,1,0,0,0,495,401,1,0,0,0,495,404,
		1,0,0,0,495,407,1,0,0,0,495,410,1,0,0,0,495,413,1,0,0,0,495,416,1,0,0,
		0,495,419,1,0,0,0,495,422,1,0,0,0,495,425,1,0,0,0,495,428,1,0,0,0,495,
		431,1,0,0,0,495,434,1,0,0,0,495,437,1,0,0,0,495,440,1,0,0,0,495,443,1,
		0,0,0,495,446,1,0,0,0,495,449,1,0,0,0,495,452,1,0,0,0,495,455,1,0,0,0,
		495,458,1,0,0,0,495,461,1,0,0,0,495,464,1,0,0,0,495,467,1,0,0,0,495,470,
		1,0,0,0,495,473,1,0,0,0,495,476,1,0,0,0,495,479,1,0,0,0,495,482,1,0,0,
		0,495,485,1,0,0,0,495,488,1,0,0,0,495,491,1,0,0,0,495,493,1,0,0,0,495,
		494,1,0,0,0,496,5,1,0,0,0,497,498,5,2,0,0,498,504,5,3,0,0,499,505,3,268,
		134,0,500,501,5,4,0,0,501,502,3,14,7,0,502,503,5,5,0,0,503,505,1,0,0,0,
		504,499,1,0,0,0,504,500,1,0,0,0,505,7,1,0,0,0,506,507,5,6,0,0,507,508,
		5,3,0,0,508,509,3,130,65,0,509,510,5,7,0,0,510,511,3,172,86,0,511,9,1,
		0,0,0,512,513,5,8,0,0,513,514,5,3,0,0,514,515,3,130,65,0,515,516,5,9,0,
		0,516,517,3,14,7,0,517,11,1,0,0,0,518,519,5,10,0,0,519,520,5,3,0,0,520,
		521,3,130,65,0,521,13,1,0,0,0,522,525,3,16,8,0,523,524,5,11,0,0,524,526,
		3,14,7,0,525,523,1,0,0,0,525,526,1,0,0,0,526,15,1,0,0,0,527,528,5,12,0,
		0,528,529,5,13,0,0,529,540,3,268,134,0,530,531,5,14,0,0,531,532,5,15,0,
		0,532,533,5,13,0,0,533,540,3,268,134,0,534,535,5,16,0,0,535,536,5,17,0,
		0,536,537,5,18,0,0,537,538,5,13,0,0,538,540,3,268,134,0,539,527,1,0,0,
		0,539,530,1,0,0,0,539,534,1,0,0,0,540,17,1,0,0,0,541,542,5,6,0,0,542,545,
		5,19,0,0,543,544,5,20,0,0,544,546,3,174,87,0,545,543,1,0,0,0,545,546,1,
		0,0,0,546,547,1,0,0,0,547,548,5,7,0,0,548,549,3,176,88,0,549,19,1,0,0,
		0,550,551,5,21,0,0,551,552,3,22,11,0,552,553,5,20,0,0,553,556,3,24,12,
		0,554,555,5,7,0,0,555,557,3,176,88,0,556,554,1,0,0,0,556,557,1,0,0,0,557,
		21,1,0,0,0,558,561,5,22,0,0,559,560,5,11,0,0,560,562,3,22,11,0,561,559,
		1,0,0,0,561,562,1,0,0,0,562,570,1,0,0,0,563,566,5,111,0,0,564,565,5,11,
		0,0,565,567,3,22,11,0,566,564,1,0,0,0,566,567,1,0,0,0,567,570,1,0,0,0,
		568,570,5,111,0,0,569,558,1,0,0,0,569,563,1,0,0,0,569,568,1,0,0,0,570,
		23,1,0,0,0,571,574,3,26,13,0,572,573,5,23,0,0,573,575,3,278,139,0,574,
		572,1,0,0,0,574,575,1,0,0,0,575,25,1,0,0,0,576,579,5,19,0,0,577,578,7,
		0,0,0,578,580,3,174,87,0,579,577,1,0,0,0,579,580,1,0,0,0,580,27,1,0,0,
		0,581,582,5,2,0,0,582,583,5,25,0,0,583,584,5,4,0,0,584,585,3,210,105,0,
		585,586,5,5,0,0,586,587,5,24,0,0,587,588,3,130,65,0,588,29,1,0,0,0,589,
		590,5,6,0,0,590,591,5,25,0,0,591,592,3,36,18,0,592,593,5,7,0,0,593,594,
		3,182,91,0,594,31,1,0,0,0,595,596,5,8,0,0,596,597,5,25,0,0,597,598,3,36,
		18,0,598,599,5,9,0,0,599,600,3,210,105,0,600,33,1,0,0,0,601,602,5,10,0,
		0,602,603,5,25,0,0,603,604,3,36,18,0,604,35,1,0,0,0,605,608,3,132,66,0,
		606,608,3,38,19,0,607,605,1,0,0,0,607,606,1,0,0,0,608,37,1,0,0,0,609,612,
		3,268,134,0,610,612,5,111,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,613,
		1,0,0,0,613,614,5,24,0,0,614,617,3,130,65,0,615,617,5,111,0,0,616,611,
		1,0,0,0,616,615,1,0,0,0,617,39,1,0,0,0,618,620,5,26,0,0,619,621,3,2,1,
		0,620,619,1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,623,5,27,0,0,623,
		41,1,0,0,0,624,625,5,2,0,0,625,631,5,28,0,0,626,632,3,268,134,0,627,628,
		5,4,0,0,628,629,3,50,25,0,629,630,5,5,0,0,630,632,1,0,0,0,631,626,1,0,
		0,0,631,627,1,0,0,0,632,633,1,0,0,0,633,636,7,1,0,0,634,637,3,126,63,0,
		635,637,3,128,64,0,636,634,1,0,0,0,636,635,1,0,0,0,637,43,1,0,0,0,638,
		639,5,6,0,0,639,640,5,28,0,0,640,641,3,338,169,0,641,642,5,7,0,0,642,643,
		3,290,145,0,643,45,1,0,0,0,644,645,5,10,0,0,645,648,5,28,0,0,646,649,3,
		140,70,0,647,649,3,138,69,0,648,646,1,0,0,0,648,647,1,0,0,0,649,47,1,0,
		0,0,650,651,5,8,0,0,651,654,5,28,0,0,652,655,3,140,70,0,653,655,3,138,
		69,0,654,652,1,0,0,0,654,653,1,0,0,0,655,656,1,0,0,0,656,657,5,9,0,0,657,
		658,3,50,25,0,658,49,1,0,0,0,659,662,3,52,26,0,660,661,5,11,0,0,661,663,
		3,50,25,0,662,660,1,0,0,0,662,663,1,0,0,0,663,51,1,0,0,0,664,665,5,12,
		0,0,665,666,5,13,0,0,666,671,3,268,134,0,667,668,5,30,0,0,668,669,5,13,
		0,0,669,671,3,268,134,0,670,664,1,0,0,0,670,667,1,0,0,0,671,53,1,0,0,0,
		672,673,5,2,0,0,673,674,5,28,0,0,674,677,5,31,0,0,675,678,3,268,134,0,
		676,678,3,84,42,0,677,675,1,0,0,0,677,676,1,0,0,0,678,679,1,0,0,0,679,
		682,7,1,0,0,680,683,3,138,69,0,681,683,3,140,70,0,682,680,1,0,0,0,682,
		681,1,0,0,0,683,55,1,0,0,0,684,685,5,6,0,0,685,686,5,28,0,0,686,687,5,
		31,0,0,687,688,3,62,31,0,688,689,5,7,0,0,689,690,3,70,35,0,690,57,1,0,
		0,0,691,692,5,10,0,0,692,693,5,28,0,0,693,694,5,31,0,0,694,695,3,66,33,
		0,695,59,1,0,0,0,696,697,5,8,0,0,697,698,5,28,0,0,698,699,5,31,0,0,699,
		700,3,66,33,0,700,701,5,9,0,0,701,702,3,84,42,0,702,61,1,0,0,0,703,706,
		3,64,32,0,704,706,3,66,33,0,705,703,1,0,0,0,705,704,1,0,0,0,706,63,1,0,
		0,0,707,708,5,28,0,0,708,709,5,31,0,0,709,710,3,68,34,0,710,711,7,0,0,
		0,711,712,3,138,69,0,712,65,1,0,0,0,713,714,3,68,34,0,714,715,7,0,0,0,
		715,716,3,138,69,0,716,67,1,0,0,0,717,721,3,216,108,0,718,721,3,268,134,
		0,719,721,5,111,0,0,720,717,1,0,0,0,720,718,1,0,0,0,720,719,1,0,0,0,721,
		69,1,0,0,0,722,725,3,338,169,0,723,725,3,168,84,0,724,722,1,0,0,0,724,
		723,1,0,0,0,725,71,1,0,0,0,726,727,5,8,0,0,727,728,5,28,0,0,728,729,5,
		32,0,0,729,730,5,24,0,0,730,731,3,138,69,0,731,732,5,9,0,0,732,735,3,84,
		42,0,733,734,5,23,0,0,734,736,3,94,47,0,735,733,1,0,0,0,735,736,1,0,0,
		0,736,73,1,0,0,0,737,738,5,10,0,0,738,739,5,28,0,0,739,740,5,32,0,0,740,
		743,7,0,0,0,741,744,3,138,69,0,742,744,3,140,70,0,743,741,1,0,0,0,743,
		742,1,0,0,0,744,747,1,0,0,0,745,746,5,23,0,0,746,748,3,94,47,0,747,745,
		1,0,0,0,747,748,1,0,0,0,748,75,1,0,0,0,749,750,5,6,0,0,750,751,5,28,0,
		0,751,752,5,32,0,0,752,753,7,0,0,0,753,754,3,88,44,0,754,755,5,7,0,0,755,
		758,3,92,46,0,756,757,5,23,0,0,757,759,3,94,47,0,758,756,1,0,0,0,758,759,
		1,0,0,0,759,761,1,0,0,0,760,762,3,80,40,0,761,760,1,0,0,0,761,762,1,0,
		0,0,762,77,1,0,0,0,763,764,5,33,0,0,764,765,5,28,0,0,765,766,5,32,0,0,
		766,767,7,0,0,0,767,768,3,88,44,0,768,769,5,7,0,0,769,772,3,88,44,0,770,
		771,5,23,0,0,771,773,3,94,47,0,772,770,1,0,0,0,772,773,1,0,0,0,773,79,
		1,0,0,0,774,777,3,82,41,0,775,776,5,11,0,0,776,778,3,80,40,0,777,775,1,
		0,0,0,777,778,1,0,0,0,778,81,1,0,0,0,779,780,5,34,0,0,780,781,7,2,0,0,
		781,83,1,0,0,0,782,785,3,86,43,0,783,784,5,11,0,0,784,786,3,84,42,0,785,
		783,1,0,0,0,785,786,1,0,0,0,786,85,1,0,0,0,787,788,5,12,0,0,788,789,5,
		13,0,0,789,794,3,268,134,0,790,791,5,37,0,0,791,792,5,13,0,0,792,794,3,
		268,134,0,793,787,1,0,0,0,793,790,1,0,0,0,794,87,1,0,0,0,795,798,3,338,
		169,0,796,798,3,168,84,0,797,795,1,0,0,0,797,796,1,0,0,0,798,89,1,0,0,
		0,799,801,7,3,0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,
		803,5,40,0,0,803,804,3,268,134,0,804,91,1,0,0,0,805,808,3,338,169,0,806,
		808,3,168,84,0,807,805,1,0,0,0,807,806,1,0,0,0,808,93,1,0,0,0,809,812,
		3,96,48,0,810,811,7,4,0,0,811,813,3,94,47,0,812,810,1,0,0,0,812,813,1,
		0,0,0,813,95,1,0,0,0,814,817,3,98,49,0,815,816,7,4,0,0,816,818,3,96,48,
		0,817,815,1,0,0,0,817,818,1,0,0,0,818,836,1,0,0,0,819,820,5,4,0,0,820,
		823,3,98,49,0,821,822,7,4,0,0,822,824,3,96,48,0,823,821,1,0,0,0,823,824,
		1,0,0,0,824,825,1,0,0,0,825,826,5,5,0,0,826,836,1,0,0,0,827,828,5,4,0,
		0,828,831,3,96,48,0,829,830,7,4,0,0,830,832,3,96,48,0,831,829,1,0,0,0,
		831,832,1,0,0,0,832,833,1,0,0,0,833,834,5,5,0,0,834,836,1,0,0,0,835,814,
		1,0,0,0,835,819,1,0,0,0,835,827,1,0,0,0,836,97,1,0,0,0,837,838,5,43,0,
		0,838,839,7,5,0,0,839,909,3,216,108,0,840,842,5,43,0,0,841,843,5,45,0,
		0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,5,24,0,0,845,
		846,5,4,0,0,846,847,3,214,107,0,847,848,5,5,0,0,848,909,1,0,0,0,849,850,
		7,6,0,0,850,851,7,5,0,0,851,909,3,268,134,0,852,854,7,6,0,0,853,855,5,
		45,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,857,5,24,0,
		0,857,860,5,4,0,0,858,861,3,266,133,0,859,861,3,246,123,0,860,858,1,0,
		0,0,860,859,1,0,0,0,861,862,1,0,0,0,862,863,5,5,0,0,863,909,1,0,0,0,864,
		869,7,6,0,0,865,870,5,46,0,0,866,867,5,47,0,0,867,868,5,45,0,0,868,870,
		5,48,0,0,869,865,1,0,0,0,869,866,1,0,0,0,870,872,1,0,0,0,871,873,5,49,
		0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,0,874,909,3,244,122,
		0,875,877,7,6,0,0,876,878,5,45,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,
		879,1,0,0,0,879,880,5,24,0,0,880,881,5,4,0,0,881,882,3,266,133,0,882,883,
		5,5,0,0,883,909,1,0,0,0,884,886,7,6,0,0,885,887,5,45,0,0,886,885,1,0,0,
		0,886,887,1,0,0,0,887,888,1,0,0,0,888,889,5,50,0,0,889,909,3,268,134,0,
		890,895,7,6,0,0,891,896,5,51,0,0,892,893,5,47,0,0,893,894,5,45,0,0,894,
		896,5,52,0,0,895,891,1,0,0,0,895,892,1,0,0,0,896,897,1,0,0,0,897,898,5,
		53,0,0,898,909,3,268,134,0,899,904,7,6,0,0,900,905,5,54,0,0,901,902,5,
		47,0,0,902,903,5,45,0,0,903,905,5,55,0,0,904,900,1,0,0,0,904,901,1,0,0,
		0,905,906,1,0,0,0,906,907,5,53,0,0,907,909,3,268,134,0,908,837,1,0,0,0,
		908,840,1,0,0,0,908,849,1,0,0,0,908,852,1,0,0,0,908,864,1,0,0,0,908,875,
		1,0,0,0,908,884,1,0,0,0,908,890,1,0,0,0,908,899,1,0,0,0,909,99,1,0,0,0,
		910,916,3,102,51,0,911,916,3,104,52,0,912,916,3,106,53,0,913,916,3,108,
		54,0,914,916,3,110,55,0,915,910,1,0,0,0,915,911,1,0,0,0,915,912,1,0,0,
		0,915,913,1,0,0,0,915,914,1,0,0,0,916,101,1,0,0,0,917,918,5,56,0,0,918,
		103,1,0,0,0,919,920,5,56,0,0,920,921,5,53,0,0,921,922,5,57,0,0,922,923,
		5,58,0,0,923,105,1,0,0,0,924,925,5,56,0,0,925,926,5,53,0,0,926,927,5,57,
		0,0,927,928,5,59,0,0,928,107,1,0,0,0,929,930,5,56,0,0,930,931,5,53,0,0,
		931,932,5,57,0,0,932,933,5,60,0,0,933,109,1,0,0,0,934,935,5,56,0,0,935,
		936,5,53,0,0,936,937,5,57,0,0,937,938,5,58,0,0,938,939,5,41,0,0,939,940,
		5,59,0,0,940,111,1,0,0,0,941,962,3,114,57,0,942,962,3,116,58,0,943,962,
		3,118,59,0,944,962,3,120,60,0,945,962,3,122,61,0,946,962,3,124,62,0,947,
		948,5,61,0,0,948,949,5,111,0,0,949,959,5,13,0,0,950,960,5,111,0,0,951,
		960,3,126,63,0,952,960,3,132,66,0,953,960,3,268,134,0,954,960,3,244,122,
		0,955,960,3,134,67,0,956,960,3,216,108,0,957,960,3,136,68,0,958,960,3,
		138,69,0,959,950,1,0,0,0,959,951,1,0,0,0,959,952,1,0,0,0,959,953,1,0,0,
		0,959,954,1,0,0,0,959,955,1,0,0,0,959,956,1,0,0,0,959,957,1,0,0,0,959,
		958,1,0,0,0,960,962,1,0,0,0,961,941,1,0,0,0,961,942,1,0,0,0,961,943,1,
		0,0,0,961,944,1,0,0,0,961,945,1,0,0,0,961,946,1,0,0,0,961,947,1,0,0,0,
		962,113,1,0,0,0,963,964,5,3,0,0,964,967,5,111,0,0,965,966,5,13,0,0,966,
		968,3,126,63,0,967,965,1,0,0,0,967,968,1,0,0,0,968,115,1,0,0,0,969,970,
		5,25,0,0,970,973,5,111,0,0,971,972,5,13,0,0,972,974,3,132,66,0,973,971,
		1,0,0,0,973,974,1,0,0,0,974,117,1,0,0,0,975,976,5,62,0,0,976,979,5,111,
		0,0,977,978,5,13,0,0,978,980,3,268,134,0,979,977,1,0,0,0,979,980,1,0,0,
		0,980,119,1,0,0,0,981,982,5,49,0,0,982,985,5,111,0,0,983,984,5,13,0,0,
		984,986,3,244,122,0,985,983,1,0,0,0,985,986,1,0,0,0,986,121,1,0,0,0,987,
		988,5,63,0,0,988,991,5,111,0,0,989,990,5,13,0,0,990,992,3,134,67,0,991,
		989,1,0,0,0,991,992,1,0,0,0,992,123,1,0,0,0,993,994,5,28,0,0,994,995,5,
		31,0,0,995,998,5,111,0,0,996,997,5,13,0,0,997,999,3,136,68,0,998,996,1,
		0,0,0,998,999,1,0,0,0,999,125,1,0,0,0,1000,1001,5,3,0,0,1001,1003,7,7,
		0,0,1002,1004,3,196,98,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1007,
		1,0,0,0,1005,1007,5,111,0,0,1006,1000,1,0,0,0,1006,1005,1,0,0,0,1007,127,
		1,0,0,0,1008,1009,7,8,0,0,1009,129,1,0,0,0,1010,1013,3,126,63,0,1011,1013,
		3,128,64,0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,131,1,0,0,0,1014,1015,
		5,25,0,0,1015,1016,5,110,0,0,1016,1019,5,24,0,0,1017,1020,3,126,63,0,1018,
		1020,3,166,83,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,1024,1,0,0,0,
		1021,1022,5,25,0,0,1022,1024,5,111,0,0,1023,1014,1,0,0,0,1023,1021,1,0,
		0,0,1024,133,1,0,0,0,1025,1026,7,7,0,0,1026,1029,7,0,0,0,1027,1030,3,126,
		63,0,1028,1030,3,166,83,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,1033,
		1,0,0,0,1031,1033,5,111,0,0,1032,1025,1,0,0,0,1032,1031,1,0,0,0,1033,135,
		1,0,0,0,1034,1035,5,28,0,0,1035,1039,5,31,0,0,1036,1040,3,216,108,0,1037,
		1040,3,268,134,0,1038,1040,5,111,0,0,1039,1036,1,0,0,0,1039,1037,1,0,0,
		0,1039,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1042,7,0,0,0,1042,1045,3,138,
		69,0,1043,1045,5,111,0,0,1044,1034,1,0,0,0,1044,1043,1,0,0,0,1045,137,
		1,0,0,0,1046,1047,5,28,0,0,1047,1048,7,7,0,0,1048,1051,7,0,0,0,1049,1052,
		3,126,63,0,1050,1052,3,128,64,0,1051,1049,1,0,0,0,1051,1050,1,0,0,0,1052,
		1055,1,0,0,0,1053,1055,5,111,0,0,1054,1046,1,0,0,0,1054,1053,1,0,0,0,1055,
		139,1,0,0,0,1056,1057,7,7,0,0,1057,1060,5,24,0,0,1058,1061,3,126,63,0,
		1059,1061,3,128,64,0,1060,1058,1,0,0,0,1060,1059,1,0,0,0,1061,141,1,0,
		0,0,1062,1063,5,111,0,0,1063,1064,5,13,0,0,1064,1069,5,111,0,0,1065,1069,
		3,144,72,0,1066,1069,3,148,74,0,1067,1069,3,146,73,0,1068,1062,1,0,0,0,
		1068,1065,1,0,0,0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,143,1,0,0,0,
		1070,1071,5,111,0,0,1071,1072,5,13,0,0,1072,1073,3,126,63,0,1073,145,1,
		0,0,0,1074,1075,5,111,0,0,1075,1076,5,13,0,0,1076,1077,3,132,66,0,1077,
		147,1,0,0,0,1078,1079,5,111,0,0,1079,1080,5,13,0,0,1080,1081,5,110,0,0,
		1081,149,1,0,0,0,1082,1089,3,152,76,0,1083,1089,3,154,77,0,1084,1089,3,
		156,78,0,1085,1089,3,158,79,0,1086,1089,3,160,80,0,1087,1089,3,162,81,
		0,1088,1082,1,0,0,0,1088,1083,1,0,0,0,1088,1084,1,0,0,0,1088,1085,1,0,
		0,0,1088,1086,1,0,0,0,1088,1087,1,0,0,0,1089,151,1,0,0,0,1090,1091,5,64,
		0,0,1091,1092,5,19,0,0,1092,1093,5,20,0,0,1093,1094,3,164,82,0,1094,153,
		1,0,0,0,1095,1096,5,64,0,0,1096,1097,5,111,0,0,1097,155,1,0,0,0,1098,1099,
		5,64,0,0,1099,1100,5,3,0,0,1100,1101,7,9,0,0,1101,157,1,0,0,0,1102,1103,
		5,64,0,0,1103,1104,5,110,0,0,1104,159,1,0,0,0,1105,1106,5,64,0,0,1106,
		1107,5,65,0,0,1107,1108,5,66,0,0,1108,161,1,0,0,0,1109,1110,5,64,0,0,1110,
		1111,5,67,0,0,1111,1112,5,68,0,0,1112,163,1,0,0,0,1113,1117,5,14,0,0,1114,
		1115,5,67,0,0,1115,1117,5,68,0,0,1116,1113,1,0,0,0,1116,1114,1,0,0,0,1117,
		165,1,0,0,0,1118,1119,5,69,0,0,1119,1120,3,268,134,0,1120,167,1,0,0,0,
		1121,1123,7,3,0,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,
		0,1124,1125,5,69,0,0,1125,1126,3,268,134,0,1126,169,1,0,0,0,1127,1128,
		3,166,83,0,1128,171,1,0,0,0,1129,1130,3,166,83,0,1130,173,1,0,0,0,1131,
		1132,3,166,83,0,1132,175,1,0,0,0,1133,1136,3,166,83,0,1134,1136,3,178,
		89,0,1135,1133,1,0,0,0,1135,1134,1,0,0,0,1136,177,1,0,0,0,1137,1138,3,
		268,134,0,1138,179,1,0,0,0,1139,1142,3,166,83,0,1140,1142,3,130,65,0,1141,
		1139,1,0,0,0,1141,1140,1,0,0,0,1142,181,1,0,0,0,1143,1146,3,166,83,0,1144,
		1146,3,130,65,0,1145,1143,1,0,0,0,1145,1144,1,0,0,0,1146,183,1,0,0,0,1147,
		1150,3,166,83,0,1148,1150,3,130,65,0,1149,1147,1,0,0,0,1149,1148,1,0,0,
		0,1150,185,1,0,0,0,1151,1154,3,166,83,0,1152,1154,3,130,65,0,1153,1151,
		1,0,0,0,1153,1152,1,0,0,0,1154,187,1,0,0,0,1155,1158,3,166,83,0,1156,1158,
		3,130,65,0,1157,1155,1,0,0,0,1157,1156,1,0,0,0,1158,189,1,0,0,0,1159,1162,
		3,166,83,0,1160,1162,3,130,65,0,1161,1159,1,0,0,0,1161,1160,1,0,0,0,1162,
		191,1,0,0,0,1163,1166,3,166,83,0,1164,1166,3,130,65,0,1165,1163,1,0,0,
		0,1165,1164,1,0,0,0,1166,193,1,0,0,0,1167,1170,3,166,83,0,1168,1170,3,
		130,65,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,195,1,0,0,0,1171,1172,
		5,70,0,0,1172,1176,5,14,0,0,1173,1174,5,24,0,0,1174,1176,3,166,83,0,1175,
		1171,1,0,0,0,1175,1173,1,0,0,0,1176,197,1,0,0,0,1177,1178,5,8,0,0,1178,
		1179,5,71,0,0,1179,1180,5,24,0,0,1180,1181,3,130,65,0,1181,1182,5,9,0,
		0,1182,1185,3,210,105,0,1183,1184,5,23,0,0,1184,1186,3,204,102,0,1185,
		1183,1,0,0,0,1185,1186,1,0,0,0,1186,199,1,0,0,0,1187,1188,5,6,0,0,1188,
		1189,5,71,0,0,1189,1190,7,0,0,0,1190,1191,3,130,65,0,1191,1192,5,7,0,0,
		1192,1195,3,186,93,0,1193,1194,5,23,0,0,1194,1196,3,204,102,0,1195,1193,
		1,0,0,0,1195,1196,1,0,0,0,1196,201,1,0,0,0,1197,1198,5,10,0,0,1198,1199,
		5,71,0,0,1199,1200,7,0,0,0,1200,1203,3,130,65,0,1201,1202,5,23,0,0,1202,
		1204,3,204,102,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,203,1,0,0,0,
		1205,1208,3,206,103,0,1206,1207,7,4,0,0,1207,1209,3,204,102,0,1208,1206,
		1,0,0,0,1208,1209,1,0,0,0,1209,205,1,0,0,0,1210,1213,3,208,104,0,1211,
		1212,7,4,0,0,1212,1214,3,206,103,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,
		1214,1232,1,0,0,0,1215,1216,5,4,0,0,1216,1219,3,208,104,0,1217,1218,7,
		4,0,0,1218,1220,3,206,103,0,1219,1217,1,0,0,0,1219,1220,1,0,0,0,1220,1221,
		1,0,0,0,1221,1222,5,5,0,0,1222,1232,1,0,0,0,1223,1224,5,4,0,0,1224,1227,
		3,206,103,0,1225,1226,7,4,0,0,1226,1228,3,206,103,0,1227,1225,1,0,0,0,
		1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,5,0,0,1230,1232,1,0,0,
		0,1231,1210,1,0,0,0,1231,1215,1,0,0,0,1231,1223,1,0,0,0,1232,207,1,0,0,
		0,1233,1234,5,43,0,0,1234,1235,7,5,0,0,1235,1302,3,216,108,0,1236,1238,
		5,43,0,0,1237,1239,5,45,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1240,
		1,0,0,0,1240,1241,5,24,0,0,1241,1242,5,4,0,0,1242,1243,3,214,107,0,1243,
		1244,5,5,0,0,1244,1302,1,0,0,0,1245,1246,5,12,0,0,1246,1247,7,5,0,0,1247,
		1302,3,268,134,0,1248,1250,5,12,0,0,1249,1251,5,45,0,0,1250,1249,1,0,0,
		0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,5,24,0,0,1253,1254,5,4,
		0,0,1254,1255,3,266,133,0,1255,1256,5,5,0,0,1256,1302,1,0,0,0,1257,1262,
		5,12,0,0,1258,1263,5,46,0,0,1259,1260,5,47,0,0,1260,1261,5,45,0,0,1261,
		1263,5,48,0,0,1262,1258,1,0,0,0,1262,1259,1,0,0,0,1263,1265,1,0,0,0,1264,
		1266,5,49,0,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,
		1302,3,244,122,0,1268,1270,5,12,0,0,1269,1271,5,45,0,0,1270,1269,1,0,0,
		0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1273,5,24,0,0,1273,1274,5,4,
		0,0,1274,1275,3,246,123,0,1275,1276,5,5,0,0,1276,1302,1,0,0,0,1277,1279,
		5,12,0,0,1278,1280,5,45,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,
		1,0,0,0,1281,1282,5,50,0,0,1282,1302,3,268,134,0,1283,1288,5,12,0,0,1284,
		1289,5,51,0,0,1285,1286,5,47,0,0,1286,1287,5,45,0,0,1287,1289,5,52,0,0,
		1288,1284,1,0,0,0,1288,1285,1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,53,0,
		0,1291,1302,3,268,134,0,1292,1297,5,12,0,0,1293,1298,5,54,0,0,1294,1295,
		5,47,0,0,1295,1296,5,45,0,0,1296,1298,5,55,0,0,1297,1293,1,0,0,0,1297,
		1294,1,0,0,0,1298,1299,1,0,0,0,1299,1300,5,53,0,0,1300,1302,3,268,134,
		0,1301,1233,1,0,0,0,1301,1236,1,0,0,0,1301,1245,1,0,0,0,1301,1248,1,0,
		0,0,1301,1257,1,0,0,0,1301,1268,1,0,0,0,1301,1277,1,0,0,0,1301,1283,1,
		0,0,0,1301,1292,1,0,0,0,1302,209,1,0,0,0,1303,1306,3,212,106,0,1304,1305,
		5,11,0,0,1305,1307,3,210,105,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,
		211,1,0,0,0,1308,1309,5,72,0,0,1309,1310,5,12,0,0,1310,1311,5,13,0,0,1311,
		1338,3,268,134,0,1312,1313,5,73,0,0,1313,1314,5,12,0,0,1314,1315,5,13,
		0,0,1315,1338,3,268,134,0,1316,1317,5,18,0,0,1317,1318,5,13,0,0,1318,1338,
		7,10,0,0,1319,1320,5,76,0,0,1320,1321,5,77,0,0,1321,1338,3,268,134,0,1322,
		1323,5,78,0,0,1323,1324,5,77,0,0,1324,1338,3,268,134,0,1325,1326,5,79,
		0,0,1326,1327,5,80,0,0,1327,1328,5,13,0,0,1328,1338,3,268,134,0,1329,1330,
		5,79,0,0,1330,1331,5,81,0,0,1331,1332,5,13,0,0,1332,1338,3,268,134,0,1333,
		1334,5,79,0,0,1334,1335,5,82,0,0,1335,1336,5,13,0,0,1336,1338,3,268,134,
		0,1337,1308,1,0,0,0,1337,1312,1,0,0,0,1337,1316,1,0,0,0,1337,1319,1,0,
		0,0,1337,1322,1,0,0,0,1337,1325,1,0,0,0,1337,1329,1,0,0,0,1337,1333,1,
		0,0,0,1338,213,1,0,0,0,1339,1342,3,216,108,0,1340,1341,5,11,0,0,1341,1343,
		3,214,107,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,215,1,0,0,0,1344,
		1347,7,11,0,0,1345,1346,7,12,0,0,1346,1348,3,216,108,0,1347,1345,1,0,0,
		0,1347,1348,1,0,0,0,1348,217,1,0,0,0,1349,1351,5,86,0,0,1350,1349,1,0,
		0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,7,13,0,0,1353,219,1,
		0,0,0,1354,1355,5,90,0,0,1355,1356,5,112,0,0,1356,221,1,0,0,0,1357,1361,
		3,224,112,0,1358,1361,3,226,113,0,1359,1361,3,228,114,0,1360,1357,1,0,
		0,0,1360,1358,1,0,0,0,1360,1359,1,0,0,0,1361,223,1,0,0,0,1362,1363,5,91,
		0,0,1363,1364,3,126,63,0,1364,1365,5,41,0,0,1365,1366,3,126,63,0,1366,
		225,1,0,0,0,1367,1368,5,91,0,0,1368,1369,3,132,66,0,1369,1370,5,41,0,0,
		1370,1371,3,132,66,0,1371,227,1,0,0,0,1372,1373,5,91,0,0,1373,1374,5,92,
		0,0,1374,1375,5,71,0,0,1375,1376,5,24,0,0,1376,1377,3,126,63,0,1377,1378,
		5,41,0,0,1378,1379,3,126,63,0,1379,229,1,0,0,0,1380,1381,5,6,0,0,1381,
		1384,5,93,0,0,1382,1383,5,53,0,0,1383,1385,5,17,0,0,1384,1382,1,0,0,0,
		1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1387,7,0,0,0,1387,1388,3,192,
		96,0,1388,1389,5,7,0,0,1389,1392,3,194,97,0,1390,1391,5,23,0,0,1391,1393,
		3,238,119,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,231,1,0,0,0,1394,
		1395,5,94,0,0,1395,1396,5,93,0,0,1396,1397,7,0,0,0,1397,1400,3,130,65,
		0,1398,1399,5,23,0,0,1399,1401,3,238,119,0,1400,1398,1,0,0,0,1400,1401,
		1,0,0,0,1401,233,1,0,0,0,1402,1403,5,95,0,0,1403,1404,5,93,0,0,1404,1405,
		7,0,0,0,1405,1408,3,130,65,0,1406,1407,5,23,0,0,1407,1409,3,238,119,0,
		1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,235,1,0,0,0,1410,1411,5,10,0,
		0,1411,1412,5,93,0,0,1412,1413,7,0,0,0,1413,1416,3,130,65,0,1414,1415,
		5,23,0,0,1415,1417,3,238,119,0,1416,1414,1,0,0,0,1416,1417,1,0,0,0,1417,
		237,1,0,0,0,1418,1421,3,240,120,0,1419,1420,7,4,0,0,1420,1422,3,238,119,
		0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,239,1,0,0,0,1423,1426,3,242,
		121,0,1424,1425,7,4,0,0,1425,1427,3,240,120,0,1426,1424,1,0,0,0,1426,1427,
		1,0,0,0,1427,1445,1,0,0,0,1428,1429,5,4,0,0,1429,1432,3,242,121,0,1430,
		1431,7,4,0,0,1431,1433,3,240,120,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,
		1433,1434,1,0,0,0,1434,1435,5,5,0,0,1435,1445,1,0,0,0,1436,1437,5,4,0,
		0,1437,1440,3,240,120,0,1438,1439,7,4,0,0,1439,1441,3,240,120,0,1440,1438,
		1,0,0,0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,1443,5,5,0,0,1443,1445,
		1,0,0,0,1444,1423,1,0,0,0,1444,1428,1,0,0,0,1444,1436,1,0,0,0,1445,241,
		1,0,0,0,1446,1447,5,43,0,0,1447,1448,7,5,0,0,1448,1658,3,216,108,0,1449,
		1451,5,43,0,0,1450,1452,5,45,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,
		1453,1,0,0,0,1453,1454,5,24,0,0,1454,1455,5,4,0,0,1455,1456,3,214,107,
		0,1456,1457,5,5,0,0,1457,1658,1,0,0,0,1458,1459,7,14,0,0,1459,1460,7,5,
		0,0,1460,1658,3,268,134,0,1461,1463,7,14,0,0,1462,1464,5,45,0,0,1463,1462,
		1,0,0,0,1463,1464,1,0,0,0,1464,1465,1,0,0,0,1465,1466,5,24,0,0,1466,1467,
		5,4,0,0,1467,1468,3,266,133,0,1468,1469,5,5,0,0,1469,1658,1,0,0,0,1470,
		1475,7,14,0,0,1471,1476,5,46,0,0,1472,1473,5,47,0,0,1473,1474,5,45,0,0,
		1474,1476,5,48,0,0,1475,1471,1,0,0,0,1475,1472,1,0,0,0,1476,1478,1,0,0,
		0,1477,1479,5,49,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,
		0,0,1480,1658,3,244,122,0,1481,1483,7,14,0,0,1482,1484,5,45,0,0,1483,1482,
		1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,1485,1486,5,24,0,0,1486,1487,
		5,4,0,0,1487,1488,3,266,133,0,1488,1489,5,5,0,0,1489,1658,1,0,0,0,1490,
		1492,7,14,0,0,1491,1493,5,45,0,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,
		1494,1,0,0,0,1494,1495,5,50,0,0,1495,1658,3,268,134,0,1496,1501,7,14,0,
		0,1497,1502,5,51,0,0,1498,1499,5,47,0,0,1499,1500,5,45,0,0,1500,1502,5,
		52,0,0,1501,1497,1,0,0,0,1501,1498,1,0,0,0,1502,1503,1,0,0,0,1503,1504,
		5,53,0,0,1504,1658,3,268,134,0,1505,1510,7,14,0,0,1506,1511,5,54,0,0,1507,
		1508,5,47,0,0,1508,1509,5,45,0,0,1509,1511,5,55,0,0,1510,1506,1,0,0,0,
		1510,1507,1,0,0,0,1511,1512,1,0,0,0,1512,1513,5,53,0,0,1513,1658,3,268,
		134,0,1514,1516,5,96,0,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1517,
		1,0,0,0,1517,1523,5,77,0,0,1518,1520,5,92,0,0,1519,1518,1,0,0,0,1519,1520,
		1,0,0,0,1520,1521,1,0,0,0,1521,1523,5,97,0,0,1522,1515,1,0,0,0,1522,1519,
		1,0,0,0,1523,1524,1,0,0,0,1524,1525,7,5,0,0,1525,1658,3,268,134,0,1526,
		1528,5,96,0,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,0,1529,
		1535,5,77,0,0,1530,1532,5,92,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,
		1533,1,0,0,0,1533,1535,5,97,0,0,1534,1527,1,0,0,0,1534,1531,1,0,0,0,1535,
		1537,1,0,0,0,1536,1538,5,45,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,
		1539,1,0,0,0,1539,1540,5,24,0,0,1540,1541,5,4,0,0,1541,1542,3,266,133,
		0,1542,1543,5,5,0,0,1543,1658,1,0,0,0,1544,1546,5,96,0,0,1545,1544,1,0,
		0,0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1552,5,77,0,0,1548,1553,5,
		46,0,0,1549,1550,5,47,0,0,1550,1551,5,45,0,0,1551,1553,5,48,0,0,1552,1548,
		1,0,0,0,1552,1549,1,0,0,0,1553,1555,1,0,0,0,1554,1556,5,49,0,0,1555,1554,
		1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1658,3,244,122,0,1558,
		1560,5,96,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,
		1566,5,77,0,0,1562,1567,5,51,0,0,1563,1564,5,47,0,0,1564,1565,5,45,0,0,
		1565,1567,5,52,0,0,1566,1562,1,0,0,0,1566,1563,1,0,0,0,1567,1568,1,0,0,
		0,1568,1569,5,53,0,0,1569,1658,3,268,134,0,1570,1572,5,96,0,0,1571,1570,
		1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1578,5,77,0,0,1574,1579,
		5,54,0,0,1575,1576,5,47,0,0,1576,1577,5,45,0,0,1577,1579,5,55,0,0,1578,
		1574,1,0,0,0,1578,1575,1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,53,0,0,1581,
		1658,3,268,134,0,1582,1584,5,92,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,
		0,1584,1585,1,0,0,0,1585,1590,5,97,0,0,1586,1591,5,48,0,0,1587,1588,5,
		98,0,0,1588,1589,5,45,0,0,1589,1591,5,48,0,0,1590,1586,1,0,0,0,1590,1587,
		1,0,0,0,1591,1593,1,0,0,0,1592,1594,5,49,0,0,1593,1592,1,0,0,0,1593,1594,
		1,0,0,0,1594,1595,1,0,0,0,1595,1658,3,244,122,0,1596,1598,5,92,0,0,1597,
		1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1604,5,97,0,0,1600,
		1605,5,52,0,0,1601,1602,5,98,0,0,1602,1603,5,45,0,0,1603,1605,5,52,0,0,
		1604,1600,1,0,0,0,1604,1601,1,0,0,0,1605,1606,1,0,0,0,1606,1607,5,53,0,
		0,1607,1658,3,268,134,0,1608,1610,5,92,0,0,1609,1608,1,0,0,0,1609,1610,
		1,0,0,0,1610,1611,1,0,0,0,1611,1616,5,97,0,0,1612,1617,5,55,0,0,1613,1614,
		5,98,0,0,1614,1615,5,45,0,0,1615,1617,5,55,0,0,1616,1612,1,0,0,0,1616,
		1613,1,0,0,0,1617,1618,1,0,0,0,1618,1619,5,53,0,0,1619,1658,3,268,134,
		0,1620,1622,5,96,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,1623,1,0,
		0,0,1623,1629,5,77,0,0,1624,1626,5,92,0,0,1625,1624,1,0,0,0,1625,1626,
		1,0,0,0,1626,1627,1,0,0,0,1627,1629,5,97,0,0,1628,1621,1,0,0,0,1628,1625,
		1,0,0,0,1629,1631,1,0,0,0,1630,1632,5,45,0,0,1631,1630,1,0,0,0,1631,1632,
		1,0,0,0,1632,1633,1,0,0,0,1633,1634,5,24,0,0,1634,1635,5,4,0,0,1635,1636,
		3,246,123,0,1636,1637,5,5,0,0,1637,1658,1,0,0,0,1638,1640,5,96,0,0,1639,
		1638,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,0,1641,1647,5,77,0,0,1642,
		1644,5,92,0,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,
		1647,5,97,0,0,1646,1639,1,0,0,0,1646,1643,1,0,0,0,1647,1649,1,0,0,0,1648,
		1650,5,45,0,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,
		1652,5,50,0,0,1652,1658,3,268,134,0,1653,1654,5,99,0,0,1654,1658,5,97,
		0,0,1655,1656,5,96,0,0,1656,1658,5,97,0,0,1657,1446,1,0,0,0,1657,1449,
		1,0,0,0,1657,1458,1,0,0,0,1657,1461,1,0,0,0,1657,1470,1,0,0,0,1657,1481,
		1,0,0,0,1657,1490,1,0,0,0,1657,1496,1,0,0,0,1657,1505,1,0,0,0,1657,1522,
		1,0,0,0,1657,1534,1,0,0,0,1657,1545,1,0,0,0,1657,1559,1,0,0,0,1657,1571,
		1,0,0,0,1657,1583,1,0,0,0,1657,1597,1,0,0,0,1657,1609,1,0,0,0,1657,1628,
		1,0,0,0,1657,1646,1,0,0,0,1657,1653,1,0,0,0,1657,1655,1,0,0,0,1658,243,
		1,0,0,0,1659,1660,7,15,0,0,1660,245,1,0,0,0,1661,1664,3,244,122,0,1662,
		1663,5,11,0,0,1663,1665,3,246,123,0,1664,1662,1,0,0,0,1664,1665,1,0,0,
		0,1665,247,1,0,0,0,1666,1667,5,6,0,0,1667,1668,5,100,0,0,1668,1669,7,0,
		0,0,1669,1670,3,130,65,0,1670,1671,5,7,0,0,1671,1674,3,130,65,0,1672,1673,
		5,23,0,0,1673,1675,3,260,130,0,1674,1672,1,0,0,0,1674,1675,1,0,0,0,1675,
		1677,1,0,0,0,1676,1678,3,256,128,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,
		1678,249,1,0,0,0,1679,1680,5,8,0,0,1680,1681,5,100,0,0,1681,1682,7,0,0,
		0,1682,1683,3,130,65,0,1683,1684,5,9,0,0,1684,1687,3,50,25,0,1685,1686,
		5,23,0,0,1686,1688,3,260,130,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,
		251,1,0,0,0,1689,1690,5,10,0,0,1690,1691,5,100,0,0,1691,1692,7,0,0,0,1692,
		1695,3,130,65,0,1693,1694,5,23,0,0,1694,1696,3,260,130,0,1695,1693,1,0,
		0,0,1695,1696,1,0,0,0,1696,253,1,0,0,0,1697,1698,5,6,0,0,1698,1699,5,100,
		0,0,1699,1700,7,0,0,0,1700,1701,3,130,65,0,1701,1702,5,7,0,0,1702,1705,
		3,130,65,0,1703,1704,5,23,0,0,1704,1706,3,260,130,0,1705,1703,1,0,0,0,
		1705,1706,1,0,0,0,1706,255,1,0,0,0,1707,1710,3,258,129,0,1708,1709,5,11,
		0,0,1709,1711,3,256,128,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,257,
		1,0,0,0,1712,1713,5,34,0,0,1713,1717,7,2,0,0,1714,1715,5,101,0,0,1715,
		1717,5,32,0,0,1716,1712,1,0,0,0,1716,1714,1,0,0,0,1717,259,1,0,0,0,1718,
		1721,3,262,131,0,1719,1720,7,4,0,0,1720,1722,3,260,130,0,1721,1719,1,0,
		0,0,1721,1722,1,0,0,0,1722,261,1,0,0,0,1723,1726,3,264,132,0,1724,1725,
		7,4,0,0,1725,1727,3,262,131,0,1726,1724,1,0,0,0,1726,1727,1,0,0,0,1727,
		1745,1,0,0,0,1728,1729,5,4,0,0,1729,1732,3,264,132,0,1730,1731,7,4,0,0,
		1731,1733,3,262,131,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,
		0,0,0,1734,1735,5,5,0,0,1735,1745,1,0,0,0,1736,1737,5,4,0,0,1737,1740,
		3,262,131,0,1738,1739,7,4,0,0,1739,1741,3,262,131,0,1740,1738,1,0,0,0,
		1740,1741,1,0,0,0,1741,1742,1,0,0,0,1742,1743,5,5,0,0,1743,1745,1,0,0,
		0,1744,1723,1,0,0,0,1744,1728,1,0,0,0,1744,1736,1,0,0,0,1745,263,1,0,0,
		0,1746,1747,5,43,0,0,1747,1748,7,5,0,0,1748,1815,3,216,108,0,1749,1751,
		5,43,0,0,1750,1752,5,45,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1753,
		1,0,0,0,1753,1754,5,24,0,0,1754,1755,5,4,0,0,1755,1756,3,214,107,0,1756,
		1757,5,5,0,0,1757,1815,1,0,0,0,1758,1759,7,16,0,0,1759,1760,7,5,0,0,1760,
		1815,3,268,134,0,1761,1763,7,16,0,0,1762,1764,5,45,0,0,1763,1762,1,0,0,
		0,1763,1764,1,0,0,0,1764,1765,1,0,0,0,1765,1766,5,24,0,0,1766,1767,5,4,
		0,0,1767,1768,3,266,133,0,1768,1769,5,5,0,0,1769,1815,1,0,0,0,1770,1775,
		7,16,0,0,1771,1776,5,46,0,0,1772,1773,5,47,0,0,1773,1774,5,45,0,0,1774,
		1776,5,48,0,0,1775,1771,1,0,0,0,1775,1772,1,0,0,0,1776,1778,1,0,0,0,1777,
		1779,5,49,0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,
		1815,3,244,122,0,1781,1783,7,16,0,0,1782,1784,5,45,0,0,1783,1782,1,0,0,
		0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1786,5,24,0,0,1786,1787,5,4,
		0,0,1787,1788,3,246,123,0,1788,1789,5,5,0,0,1789,1815,1,0,0,0,1790,1792,
		7,16,0,0,1791,1793,5,45,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,
		1,0,0,0,1794,1795,5,50,0,0,1795,1815,3,268,134,0,1796,1801,7,16,0,0,1797,
		1802,5,51,0,0,1798,1799,5,47,0,0,1799,1800,5,45,0,0,1800,1802,5,52,0,0,
		1801,1797,1,0,0,0,1801,1798,1,0,0,0,1802,1803,1,0,0,0,1803,1804,5,53,0,
		0,1804,1815,3,268,134,0,1805,1810,7,16,0,0,1806,1811,5,54,0,0,1807,1808,
		5,47,0,0,1808,1809,5,45,0,0,1809,1811,5,55,0,0,1810,1806,1,0,0,0,1810,
		1807,1,0,0,0,1811,1812,1,0,0,0,1812,1813,5,53,0,0,1813,1815,3,268,134,
		0,1814,1746,1,0,0,0,1814,1749,1,0,0,0,1814,1758,1,0,0,0,1814,1761,1,0,
		0,0,1814,1770,1,0,0,0,1814,1781,1,0,0,0,1814,1790,1,0,0,0,1814,1796,1,
		0,0,0,1814,1805,1,0,0,0,1815,265,1,0,0,0,1816,1819,3,268,134,0,1817,1818,
		5,11,0,0,1818,1820,3,266,133,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,
		267,1,0,0,0,1821,1826,5,110,0,0,1822,1826,5,111,0,0,1823,1826,3,270,135,
		0,1824,1826,3,272,136,0,1825,1821,1,0,0,0,1825,1822,1,0,0,0,1825,1823,
		1,0,0,0,1825,1824,1,0,0,0,1826,1829,1,0,0,0,1827,1828,5,83,0,0,1828,1830,
		3,268,134,0,1829,1827,1,0,0,0,1829,1830,1,0,0,0,1830,1851,1,0,0,0,1831,
		1835,5,4,0,0,1832,1836,5,110,0,0,1833,1836,5,111,0,0,1834,1836,3,270,135,
		0,1835,1832,1,0,0,0,1835,1833,1,0,0,0,1835,1834,1,0,0,0,1836,1839,1,0,
		0,0,1837,1838,5,83,0,0,1838,1840,3,268,134,0,1839,1837,1,0,0,0,1839,1840,
		1,0,0,0,1840,1841,1,0,0,0,1841,1851,5,5,0,0,1842,1843,5,4,0,0,1843,1846,
		3,268,134,0,1844,1845,5,83,0,0,1845,1847,3,268,134,0,1846,1844,1,0,0,0,
		1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1849,5,5,0,0,1849,1851,1,0,0,
		0,1850,1825,1,0,0,0,1850,1831,1,0,0,0,1850,1842,1,0,0,0,1851,269,1,0,0,
		0,1852,1853,5,111,0,0,1853,1854,5,102,0,0,1854,1855,3,268,134,0,1855,1856,
		5,103,0,0,1856,271,1,0,0,0,1857,1858,5,111,0,0,1858,1860,5,4,0,0,1859,
		1861,3,274,137,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,
		1862,1863,5,5,0,0,1863,273,1,0,0,0,1864,1867,3,276,138,0,1865,1866,5,11,
		0,0,1866,1868,3,274,137,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,275,
		1,0,0,0,1869,1870,5,111,0,0,1870,1872,5,13,0,0,1871,1869,1,0,0,0,1871,
		1872,1,0,0,0,1872,1873,1,0,0,0,1873,1874,3,268,134,0,1874,277,1,0,0,0,
		1875,1878,3,280,140,0,1876,1877,7,4,0,0,1877,1879,3,278,139,0,1878,1876,
		1,0,0,0,1878,1879,1,0,0,0,1879,279,1,0,0,0,1880,1883,3,282,141,0,1881,
		1882,7,4,0,0,1882,1884,3,280,140,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,
		1884,1902,1,0,0,0,1885,1886,5,4,0,0,1886,1889,3,282,141,0,1887,1888,7,
		4,0,0,1888,1890,3,280,140,0,1889,1887,1,0,0,0,1889,1890,1,0,0,0,1890,1891,
		1,0,0,0,1891,1892,5,5,0,0,1892,1902,1,0,0,0,1893,1894,5,4,0,0,1894,1897,
		3,280,140,0,1895,1896,7,4,0,0,1896,1898,3,280,140,0,1897,1895,1,0,0,0,
		1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1900,5,5,0,0,1900,1902,1,0,0,
		0,1901,1880,1,0,0,0,1901,1885,1,0,0,0,1901,1893,1,0,0,0,1902,281,1,0,0,
		0,1903,1904,5,43,0,0,1904,1905,7,5,0,0,1905,1972,3,216,108,0,1906,1908,
		5,43,0,0,1907,1909,5,45,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,
		1,0,0,0,1910,1911,5,24,0,0,1911,1912,5,4,0,0,1912,1913,3,214,107,0,1913,
		1914,5,5,0,0,1914,1972,1,0,0,0,1915,1916,5,12,0,0,1916,1917,7,5,0,0,1917,
		1972,3,268,134,0,1918,1920,5,12,0,0,1919,1921,5,45,0,0,1920,1919,1,0,0,
		0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,5,24,0,0,1923,1924,5,4,
		0,0,1924,1925,3,266,133,0,1925,1926,5,5,0,0,1926,1972,1,0,0,0,1927,1932,
		5,12,0,0,1928,1933,5,46,0,0,1929,1930,5,47,0,0,1930,1931,5,45,0,0,1931,
		1933,5,48,0,0,1932,1928,1,0,0,0,1932,1929,1,0,0,0,1933,1935,1,0,0,0,1934,
		1936,5,49,0,0,1935,1934,1,0,0,0,1935,1936,1,0,0,0,1936,1937,1,0,0,0,1937,
		1972,3,244,122,0,1938,1940,5,12,0,0,1939,1941,5,45,0,0,1940,1939,1,0,0,
		0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,5,24,0,0,1943,1944,5,4,
		0,0,1944,1945,3,246,123,0,1945,1946,5,5,0,0,1946,1972,1,0,0,0,1947,1949,
		5,12,0,0,1948,1950,5,45,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,
		1,0,0,0,1951,1952,5,50,0,0,1952,1972,3,268,134,0,1953,1958,5,12,0,0,1954,
		1959,5,51,0,0,1955,1956,5,47,0,0,1956,1957,5,45,0,0,1957,1959,5,52,0,0,
		1958,1954,1,0,0,0,1958,1955,1,0,0,0,1959,1960,1,0,0,0,1960,1961,5,53,0,
		0,1961,1972,3,268,134,0,1962,1967,5,12,0,0,1963,1968,5,54,0,0,1964,1965,
		5,47,0,0,1965,1966,5,45,0,0,1966,1968,5,55,0,0,1967,1963,1,0,0,0,1967,
		1964,1,0,0,0,1968,1969,1,0,0,0,1969,1970,5,53,0,0,1970,1972,3,268,134,
		0,1971,1903,1,0,0,0,1971,1906,1,0,0,0,1971,1915,1,0,0,0,1971,1918,1,0,
		0,0,1971,1927,1,0,0,0,1971,1938,1,0,0,0,1971,1947,1,0,0,0,1971,1953,1,
		0,0,0,1971,1962,1,0,0,0,1972,283,1,0,0,0,1973,1976,3,166,83,0,1974,1976,
		3,130,65,0,1975,1973,1,0,0,0,1975,1974,1,0,0,0,1976,285,1,0,0,0,1977,1980,
		3,166,83,0,1978,1980,3,130,65,0,1979,1977,1,0,0,0,1979,1978,1,0,0,0,1980,
		287,1,0,0,0,1981,1984,3,166,83,0,1982,1984,3,130,65,0,1983,1981,1,0,0,
		0,1983,1982,1,0,0,0,1984,289,1,0,0,0,1985,1988,3,166,83,0,1986,1988,3,
		130,65,0,1987,1985,1,0,0,0,1987,1986,1,0,0,0,1988,291,1,0,0,0,1989,1990,
		5,104,0,0,1990,1991,7,9,0,0,1991,293,1,0,0,0,1992,1993,5,105,0,0,1993,
		1994,5,4,0,0,1994,1995,3,352,176,0,1995,1996,5,24,0,0,1996,1997,3,296,
		148,0,1997,1998,5,5,0,0,1998,1999,3,40,20,0,1999,2009,1,0,0,0,2000,2001,
		5,105,0,0,2001,2002,5,4,0,0,2002,2003,3,350,175,0,2003,2004,5,24,0,0,2004,
		2005,3,298,149,0,2005,2006,5,5,0,0,2006,2007,3,40,20,0,2007,2009,1,0,0,
		0,2008,1992,1,0,0,0,2008,2000,1,0,0,0,2009,295,1,0,0,0,2010,2019,3,300,
		150,0,2011,2019,3,304,152,0,2012,2019,3,308,154,0,2013,2019,3,312,156,
		0,2014,2019,3,316,158,0,2015,2019,3,320,160,0,2016,2019,3,324,162,0,2017,
		2019,3,328,164,0,2018,2010,1,0,0,0,2018,2011,1,0,0,0,2018,2012,1,0,0,0,
		2018,2013,1,0,0,0,2018,2014,1,0,0,0,2018,2015,1,0,0,0,2018,2016,1,0,0,
		0,2018,2017,1,0,0,0,2019,297,1,0,0,0,2020,2029,3,302,151,0,2021,2029,3,
		306,153,0,2022,2029,3,310,155,0,2023,2029,3,314,157,0,2024,2029,3,318,
		159,0,2025,2029,3,322,161,0,2026,2029,3,326,163,0,2027,2029,3,330,165,
		0,2028,2020,1,0,0,0,2028,2021,1,0,0,0,2028,2022,1,0,0,0,2028,2023,1,0,
		0,0,2028,2024,1,0,0,0,2028,2025,1,0,0,0,2028,2026,1,0,0,0,2028,2027,1,
		0,0,0,2029,299,1,0,0,0,2030,2034,3,166,83,0,2031,2034,3,340,170,0,2032,
		2034,5,19,0,0,2033,2030,1,0,0,0,2033,2031,1,0,0,0,2033,2032,1,0,0,0,2034,
		2037,1,0,0,0,2035,2036,5,23,0,0,2036,2038,3,278,139,0,2037,2035,1,0,0,
		0,2037,2038,1,0,0,0,2038,301,1,0,0,0,2039,2042,3,340,170,0,2040,2042,5,
		19,0,0,2041,2039,1,0,0,0,2041,2040,1,0,0,0,2042,2045,1,0,0,0,2043,2044,
		5,23,0,0,2044,2046,3,278,139,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,
		303,1,0,0,0,2047,2051,3,166,83,0,2048,2051,3,342,171,0,2049,2051,3,130,
		65,0,2050,2047,1,0,0,0,2050,2048,1,0,0,0,2050,2049,1,0,0,0,2051,2054,1,
		0,0,0,2052,2053,5,23,0,0,2053,2055,3,204,102,0,2054,2052,1,0,0,0,2054,
		2055,1,0,0,0,2055,305,1,0,0,0,2056,2061,3,342,171,0,2057,2058,5,71,0,0,
		2058,2059,5,24,0,0,2059,2061,3,126,63,0,2060,2056,1,0,0,0,2060,2057,1,
		0,0,0,2061,2064,1,0,0,0,2062,2063,5,23,0,0,2063,2065,3,204,102,0,2064,
		2062,1,0,0,0,2064,2065,1,0,0,0,2065,307,1,0,0,0,2066,2070,3,166,83,0,2067,
		2070,3,344,172,0,2068,2070,3,130,65,0,2069,2066,1,0,0,0,2069,2067,1,0,
		0,0,2069,2068,1,0,0,0,2070,2073,1,0,0,0,2071,2072,5,23,0,0,2072,2074,3,
		260,130,0,2073,2071,1,0,0,0,2073,2074,1,0,0,0,2074,309,1,0,0,0,2075,2080,
		3,344,172,0,2076,2077,5,100,0,0,2077,2078,5,24,0,0,2078,2080,3,126,63,
		0,2079,2075,1,0,0,0,2079,2076,1,0,0,0,2080,2083,1,0,0,0,2081,2082,5,23,
		0,0,2082,2084,3,260,130,0,2083,2081,1,0,0,0,2083,2084,1,0,0,0,2084,311,
		1,0,0,0,2085,2089,3,166,83,0,2086,2089,3,346,173,0,2087,2089,3,338,169,
		0,2088,2085,1,0,0,0,2088,2086,1,0,0,0,2088,2087,1,0,0,0,2089,2092,1,0,
		0,0,2090,2091,5,23,0,0,2091,2093,3,94,47,0,2092,2090,1,0,0,0,2092,2093,
		1,0,0,0,2093,313,1,0,0,0,2094,2097,3,346,173,0,2095,2097,3,338,169,0,2096,
		2094,1,0,0,0,2096,2095,1,0,0,0,2097,2100,1,0,0,0,2098,2099,5,23,0,0,2099,
		2101,3,94,47,0,2100,2098,1,0,0,0,2100,2101,1,0,0,0,2101,315,1,0,0,0,2102,
		2106,3,166,83,0,2103,2106,3,348,174,0,2104,2106,3,126,63,0,2105,2102,1,
		0,0,0,2105,2103,1,0,0,0,2105,2104,1,0,0,0,2106,2109,1,0,0,0,2107,2108,
		5,23,0,0,2108,2110,3,238,119,0,2109,2107,1,0,0,0,2109,2110,1,0,0,0,2110,
		317,1,0,0,0,2111,2116,3,348,174,0,2112,2113,5,93,0,0,2113,2114,5,24,0,
		0,2114,2116,3,126,63,0,2115,2111,1,0,0,0,2115,2112,1,0,0,0,2116,2119,1,
		0,0,0,2117,2118,5,23,0,0,2118,2120,3,238,119,0,2119,2117,1,0,0,0,2119,
		2120,1,0,0,0,2120,319,1,0,0,0,2121,2126,3,166,83,0,2122,2123,5,62,0,0,
		2123,2126,3,166,83,0,2124,2126,3,332,166,0,2125,2121,1,0,0,0,2125,2122,
		1,0,0,0,2125,2124,1,0,0,0,2126,321,1,0,0,0,2127,2128,5,62,0,0,2128,2131,
		3,166,83,0,2129,2131,3,332,166,0,2130,2127,1,0,0,0,2130,2129,1,0,0,0,2131,
		323,1,0,0,0,2132,2137,3,166,83,0,2133,2134,5,49,0,0,2134,2137,3,166,83,
		0,2135,2137,3,334,167,0,2136,2132,1,0,0,0,2136,2133,1,0,0,0,2136,2135,
		1,0,0,0,2137,325,1,0,0,0,2138,2139,5,49,0,0,2139,2142,3,166,83,0,2140,
		2142,3,334,167,0,2141,2138,1,0,0,0,2141,2140,1,0,0,0,2142,327,1,0,0,0,
		2143,2148,3,166,83,0,2144,2145,5,106,0,0,2145,2148,3,166,83,0,2146,2148,
		3,336,168,0,2147,2143,1,0,0,0,2147,2144,1,0,0,0,2147,2146,1,0,0,0,2148,
		329,1,0,0,0,2149,2150,5,106,0,0,2150,2153,3,166,83,0,2151,2153,3,336,168,
		0,2152,2149,1,0,0,0,2152,2151,1,0,0,0,2153,331,1,0,0,0,2154,2156,5,102,
		0,0,2155,2157,3,266,133,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,2158,
		1,0,0,0,2158,2159,5,103,0,0,2159,333,1,0,0,0,2160,2162,5,102,0,0,2161,
		2163,3,246,123,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,
		2164,2165,5,103,0,0,2165,335,1,0,0,0,2166,2168,5,102,0,0,2167,2169,3,214,
		107,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2170,1,0,0,0,2170,2171,
		5,103,0,0,2171,337,1,0,0,0,2172,2175,3,138,69,0,2173,2175,3,140,70,0,2174,
		2172,1,0,0,0,2174,2173,1,0,0,0,2175,339,1,0,0,0,2176,2177,5,3,0,0,2177,
		2178,3,166,83,0,2178,341,1,0,0,0,2179,2180,5,25,0,0,2180,2181,3,166,83,
		0,2181,343,1,0,0,0,2182,2183,5,28,0,0,2183,2184,3,166,83,0,2184,345,1,
		0,0,0,2185,2186,5,107,0,0,2186,2187,3,166,83,0,2187,347,1,0,0,0,2188,2189,
		5,63,0,0,2189,2190,3,166,83,0,2190,349,1,0,0,0,2191,2192,5,61,0,0,2192,
		2193,5,111,0,0,2193,351,1,0,0,0,2194,2203,3,354,177,0,2195,2203,3,356,
		178,0,2196,2203,3,358,179,0,2197,2203,3,360,180,0,2198,2203,3,362,181,
		0,2199,2203,3,364,182,0,2200,2203,3,366,183,0,2201,2203,3,368,184,0,2202,
		2194,1,0,0,0,2202,2195,1,0,0,0,2202,2196,1,0,0,0,2202,2197,1,0,0,0,2202,
		2198,1,0,0,0,2202,2199,1,0,0,0,2202,2200,1,0,0,0,2202,2201,1,0,0,0,2203,
		353,1,0,0,0,2204,2205,5,3,0,0,2205,2206,5,111,0,0,2206,355,1,0,0,0,2207,
		2208,5,25,0,0,2208,2209,5,111,0,0,2209,357,1,0,0,0,2210,2211,5,28,0,0,
		2211,2212,5,111,0,0,2212,359,1,0,0,0,2213,2214,5,28,0,0,2214,2215,5,31,
		0,0,2215,2216,5,111,0,0,2216,361,1,0,0,0,2217,2218,5,63,0,0,2218,2219,
		5,111,0,0,2219,363,1,0,0,0,2220,2221,5,62,0,0,2221,2222,5,111,0,0,2222,
		365,1,0,0,0,2223,2224,5,49,0,0,2224,2225,5,111,0,0,2225,367,1,0,0,0,2226,
		2227,5,106,0,0,2227,2228,5,111,0,0,2228,369,1,0,0,0,2229,2232,3,166,83,
		0,2230,2232,3,138,69,0,2231,2229,1,0,0,0,2231,2230,1,0,0,0,2232,371,1,
		0,0,0,245,377,495,504,525,539,545,556,561,566,569,574,579,607,611,616,
		620,631,636,648,654,662,670,677,682,705,720,724,735,743,747,758,761,772,
		777,785,793,797,800,807,812,817,823,831,835,842,854,860,869,872,877,886,
		895,904,908,915,959,961,967,973,979,985,991,998,1003,1006,1012,1019,1023,
		1029,1032,1039,1044,1051,1054,1060,1068,1088,1116,1122,1135,1141,1145,
		1149,1153,1157,1161,1165,1169,1175,1185,1195,1203,1208,1213,1219,1227,
		1231,1238,1250,1262,1265,1270,1279,1288,1297,1301,1306,1337,1342,1347,
		1350,1360,1384,1392,1400,1408,1416,1421,1426,1432,1440,1444,1451,1463,
		1475,1478,1483,1492,1501,1510,1515,1519,1522,1527,1531,1534,1537,1545,
		1552,1555,1559,1566,1571,1578,1583,1590,1593,1597,1604,1609,1616,1621,
		1625,1628,1631,1639,1643,1646,1649,1657,1664,1674,1677,1687,1695,1705,
		1710,1716,1721,1726,1732,1740,1744,1751,1763,1775,1778,1783,1792,1801,
		1810,1814,1819,1825,1829,1835,1839,1846,1850,1860,1867,1871,1878,1883,
		1889,1897,1901,1908,1920,1932,1935,1940,1949,1958,1967,1971,1975,1979,
		1983,1987,2008,2018,2028,2033,2037,2041,2045,2050,2054,2060,2064,2069,
		2073,2079,2083,2088,2092,2096,2100,2105,2109,2115,2119,2125,2130,2136,
		2141,2147,2152,2156,2162,2168,2174,2202,2231
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
