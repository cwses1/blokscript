//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, STATEMENTEND=96, WS=97, STRINGLITERAL=98, VARID=99, INTLITERAL=100, 
		REGEXLITERAL=101, LINE_COMMENT=102, BLOCK_COMMENT=103;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createSpaceStatement = 3, 
		RULE_copySpaceStatement = 4, RULE_updateSpaceStatement = 5, RULE_deleteSpaceStatement = 6, 
		RULE_spaceUpdateList = 7, RULE_spaceUpdate = 8, RULE_copySpacesStatement = 9, 
		RULE_selectSpacesStatement = 10, RULE_selectFieldList = 11, RULE_selectFieldAlias = 12, 
		RULE_selectFnExpr = 13, RULE_selectFnArgList = 14, RULE_selectFnArg = 15, 
		RULE_selectGeneralExpr = 16, RULE_generalExprList = 17, RULE_generalExpr = 18, 
		RULE_constrainedSpaceList = 19, RULE_completeSpaceList = 20, RULE_createBlockStatement = 21, 
		RULE_copyBlockStatement = 22, RULE_updateBlockStatement = 23, RULE_deleteBlockStatement = 24, 
		RULE_longOrShortBlockSpec = 25, RULE_shortBlockSpec = 26, RULE_scriptBlockDef = 27, 
		RULE_createDatasourceStatement = 28, RULE_copyDatasourceStatement = 29, 
		RULE_deleteDatasourceStatement = 30, RULE_updateDatasourceStatement = 31, 
		RULE_datasourceUpdateList = 32, RULE_datasourceUpdate = 33, RULE_createDatasourceEntryStatement = 34, 
		RULE_copyDatasourceEntryStatement = 35, RULE_deleteDatasourceEntryStatement = 36, 
		RULE_updateDatasourceEntryStatement = 37, RULE_longOrShortDatasourceEntrySpec = 38, 
		RULE_datasourceEntryFullSpec = 39, RULE_datasourceEntryShortSpec = 40, 
		RULE_datasourceEntryIdentifier = 41, RULE_datasourceEntryOutputLocation = 42, 
		RULE_updateDatasourceEntriesStatement = 43, RULE_deleteDatasourceEntriesStatement = 44, 
		RULE_copyDatasourceEntriesStatement = 45, RULE_syncDatasourceEntriesStatement = 46, 
		RULE_datasourceEntryCopyOptionList = 47, RULE_datasourceEntryCopyOption = 48, 
		RULE_datasourceEntryUpdateList = 49, RULE_datasourceEntryUpdate = 50, 
		RULE_datasourceEntriesSourceLocation = 51, RULE_urlSpec = 52, RULE_datasourceEntriesTargetLocation = 53, 
		RULE_datasourceEntryConstraintExprList = 54, RULE_datasourceEntryConstraintExpr = 55, 
		RULE_datasourceEntryConstraint = 56, RULE_loginStatement = 57, RULE_loginOnlyStatement = 58, 
		RULE_loginWithGlobalUserNameStatement = 59, RULE_loginWithGlobalPasswordStatement = 60, 
		RULE_loginWithGlobalTokenStatement = 61, RULE_loginWithGlobalUserNameAndPasswordStatement = 62, 
		RULE_varStatement = 63, RULE_spaceVarStatement = 64, RULE_blockVarStatement = 65, 
		RULE_stringVarStatement = 66, RULE_regexVarStatement = 67, RULE_storyVarStatement = 68, 
		RULE_datasourceEntryVarStatement = 69, RULE_spaceSpec = 70, RULE_shortSpaceSpec = 71, 
		RULE_longOrShortSpaceSpec = 72, RULE_blockSpec = 73, RULE_storySpec = 74, 
		RULE_datasourceEntrySpec = 75, RULE_datasourceSpec = 76, RULE_datasourceShortSpec = 77, 
		RULE_assignmentStatement = 78, RULE_spaceAssignmentStatement = 79, RULE_blockAssignmentStatement = 80, 
		RULE_stringAssignmentStatement = 81, RULE_printStatement = 82, RULE_printSpacesStatement = 83, 
		RULE_printVarStatement = 84, RULE_printSpaceStatement = 85, RULE_printStringLiteralStatement = 86, 
		RULE_printSymbolTableStatement = 87, RULE_printLocalCacheStatement = 88, 
		RULE_realDataLocation = 89, RULE_fileSpec = 90, RULE_completeFileSpec = 91, 
		RULE_spaceInputLocation = 92, RULE_spaceOutputLocation = 93, RULE_spacesInputLocation = 94, 
		RULE_spacesOutputLocation = 95, RULE_shortFileSpec = 96, RULE_blockInputLocation = 97, 
		RULE_blockOutputLocation = 98, RULE_blocksInputLocation = 99, RULE_blocksOutputLocation = 100, 
		RULE_storyInputLocation = 101, RULE_storyOutputLocation = 102, RULE_storiesInputLocation = 103, 
		RULE_storiesOutputLocation = 104, RULE_varGetFrom = 105, RULE_updateBlocksStatement = 106, 
		RULE_copyBlocksStatement = 107, RULE_deleteBlocksStatement = 108, RULE_blockConstraintExprList = 109, 
		RULE_blockConstraintExpr = 110, RULE_blockConstraint = 111, RULE_blockUpdateList = 112, 
		RULE_blockUpdate = 113, RULE_intExprList = 114, RULE_intExpr = 115, RULE_verbosityStatement = 116, 
		RULE_waitStatement = 117, RULE_compareStatement = 118, RULE_compareSpacesStatement = 119, 
		RULE_compareBlocksStatement = 120, RULE_compareAllBlocksStatement = 121, 
		RULE_copyStoriesStatement = 122, RULE_publishStoriesStatement = 123, RULE_unpublishStoriesStatement = 124, 
		RULE_deleteStoriesStatement = 125, RULE_storyConstraintExprList = 126, 
		RULE_storyConstraintExpr = 127, RULE_storyConstraint = 128, RULE_regexExpr = 129, 
		RULE_regexExprList = 130, RULE_copyDatasourcesStatement = 131, RULE_updateDatasourcesStatement = 132, 
		RULE_deleteDatasourcesStatement = 133, RULE_syncDatasourcesStatement = 134, 
		RULE_datasourceCopyOptionList = 135, RULE_datasourceCopyOption = 136, 
		RULE_datasourceConstraintExprList = 137, RULE_datasourceConstraintExpr = 138, 
		RULE_datasourceConstraint = 139, RULE_stringExprList = 140, RULE_stringExpr = 141, 
		RULE_varFieldExpr = 142, RULE_fnCallExpr = 143, RULE_fnCallActualArgList = 144, 
		RULE_fnActualArg = 145, RULE_spaceConstraintExprList = 146, RULE_spaceConstraintExpr = 147, 
		RULE_spaceConstraint = 148, RULE_datasourcesInputLocation = 149, RULE_datasourcesOutputLocation = 150, 
		RULE_datasourceInputLocation = 151, RULE_datasourceOutputLocation = 152, 
		RULE_dirSpec = 153, RULE_forEachStatement = 154, RULE_foreachEntityListForTypedVarDecl = 155, 
		RULE_foreachEntityListForUntypedVarDecl = 156, RULE_foreachSpaceListForTypedVarDecl = 157, 
		RULE_foreachSpaceListForUntypedVarDecl = 158, RULE_foreachBlockListForTypedVarDecl = 159, 
		RULE_foreachBlockListForUntypedVarDecl = 160, RULE_foreachDatasourceListForTypedVarDecl = 161, 
		RULE_foreachDatasourceListForUntypedVarDecl = 162, RULE_foreachDatasourceEntryListForTypedVarDecl = 163, 
		RULE_foreachDatasourceEntryListForUntypedVarDecl = 164, RULE_foreachStoryListForTypedVarDecl = 165, 
		RULE_foreachStoryListForUntypedVarDecl = 166, RULE_foreachStringListForTypedVarDecl = 167, 
		RULE_foreachStringListForUntypedVarDecl = 168, RULE_foreachRegexListForTypedVarDecl = 169, 
		RULE_foreachRegexListForUntypedVarDecl = 170, RULE_foreachIntegerListForTypedVarDecl = 171, 
		RULE_foreachIntegerListForUntypedVarDecl = 172, RULE_stringArrayLiteral = 173, 
		RULE_regexArrayLiteral = 174, RULE_intArrayLiteral = 175, RULE_longOrShortDatasourceSpec = 176, 
		RULE_spaceFileSpec = 177, RULE_blockFileSpec = 178, RULE_datasourceFileSpec = 179, 
		RULE_datasourceEntryFileSpec = 180, RULE_storyFileSpec = 181, RULE_untypedVarDecl = 182, 
		RULE_typedVarDecl = 183, RULE_spaceVarDecl = 184, RULE_blockVarDecl = 185, 
		RULE_datasourceVarDecl = 186, RULE_datasourceEntryVarDecl = 187, RULE_storyVarDecl = 188, 
		RULE_stringVarDecl = 189, RULE_regexVarDecl = 190, RULE_integerVarDecl = 191, 
		RULE_datasourceEntriesInputLocation = 192;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createSpaceStatement", "copySpaceStatement", 
		"updateSpaceStatement", "deleteSpaceStatement", "spaceUpdateList", "spaceUpdate", 
		"copySpacesStatement", "selectSpacesStatement", "selectFieldList", "selectFieldAlias", 
		"selectFnExpr", "selectFnArgList", "selectFnArg", "selectGeneralExpr", 
		"generalExprList", "generalExpr", "constrainedSpaceList", "completeSpaceList", 
		"createBlockStatement", "copyBlockStatement", "updateBlockStatement", 
		"deleteBlockStatement", "longOrShortBlockSpec", "shortBlockSpec", "scriptBlockDef", 
		"createDatasourceStatement", "copyDatasourceStatement", "deleteDatasourceStatement", 
		"updateDatasourceStatement", "datasourceUpdateList", "datasourceUpdate", 
		"createDatasourceEntryStatement", "copyDatasourceEntryStatement", "deleteDatasourceEntryStatement", 
		"updateDatasourceEntryStatement", "longOrShortDatasourceEntrySpec", "datasourceEntryFullSpec", 
		"datasourceEntryShortSpec", "datasourceEntryIdentifier", "datasourceEntryOutputLocation", 
		"updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"printStatement", "printSpacesStatement", "printVarStatement", "printSpaceStatement", 
		"printStringLiteralStatement", "printSymbolTableStatement", "printLocalCacheStatement", 
		"realDataLocation", "fileSpec", "completeFileSpec", "spaceInputLocation", 
		"spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "updateBlocksStatement", "copyBlocksStatement", 
		"deleteBlocksStatement", "blockConstraintExprList", "blockConstraintExpr", 
		"blockConstraint", "blockUpdateList", "blockUpdate", "intExprList", "intExpr", 
		"verbosityStatement", "waitStatement", "compareStatement", "compareSpacesStatement", 
		"compareBlocksStatement", "compareAllBlocksStatement", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintExprList", "storyConstraintExpr", "storyConstraint", "regexExpr", 
		"regexExprList", "copyDatasourcesStatement", "updateDatasourcesStatement", 
		"deleteDatasourcesStatement", "syncDatasourcesStatement", "datasourceCopyOptionList", 
		"datasourceCopyOption", "datasourceConstraintExprList", "datasourceConstraintExpr", 
		"datasourceConstraint", "stringExprList", "stringExpr", "varFieldExpr", 
		"fnCallExpr", "fnCallActualArgList", "fnActualArg", "spaceConstraintExprList", 
		"spaceConstraintExpr", "spaceConstraint", "datasourcesInputLocation", 
		"datasourcesOutputLocation", "datasourceInputLocation", "datasourceOutputLocation", 
		"dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", "foreachEntityListForUntypedVarDecl", 
		"foreachSpaceListForTypedVarDecl", "foreachSpaceListForUntypedVarDecl", 
		"foreachBlockListForTypedVarDecl", "foreachBlockListForUntypedVarDecl", 
		"foreachDatasourceListForTypedVarDecl", "foreachDatasourceListForUntypedVarDecl", 
		"foreachDatasourceEntryListForTypedVarDecl", "foreachDatasourceEntryListForUntypedVarDecl", 
		"foreachStoryListForTypedVarDecl", "foreachStoryListForUntypedVarDecl", 
		"foreachStringListForTypedVarDecl", "foreachStringListForUntypedVarDecl", 
		"foreachRegexListForTypedVarDecl", "foreachRegexListForUntypedVarDecl", 
		"foreachIntegerListForTypedVarDecl", "foreachIntegerListForUntypedVarDecl", 
		"stringArrayLiteral", "regexArrayLiteral", "intArrayLiteral", "longOrShortDatasourceSpec", 
		"spaceFileSpec", "blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", 
		"storyFileSpec", "untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", 
		"datasourceVarDecl", "datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", 
		"regexVarDecl", "integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'create'", "'space'", "'('", "')'", "'copy'", "'to'", 
		"'update'", "'set'", "'delete'", "','", "'='", "'spaces'", "'from'", "'select'", 
		"'*'", "'as'", "'where'", "'in'", "'block'", "'{'", "'}'", "'datasource'", 
		"'for'", "'entry'", "'entries'", "'sync'", "'skip'", "'updates'", "'creates'", 
		"'csv'", "'json'", "'url'", "'and'", "'or'", "'!='", "'not'", "'matches'", 
		"'does'", "'match'", "'regex'", "'like'", "'starts'", "'start'", "'with'", 
		"'ends'", "'end'", "'login'", "'global'", "'username'", "'password'", 
		"'token'", "'var'", "'string'", "'story'", "'print'", "'symbol'", "'tables'", 
		"'local'", "'cache'", "'server'", "'file'", "'on'", "'blocks'", "'+'", 
		"'-'", "'%'", "'be'", "'quiet'", "'verbose'", "'debugger'", "'wait'", 
		"'compare'", "'all'", "'stories'", "'content'", "'publish'", "'unpublish'", 
		"'is'", "'null'", "'undefined'", "'any'", "'tag'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'include'", "'['", "']'", "'defined'", "'directory'", 
		"'foreach'", "'int'", "'datasource entry'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"STATEMENTEND", "WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 135391662966867278L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2181039679L) != 0)) {
				{
				{
				State = 388;
				statement();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpaceStatementContext createSpaceStatement() {
			return GetRuleContext<CreateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSpaceStatementContext updateSpaceStatement() {
			return GetRuleContext<UpdateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteSpaceStatementContext deleteSpaceStatement() {
			return GetRuleContext<DeleteSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpacesStatementContext selectSpacesStatement() {
			return GetRuleContext<SelectSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateBlockStatementContext createBlockStatement() {
			return GetRuleContext<CreateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateBlockStatementContext updateBlockStatement() {
			return GetRuleContext<UpdateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlockStatementContext deleteBlockStatement() {
			return GetRuleContext<DeleteBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceStatementContext copyDatasourceStatement() {
			return GetRuleContext<CopyDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
			return GetRuleContext<CopyDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				loginStatement();
				State = 395;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397;
				varStatement();
				State = 398;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 400;
				assignmentStatement();
				State = 401;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 403;
				printStatement();
				State = 404;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 406;
				verbosityStatement();
				State = 407;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 409;
				waitStatement();
				State = 410;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 412;
				compareStatement();
				State = 413;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 415;
				createSpaceStatement();
				State = 416;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 418;
				copySpaceStatement();
				State = 419;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 421;
				updateSpaceStatement();
				State = 422;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 424;
				deleteSpaceStatement();
				State = 425;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 427;
				selectSpacesStatement();
				State = 428;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 430;
				copySpacesStatement();
				State = 431;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 433;
				createBlockStatement();
				State = 434;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 436;
				copyBlockStatement();
				State = 437;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 439;
				updateBlockStatement();
				State = 440;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 442;
				deleteBlockStatement();
				State = 443;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 445;
				copyBlocksStatement();
				State = 446;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 448;
				deleteBlocksStatement();
				State = 449;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 451;
				createDatasourceStatement();
				State = 452;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 454;
				copyDatasourceStatement();
				State = 455;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 457;
				updateDatasourceStatement();
				State = 458;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 460;
				deleteDatasourceStatement();
				State = 461;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 463;
				copyDatasourcesStatement();
				State = 464;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 466;
				deleteDatasourcesStatement();
				State = 467;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 469;
				updateDatasourcesStatement();
				State = 470;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 472;
				copyStoriesStatement();
				State = 473;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 475;
				publishStoriesStatement();
				State = 476;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 478;
				unpublishStoriesStatement();
				State = 479;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 481;
				deleteStoriesStatement();
				State = 482;
				Match(STATEMENTEND);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 484;
				createDatasourceEntryStatement();
				State = 485;
				Match(STATEMENTEND);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 487;
				copyDatasourceEntryStatement();
				State = 488;
				Match(STATEMENTEND);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 490;
				deleteDatasourceEntryStatement();
				State = 491;
				Match(STATEMENTEND);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 493;
				updateDatasourceEntryStatement();
				State = 494;
				Match(STATEMENTEND);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 496;
				updateDatasourceEntriesStatement();
				State = 497;
				Match(STATEMENTEND);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 499;
				deleteDatasourceEntriesStatement();
				State = 500;
				Match(STATEMENTEND);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 502;
				copyDatasourceEntriesStatement();
				State = 503;
				Match(STATEMENTEND);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 505;
				syncDatasourceEntriesStatement();
				State = 506;
				Match(STATEMENTEND);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 508;
				Match(T__0);
				State = 509;
				Match(STATEMENTEND);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 510;
				scriptBlockDef();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 511;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public CreateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpaceStatementContext createSpaceStatement() {
		CreateSpaceStatementContext _localctx = new CreateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(T__1);
			State = 515;
			Match(T__2);
			State = 521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 516;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 517;
				Match(T__3);
				State = 518;
				spaceUpdateList();
				State = 519;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(T__5);
			State = 524;
			Match(T__2);
			State = 525;
			longOrShortSpaceSpec();
			State = 526;
			Match(T__6);
			State = 527;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public UpdateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSpaceStatementContext updateSpaceStatement() {
		UpdateSpaceStatementContext _localctx = new UpdateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(T__7);
			State = 530;
			Match(T__2);
			State = 531;
			longOrShortSpaceSpec();
			State = 532;
			Match(T__8);
			State = 533;
			spaceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DeleteSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSpaceStatementContext deleteSpaceStatement() {
		DeleteSpaceStatementContext _localctx = new DeleteSpaceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_deleteSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(T__9);
			State = 536;
			Match(T__2);
			State = 537;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateContext spaceUpdate() {
			return GetRuleContext<SpaceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public SpaceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateListContext spaceUpdateList() {
		SpaceUpdateListContext _localctx = new SpaceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_spaceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			spaceUpdate();
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 540;
				Match(T__10);
				State = 541;
				spaceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public SpaceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateContext spaceUpdate() {
		SpaceUpdateContext _localctx = new SpaceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_spaceUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(VARID);
			State = 545;
			Match(T__11);
			State = 546;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(T__5);
			State = 549;
			Match(T__12);
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 550;
				Match(T__13);
				State = 551;
				spacesInputLocation();
				}
			}

			State = 554;
			Match(T__6);
			State = 555;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrainedSpaceListContext constrainedSpaceList() {
			return GetRuleContext<ConstrainedSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		public SelectSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpacesStatementContext selectSpacesStatement() {
		SelectSpacesStatementContext _localctx = new SelectSpacesStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectSpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(T__14);
			State = 558;
			selectFieldList();
			State = 559;
			Match(T__13);
			State = 560;
			constrainedSpaceList();
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 561;
				Match(T__6);
				State = 562;
				spacesOutputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnExprContext selectFnExpr() {
			return GetRuleContext<SelectFnExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldListContext selectFieldList() {
			return GetRuleContext<SelectFieldListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldAliasContext selectFieldAlias() {
			return GetRuleContext<SelectFieldAliasContext>(0);
		}
		public SelectFieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldListContext selectFieldList() {
		SelectFieldListContext _localctx = new SelectFieldListContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectFieldList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 565;
				Match(T__15);
				}
				break;
			case 2:
				{
				State = 566;
				Match(VARID);
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 567;
					selectFieldAlias();
					}
				}

				}
				break;
			case 3:
				{
				State = 570;
				selectFnExpr();
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16) {
					{
					State = 571;
					selectFieldAlias();
					}
				}

				}
				break;
			}
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 576;
				Match(T__10);
				State = 577;
				selectFieldList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SelectFieldAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldAliasContext selectFieldAlias() {
		SelectFieldAliasContext _localctx = new SelectFieldAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectFieldAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(T__16);
			State = 581;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnArgListContext selectFnArgList() {
			return GetRuleContext<SelectFnArgListContext>(0);
		}
		public SelectFnExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnExprContext selectFnExpr() {
		SelectFnExprContext _localctx = new SelectFnExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectFnExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(VARID);
			State = 584;
			Match(T__3);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 15L) != 0)) {
				{
				State = 585;
				selectFnArgList();
				}
			}

			State = 588;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnArgContext selectFnArg() {
			return GetRuleContext<SelectFnArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnArgListContext selectFnArgList() {
			return GetRuleContext<SelectFnArgListContext>(0);
		}
		public SelectFnArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnArgListContext selectFnArgList() {
		SelectFnArgListContext _localctx = new SelectFnArgListContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectFnArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			selectFnArg();
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 591;
				Match(T__10);
				State = 592;
				selectFnArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFnArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectGeneralExprContext selectGeneralExpr() {
			return GetRuleContext<SelectGeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFnExprContext selectFnExpr() {
			return GetRuleContext<SelectFnExprContext>(0);
		}
		public SelectFnArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFnArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFnArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFnArgContext selectFnArg() {
		SelectFnArgContext _localctx = new SelectFnArgContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectFnArg);
		try {
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 595;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596;
				selectGeneralExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 597;
				selectFnExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGeneralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public SelectGeneralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGeneralExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGeneralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGeneralExprContext selectGeneralExpr() {
		SelectGeneralExprContext _localctx = new SelectGeneralExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectGeneralExpr);
		try {
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600;
				regexExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 601;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 602;
				intExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public GeneralExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralExprListContext generalExprList() {
		GeneralExprListContext _localctx = new GeneralExprListContext(Context, State);
		EnterRule(_localctx, 34, RULE_generalExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			generalExpr();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 606;
				Match(T__10);
				State = 607;
				generalExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public GeneralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralExprContext generalExpr() {
		GeneralExprContext _localctx = new GeneralExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_generalExpr);
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				regexExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 612;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 613;
				intExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrainedSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompleteSpaceListContext completeSpaceList() {
			return GetRuleContext<CompleteSpaceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ConstrainedSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrainedSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrainedSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrainedSpaceListContext constrainedSpaceList() {
		ConstrainedSpaceListContext _localctx = new ConstrainedSpaceListContext(Context, State);
		EnterRule(_localctx, 38, RULE_constrainedSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			completeSpaceList();
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 617;
				Match(T__17);
				State = 618;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteSpaceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesInputLocationContext spacesInputLocation() {
			return GetRuleContext<SpacesInputLocationContext>(0);
		}
		public CompleteSpaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeSpaceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteSpaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteSpaceListContext completeSpaceList() {
		CompleteSpaceListContext _localctx = new CompleteSpaceListContext(Context, State);
		EnterRule(_localctx, 40, RULE_completeSpaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(T__12);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__18) {
				{
				State = 622;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 623;
				spacesInputLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			Match(T__1);
			State = 627;
			Match(T__19);
			State = 628;
			Match(T__3);
			State = 629;
			blockUpdateList();
			State = 630;
			Match(T__4);
			State = 631;
			Match(T__18);
			State = 632;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(T__5);
			State = 635;
			Match(T__19);
			State = 636;
			longOrShortBlockSpec();
			State = 637;
			Match(T__6);
			State = 638;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public UpdateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlockStatementContext updateBlockStatement() {
		UpdateBlockStatementContext _localctx = new UpdateBlockStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_updateBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(T__7);
			State = 641;
			Match(T__19);
			State = 642;
			longOrShortBlockSpec();
			State = 643;
			Match(T__8);
			State = 644;
			blockUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		public DeleteBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlockStatementContext deleteBlockStatement() {
		DeleteBlockStatementContext _localctx = new DeleteBlockStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_deleteBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(T__9);
			State = 647;
			Match(T__19);
			State = 648;
			longOrShortBlockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortBlockSpecContext shortBlockSpec() {
			return GetRuleContext<ShortBlockSpecContext>(0);
		}
		public LongOrShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortBlockSpecContext longOrShortBlockSpec() {
		LongOrShortBlockSpecContext _localctx = new LongOrShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_longOrShortBlockSpec);
		try {
			State = 652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 650;
				blockSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				shortBlockSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public ShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortBlockSpecContext shortBlockSpec() {
		ShortBlockSpecContext _localctx = new ShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 52, RULE_shortBlockSpec);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 654;
					stringExpr();
					}
					break;
				case 2:
					{
					State = 655;
					Match(VARID);
					}
					break;
				}
				State = 658;
				Match(T__18);
				State = 659;
				longOrShortSpaceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 54, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(T__20);
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 664;
				statementList();
				}
				break;
			}
			State = 667;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(T__1);
			State = 670;
			Match(T__22);
			State = 676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 671;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 672;
				Match(T__3);
				State = 673;
				datasourceUpdateList();
				State = 674;
				Match(T__4);
				}
				break;
			}
			State = 678;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 679;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 680;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceOutputLocationContext datasourceOutputLocation() {
			return GetRuleContext<DatasourceOutputLocationContext>(0);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_copyDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(T__5);
			State = 684;
			Match(T__22);
			State = 685;
			longOrShortDatasourceSpec();
			State = 686;
			Match(T__6);
			State = 687;
			datasourceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(T__9);
			State = 690;
			Match(T__22);
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 691;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 692;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(T__7);
			State = 696;
			Match(T__22);
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 697;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 698;
				datasourceSpec();
				}
				break;
			}
			State = 701;
			Match(T__8);
			State = 702;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 64, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			datasourceUpdate();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 705;
				Match(T__10);
				State = 706;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 66, RULE_datasourceUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			Match(VARID);
			State = 710;
			Match(T__11);
			State = 711;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(T__1);
			State = 714;
			Match(T__22);
			State = 715;
			Match(T__24);
			State = 718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 716;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 717;
				datasourceEntryUpdateList();
				}
				break;
			}
			State = 720;
			_la = TokenStream.LA(1);
			if ( !(_la==T__18 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 721;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 722;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
			return GetRuleContext<LongOrShortDatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
			return GetRuleContext<DatasourceEntryOutputLocationContext>(0);
		}
		public CopyDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
		CopyDatasourceEntryStatementContext _localctx = new CopyDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_copyDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(T__5);
			State = 726;
			Match(T__22);
			State = 727;
			Match(T__24);
			State = 728;
			longOrShortDatasourceEntrySpec();
			State = 729;
			Match(T__6);
			State = 730;
			datasourceEntryOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			Match(T__9);
			State = 733;
			Match(T__22);
			State = 734;
			Match(T__24);
			State = 735;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(T__7);
			State = 738;
			Match(T__22);
			State = 739;
			Match(T__24);
			State = 740;
			datasourceEntryShortSpec();
			State = 741;
			Match(T__8);
			State = 742;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
			return GetRuleContext<DatasourceEntryFullSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public LongOrShortDatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
		LongOrShortDatasourceEntrySpecContext _localctx = new LongOrShortDatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 76, RULE_longOrShortDatasourceEntrySpec);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744;
				datasourceEntryFullSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 745;
				datasourceEntryShortSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 78, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(T__22);
			State = 749;
			Match(T__24);
			State = 750;
			datasourceEntryIdentifier();
			State = 751;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 752;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			datasourceEntryIdentifier();
			State = 755;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 756;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 758;
				intExpr();
				}
				break;
			case 2:
				{
				State = 759;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 760;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
		DatasourceEntryOutputLocationContext _localctx = new DatasourceEntryOutputLocationContext(Context, State);
		EnterRule(_localctx, 84, RULE_datasourceEntryOutputLocation);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			Match(T__7);
			State = 768;
			Match(T__22);
			State = 769;
			Match(T__25);
			State = 770;
			Match(T__18);
			State = 771;
			datasourceSpec();
			State = 772;
			Match(T__8);
			State = 773;
			datasourceEntryUpdateList();
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 774;
				Match(T__17);
				State = 775;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			Match(T__9);
			State = 779;
			Match(T__22);
			State = 780;
			Match(T__25);
			State = 781;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 782;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 783;
				datasourceShortSpec();
				}
				break;
			}
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 786;
				Match(T__17);
				State = 787;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(T__5);
			State = 791;
			Match(T__22);
			State = 792;
			Match(T__25);
			State = 793;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 794;
			datasourceEntriesSourceLocation();
			State = 795;
			Match(T__6);
			State = 796;
			datasourceEntriesTargetLocation();
			State = 799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 797;
				Match(T__17);
				State = 798;
				datasourceEntryConstraintExprList();
				}
			}

			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 801;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(T__26);
			State = 805;
			Match(T__22);
			State = 806;
			Match(T__25);
			State = 807;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 808;
			datasourceEntriesSourceLocation();
			State = 809;
			Match(T__6);
			State = 810;
			datasourceEntriesSourceLocation();
			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 811;
				Match(T__17);
				State = 812;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			datasourceEntryCopyOption();
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 816;
				Match(T__10);
				State = 817;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(T__27);
			State = 821;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612996L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 98, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			datasourceEntryUpdate();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 824;
				Match(T__10);
				State = 825;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 100, RULE_datasourceEntryUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			Match(VARID);
			State = 829;
			Match(T__11);
			State = 830;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 102, RULE_datasourceEntriesSourceLocation);
		try {
			State = 834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 104, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 836;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 839;
			Match(T__32);
			State = 840;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 106, RULE_datasourceEntriesTargetLocation);
		try {
			State = 844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 842;
				longOrShortDatasourceSpec();
				}
				break;
			case T__30:
			case T__31:
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 843;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 108, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			datasourceEntryConstraintExpr();
			State = 849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 847;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 848;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 110, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 851;
				datasourceEntryConstraint();
				State = 854;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 852;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 853;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 856;
				Match(T__3);
				State = 857;
				datasourceEntryConstraint();
				State = 860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 858;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 859;
					datasourceEntryConstraintExpr();
					}
				}

				State = 862;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 864;
				Match(T__3);
				State = 865;
				datasourceEntryConstraintExpr();
				State = 868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 866;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 867;
					datasourceEntryConstraintExpr();
					}
				}

				State = 870;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 112, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874;
				Match(VARID);
				State = 875;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 876;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877;
				Match(VARID);
				State = 879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 878;
					Match(T__36);
					}
				}

				State = 881;
				Match(T__18);
				State = 882;
				Match(T__3);
				State = 883;
				generalExprList();
				State = 884;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 886;
				Match(VARID);
				State = 891;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 887;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 888;
					Match(T__38);
					State = 889;
					Match(T__36);
					State = 890;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 893;
					Match(T__40);
					}
				}

				State = 896;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 897;
				Match(VARID);
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 898;
					Match(T__36);
					}
				}

				State = 901;
				Match(T__41);
				State = 902;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 903;
				Match(VARID);
				State = 908;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 904;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 905;
					Match(T__38);
					State = 906;
					Match(T__36);
					State = 907;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 910;
				Match(T__44);
				State = 911;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 912;
				Match(VARID);
				State = 917;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 913;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 914;
					Match(T__38);
					State = 915;
					Match(T__36);
					State = 916;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 919;
				Match(T__44);
				State = 920;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_loginStatement);
		try {
			State = 928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 923;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 924;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 925;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 926;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 927;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			Match(T__47);
			State = 933;
			Match(T__44);
			State = 934;
			Match(T__48);
			State = 935;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			Match(T__47);
			State = 938;
			Match(T__44);
			State = 939;
			Match(T__48);
			State = 940;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			Match(T__47);
			State = 943;
			Match(T__44);
			State = 944;
			Match(T__48);
			State = 945;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(T__47);
			State = 948;
			Match(T__44);
			State = 949;
			Match(T__48);
			State = 950;
			Match(T__49);
			State = 951;
			Match(T__33);
			State = 952;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_varStatement);
		try {
			State = 974;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 954;
				spaceVarStatement();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 955;
				blockVarStatement();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 956;
				stringVarStatement();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 957;
				regexVarStatement();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 5);
				{
				State = 958;
				storyVarStatement();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 959;
				datasourceEntryVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 7);
				{
				State = 960;
				Match(T__52);
				State = 961;
				Match(VARID);
				State = 962;
				Match(T__11);
				State = 972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 963;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 964;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 965;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 966;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 967;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 968;
					storySpec();
					}
					break;
				case 7:
					{
					State = 969;
					intExpr();
					}
					break;
				case 8:
					{
					State = 970;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 971;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(T__2);
			State = 977;
			Match(VARID);
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 978;
				Match(T__11);
				State = 979;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(T__19);
			State = 983;
			Match(VARID);
			State = 986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 984;
				Match(T__11);
				State = 985;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			Match(T__53);
			State = 989;
			Match(VARID);
			State = 992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 990;
				Match(T__11);
				State = 991;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994;
			Match(T__40);
			State = 995;
			Match(VARID);
			State = 998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 996;
				Match(T__11);
				State = 997;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(T__54);
			State = 1001;
			Match(VARID);
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 1002;
				Match(T__11);
				State = 1003;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			Match(T__22);
			State = 1007;
			Match(T__24);
			State = 1008;
			Match(VARID);
			State = 1011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 1009;
				Match(T__11);
				State = 1010;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 140, RULE_spaceSpec);
		int _la;
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1013;
				Match(T__2);
				State = 1014;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18 || _la==T__62) {
					{
					State = 1015;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1018;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 142, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 144, RULE_longOrShortSpaceSpec);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 146, RULE_blockSpec);
		try {
			State = 1036;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				Match(T__19);
				State = 1028;
				Match(STRINGLITERAL);
				State = 1029;
				Match(T__18);
				State = 1032;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1030;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 1031;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1034;
				Match(T__19);
				State = 1035;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 148, RULE_storySpec);
		int _la;
		try {
			State = 1045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1038;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1039;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1042;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1040;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 1041;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 150, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 1057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047;
				Match(T__22);
				State = 1048;
				Match(T__24);
				State = 1052;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 1049;
					intExpr();
					}
					break;
				case 2:
					{
					State = 1050;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 1051;
					Match(VARID);
					}
					break;
				}
				State = 1054;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1055;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 152, RULE_datasourceSpec);
		int _la;
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1059;
				Match(T__22);
				State = 1060;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1061;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__18) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1064;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1062;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 1063;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 154, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1070;
			Match(T__18);
			State = 1073;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 1071;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 1072;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_assignmentStatement);
		try {
			State = 1081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075;
				Match(VARID);
				State = 1076;
				Match(T__11);
				State = 1077;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1079;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1080;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			Match(VARID);
			State = 1084;
			Match(T__11);
			State = 1085;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			Match(VARID);
			State = 1088;
			Match(T__11);
			State = 1089;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(VARID);
			State = 1092;
			Match(T__11);
			State = 1093;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_printStatement);
		try {
			State = 1101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1095;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1096;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1098;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1099;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1100;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103;
			Match(T__55);
			State = 1104;
			Match(T__12);
			State = 1105;
			Match(T__13);
			State = 1106;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			Match(T__55);
			State = 1109;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111;
			Match(T__55);
			State = 1112;
			Match(T__2);
			State = 1113;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			Match(T__55);
			State = 1116;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(T__55);
			State = 1119;
			Match(T__56);
			State = 1120;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1122;
			Match(T__55);
			State = 1123;
			Match(T__58);
			State = 1124;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 178, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				{
				State = 1126;
				Match(T__60);
				}
				break;
			case T__58:
				{
				State = 1127;
				Match(T__58);
				State = 1128;
				Match(T__59);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 180, RULE_fileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131;
			Match(T__61);
			State = 1132;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public CompleteFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteFileSpecContext completeFileSpec() {
		CompleteFileSpecContext _localctx = new CompleteFileSpecContext(Context, State);
		EnterRule(_localctx, 182, RULE_completeFileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1134;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1137;
			Match(T__61);
			State = 1138;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 186, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 190, RULE_spacesOutputLocation);
		try {
			State = 1148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146;
				fileSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 192, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 194, RULE_blockInputLocation);
		try {
			State = 1154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1153;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 196, RULE_blockOutputLocation);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1156;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 198, RULE_blocksInputLocation);
		try {
			State = 1162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1161;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 200, RULE_blocksOutputLocation);
		try {
			State = 1166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1164;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1165;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 202, RULE_storyInputLocation);
		try {
			State = 1170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1168;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1169;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 204, RULE_storyOutputLocation);
		try {
			State = 1174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1172;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1173;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 206, RULE_storiesInputLocation);
		try {
			State = 1178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1176;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1177;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 208, RULE_storiesOutputLocation);
		try {
			State = 1182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1180;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1181;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 210, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				{
				State = 1184;
				Match(T__62);
				State = 1185;
				Match(T__60);
				}
				break;
			case T__18:
				{
				State = 1186;
				Match(T__18);
				State = 1187;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(T__7);
			State = 1191;
			Match(T__63);
			State = 1192;
			Match(T__18);
			State = 1193;
			longOrShortSpaceSpec();
			State = 1194;
			Match(T__8);
			State = 1195;
			blockUpdateList();
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1196;
				Match(T__17);
				State = 1197;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(T__5);
			State = 1201;
			Match(T__63);
			State = 1202;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1203;
			longOrShortSpaceSpec();
			State = 1204;
			Match(T__6);
			State = 1205;
			blocksOutputLocation();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1206;
				Match(T__17);
				State = 1207;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			Match(T__9);
			State = 1211;
			Match(T__63);
			State = 1212;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1213;
			longOrShortSpaceSpec();
			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1214;
				Match(T__17);
				State = 1215;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 218, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218;
			blockConstraintExpr();
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1219;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1220;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 220, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223;
				blockConstraint();
				State = 1226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 1224;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1225;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1228;
				Match(T__3);
				State = 1229;
				blockConstraint();
				State = 1232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1230;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1231;
					blockConstraintExpr();
					}
				}

				State = 1234;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1236;
				Match(T__3);
				State = 1237;
				blockConstraintExpr();
				State = 1240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1238;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1239;
					blockConstraintExpr();
					}
				}

				State = 1242;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 222, RULE_blockConstraint);
		int _la;
		try {
			State = 1293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1246;
				Match(VARID);
				State = 1247;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1248;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249;
				Match(VARID);
				State = 1251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1250;
					Match(T__36);
					}
				}

				State = 1253;
				Match(T__18);
				State = 1254;
				Match(T__3);
				State = 1255;
				generalExprList();
				State = 1256;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1258;
				Match(VARID);
				State = 1263;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1259;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1260;
					Match(T__38);
					State = 1261;
					Match(T__36);
					State = 1262;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1265;
					Match(T__40);
					}
				}

				State = 1268;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1269;
				Match(VARID);
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1270;
					Match(T__36);
					}
				}

				State = 1273;
				Match(T__41);
				State = 1274;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1275;
				Match(VARID);
				State = 1280;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1276;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1277;
					Match(T__38);
					State = 1278;
					Match(T__36);
					State = 1279;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1282;
				Match(T__44);
				State = 1283;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1284;
				Match(VARID);
				State = 1289;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1285;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1286;
					Match(T__38);
					State = 1287;
					Match(T__36);
					State = 1288;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1291;
				Match(T__44);
				State = 1292;
				generalExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 224, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1295;
			blockUpdate();
			State = 1298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1296;
				Match(T__10);
				State = 1297;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 226, RULE_blockUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300;
			Match(VARID);
			State = 1301;
			Match(T__11);
			State = 1302;
			generalExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 228, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304;
			intExpr();
			State = 1307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1305;
				Match(T__10);
				State = 1306;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 230, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 3940649673949185L) != 0)) {
				{
				State = 1310;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 3940649673949185L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1311;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__67) {
				{
				State = 1314;
				Match(T__67);
				}
			}

			State = 1317;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			Match(T__71);
			State = 1320;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_compareStatement);
		try {
			State = 1325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1322;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1323;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1324;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 238, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1327;
			Match(T__72);
			State = 1328;
			spaceSpec();
			State = 1329;
			Match(T__33);
			State = 1330;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 240, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			Match(T__72);
			State = 1333;
			blockSpec();
			State = 1334;
			Match(T__33);
			State = 1335;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1337;
			Match(T__72);
			State = 1338;
			Match(T__73);
			State = 1339;
			Match(T__63);
			State = 1340;
			Match(T__18);
			State = 1341;
			spaceSpec();
			State = 1342;
			Match(T__33);
			State = 1343;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			Match(T__5);
			State = 1346;
			Match(T__74);
			State = 1349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 1347;
				Match(T__44);
				State = 1348;
				Match(T__75);
				}
			}

			State = 1351;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1352;
			storiesInputLocation();
			State = 1353;
			Match(T__6);
			State = 1354;
			storiesOutputLocation();
			State = 1357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1355;
				Match(T__17);
				State = 1356;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 246, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			Match(T__76);
			State = 1360;
			Match(T__74);
			State = 1361;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1362;
			longOrShortSpaceSpec();
			State = 1365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1363;
				Match(T__17);
				State = 1364;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			Match(T__77);
			State = 1368;
			Match(T__74);
			State = 1369;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1370;
			longOrShortSpaceSpec();
			State = 1373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1371;
				Match(T__17);
				State = 1372;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 250, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(T__9);
			State = 1376;
			Match(T__74);
			State = 1377;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1378;
			longOrShortSpaceSpec();
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1379;
				Match(T__17);
				State = 1380;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 252, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383;
			storyConstraintExpr();
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1384;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1385;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 254, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1388;
				storyConstraint();
				State = 1391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 1389;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1390;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1393;
				Match(T__3);
				State = 1394;
				storyConstraint();
				State = 1397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1395;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1396;
					storyConstraintExpr();
					}
				}

				State = 1399;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1401;
				Match(T__3);
				State = 1402;
				storyConstraintExpr();
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1403;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1404;
					storyConstraintExpr();
					}
				}

				State = 1407;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 256, RULE_storyConstraint);
		int _la;
		try {
			State = 1613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1411;
				Match(VARID);
				State = 1412;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1413;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414;
				Match(VARID);
				State = 1416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1415;
					Match(T__36);
					}
				}

				State = 1418;
				Match(T__18);
				State = 1419;
				Match(T__3);
				State = 1420;
				generalExprList();
				State = 1421;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1423;
				Match(VARID);
				State = 1428;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1424;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1425;
					Match(T__38);
					State = 1426;
					Match(T__36);
					State = 1427;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1430;
					Match(T__40);
					}
				}

				State = 1433;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1434;
				Match(VARID);
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1435;
					Match(T__36);
					}
				}

				State = 1438;
				Match(T__41);
				State = 1439;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1440;
				Match(VARID);
				State = 1445;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1441;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1442;
					Match(T__38);
					State = 1443;
					Match(T__36);
					State = 1444;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1447;
				Match(T__44);
				State = 1448;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1449;
				Match(VARID);
				State = 1454;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1450;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1451;
					Match(T__38);
					State = 1452;
					Match(T__36);
					State = 1453;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1456;
				Match(T__44);
				State = 1457;
				generalExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1458;
				Match(VARID);
				State = 1459;
				Match(T__78);
				State = 1461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1460;
					Match(T__36);
					}
				}

				State = 1463;
				Match(T__79);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1464;
				Match(VARID);
				State = 1465;
				Match(T__78);
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1466;
					Match(T__36);
					}
				}

				State = 1469;
				Match(T__80);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1478;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1471;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1470;
						Match(T__81);
						}
					}

					State = 1473;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1474;
						Match(T__73);
						}
					}

					State = 1477;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1480;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1481;
				generalExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1490;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1483;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1482;
						Match(T__81);
						}
					}

					State = 1485;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1486;
						Match(T__73);
						}
					}

					State = 1489;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1492;
					Match(T__36);
					}
				}

				State = 1495;
				Match(T__18);
				State = 1496;
				Match(T__3);
				State = 1497;
				generalExprList();
				State = 1498;
				Match(T__4);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1500;
					Match(T__81);
					}
				}

				State = 1503;
				Match(T__82);
				State = 1508;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1504;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1505;
					Match(T__38);
					State = 1506;
					Match(T__36);
					State = 1507;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1510;
					Match(T__40);
					}
				}

				State = 1513;
				generalExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1514;
					Match(T__81);
					}
				}

				State = 1517;
				Match(T__82);
				State = 1522;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1518;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1519;
					Match(T__38);
					State = 1520;
					Match(T__36);
					State = 1521;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1524;
				Match(T__44);
				State = 1525;
				generalExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__81) {
					{
					State = 1526;
					Match(T__81);
					}
				}

				State = 1529;
				Match(T__82);
				State = 1534;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1530;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1531;
					Match(T__38);
					State = 1532;
					Match(T__36);
					State = 1533;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1536;
				Match(T__44);
				State = 1537;
				generalExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1538;
					Match(T__73);
					}
				}

				State = 1541;
				Match(T__83);
				State = 1546;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1542;
					Match(T__39);
					}
					break;
				case T__84:
					{
					State = 1543;
					Match(T__84);
					State = 1544;
					Match(T__36);
					State = 1545;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1548;
					Match(T__40);
					}
				}

				State = 1551;
				generalExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1552;
					Match(T__73);
					}
				}

				State = 1555;
				Match(T__83);
				State = 1560;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1556;
					Match(T__43);
					}
					break;
				case T__84:
					{
					State = 1557;
					Match(T__84);
					State = 1558;
					Match(T__36);
					State = 1559;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1562;
				Match(T__44);
				State = 1563;
				generalExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73) {
					{
					State = 1564;
					Match(T__73);
					}
				}

				State = 1567;
				Match(T__83);
				State = 1572;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
					{
					State = 1568;
					Match(T__46);
					}
					break;
				case T__84:
					{
					State = 1569;
					Match(T__84);
					State = 1570;
					Match(T__36);
					State = 1571;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1574;
				Match(T__44);
				State = 1575;
				generalExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1584;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1577;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1576;
						Match(T__81);
						}
					}

					State = 1579;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1580;
						Match(T__73);
						}
					}

					State = 1583;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1586;
					Match(T__36);
					}
				}

				State = 1589;
				Match(T__18);
				State = 1590;
				Match(T__3);
				State = 1591;
				generalExprList();
				State = 1592;
				Match(T__4);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1602;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__81:
				case T__82:
					{
					{
					State = 1595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__81) {
						{
						State = 1594;
						Match(T__81);
						}
					}

					State = 1597;
					Match(T__82);
					}
					}
					break;
				case T__73:
				case T__83:
					{
					{
					State = 1599;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__73) {
						{
						State = 1598;
						Match(T__73);
						}
					}

					State = 1601;
					Match(T__83);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1604;
					Match(T__36);
					}
				}

				State = 1607;
				Match(T__41);
				State = 1608;
				generalExpr();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1609;
				Match(T__85);
				State = 1610;
				Match(T__83);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1611;
				Match(T__81);
				State = 1612;
				Match(T__83);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 258, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==REGEXLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 260, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			regexExpr();
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1618;
				Match(T__10);
				State = 1619;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 262, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			Match(T__5);
			State = 1623;
			Match(T__86);
			State = 1624;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1625;
			longOrShortSpaceSpec();
			State = 1626;
			Match(T__6);
			State = 1627;
			longOrShortSpaceSpec();
			State = 1630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1628;
				Match(T__17);
				State = 1629;
				datasourceConstraintExprList();
				}
			}

			State = 1633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27 || _la==T__87) {
				{
				State = 1632;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635;
			Match(T__7);
			State = 1636;
			Match(T__86);
			State = 1637;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1638;
			longOrShortSpaceSpec();
			State = 1639;
			Match(T__8);
			State = 1640;
			datasourceUpdateList();
			State = 1643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1641;
				Match(T__17);
				State = 1642;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645;
			Match(T__9);
			State = 1646;
			Match(T__86);
			State = 1647;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1648;
			longOrShortSpaceSpec();
			State = 1651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1649;
				Match(T__17);
				State = 1650;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653;
			Match(T__5);
			State = 1654;
			Match(T__86);
			State = 1655;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1656;
			longOrShortSpaceSpec();
			State = 1657;
			Match(T__6);
			State = 1658;
			longOrShortSpaceSpec();
			State = 1661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1659;
				Match(T__17);
				State = 1660;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 270, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			datasourceCopyOption();
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1664;
				Match(T__10);
				State = 1665;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 272, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1668;
				Match(T__27);
				State = 1669;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1610612996L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__87:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1670;
				Match(T__87);
				State = 1671;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 274, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			datasourceConstraintExpr();
			State = 1677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1675;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1676;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 276, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1679;
				datasourceConstraint();
				State = 1682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1680;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1681;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1684;
				Match(T__3);
				State = 1685;
				datasourceConstraint();
				State = 1688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1686;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1687;
					datasourceConstraintExpr();
					}
				}

				State = 1690;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1692;
				Match(T__3);
				State = 1693;
				datasourceConstraintExpr();
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1694;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1695;
					datasourceConstraintExpr();
					}
				}

				State = 1698;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 278, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1702;
				Match(VARID);
				State = 1703;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1704;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1705;
				Match(VARID);
				State = 1707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1706;
					Match(T__36);
					}
				}

				State = 1709;
				Match(T__18);
				State = 1710;
				Match(T__3);
				State = 1711;
				generalExprList();
				State = 1712;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1714;
				Match(VARID);
				State = 1719;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1715;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1716;
					Match(T__38);
					State = 1717;
					Match(T__36);
					State = 1718;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1721;
					Match(T__40);
					}
				}

				State = 1724;
				regexExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1725;
				Match(VARID);
				State = 1727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1726;
					Match(T__36);
					}
				}

				State = 1729;
				Match(T__41);
				State = 1730;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1731;
				Match(VARID);
				State = 1736;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1732;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1733;
					Match(T__38);
					State = 1734;
					Match(T__36);
					State = 1735;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1738;
				Match(T__44);
				State = 1739;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1740;
				Match(VARID);
				State = 1745;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1741;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1742;
					Match(T__38);
					State = 1743;
					Match(T__36);
					State = 1744;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1747;
				Match(T__44);
				State = 1748;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 280, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751;
			stringExpr();
			State = 1754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1752;
				Match(T__10);
				State = 1753;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarFieldExprContext varFieldExpr() {
			return GetRuleContext<VarFieldExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallExprContext fnCallExpr() {
			return GetRuleContext<FnCallExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 282, RULE_stringExpr);
		int _la;
		try {
			State = 1785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1756;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1757;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1758;
					varFieldExpr();
					}
					break;
				case 4:
					{
					State = 1759;
					fnCallExpr();
					}
					break;
				}
				State = 1764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
				case 1:
					{
					State = 1762;
					Match(T__64);
					State = 1763;
					stringExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1766;
				Match(T__3);
				State = 1770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 1767;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1768;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1769;
					varFieldExpr();
					}
					break;
				}
				State = 1774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 1772;
					Match(T__64);
					State = 1773;
					stringExpr();
					}
				}

				State = 1776;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1777;
				Match(T__3);
				State = 1778;
				stringExpr();
				State = 1781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__64) {
					{
					State = 1779;
					Match(T__64);
					State = 1780;
					stringExpr();
					}
				}

				State = 1783;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFieldExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public VarFieldExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFieldExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFieldExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFieldExprContext varFieldExpr() {
		VarFieldExprContext _localctx = new VarFieldExprContext(Context, State);
		EnterRule(_localctx, 284, RULE_varFieldExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			Match(VARID);
			State = 1788;
			Match(T__88);
			State = 1789;
			stringExpr();
			State = 1790;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallExprContext fnCallExpr() {
		FnCallExprContext _localctx = new FnCallExprContext(Context, State);
		EnterRule(_localctx, 286, RULE_fnCallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			Match(VARID);
			State = 1793;
			Match(T__3);
			State = 1795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 1794;
				fnCallActualArgList();
				}
			}

			State = 1797;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallActualArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FnActualArgContext fnActualArg() {
			return GetRuleContext<FnActualArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallActualArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallActualArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallActualArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallActualArgListContext fnCallActualArgList() {
		FnCallActualArgListContext _localctx = new FnCallActualArgListContext(Context, State);
		EnterRule(_localctx, 288, RULE_fnCallActualArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799;
			fnActualArg();
			State = 1802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1800;
				Match(T__10);
				State = 1801;
				fnCallActualArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnActualArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FnActualArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnActualArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnActualArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnActualArgContext fnActualArg() {
		FnActualArgContext _localctx = new FnActualArgContext(Context, State);
		EnterRule(_localctx, 290, RULE_fnActualArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1806;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1804;
				Match(VARID);
				State = 1805;
				Match(T__11);
				}
				break;
			}
			State = 1808;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 292, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			spaceConstraintExpr();
			State = 1813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || _la==T__34) {
				{
				State = 1811;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1812;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 294, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1815;
				spaceConstraint();
				State = 1818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1816;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1817;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1820;
				Match(T__3);
				State = 1821;
				spaceConstraint();
				State = 1824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1822;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1823;
					spaceConstraintExpr();
					}
				}

				State = 1826;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1828;
				Match(T__3);
				State = 1829;
				spaceConstraintExpr();
				State = 1832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || _la==T__34) {
					{
					State = 1830;
					_la = TokenStream.LA(1);
					if ( !(_la==T__33 || _la==T__34) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1831;
					spaceConstraintExpr();
					}
				}

				State = 1834;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprContext generalExpr() {
			return GetRuleContext<GeneralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralExprListContext generalExprList() {
			return GetRuleContext<GeneralExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 296, RULE_spaceConstraint);
		int _la;
		try {
			State = 1903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1838;
				Match(VARID);
				State = 1839;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1840;
				generalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1841;
				Match(VARID);
				State = 1843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1842;
					Match(T__36);
					}
				}

				State = 1845;
				Match(T__18);
				State = 1846;
				Match(T__3);
				State = 1847;
				generalExprList();
				State = 1848;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1850;
				Match(VARID);
				State = 1855;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1851;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1852;
					Match(T__38);
					State = 1853;
					Match(T__36);
					State = 1854;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1857;
					Match(T__40);
					}
				}

				State = 1860;
				generalExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1861;
				Match(VARID);
				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1862;
					Match(T__36);
					}
				}

				State = 1865;
				Match(T__41);
				State = 1866;
				generalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1867;
				Match(VARID);
				State = 1872;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1868;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1869;
					Match(T__38);
					State = 1870;
					Match(T__36);
					State = 1871;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1874;
				Match(T__44);
				State = 1875;
				generalExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1876;
				Match(VARID);
				State = 1881;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1877;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1878;
					Match(T__38);
					State = 1879;
					Match(T__36);
					State = 1880;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1883;
				Match(T__44);
				State = 1884;
				generalExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1885;
				Match(VARID);
				State = 1886;
				Match(T__78);
				State = 1888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1887;
					Match(T__36);
					}
				}

				State = 1890;
				Match(T__79);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1891;
				Match(VARID);
				State = 1892;
				Match(T__78);
				State = 1894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1893;
					Match(T__36);
					}
				}

				State = 1896;
				Match(T__80);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1897;
				Match(VARID);
				State = 1898;
				Match(T__78);
				State = 1900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1899;
					Match(T__36);
					}
				}

				State = 1902;
				Match(T__90);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 298, RULE_datasourcesInputLocation);
		try {
			State = 1907;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1905;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1906;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 300, RULE_datasourcesOutputLocation);
		try {
			State = 1911;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1909;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1910;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 302, RULE_datasourceInputLocation);
		try {
			State = 1915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1913;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1914;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 304, RULE_datasourceOutputLocation);
		try {
			State = 1919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1917;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1918;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 306, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921;
			Match(T__91);
			State = 1922;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_forEachStatement);
		try {
			State = 1940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1924;
				Match(T__92);
				State = 1925;
				Match(T__3);
				State = 1926;
				typedVarDecl();
				State = 1927;
				Match(T__18);
				State = 1928;
				foreachEntityListForTypedVarDecl();
				State = 1929;
				Match(T__4);
				State = 1930;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1932;
				Match(T__92);
				State = 1933;
				Match(T__3);
				State = 1934;
				untypedVarDecl();
				State = 1935;
				Match(T__18);
				State = 1936;
				foreachEntityListForUntypedVarDecl();
				State = 1937;
				Match(T__4);
				State = 1938;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 1950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1942;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1943;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1944;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1945;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1946;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1947;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1948;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1949;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 1960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1954;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1955;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1956;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1957;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1958;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1959;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1962;
				fileSpec();
				}
				break;
			case T__2:
				{
				State = 1963;
				spaceFileSpec();
				}
				break;
			case T__12:
				{
				State = 1964;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1967;
				Match(T__17);
				State = 1968;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 316, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 1971;
				spaceFileSpec();
				}
				break;
			case T__12:
				{
				State = 1972;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1975;
				Match(T__17);
				State = 1976;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 318, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1979;
				fileSpec();
				}
				break;
			case T__19:
				{
				State = 1980;
				blockFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1981;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1984;
				Match(T__17);
				State = 1985;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 320, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				{
				State = 1988;
				blockFileSpec();
				}
				break;
			case T__63:
				{
				State = 1989;
				Match(T__63);
				State = 1990;
				Match(T__18);
				State = 1991;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 1994;
				Match(T__17);
				State = 1995;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 322, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 1998;
				fileSpec();
				}
				break;
			case T__22:
				{
				State = 1999;
				datasourceFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2000;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2003;
				Match(T__17);
				State = 2004;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 324, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2011;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				{
				State = 2007;
				datasourceFileSpec();
				}
				break;
			case T__86:
				{
				State = 2008;
				Match(T__86);
				State = 2009;
				Match(T__18);
				State = 2010;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2013;
				Match(T__17);
				State = 2014;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 326, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 2017;
				fileSpec();
				}
				break;
			case T__94:
				{
				State = 2018;
				datasourceEntryFileSpec();
				}
				break;
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2019;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2022;
				Match(T__17);
				State = 2023;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 328, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__94:
				{
				State = 2026;
				datasourceEntryFileSpec();
				}
				break;
			case T__22:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2027;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2030;
				Match(T__17);
				State = 2031;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 330, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2037;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 2034;
				fileSpec();
				}
				break;
			case T__54:
				{
				State = 2035;
				storyFileSpec();
				}
				break;
			case T__2:
			case VARID:
				{
				State = 2036;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2039;
				Match(T__17);
				State = 2040;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 332, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
				{
				State = 2043;
				storyFileSpec();
				}
				break;
			case T__74:
				{
				State = 2044;
				Match(T__74);
				State = 2045;
				Match(T__18);
				State = 2046;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 2049;
				Match(T__17);
				State = 2050;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 334, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 2057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053;
				fileSpec();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2054;
				Match(T__53);
				State = 2055;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2056;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 336, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 2062;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2059;
				Match(T__53);
				State = 2060;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2061;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 338, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 2068;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2064;
				fileSpec();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2065;
				Match(T__40);
				State = 2066;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2067;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 340, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 2073;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2070;
				Match(T__40);
				State = 2071;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2072;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 342, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 2079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075;
				fileSpec();
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076;
				Match(T__93);
				State = 2077;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2078;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 344, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 2084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__93:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081;
				Match(T__93);
				State = 2082;
				fileSpec();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2083;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringArrayLiteralContext stringArrayLiteral() {
		StringArrayLiteralContext _localctx = new StringArrayLiteralContext(Context, State);
		EnterRule(_localctx, 346, RULE_stringArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086;
			Match(T__88);
			State = 2088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 2087;
				stringExprList();
				}
			}

			State = 2090;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexArrayLiteralContext regexArrayLiteral() {
		RegexArrayLiteralContext _localctx = new RegexArrayLiteralContext(Context, State);
		EnterRule(_localctx, 348, RULE_regexArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092;
			Match(T__88);
			State = 2094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==REGEXLITERAL) {
				{
				State = 2093;
				regexExprList();
				}
			}

			State = 2096;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntArrayLiteralContext intArrayLiteral() {
		IntArrayLiteralContext _localctx = new IntArrayLiteralContext(Context, State);
		EnterRule(_localctx, 350, RULE_intArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2098;
			Match(T__88);
			State = 2100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==INTLITERAL) {
				{
				State = 2099;
				intExprList();
				}
			}

			State = 2102;
			Match(T__89);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 352, RULE_longOrShortDatasourceSpec);
		try {
			State = 2106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2104;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2105;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 354, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2108;
			Match(T__2);
			State = 2109;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 356, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			Match(T__19);
			State = 2112;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 358, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2114;
			Match(T__22);
			State = 2115;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 360, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2117;
			Match(T__94);
			State = 2118;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 362, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120;
			Match(T__54);
			State = 2121;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 364, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2123;
			Match(T__52);
			State = 2124;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 366, RULE_typedVarDecl);
		try {
			State = 2134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2126;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2127;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2128;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2129;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2130;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2131;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2132;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2133;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 368, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136;
			Match(T__2);
			State = 2137;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 370, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			Match(T__19);
			State = 2140;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 372, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2142;
			Match(T__22);
			State = 2143;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 374, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			Match(T__22);
			State = 2146;
			Match(T__24);
			State = 2147;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 376, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2149;
			Match(T__54);
			State = 2150;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 378, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2152;
			Match(T__53);
			State = 2153;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 380, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(T__40);
			State = 2156;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 382, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2158;
			Match(T__93);
			State = 2159;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 384, RULE_datasourceEntriesInputLocation);
		try {
			State = 2163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2161;
				fileSpec();
				}
				break;
			case T__22:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2162;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,103,2166,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,1,0,1,0,1,1,5,1,390,8,
		1,10,1,12,1,393,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,513,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,522,8,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,543,8,
		7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,553,8,9,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,564,8,10,1,11,1,11,1,11,3,11,569,8,11,1,11,1,11,
		3,11,573,8,11,3,11,575,8,11,1,11,1,11,3,11,579,8,11,1,12,1,12,1,12,1,13,
		1,13,1,13,3,13,587,8,13,1,13,1,13,1,14,1,14,1,14,3,14,594,8,14,1,15,1,
		15,1,15,3,15,599,8,15,1,16,1,16,1,16,3,16,604,8,16,1,17,1,17,1,17,3,17,
		609,8,17,1,18,1,18,1,18,1,18,3,18,615,8,18,1,19,1,19,1,19,3,19,620,8,19,
		1,20,1,20,1,20,3,20,625,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,25,1,25,3,25,653,8,25,1,26,1,26,3,26,657,8,26,1,26,1,26,1,26,
		3,26,662,8,26,1,27,1,27,3,27,666,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,3,28,677,8,28,1,28,1,28,1,28,3,28,682,8,28,1,29,1,29,1,29,
		1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,694,8,30,1,31,1,31,1,31,1,31,3,
		31,700,8,31,1,31,1,31,1,31,1,32,1,32,1,32,3,32,708,8,32,1,33,1,33,1,33,
		1,33,1,34,1,34,1,34,1,34,1,34,3,34,719,8,34,1,34,1,34,1,34,3,34,724,8,
		34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,3,38,747,8,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,762,8,41,1,42,1,42,3,
		42,766,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,777,8,43,
		1,44,1,44,1,44,1,44,1,44,1,44,3,44,785,8,44,1,44,1,44,3,44,789,8,44,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,800,8,45,1,45,3,45,803,
		8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,814,8,46,1,47,1,
		47,1,47,3,47,819,8,47,1,48,1,48,1,48,1,49,1,49,1,49,3,49,827,8,49,1,50,
		1,50,1,50,1,50,1,51,1,51,3,51,835,8,51,1,52,3,52,838,8,52,1,52,1,52,1,
		52,1,53,1,53,3,53,845,8,53,1,54,1,54,1,54,3,54,850,8,54,1,55,1,55,1,55,
		3,55,855,8,55,1,55,1,55,1,55,1,55,3,55,861,8,55,1,55,1,55,1,55,1,55,1,
		55,1,55,3,55,869,8,55,1,55,1,55,3,55,873,8,55,1,56,1,56,1,56,1,56,1,56,
		3,56,880,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,892,
		8,56,1,56,3,56,895,8,56,1,56,1,56,1,56,3,56,900,8,56,1,56,1,56,1,56,1,
		56,1,56,1,56,1,56,3,56,909,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,
		918,8,56,1,56,1,56,3,56,922,8,56,1,57,1,57,1,57,1,57,1,57,3,57,929,8,57,
		1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,
		1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		3,63,973,8,63,3,63,975,8,63,1,64,1,64,1,64,1,64,3,64,981,8,64,1,65,1,65,
		1,65,1,65,3,65,987,8,65,1,66,1,66,1,66,1,66,3,66,993,8,66,1,67,1,67,1,
		67,1,67,3,67,999,8,67,1,68,1,68,1,68,1,68,3,68,1005,8,68,1,69,1,69,1,69,
		1,69,1,69,3,69,1012,8,69,1,70,1,70,1,70,3,70,1017,8,70,1,70,3,70,1020,
		8,70,1,71,1,71,1,72,1,72,3,72,1026,8,72,1,73,1,73,1,73,1,73,1,73,3,73,
		1033,8,73,1,73,1,73,3,73,1037,8,73,1,74,1,74,1,74,1,74,3,74,1043,8,74,
		1,74,3,74,1046,8,74,1,75,1,75,1,75,1,75,1,75,3,75,1053,8,75,1,75,1,75,
		1,75,3,75,1058,8,75,1,76,1,76,1,76,1,76,1,76,3,76,1065,8,76,1,76,3,76,
		1068,8,76,1,77,1,77,1,77,1,77,3,77,1074,8,77,1,78,1,78,1,78,1,78,1,78,
		1,78,3,78,1082,8,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,
		1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1102,8,82,1,83,1,83,1,83,
		1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,
		1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1130,8,89,1,90,1,90,
		1,90,1,91,3,91,1136,8,91,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,
		1,95,1,95,3,95,1149,8,95,1,96,1,96,1,97,1,97,3,97,1155,8,97,1,98,1,98,
		3,98,1159,8,98,1,99,1,99,3,99,1163,8,99,1,100,1,100,3,100,1167,8,100,1,
		101,1,101,3,101,1171,8,101,1,102,1,102,3,102,1175,8,102,1,103,1,103,3,
		103,1179,8,103,1,104,1,104,3,104,1183,8,104,1,105,1,105,1,105,1,105,3,
		105,1189,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1199,
		8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1209,8,107,
		1,108,1,108,1,108,1,108,1,108,1,108,3,108,1217,8,108,1,109,1,109,1,109,
		3,109,1222,8,109,1,110,1,110,1,110,3,110,1227,8,110,1,110,1,110,1,110,
		1,110,3,110,1233,8,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1241,
		8,110,1,110,1,110,3,110,1245,8,110,1,111,1,111,1,111,1,111,1,111,3,111,
		1252,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
		3,111,1264,8,111,1,111,3,111,1267,8,111,1,111,1,111,1,111,3,111,1272,8,
		111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1281,8,111,1,111,1,
		111,1,111,1,111,1,111,1,111,1,111,3,111,1290,8,111,1,111,1,111,3,111,1294,
		8,111,1,112,1,112,1,112,3,112,1299,8,112,1,113,1,113,1,113,1,113,1,114,
		1,114,1,114,3,114,1308,8,114,1,115,1,115,1,115,3,115,1313,8,115,1,116,
		3,116,1316,8,116,1,116,1,116,1,117,1,117,1,117,1,118,1,118,1,118,3,118,
		1326,8,118,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
		1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,
		3,122,1350,8,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1358,8,122,
		1,123,1,123,1,123,1,123,1,123,1,123,3,123,1366,8,123,1,124,1,124,1,124,
		1,124,1,124,1,124,3,124,1374,8,124,1,125,1,125,1,125,1,125,1,125,1,125,
		3,125,1382,8,125,1,126,1,126,1,126,3,126,1387,8,126,1,127,1,127,1,127,
		3,127,1392,8,127,1,127,1,127,1,127,1,127,3,127,1398,8,127,1,127,1,127,
		1,127,1,127,1,127,1,127,3,127,1406,8,127,1,127,1,127,3,127,1410,8,127,
		1,128,1,128,1,128,1,128,1,128,3,128,1417,8,128,1,128,1,128,1,128,1,128,
		1,128,1,128,1,128,1,128,1,128,1,128,3,128,1429,8,128,1,128,3,128,1432,
		8,128,1,128,1,128,1,128,3,128,1437,8,128,1,128,1,128,1,128,1,128,1,128,
		1,128,1,128,3,128,1446,8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
		3,128,1455,8,128,1,128,1,128,1,128,1,128,1,128,3,128,1462,8,128,1,128,
		1,128,1,128,1,128,3,128,1468,8,128,1,128,1,128,3,128,1472,8,128,1,128,
		1,128,3,128,1476,8,128,1,128,3,128,1479,8,128,1,128,1,128,1,128,3,128,
		1484,8,128,1,128,1,128,3,128,1488,8,128,1,128,3,128,1491,8,128,1,128,3,
		128,1494,8,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1502,8,128,1,
		128,1,128,1,128,1,128,1,128,3,128,1509,8,128,1,128,3,128,1512,8,128,1,
		128,1,128,3,128,1516,8,128,1,128,1,128,1,128,1,128,1,128,3,128,1523,8,
		128,1,128,1,128,1,128,3,128,1528,8,128,1,128,1,128,1,128,1,128,1,128,3,
		128,1535,8,128,1,128,1,128,1,128,3,128,1540,8,128,1,128,1,128,1,128,1,
		128,1,128,3,128,1547,8,128,1,128,3,128,1550,8,128,1,128,1,128,3,128,1554,
		8,128,1,128,1,128,1,128,1,128,1,128,3,128,1561,8,128,1,128,1,128,1,128,
		3,128,1566,8,128,1,128,1,128,1,128,1,128,1,128,3,128,1573,8,128,1,128,
		1,128,1,128,3,128,1578,8,128,1,128,1,128,3,128,1582,8,128,1,128,3,128,
		1585,8,128,1,128,3,128,1588,8,128,1,128,1,128,1,128,1,128,1,128,1,128,
		3,128,1596,8,128,1,128,1,128,3,128,1600,8,128,1,128,3,128,1603,8,128,1,
		128,3,128,1606,8,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1614,8,
		128,1,129,1,129,1,130,1,130,1,130,3,130,1621,8,130,1,131,1,131,1,131,1,
		131,1,131,1,131,1,131,1,131,3,131,1631,8,131,1,131,3,131,1634,8,131,1,
		132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,1644,8,132,1,133,1,
		133,1,133,1,133,1,133,1,133,3,133,1652,8,133,1,134,1,134,1,134,1,134,1,
		134,1,134,1,134,1,134,3,134,1662,8,134,1,135,1,135,1,135,3,135,1667,8,
		135,1,136,1,136,1,136,1,136,3,136,1673,8,136,1,137,1,137,1,137,3,137,1678,
		8,137,1,138,1,138,1,138,3,138,1683,8,138,1,138,1,138,1,138,1,138,3,138,
		1689,8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,1697,8,138,1,138,
		1,138,3,138,1701,8,138,1,139,1,139,1,139,1,139,1,139,3,139,1708,8,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,1720,
		8,139,1,139,3,139,1723,8,139,1,139,1,139,1,139,3,139,1728,8,139,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,3,139,1737,8,139,1,139,1,139,1,139,
		1,139,1,139,1,139,1,139,3,139,1746,8,139,1,139,1,139,3,139,1750,8,139,
		1,140,1,140,1,140,3,140,1755,8,140,1,141,1,141,1,141,1,141,3,141,1761,
		8,141,1,141,1,141,3,141,1765,8,141,1,141,1,141,1,141,1,141,3,141,1771,
		8,141,1,141,1,141,3,141,1775,8,141,1,141,1,141,1,141,1,141,1,141,3,141,
		1782,8,141,1,141,1,141,3,141,1786,8,141,1,142,1,142,1,142,1,142,1,142,
		1,143,1,143,1,143,3,143,1796,8,143,1,143,1,143,1,144,1,144,1,144,3,144,
		1803,8,144,1,145,1,145,3,145,1807,8,145,1,145,1,145,1,146,1,146,1,146,
		3,146,1814,8,146,1,147,1,147,1,147,3,147,1819,8,147,1,147,1,147,1,147,
		1,147,3,147,1825,8,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1833,
		8,147,1,147,1,147,3,147,1837,8,147,1,148,1,148,1,148,1,148,1,148,3,148,
		1844,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
		3,148,1856,8,148,1,148,3,148,1859,8,148,1,148,1,148,1,148,3,148,1864,8,
		148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,1873,8,148,1,148,1,
		148,1,148,1,148,1,148,1,148,1,148,3,148,1882,8,148,1,148,1,148,1,148,1,
		148,1,148,3,148,1889,8,148,1,148,1,148,1,148,1,148,3,148,1895,8,148,1,
		148,1,148,1,148,1,148,3,148,1901,8,148,1,148,3,148,1904,8,148,1,149,1,
		149,3,149,1908,8,149,1,150,1,150,3,150,1912,8,150,1,151,1,151,3,151,1916,
		8,151,1,152,1,152,3,152,1920,8,152,1,153,1,153,1,153,1,154,1,154,1,154,
		1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
		1,154,3,154,1941,8,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
		3,155,1951,8,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,
		1961,8,156,1,157,1,157,1,157,3,157,1966,8,157,1,157,1,157,3,157,1970,8,
		157,1,158,1,158,3,158,1974,8,158,1,158,1,158,3,158,1978,8,158,1,159,1,
		159,1,159,3,159,1983,8,159,1,159,1,159,3,159,1987,8,159,1,160,1,160,1,
		160,1,160,3,160,1993,8,160,1,160,1,160,3,160,1997,8,160,1,161,1,161,1,
		161,3,161,2002,8,161,1,161,1,161,3,161,2006,8,161,1,162,1,162,1,162,1,
		162,3,162,2012,8,162,1,162,1,162,3,162,2016,8,162,1,163,1,163,1,163,3,
		163,2021,8,163,1,163,1,163,3,163,2025,8,163,1,164,1,164,3,164,2029,8,164,
		1,164,1,164,3,164,2033,8,164,1,165,1,165,1,165,3,165,2038,8,165,1,165,
		1,165,3,165,2042,8,165,1,166,1,166,1,166,1,166,3,166,2048,8,166,1,166,
		1,166,3,166,2052,8,166,1,167,1,167,1,167,1,167,3,167,2058,8,167,1,168,
		1,168,1,168,3,168,2063,8,168,1,169,1,169,1,169,1,169,3,169,2069,8,169,
		1,170,1,170,1,170,3,170,2074,8,170,1,171,1,171,1,171,1,171,3,171,2080,
		8,171,1,172,1,172,1,172,3,172,2085,8,172,1,173,1,173,3,173,2089,8,173,
		1,173,1,173,1,174,1,174,3,174,2095,8,174,1,174,1,174,1,175,1,175,3,175,
		2101,8,175,1,175,1,175,1,176,1,176,3,176,2107,8,176,1,177,1,177,1,177,
		1,178,1,178,1,178,1,179,1,179,1,179,1,180,1,180,1,180,1,181,1,181,1,181,
		1,182,1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,
		2135,8,183,1,184,1,184,1,184,1,185,1,185,1,185,1,186,1,186,1,186,1,187,
		1,187,1,187,1,187,1,188,1,188,1,188,1,189,1,189,1,189,1,190,1,190,1,190,
		1,191,1,191,1,191,1,192,1,192,3,192,2164,8,192,1,192,0,0,193,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
		248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
		284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
		320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
		356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,0,13,2,0,14,
		14,19,19,2,0,19,19,24,24,3,0,2,2,8,8,29,30,1,0,31,32,1,0,34,35,2,0,12,
		12,36,36,1,0,98,100,2,0,98,98,100,100,1,0,98,99,1,0,99,100,2,0,16,16,65,
		67,1,0,69,71,2,0,99,99,101,101,2354,0,386,1,0,0,0,2,391,1,0,0,0,4,512,
		1,0,0,0,6,514,1,0,0,0,8,523,1,0,0,0,10,529,1,0,0,0,12,535,1,0,0,0,14,539,
		1,0,0,0,16,544,1,0,0,0,18,548,1,0,0,0,20,557,1,0,0,0,22,574,1,0,0,0,24,
		580,1,0,0,0,26,583,1,0,0,0,28,590,1,0,0,0,30,598,1,0,0,0,32,603,1,0,0,
		0,34,605,1,0,0,0,36,614,1,0,0,0,38,616,1,0,0,0,40,621,1,0,0,0,42,626,1,
		0,0,0,44,634,1,0,0,0,46,640,1,0,0,0,48,646,1,0,0,0,50,652,1,0,0,0,52,661,
		1,0,0,0,54,663,1,0,0,0,56,669,1,0,0,0,58,683,1,0,0,0,60,689,1,0,0,0,62,
		695,1,0,0,0,64,704,1,0,0,0,66,709,1,0,0,0,68,713,1,0,0,0,70,725,1,0,0,
		0,72,732,1,0,0,0,74,737,1,0,0,0,76,746,1,0,0,0,78,748,1,0,0,0,80,754,1,
		0,0,0,82,761,1,0,0,0,84,765,1,0,0,0,86,767,1,0,0,0,88,778,1,0,0,0,90,790,
		1,0,0,0,92,804,1,0,0,0,94,815,1,0,0,0,96,820,1,0,0,0,98,823,1,0,0,0,100,
		828,1,0,0,0,102,834,1,0,0,0,104,837,1,0,0,0,106,844,1,0,0,0,108,846,1,
		0,0,0,110,872,1,0,0,0,112,921,1,0,0,0,114,928,1,0,0,0,116,930,1,0,0,0,
		118,932,1,0,0,0,120,937,1,0,0,0,122,942,1,0,0,0,124,947,1,0,0,0,126,974,
		1,0,0,0,128,976,1,0,0,0,130,982,1,0,0,0,132,988,1,0,0,0,134,994,1,0,0,
		0,136,1000,1,0,0,0,138,1006,1,0,0,0,140,1019,1,0,0,0,142,1021,1,0,0,0,
		144,1025,1,0,0,0,146,1036,1,0,0,0,148,1045,1,0,0,0,150,1057,1,0,0,0,152,
		1067,1,0,0,0,154,1069,1,0,0,0,156,1081,1,0,0,0,158,1083,1,0,0,0,160,1087,
		1,0,0,0,162,1091,1,0,0,0,164,1101,1,0,0,0,166,1103,1,0,0,0,168,1108,1,
		0,0,0,170,1111,1,0,0,0,172,1115,1,0,0,0,174,1118,1,0,0,0,176,1122,1,0,
		0,0,178,1129,1,0,0,0,180,1131,1,0,0,0,182,1135,1,0,0,0,184,1140,1,0,0,
		0,186,1142,1,0,0,0,188,1144,1,0,0,0,190,1148,1,0,0,0,192,1150,1,0,0,0,
		194,1154,1,0,0,0,196,1158,1,0,0,0,198,1162,1,0,0,0,200,1166,1,0,0,0,202,
		1170,1,0,0,0,204,1174,1,0,0,0,206,1178,1,0,0,0,208,1182,1,0,0,0,210,1188,
		1,0,0,0,212,1190,1,0,0,0,214,1200,1,0,0,0,216,1210,1,0,0,0,218,1218,1,
		0,0,0,220,1244,1,0,0,0,222,1293,1,0,0,0,224,1295,1,0,0,0,226,1300,1,0,
		0,0,228,1304,1,0,0,0,230,1309,1,0,0,0,232,1315,1,0,0,0,234,1319,1,0,0,
		0,236,1325,1,0,0,0,238,1327,1,0,0,0,240,1332,1,0,0,0,242,1337,1,0,0,0,
		244,1345,1,0,0,0,246,1359,1,0,0,0,248,1367,1,0,0,0,250,1375,1,0,0,0,252,
		1383,1,0,0,0,254,1409,1,0,0,0,256,1613,1,0,0,0,258,1615,1,0,0,0,260,1617,
		1,0,0,0,262,1622,1,0,0,0,264,1635,1,0,0,0,266,1645,1,0,0,0,268,1653,1,
		0,0,0,270,1663,1,0,0,0,272,1672,1,0,0,0,274,1674,1,0,0,0,276,1700,1,0,
		0,0,278,1749,1,0,0,0,280,1751,1,0,0,0,282,1785,1,0,0,0,284,1787,1,0,0,
		0,286,1792,1,0,0,0,288,1799,1,0,0,0,290,1806,1,0,0,0,292,1810,1,0,0,0,
		294,1836,1,0,0,0,296,1903,1,0,0,0,298,1907,1,0,0,0,300,1911,1,0,0,0,302,
		1915,1,0,0,0,304,1919,1,0,0,0,306,1921,1,0,0,0,308,1940,1,0,0,0,310,1950,
		1,0,0,0,312,1960,1,0,0,0,314,1965,1,0,0,0,316,1973,1,0,0,0,318,1982,1,
		0,0,0,320,1992,1,0,0,0,322,2001,1,0,0,0,324,2011,1,0,0,0,326,2020,1,0,
		0,0,328,2028,1,0,0,0,330,2037,1,0,0,0,332,2047,1,0,0,0,334,2057,1,0,0,
		0,336,2062,1,0,0,0,338,2068,1,0,0,0,340,2073,1,0,0,0,342,2079,1,0,0,0,
		344,2084,1,0,0,0,346,2086,1,0,0,0,348,2092,1,0,0,0,350,2098,1,0,0,0,352,
		2106,1,0,0,0,354,2108,1,0,0,0,356,2111,1,0,0,0,358,2114,1,0,0,0,360,2117,
		1,0,0,0,362,2120,1,0,0,0,364,2123,1,0,0,0,366,2134,1,0,0,0,368,2136,1,
		0,0,0,370,2139,1,0,0,0,372,2142,1,0,0,0,374,2145,1,0,0,0,376,2149,1,0,
		0,0,378,2152,1,0,0,0,380,2155,1,0,0,0,382,2158,1,0,0,0,384,2163,1,0,0,
		0,386,387,3,2,1,0,387,1,1,0,0,0,388,390,3,4,2,0,389,388,1,0,0,0,390,393,
		1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,3,1,0,0,0,393,391,1,0,0,0,
		394,395,3,114,57,0,395,396,5,96,0,0,396,513,1,0,0,0,397,398,3,126,63,0,
		398,399,5,96,0,0,399,513,1,0,0,0,400,401,3,156,78,0,401,402,5,96,0,0,402,
		513,1,0,0,0,403,404,3,164,82,0,404,405,5,96,0,0,405,513,1,0,0,0,406,407,
		3,232,116,0,407,408,5,96,0,0,408,513,1,0,0,0,409,410,3,234,117,0,410,411,
		5,96,0,0,411,513,1,0,0,0,412,413,3,236,118,0,413,414,5,96,0,0,414,513,
		1,0,0,0,415,416,3,6,3,0,416,417,5,96,0,0,417,513,1,0,0,0,418,419,3,8,4,
		0,419,420,5,96,0,0,420,513,1,0,0,0,421,422,3,10,5,0,422,423,5,96,0,0,423,
		513,1,0,0,0,424,425,3,12,6,0,425,426,5,96,0,0,426,513,1,0,0,0,427,428,
		3,20,10,0,428,429,5,96,0,0,429,513,1,0,0,0,430,431,3,18,9,0,431,432,5,
		96,0,0,432,513,1,0,0,0,433,434,3,42,21,0,434,435,5,96,0,0,435,513,1,0,
		0,0,436,437,3,44,22,0,437,438,5,96,0,0,438,513,1,0,0,0,439,440,3,46,23,
		0,440,441,5,96,0,0,441,513,1,0,0,0,442,443,3,48,24,0,443,444,5,96,0,0,
		444,513,1,0,0,0,445,446,3,214,107,0,446,447,5,96,0,0,447,513,1,0,0,0,448,
		449,3,216,108,0,449,450,5,96,0,0,450,513,1,0,0,0,451,452,3,56,28,0,452,
		453,5,96,0,0,453,513,1,0,0,0,454,455,3,58,29,0,455,456,5,96,0,0,456,513,
		1,0,0,0,457,458,3,62,31,0,458,459,5,96,0,0,459,513,1,0,0,0,460,461,3,60,
		30,0,461,462,5,96,0,0,462,513,1,0,0,0,463,464,3,262,131,0,464,465,5,96,
		0,0,465,513,1,0,0,0,466,467,3,266,133,0,467,468,5,96,0,0,468,513,1,0,0,
		0,469,470,3,264,132,0,470,471,5,96,0,0,471,513,1,0,0,0,472,473,3,244,122,
		0,473,474,5,96,0,0,474,513,1,0,0,0,475,476,3,246,123,0,476,477,5,96,0,
		0,477,513,1,0,0,0,478,479,3,248,124,0,479,480,5,96,0,0,480,513,1,0,0,0,
		481,482,3,250,125,0,482,483,5,96,0,0,483,513,1,0,0,0,484,485,3,68,34,0,
		485,486,5,96,0,0,486,513,1,0,0,0,487,488,3,70,35,0,488,489,5,96,0,0,489,
		513,1,0,0,0,490,491,3,72,36,0,491,492,5,96,0,0,492,513,1,0,0,0,493,494,
		3,74,37,0,494,495,5,96,0,0,495,513,1,0,0,0,496,497,3,86,43,0,497,498,5,
		96,0,0,498,513,1,0,0,0,499,500,3,88,44,0,500,501,5,96,0,0,501,513,1,0,
		0,0,502,503,3,90,45,0,503,504,5,96,0,0,504,513,1,0,0,0,505,506,3,92,46,
		0,506,507,5,96,0,0,507,513,1,0,0,0,508,509,5,1,0,0,509,513,5,96,0,0,510,
		513,3,54,27,0,511,513,3,308,154,0,512,394,1,0,0,0,512,397,1,0,0,0,512,
		400,1,0,0,0,512,403,1,0,0,0,512,406,1,0,0,0,512,409,1,0,0,0,512,412,1,
		0,0,0,512,415,1,0,0,0,512,418,1,0,0,0,512,421,1,0,0,0,512,424,1,0,0,0,
		512,427,1,0,0,0,512,430,1,0,0,0,512,433,1,0,0,0,512,436,1,0,0,0,512,439,
		1,0,0,0,512,442,1,0,0,0,512,445,1,0,0,0,512,448,1,0,0,0,512,451,1,0,0,
		0,512,454,1,0,0,0,512,457,1,0,0,0,512,460,1,0,0,0,512,463,1,0,0,0,512,
		466,1,0,0,0,512,469,1,0,0,0,512,472,1,0,0,0,512,475,1,0,0,0,512,478,1,
		0,0,0,512,481,1,0,0,0,512,484,1,0,0,0,512,487,1,0,0,0,512,490,1,0,0,0,
		512,493,1,0,0,0,512,496,1,0,0,0,512,499,1,0,0,0,512,502,1,0,0,0,512,505,
		1,0,0,0,512,508,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,5,1,0,0,0,
		514,515,5,2,0,0,515,521,5,3,0,0,516,522,3,282,141,0,517,518,5,4,0,0,518,
		519,3,14,7,0,519,520,5,5,0,0,520,522,1,0,0,0,521,516,1,0,0,0,521,517,1,
		0,0,0,522,7,1,0,0,0,523,524,5,6,0,0,524,525,5,3,0,0,525,526,3,144,72,0,
		526,527,5,7,0,0,527,528,3,186,93,0,528,9,1,0,0,0,529,530,5,8,0,0,530,531,
		5,3,0,0,531,532,3,144,72,0,532,533,5,9,0,0,533,534,3,14,7,0,534,11,1,0,
		0,0,535,536,5,10,0,0,536,537,5,3,0,0,537,538,3,144,72,0,538,13,1,0,0,0,
		539,542,3,16,8,0,540,541,5,11,0,0,541,543,3,14,7,0,542,540,1,0,0,0,542,
		543,1,0,0,0,543,15,1,0,0,0,544,545,5,99,0,0,545,546,5,12,0,0,546,547,3,
		282,141,0,547,17,1,0,0,0,548,549,5,6,0,0,549,552,5,13,0,0,550,551,5,14,
		0,0,551,553,3,188,94,0,552,550,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,
		554,555,5,7,0,0,555,556,3,190,95,0,556,19,1,0,0,0,557,558,5,15,0,0,558,
		559,3,22,11,0,559,560,5,14,0,0,560,563,3,38,19,0,561,562,5,7,0,0,562,564,
		3,190,95,0,563,561,1,0,0,0,563,564,1,0,0,0,564,21,1,0,0,0,565,575,5,16,
		0,0,566,568,5,99,0,0,567,569,3,24,12,0,568,567,1,0,0,0,568,569,1,0,0,0,
		569,575,1,0,0,0,570,572,3,26,13,0,571,573,3,24,12,0,572,571,1,0,0,0,572,
		573,1,0,0,0,573,575,1,0,0,0,574,565,1,0,0,0,574,566,1,0,0,0,574,570,1,
		0,0,0,575,578,1,0,0,0,576,577,5,11,0,0,577,579,3,22,11,0,578,576,1,0,0,
		0,578,579,1,0,0,0,579,23,1,0,0,0,580,581,5,17,0,0,581,582,5,99,0,0,582,
		25,1,0,0,0,583,584,5,99,0,0,584,586,5,4,0,0,585,587,3,28,14,0,586,585,
		1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,589,5,5,0,0,589,27,1,0,0,0,
		590,593,3,30,15,0,591,592,5,11,0,0,592,594,3,28,14,0,593,591,1,0,0,0,593,
		594,1,0,0,0,594,29,1,0,0,0,595,599,5,99,0,0,596,599,3,32,16,0,597,599,
		3,26,13,0,598,595,1,0,0,0,598,596,1,0,0,0,598,597,1,0,0,0,599,31,1,0,0,
		0,600,604,3,258,129,0,601,604,3,282,141,0,602,604,3,230,115,0,603,600,
		1,0,0,0,603,601,1,0,0,0,603,602,1,0,0,0,604,33,1,0,0,0,605,608,3,36,18,
		0,606,607,5,11,0,0,607,609,3,34,17,0,608,606,1,0,0,0,608,609,1,0,0,0,609,
		35,1,0,0,0,610,615,5,99,0,0,611,615,3,258,129,0,612,615,3,282,141,0,613,
		615,3,230,115,0,614,610,1,0,0,0,614,611,1,0,0,0,614,612,1,0,0,0,614,613,
		1,0,0,0,615,37,1,0,0,0,616,619,3,40,20,0,617,618,5,18,0,0,618,620,3,292,
		146,0,619,617,1,0,0,0,619,620,1,0,0,0,620,39,1,0,0,0,621,624,5,13,0,0,
		622,623,7,0,0,0,623,625,3,188,94,0,624,622,1,0,0,0,624,625,1,0,0,0,625,
		41,1,0,0,0,626,627,5,2,0,0,627,628,5,20,0,0,628,629,5,4,0,0,629,630,3,
		224,112,0,630,631,5,5,0,0,631,632,5,19,0,0,632,633,3,144,72,0,633,43,1,
		0,0,0,634,635,5,6,0,0,635,636,5,20,0,0,636,637,3,50,25,0,637,638,5,7,0,
		0,638,639,3,196,98,0,639,45,1,0,0,0,640,641,5,8,0,0,641,642,5,20,0,0,642,
		643,3,50,25,0,643,644,5,9,0,0,644,645,3,224,112,0,645,47,1,0,0,0,646,647,
		5,10,0,0,647,648,5,20,0,0,648,649,3,50,25,0,649,49,1,0,0,0,650,653,3,146,
		73,0,651,653,3,52,26,0,652,650,1,0,0,0,652,651,1,0,0,0,653,51,1,0,0,0,
		654,657,3,282,141,0,655,657,5,99,0,0,656,654,1,0,0,0,656,655,1,0,0,0,657,
		658,1,0,0,0,658,659,5,19,0,0,659,662,3,144,72,0,660,662,5,99,0,0,661,656,
		1,0,0,0,661,660,1,0,0,0,662,53,1,0,0,0,663,665,5,21,0,0,664,666,3,2,1,
		0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,5,22,0,0,668,
		55,1,0,0,0,669,670,5,2,0,0,670,676,5,23,0,0,671,677,3,282,141,0,672,673,
		5,4,0,0,673,674,3,64,32,0,674,675,5,5,0,0,675,677,1,0,0,0,676,671,1,0,
		0,0,676,672,1,0,0,0,677,678,1,0,0,0,678,681,7,1,0,0,679,682,3,140,70,0,
		680,682,3,142,71,0,681,679,1,0,0,0,681,680,1,0,0,0,682,57,1,0,0,0,683,
		684,5,6,0,0,684,685,5,23,0,0,685,686,3,352,176,0,686,687,5,7,0,0,687,688,
		3,304,152,0,688,59,1,0,0,0,689,690,5,10,0,0,690,693,5,23,0,0,691,694,3,
		154,77,0,692,694,3,152,76,0,693,691,1,0,0,0,693,692,1,0,0,0,694,61,1,0,
		0,0,695,696,5,8,0,0,696,699,5,23,0,0,697,700,3,154,77,0,698,700,3,152,
		76,0,699,697,1,0,0,0,699,698,1,0,0,0,700,701,1,0,0,0,701,702,5,9,0,0,702,
		703,3,64,32,0,703,63,1,0,0,0,704,707,3,66,33,0,705,706,5,11,0,0,706,708,
		3,64,32,0,707,705,1,0,0,0,707,708,1,0,0,0,708,65,1,0,0,0,709,710,5,99,
		0,0,710,711,5,12,0,0,711,712,3,282,141,0,712,67,1,0,0,0,713,714,5,2,0,
		0,714,715,5,23,0,0,715,718,5,25,0,0,716,719,3,282,141,0,717,719,3,98,49,
		0,718,716,1,0,0,0,718,717,1,0,0,0,719,720,1,0,0,0,720,723,7,1,0,0,721,
		724,3,152,76,0,722,724,3,154,77,0,723,721,1,0,0,0,723,722,1,0,0,0,724,
		69,1,0,0,0,725,726,5,6,0,0,726,727,5,23,0,0,727,728,5,25,0,0,728,729,3,
		76,38,0,729,730,5,7,0,0,730,731,3,84,42,0,731,71,1,0,0,0,732,733,5,10,
		0,0,733,734,5,23,0,0,734,735,5,25,0,0,735,736,3,80,40,0,736,73,1,0,0,0,
		737,738,5,8,0,0,738,739,5,23,0,0,739,740,5,25,0,0,740,741,3,80,40,0,741,
		742,5,9,0,0,742,743,3,98,49,0,743,75,1,0,0,0,744,747,3,78,39,0,745,747,
		3,80,40,0,746,744,1,0,0,0,746,745,1,0,0,0,747,77,1,0,0,0,748,749,5,23,
		0,0,749,750,5,25,0,0,750,751,3,82,41,0,751,752,7,0,0,0,752,753,3,152,76,
		0,753,79,1,0,0,0,754,755,3,82,41,0,755,756,7,0,0,0,756,757,3,152,76,0,
		757,81,1,0,0,0,758,762,3,230,115,0,759,762,3,282,141,0,760,762,5,99,0,
		0,761,758,1,0,0,0,761,759,1,0,0,0,761,760,1,0,0,0,762,83,1,0,0,0,763,766,
		3,352,176,0,764,766,3,182,91,0,765,763,1,0,0,0,765,764,1,0,0,0,766,85,
		1,0,0,0,767,768,5,8,0,0,768,769,5,23,0,0,769,770,5,26,0,0,770,771,5,19,
		0,0,771,772,3,152,76,0,772,773,5,9,0,0,773,776,3,98,49,0,774,775,5,18,
		0,0,775,777,3,108,54,0,776,774,1,0,0,0,776,777,1,0,0,0,777,87,1,0,0,0,
		778,779,5,10,0,0,779,780,5,23,0,0,780,781,5,26,0,0,781,784,7,0,0,0,782,
		785,3,152,76,0,783,785,3,154,77,0,784,782,1,0,0,0,784,783,1,0,0,0,785,
		788,1,0,0,0,786,787,5,18,0,0,787,789,3,108,54,0,788,786,1,0,0,0,788,789,
		1,0,0,0,789,89,1,0,0,0,790,791,5,6,0,0,791,792,5,23,0,0,792,793,5,26,0,
		0,793,794,7,0,0,0,794,795,3,102,51,0,795,796,5,7,0,0,796,799,3,106,53,
		0,797,798,5,18,0,0,798,800,3,108,54,0,799,797,1,0,0,0,799,800,1,0,0,0,
		800,802,1,0,0,0,801,803,3,94,47,0,802,801,1,0,0,0,802,803,1,0,0,0,803,
		91,1,0,0,0,804,805,5,27,0,0,805,806,5,23,0,0,806,807,5,26,0,0,807,808,
		7,0,0,0,808,809,3,102,51,0,809,810,5,7,0,0,810,813,3,102,51,0,811,812,
		5,18,0,0,812,814,3,108,54,0,813,811,1,0,0,0,813,814,1,0,0,0,814,93,1,0,
		0,0,815,818,3,96,48,0,816,817,5,11,0,0,817,819,3,94,47,0,818,816,1,0,0,
		0,818,819,1,0,0,0,819,95,1,0,0,0,820,821,5,28,0,0,821,822,7,2,0,0,822,
		97,1,0,0,0,823,826,3,100,50,0,824,825,5,11,0,0,825,827,3,98,49,0,826,824,
		1,0,0,0,826,827,1,0,0,0,827,99,1,0,0,0,828,829,5,99,0,0,829,830,5,12,0,
		0,830,831,3,282,141,0,831,101,1,0,0,0,832,835,3,352,176,0,833,835,3,182,
		91,0,834,832,1,0,0,0,834,833,1,0,0,0,835,103,1,0,0,0,836,838,7,3,0,0,837,
		836,1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,840,5,33,0,0,840,841,3,
		282,141,0,841,105,1,0,0,0,842,845,3,352,176,0,843,845,3,182,91,0,844,842,
		1,0,0,0,844,843,1,0,0,0,845,107,1,0,0,0,846,849,3,110,55,0,847,848,7,4,
		0,0,848,850,3,108,54,0,849,847,1,0,0,0,849,850,1,0,0,0,850,109,1,0,0,0,
		851,854,3,112,56,0,852,853,7,4,0,0,853,855,3,110,55,0,854,852,1,0,0,0,
		854,855,1,0,0,0,855,873,1,0,0,0,856,857,5,4,0,0,857,860,3,112,56,0,858,
		859,7,4,0,0,859,861,3,110,55,0,860,858,1,0,0,0,860,861,1,0,0,0,861,862,
		1,0,0,0,862,863,5,5,0,0,863,873,1,0,0,0,864,865,5,4,0,0,865,868,3,110,
		55,0,866,867,7,4,0,0,867,869,3,110,55,0,868,866,1,0,0,0,868,869,1,0,0,
		0,869,870,1,0,0,0,870,871,5,5,0,0,871,873,1,0,0,0,872,851,1,0,0,0,872,
		856,1,0,0,0,872,864,1,0,0,0,873,111,1,0,0,0,874,875,5,99,0,0,875,876,7,
		5,0,0,876,922,3,36,18,0,877,879,5,99,0,0,878,880,5,37,0,0,879,878,1,0,
		0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,5,19,0,0,882,883,5,4,0,0,883,
		884,3,34,17,0,884,885,5,5,0,0,885,922,1,0,0,0,886,891,5,99,0,0,887,892,
		5,38,0,0,888,889,5,39,0,0,889,890,5,37,0,0,890,892,5,40,0,0,891,887,1,
		0,0,0,891,888,1,0,0,0,892,894,1,0,0,0,893,895,5,41,0,0,894,893,1,0,0,0,
		894,895,1,0,0,0,895,896,1,0,0,0,896,922,3,36,18,0,897,899,5,99,0,0,898,
		900,5,37,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,902,5,
		42,0,0,902,922,3,282,141,0,903,908,5,99,0,0,904,909,5,43,0,0,905,906,5,
		39,0,0,906,907,5,37,0,0,907,909,5,44,0,0,908,904,1,0,0,0,908,905,1,0,0,
		0,909,910,1,0,0,0,910,911,5,45,0,0,911,922,3,282,141,0,912,917,5,99,0,
		0,913,918,5,46,0,0,914,915,5,39,0,0,915,916,5,37,0,0,916,918,5,47,0,0,
		917,913,1,0,0,0,917,914,1,0,0,0,918,919,1,0,0,0,919,920,5,45,0,0,920,922,
		3,282,141,0,921,874,1,0,0,0,921,877,1,0,0,0,921,886,1,0,0,0,921,897,1,
		0,0,0,921,903,1,0,0,0,921,912,1,0,0,0,922,113,1,0,0,0,923,929,3,116,58,
		0,924,929,3,118,59,0,925,929,3,120,60,0,926,929,3,122,61,0,927,929,3,124,
		62,0,928,923,1,0,0,0,928,924,1,0,0,0,928,925,1,0,0,0,928,926,1,0,0,0,928,
		927,1,0,0,0,929,115,1,0,0,0,930,931,5,48,0,0,931,117,1,0,0,0,932,933,5,
		48,0,0,933,934,5,45,0,0,934,935,5,49,0,0,935,936,5,50,0,0,936,119,1,0,
		0,0,937,938,5,48,0,0,938,939,5,45,0,0,939,940,5,49,0,0,940,941,5,51,0,
		0,941,121,1,0,0,0,942,943,5,48,0,0,943,944,5,45,0,0,944,945,5,49,0,0,945,
		946,5,52,0,0,946,123,1,0,0,0,947,948,5,48,0,0,948,949,5,45,0,0,949,950,
		5,49,0,0,950,951,5,50,0,0,951,952,5,34,0,0,952,953,5,51,0,0,953,125,1,
		0,0,0,954,975,3,128,64,0,955,975,3,130,65,0,956,975,3,132,66,0,957,975,
		3,134,67,0,958,975,3,136,68,0,959,975,3,138,69,0,960,961,5,53,0,0,961,
		962,5,99,0,0,962,972,5,12,0,0,963,973,5,99,0,0,964,973,3,140,70,0,965,
		973,3,146,73,0,966,973,3,282,141,0,967,973,3,258,129,0,968,973,3,148,74,
		0,969,973,3,230,115,0,970,973,3,150,75,0,971,973,3,152,76,0,972,963,1,
		0,0,0,972,964,1,0,0,0,972,965,1,0,0,0,972,966,1,0,0,0,972,967,1,0,0,0,
		972,968,1,0,0,0,972,969,1,0,0,0,972,970,1,0,0,0,972,971,1,0,0,0,973,975,
		1,0,0,0,974,954,1,0,0,0,974,955,1,0,0,0,974,956,1,0,0,0,974,957,1,0,0,
		0,974,958,1,0,0,0,974,959,1,0,0,0,974,960,1,0,0,0,975,127,1,0,0,0,976,
		977,5,3,0,0,977,980,5,99,0,0,978,979,5,12,0,0,979,981,3,140,70,0,980,978,
		1,0,0,0,980,981,1,0,0,0,981,129,1,0,0,0,982,983,5,20,0,0,983,986,5,99,
		0,0,984,985,5,12,0,0,985,987,3,146,73,0,986,984,1,0,0,0,986,987,1,0,0,
		0,987,131,1,0,0,0,988,989,5,54,0,0,989,992,5,99,0,0,990,991,5,12,0,0,991,
		993,3,282,141,0,992,990,1,0,0,0,992,993,1,0,0,0,993,133,1,0,0,0,994,995,
		5,41,0,0,995,998,5,99,0,0,996,997,5,12,0,0,997,999,3,258,129,0,998,996,
		1,0,0,0,998,999,1,0,0,0,999,135,1,0,0,0,1000,1001,5,55,0,0,1001,1004,5,
		99,0,0,1002,1003,5,12,0,0,1003,1005,3,148,74,0,1004,1002,1,0,0,0,1004,
		1005,1,0,0,0,1005,137,1,0,0,0,1006,1007,5,23,0,0,1007,1008,5,25,0,0,1008,
		1011,5,99,0,0,1009,1010,5,12,0,0,1010,1012,3,150,75,0,1011,1009,1,0,0,
		0,1011,1012,1,0,0,0,1012,139,1,0,0,0,1013,1014,5,3,0,0,1014,1016,7,6,0,
		0,1015,1017,3,210,105,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1020,
		1,0,0,0,1018,1020,5,99,0,0,1019,1013,1,0,0,0,1019,1018,1,0,0,0,1020,141,
		1,0,0,0,1021,1022,7,7,0,0,1022,143,1,0,0,0,1023,1026,3,140,70,0,1024,1026,
		3,142,71,0,1025,1023,1,0,0,0,1025,1024,1,0,0,0,1026,145,1,0,0,0,1027,1028,
		5,20,0,0,1028,1029,5,98,0,0,1029,1032,5,19,0,0,1030,1033,3,140,70,0,1031,
		1033,3,180,90,0,1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,1037,1,0,0,0,
		1034,1035,5,20,0,0,1035,1037,5,99,0,0,1036,1027,1,0,0,0,1036,1034,1,0,
		0,0,1037,147,1,0,0,0,1038,1039,7,6,0,0,1039,1042,7,0,0,0,1040,1043,3,140,
		70,0,1041,1043,3,180,90,0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,1043,1046,
		1,0,0,0,1044,1046,5,99,0,0,1045,1038,1,0,0,0,1045,1044,1,0,0,0,1046,149,
		1,0,0,0,1047,1048,5,23,0,0,1048,1052,5,25,0,0,1049,1053,3,230,115,0,1050,
		1053,3,282,141,0,1051,1053,5,99,0,0,1052,1049,1,0,0,0,1052,1050,1,0,0,
		0,1052,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1055,7,0,0,0,1055,1058,3,152,
		76,0,1056,1058,5,99,0,0,1057,1047,1,0,0,0,1057,1056,1,0,0,0,1058,151,1,
		0,0,0,1059,1060,5,23,0,0,1060,1061,7,6,0,0,1061,1064,7,0,0,0,1062,1065,
		3,140,70,0,1063,1065,3,142,71,0,1064,1062,1,0,0,0,1064,1063,1,0,0,0,1065,
		1068,1,0,0,0,1066,1068,5,99,0,0,1067,1059,1,0,0,0,1067,1066,1,0,0,0,1068,
		153,1,0,0,0,1069,1070,7,6,0,0,1070,1073,5,19,0,0,1071,1074,3,140,70,0,
		1072,1074,3,142,71,0,1073,1071,1,0,0,0,1073,1072,1,0,0,0,1074,155,1,0,
		0,0,1075,1076,5,99,0,0,1076,1077,5,12,0,0,1077,1082,5,99,0,0,1078,1082,
		3,158,79,0,1079,1082,3,162,81,0,1080,1082,3,160,80,0,1081,1075,1,0,0,0,
		1081,1078,1,0,0,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,157,1,0,0,0,
		1083,1084,5,99,0,0,1084,1085,5,12,0,0,1085,1086,3,140,70,0,1086,159,1,
		0,0,0,1087,1088,5,99,0,0,1088,1089,5,12,0,0,1089,1090,3,146,73,0,1090,
		161,1,0,0,0,1091,1092,5,99,0,0,1092,1093,5,12,0,0,1093,1094,5,98,0,0,1094,
		163,1,0,0,0,1095,1102,3,166,83,0,1096,1102,3,168,84,0,1097,1102,3,170,
		85,0,1098,1102,3,172,86,0,1099,1102,3,174,87,0,1100,1102,3,176,88,0,1101,
		1095,1,0,0,0,1101,1096,1,0,0,0,1101,1097,1,0,0,0,1101,1098,1,0,0,0,1101,
		1099,1,0,0,0,1101,1100,1,0,0,0,1102,165,1,0,0,0,1103,1104,5,56,0,0,1104,
		1105,5,13,0,0,1105,1106,5,14,0,0,1106,1107,3,178,89,0,1107,167,1,0,0,0,
		1108,1109,5,56,0,0,1109,1110,5,99,0,0,1110,169,1,0,0,0,1111,1112,5,56,
		0,0,1112,1113,5,3,0,0,1113,1114,7,8,0,0,1114,171,1,0,0,0,1115,1116,5,56,
		0,0,1116,1117,5,98,0,0,1117,173,1,0,0,0,1118,1119,5,56,0,0,1119,1120,5,
		57,0,0,1120,1121,5,58,0,0,1121,175,1,0,0,0,1122,1123,5,56,0,0,1123,1124,
		5,59,0,0,1124,1125,5,60,0,0,1125,177,1,0,0,0,1126,1130,5,61,0,0,1127,1128,
		5,59,0,0,1128,1130,5,60,0,0,1129,1126,1,0,0,0,1129,1127,1,0,0,0,1130,179,
		1,0,0,0,1131,1132,5,62,0,0,1132,1133,3,282,141,0,1133,181,1,0,0,0,1134,
		1136,7,3,0,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,
		1138,5,62,0,0,1138,1139,3,282,141,0,1139,183,1,0,0,0,1140,1141,3,180,90,
		0,1141,185,1,0,0,0,1142,1143,3,180,90,0,1143,187,1,0,0,0,1144,1145,3,180,
		90,0,1145,189,1,0,0,0,1146,1149,3,180,90,0,1147,1149,3,192,96,0,1148,1146,
		1,0,0,0,1148,1147,1,0,0,0,1149,191,1,0,0,0,1150,1151,3,282,141,0,1151,
		193,1,0,0,0,1152,1155,3,180,90,0,1153,1155,3,144,72,0,1154,1152,1,0,0,
		0,1154,1153,1,0,0,0,1155,195,1,0,0,0,1156,1159,3,180,90,0,1157,1159,3,
		144,72,0,1158,1156,1,0,0,0,1158,1157,1,0,0,0,1159,197,1,0,0,0,1160,1163,
		3,180,90,0,1161,1163,3,144,72,0,1162,1160,1,0,0,0,1162,1161,1,0,0,0,1163,
		199,1,0,0,0,1164,1167,3,180,90,0,1165,1167,3,144,72,0,1166,1164,1,0,0,
		0,1166,1165,1,0,0,0,1167,201,1,0,0,0,1168,1171,3,180,90,0,1169,1171,3,
		144,72,0,1170,1168,1,0,0,0,1170,1169,1,0,0,0,1171,203,1,0,0,0,1172,1175,
		3,180,90,0,1173,1175,3,144,72,0,1174,1172,1,0,0,0,1174,1173,1,0,0,0,1175,
		205,1,0,0,0,1176,1179,3,180,90,0,1177,1179,3,144,72,0,1178,1176,1,0,0,
		0,1178,1177,1,0,0,0,1179,207,1,0,0,0,1180,1183,3,180,90,0,1181,1183,3,
		144,72,0,1182,1180,1,0,0,0,1182,1181,1,0,0,0,1183,209,1,0,0,0,1184,1185,
		5,63,0,0,1185,1189,5,61,0,0,1186,1187,5,19,0,0,1187,1189,3,180,90,0,1188,
		1184,1,0,0,0,1188,1186,1,0,0,0,1189,211,1,0,0,0,1190,1191,5,8,0,0,1191,
		1192,5,64,0,0,1192,1193,5,19,0,0,1193,1194,3,144,72,0,1194,1195,5,9,0,
		0,1195,1198,3,224,112,0,1196,1197,5,18,0,0,1197,1199,3,218,109,0,1198,
		1196,1,0,0,0,1198,1199,1,0,0,0,1199,213,1,0,0,0,1200,1201,5,6,0,0,1201,
		1202,5,64,0,0,1202,1203,7,0,0,0,1203,1204,3,144,72,0,1204,1205,5,7,0,0,
		1205,1208,3,200,100,0,1206,1207,5,18,0,0,1207,1209,3,218,109,0,1208,1206,
		1,0,0,0,1208,1209,1,0,0,0,1209,215,1,0,0,0,1210,1211,5,10,0,0,1211,1212,
		5,64,0,0,1212,1213,7,0,0,0,1213,1216,3,144,72,0,1214,1215,5,18,0,0,1215,
		1217,3,218,109,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,217,1,0,0,0,
		1218,1221,3,220,110,0,1219,1220,7,4,0,0,1220,1222,3,218,109,0,1221,1219,
		1,0,0,0,1221,1222,1,0,0,0,1222,219,1,0,0,0,1223,1226,3,222,111,0,1224,
		1225,7,4,0,0,1225,1227,3,220,110,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,
		1227,1245,1,0,0,0,1228,1229,5,4,0,0,1229,1232,3,222,111,0,1230,1231,7,
		4,0,0,1231,1233,3,220,110,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,1234,
		1,0,0,0,1234,1235,5,5,0,0,1235,1245,1,0,0,0,1236,1237,5,4,0,0,1237,1240,
		3,220,110,0,1238,1239,7,4,0,0,1239,1241,3,220,110,0,1240,1238,1,0,0,0,
		1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1243,5,5,0,0,1243,1245,1,0,0,
		0,1244,1223,1,0,0,0,1244,1228,1,0,0,0,1244,1236,1,0,0,0,1245,221,1,0,0,
		0,1246,1247,5,99,0,0,1247,1248,7,5,0,0,1248,1294,3,36,18,0,1249,1251,5,
		99,0,0,1250,1252,5,37,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
		1,0,0,0,1253,1254,5,19,0,0,1254,1255,5,4,0,0,1255,1256,3,34,17,0,1256,
		1257,5,5,0,0,1257,1294,1,0,0,0,1258,1263,5,99,0,0,1259,1264,5,38,0,0,1260,
		1261,5,39,0,0,1261,1262,5,37,0,0,1262,1264,5,40,0,0,1263,1259,1,0,0,0,
		1263,1260,1,0,0,0,1264,1266,1,0,0,0,1265,1267,5,41,0,0,1266,1265,1,0,0,
		0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1294,3,36,18,0,1269,1271,5,
		99,0,0,1270,1272,5,37,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,
		1,0,0,0,1273,1274,5,42,0,0,1274,1294,3,36,18,0,1275,1280,5,99,0,0,1276,
		1281,5,43,0,0,1277,1278,5,39,0,0,1278,1279,5,37,0,0,1279,1281,5,44,0,0,
		1280,1276,1,0,0,0,1280,1277,1,0,0,0,1281,1282,1,0,0,0,1282,1283,5,45,0,
		0,1283,1294,3,36,18,0,1284,1289,5,99,0,0,1285,1290,5,46,0,0,1286,1287,
		5,39,0,0,1287,1288,5,37,0,0,1288,1290,5,47,0,0,1289,1285,1,0,0,0,1289,
		1286,1,0,0,0,1290,1291,1,0,0,0,1291,1292,5,45,0,0,1292,1294,3,36,18,0,
		1293,1246,1,0,0,0,1293,1249,1,0,0,0,1293,1258,1,0,0,0,1293,1269,1,0,0,
		0,1293,1275,1,0,0,0,1293,1284,1,0,0,0,1294,223,1,0,0,0,1295,1298,3,226,
		113,0,1296,1297,5,11,0,0,1297,1299,3,224,112,0,1298,1296,1,0,0,0,1298,
		1299,1,0,0,0,1299,225,1,0,0,0,1300,1301,5,99,0,0,1301,1302,5,12,0,0,1302,
		1303,3,36,18,0,1303,227,1,0,0,0,1304,1307,3,230,115,0,1305,1306,5,11,0,
		0,1306,1308,3,228,114,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,229,1,
		0,0,0,1309,1312,7,9,0,0,1310,1311,7,10,0,0,1311,1313,3,230,115,0,1312,
		1310,1,0,0,0,1312,1313,1,0,0,0,1313,231,1,0,0,0,1314,1316,5,68,0,0,1315,
		1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,7,11,0,0,1318,
		233,1,0,0,0,1319,1320,5,72,0,0,1320,1321,5,100,0,0,1321,235,1,0,0,0,1322,
		1326,3,238,119,0,1323,1326,3,240,120,0,1324,1326,3,242,121,0,1325,1322,
		1,0,0,0,1325,1323,1,0,0,0,1325,1324,1,0,0,0,1326,237,1,0,0,0,1327,1328,
		5,73,0,0,1328,1329,3,140,70,0,1329,1330,5,34,0,0,1330,1331,3,140,70,0,
		1331,239,1,0,0,0,1332,1333,5,73,0,0,1333,1334,3,146,73,0,1334,1335,5,34,
		0,0,1335,1336,3,146,73,0,1336,241,1,0,0,0,1337,1338,5,73,0,0,1338,1339,
		5,74,0,0,1339,1340,5,64,0,0,1340,1341,5,19,0,0,1341,1342,3,140,70,0,1342,
		1343,5,34,0,0,1343,1344,3,140,70,0,1344,243,1,0,0,0,1345,1346,5,6,0,0,
		1346,1349,5,75,0,0,1347,1348,5,45,0,0,1348,1350,5,76,0,0,1349,1347,1,0,
		0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1352,7,0,0,0,1352,1353,3,
		206,103,0,1353,1354,5,7,0,0,1354,1357,3,208,104,0,1355,1356,5,18,0,0,1356,
		1358,3,252,126,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,245,1,0,0,0,
		1359,1360,5,77,0,0,1360,1361,5,75,0,0,1361,1362,7,0,0,0,1362,1365,3,144,
		72,0,1363,1364,5,18,0,0,1364,1366,3,252,126,0,1365,1363,1,0,0,0,1365,1366,
		1,0,0,0,1366,247,1,0,0,0,1367,1368,5,78,0,0,1368,1369,5,75,0,0,1369,1370,
		7,0,0,0,1370,1373,3,144,72,0,1371,1372,5,18,0,0,1372,1374,3,252,126,0,
		1373,1371,1,0,0,0,1373,1374,1,0,0,0,1374,249,1,0,0,0,1375,1376,5,10,0,
		0,1376,1377,5,75,0,0,1377,1378,7,0,0,0,1378,1381,3,144,72,0,1379,1380,
		5,18,0,0,1380,1382,3,252,126,0,1381,1379,1,0,0,0,1381,1382,1,0,0,0,1382,
		251,1,0,0,0,1383,1386,3,254,127,0,1384,1385,7,4,0,0,1385,1387,3,252,126,
		0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,253,1,0,0,0,1388,1391,3,256,
		128,0,1389,1390,7,4,0,0,1390,1392,3,254,127,0,1391,1389,1,0,0,0,1391,1392,
		1,0,0,0,1392,1410,1,0,0,0,1393,1394,5,4,0,0,1394,1397,3,256,128,0,1395,
		1396,7,4,0,0,1396,1398,3,254,127,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,
		1398,1399,1,0,0,0,1399,1400,5,5,0,0,1400,1410,1,0,0,0,1401,1402,5,4,0,
		0,1402,1405,3,254,127,0,1403,1404,7,4,0,0,1404,1406,3,254,127,0,1405,1403,
		1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,5,5,0,0,1408,1410,
		1,0,0,0,1409,1388,1,0,0,0,1409,1393,1,0,0,0,1409,1401,1,0,0,0,1410,255,
		1,0,0,0,1411,1412,5,99,0,0,1412,1413,7,5,0,0,1413,1614,3,36,18,0,1414,
		1416,5,99,0,0,1415,1417,5,37,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,
		1418,1,0,0,0,1418,1419,5,19,0,0,1419,1420,5,4,0,0,1420,1421,3,34,17,0,
		1421,1422,5,5,0,0,1422,1614,1,0,0,0,1423,1428,5,99,0,0,1424,1429,5,38,
		0,0,1425,1426,5,39,0,0,1426,1427,5,37,0,0,1427,1429,5,40,0,0,1428,1424,
		1,0,0,0,1428,1425,1,0,0,0,1429,1431,1,0,0,0,1430,1432,5,41,0,0,1431,1430,
		1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1614,3,36,18,0,1434,1436,
		5,99,0,0,1435,1437,5,37,0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,
		1,0,0,0,1438,1439,5,42,0,0,1439,1614,3,36,18,0,1440,1445,5,99,0,0,1441,
		1446,5,43,0,0,1442,1443,5,39,0,0,1443,1444,5,37,0,0,1444,1446,5,44,0,0,
		1445,1441,1,0,0,0,1445,1442,1,0,0,0,1446,1447,1,0,0,0,1447,1448,5,45,0,
		0,1448,1614,3,36,18,0,1449,1454,5,99,0,0,1450,1455,5,46,0,0,1451,1452,
		5,39,0,0,1452,1453,5,37,0,0,1453,1455,5,47,0,0,1454,1450,1,0,0,0,1454,
		1451,1,0,0,0,1455,1456,1,0,0,0,1456,1457,5,45,0,0,1457,1614,3,36,18,0,
		1458,1459,5,99,0,0,1459,1461,5,79,0,0,1460,1462,5,37,0,0,1461,1460,1,0,
		0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1614,5,80,0,0,1464,1465,5,
		99,0,0,1465,1467,5,79,0,0,1466,1468,5,37,0,0,1467,1466,1,0,0,0,1467,1468,
		1,0,0,0,1468,1469,1,0,0,0,1469,1614,5,81,0,0,1470,1472,5,82,0,0,1471,1470,
		1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1479,5,83,0,0,1474,1476,
		5,74,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
		5,84,0,0,1478,1471,1,0,0,0,1478,1475,1,0,0,0,1479,1480,1,0,0,0,1480,1481,
		7,5,0,0,1481,1614,3,36,18,0,1482,1484,5,82,0,0,1483,1482,1,0,0,0,1483,
		1484,1,0,0,0,1484,1485,1,0,0,0,1485,1491,5,83,0,0,1486,1488,5,74,0,0,1487,
		1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,5,84,0,0,1490,
		1483,1,0,0,0,1490,1487,1,0,0,0,1491,1493,1,0,0,0,1492,1494,5,37,0,0,1493,
		1492,1,0,0,0,1493,1494,1,0,0,0,1494,1495,1,0,0,0,1495,1496,5,19,0,0,1496,
		1497,5,4,0,0,1497,1498,3,34,17,0,1498,1499,5,5,0,0,1499,1614,1,0,0,0,1500,
		1502,5,82,0,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,
		1508,5,83,0,0,1504,1509,5,38,0,0,1505,1506,5,39,0,0,1506,1507,5,37,0,0,
		1507,1509,5,40,0,0,1508,1504,1,0,0,0,1508,1505,1,0,0,0,1509,1511,1,0,0,
		0,1510,1512,5,41,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,
		0,0,1513,1614,3,36,18,0,1514,1516,5,82,0,0,1515,1514,1,0,0,0,1515,1516,
		1,0,0,0,1516,1517,1,0,0,0,1517,1522,5,83,0,0,1518,1523,5,43,0,0,1519,1520,
		5,39,0,0,1520,1521,5,37,0,0,1521,1523,5,44,0,0,1522,1518,1,0,0,0,1522,
		1519,1,0,0,0,1523,1524,1,0,0,0,1524,1525,5,45,0,0,1525,1614,3,36,18,0,
		1526,1528,5,82,0,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,0,0,
		0,1529,1534,5,83,0,0,1530,1535,5,46,0,0,1531,1532,5,39,0,0,1532,1533,5,
		37,0,0,1533,1535,5,47,0,0,1534,1530,1,0,0,0,1534,1531,1,0,0,0,1535,1536,
		1,0,0,0,1536,1537,5,45,0,0,1537,1614,3,36,18,0,1538,1540,5,74,0,0,1539,
		1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1546,5,84,0,0,1542,
		1547,5,40,0,0,1543,1544,5,85,0,0,1544,1545,5,37,0,0,1545,1547,5,40,0,0,
		1546,1542,1,0,0,0,1546,1543,1,0,0,0,1547,1549,1,0,0,0,1548,1550,5,41,0,
		0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1614,3,36,
		18,0,1552,1554,5,74,0,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1555,
		1,0,0,0,1555,1560,5,84,0,0,1556,1561,5,44,0,0,1557,1558,5,85,0,0,1558,
		1559,5,37,0,0,1559,1561,5,44,0,0,1560,1556,1,0,0,0,1560,1557,1,0,0,0,1561,
		1562,1,0,0,0,1562,1563,5,45,0,0,1563,1614,3,36,18,0,1564,1566,5,74,0,0,
		1565,1564,1,0,0,0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1572,5,84,0,
		0,1568,1573,5,47,0,0,1569,1570,5,85,0,0,1570,1571,5,37,0,0,1571,1573,5,
		47,0,0,1572,1568,1,0,0,0,1572,1569,1,0,0,0,1573,1574,1,0,0,0,1574,1575,
		5,45,0,0,1575,1614,3,36,18,0,1576,1578,5,82,0,0,1577,1576,1,0,0,0,1577,
		1578,1,0,0,0,1578,1579,1,0,0,0,1579,1585,5,83,0,0,1580,1582,5,74,0,0,1581,
		1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1585,5,84,0,0,1584,
		1577,1,0,0,0,1584,1581,1,0,0,0,1585,1587,1,0,0,0,1586,1588,5,37,0,0,1587,
		1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1590,5,19,0,0,1590,
		1591,5,4,0,0,1591,1592,3,34,17,0,1592,1593,5,5,0,0,1593,1614,1,0,0,0,1594,
		1596,5,82,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,
		1603,5,83,0,0,1598,1600,5,74,0,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,
		1601,1,0,0,0,1601,1603,5,84,0,0,1602,1595,1,0,0,0,1602,1599,1,0,0,0,1603,
		1605,1,0,0,0,1604,1606,5,37,0,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,
		1607,1,0,0,0,1607,1608,5,42,0,0,1608,1614,3,36,18,0,1609,1610,5,86,0,0,
		1610,1614,5,84,0,0,1611,1612,5,82,0,0,1612,1614,5,84,0,0,1613,1411,1,0,
		0,0,1613,1414,1,0,0,0,1613,1423,1,0,0,0,1613,1434,1,0,0,0,1613,1440,1,
		0,0,0,1613,1449,1,0,0,0,1613,1458,1,0,0,0,1613,1464,1,0,0,0,1613,1478,
		1,0,0,0,1613,1490,1,0,0,0,1613,1501,1,0,0,0,1613,1515,1,0,0,0,1613,1527,
		1,0,0,0,1613,1539,1,0,0,0,1613,1553,1,0,0,0,1613,1565,1,0,0,0,1613,1584,
		1,0,0,0,1613,1602,1,0,0,0,1613,1609,1,0,0,0,1613,1611,1,0,0,0,1614,257,
		1,0,0,0,1615,1616,7,12,0,0,1616,259,1,0,0,0,1617,1620,3,258,129,0,1618,
		1619,5,11,0,0,1619,1621,3,260,130,0,1620,1618,1,0,0,0,1620,1621,1,0,0,
		0,1621,261,1,0,0,0,1622,1623,5,6,0,0,1623,1624,5,87,0,0,1624,1625,7,0,
		0,0,1625,1626,3,144,72,0,1626,1627,5,7,0,0,1627,1630,3,144,72,0,1628,1629,
		5,18,0,0,1629,1631,3,274,137,0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,
		1633,1,0,0,0,1632,1634,3,270,135,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,
		1634,263,1,0,0,0,1635,1636,5,8,0,0,1636,1637,5,87,0,0,1637,1638,7,0,0,
		0,1638,1639,3,144,72,0,1639,1640,5,9,0,0,1640,1643,3,64,32,0,1641,1642,
		5,18,0,0,1642,1644,3,274,137,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,
		265,1,0,0,0,1645,1646,5,10,0,0,1646,1647,5,87,0,0,1647,1648,7,0,0,0,1648,
		1651,3,144,72,0,1649,1650,5,18,0,0,1650,1652,3,274,137,0,1651,1649,1,0,
		0,0,1651,1652,1,0,0,0,1652,267,1,0,0,0,1653,1654,5,6,0,0,1654,1655,5,87,
		0,0,1655,1656,7,0,0,0,1656,1657,3,144,72,0,1657,1658,5,7,0,0,1658,1661,
		3,144,72,0,1659,1660,5,18,0,0,1660,1662,3,274,137,0,1661,1659,1,0,0,0,
		1661,1662,1,0,0,0,1662,269,1,0,0,0,1663,1666,3,272,136,0,1664,1665,5,11,
		0,0,1665,1667,3,270,135,0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,271,
		1,0,0,0,1668,1669,5,28,0,0,1669,1673,7,2,0,0,1670,1671,5,88,0,0,1671,1673,
		5,26,0,0,1672,1668,1,0,0,0,1672,1670,1,0,0,0,1673,273,1,0,0,0,1674,1677,
		3,276,138,0,1675,1676,7,4,0,0,1676,1678,3,274,137,0,1677,1675,1,0,0,0,
		1677,1678,1,0,0,0,1678,275,1,0,0,0,1679,1682,3,278,139,0,1680,1681,7,4,
		0,0,1681,1683,3,276,138,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,1701,
		1,0,0,0,1684,1685,5,4,0,0,1685,1688,3,278,139,0,1686,1687,7,4,0,0,1687,
		1689,3,276,138,0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,
		1690,1691,5,5,0,0,1691,1701,1,0,0,0,1692,1693,5,4,0,0,1693,1696,3,276,
		138,0,1694,1695,7,4,0,0,1695,1697,3,276,138,0,1696,1694,1,0,0,0,1696,1697,
		1,0,0,0,1697,1698,1,0,0,0,1698,1699,5,5,0,0,1699,1701,1,0,0,0,1700,1679,
		1,0,0,0,1700,1684,1,0,0,0,1700,1692,1,0,0,0,1701,277,1,0,0,0,1702,1703,
		5,99,0,0,1703,1704,7,5,0,0,1704,1750,3,36,18,0,1705,1707,5,99,0,0,1706,
		1708,5,37,0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,
		1710,5,19,0,0,1710,1711,5,4,0,0,1711,1712,3,34,17,0,1712,1713,5,5,0,0,
		1713,1750,1,0,0,0,1714,1719,5,99,0,0,1715,1720,5,38,0,0,1716,1717,5,39,
		0,0,1717,1718,5,37,0,0,1718,1720,5,40,0,0,1719,1715,1,0,0,0,1719,1716,
		1,0,0,0,1720,1722,1,0,0,0,1721,1723,5,41,0,0,1722,1721,1,0,0,0,1722,1723,
		1,0,0,0,1723,1724,1,0,0,0,1724,1750,3,258,129,0,1725,1727,5,99,0,0,1726,
		1728,5,37,0,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,
		1730,5,42,0,0,1730,1750,3,282,141,0,1731,1736,5,99,0,0,1732,1737,5,43,
		0,0,1733,1734,5,39,0,0,1734,1735,5,37,0,0,1735,1737,5,44,0,0,1736,1732,
		1,0,0,0,1736,1733,1,0,0,0,1737,1738,1,0,0,0,1738,1739,5,45,0,0,1739,1750,
		3,282,141,0,1740,1745,5,99,0,0,1741,1746,5,46,0,0,1742,1743,5,39,0,0,1743,
		1744,5,37,0,0,1744,1746,5,47,0,0,1745,1741,1,0,0,0,1745,1742,1,0,0,0,1746,
		1747,1,0,0,0,1747,1748,5,45,0,0,1748,1750,3,282,141,0,1749,1702,1,0,0,
		0,1749,1705,1,0,0,0,1749,1714,1,0,0,0,1749,1725,1,0,0,0,1749,1731,1,0,
		0,0,1749,1740,1,0,0,0,1750,279,1,0,0,0,1751,1754,3,282,141,0,1752,1753,
		5,11,0,0,1753,1755,3,280,140,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,
		281,1,0,0,0,1756,1761,5,98,0,0,1757,1761,5,99,0,0,1758,1761,3,284,142,
		0,1759,1761,3,286,143,0,1760,1756,1,0,0,0,1760,1757,1,0,0,0,1760,1758,
		1,0,0,0,1760,1759,1,0,0,0,1761,1764,1,0,0,0,1762,1763,5,65,0,0,1763,1765,
		3,282,141,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1786,1,0,0,0,1766,
		1770,5,4,0,0,1767,1771,5,98,0,0,1768,1771,5,99,0,0,1769,1771,3,284,142,
		0,1770,1767,1,0,0,0,1770,1768,1,0,0,0,1770,1769,1,0,0,0,1771,1774,1,0,
		0,0,1772,1773,5,65,0,0,1773,1775,3,282,141,0,1774,1772,1,0,0,0,1774,1775,
		1,0,0,0,1775,1776,1,0,0,0,1776,1786,5,5,0,0,1777,1778,5,4,0,0,1778,1781,
		3,282,141,0,1779,1780,5,65,0,0,1780,1782,3,282,141,0,1781,1779,1,0,0,0,
		1781,1782,1,0,0,0,1782,1783,1,0,0,0,1783,1784,5,5,0,0,1784,1786,1,0,0,
		0,1785,1760,1,0,0,0,1785,1766,1,0,0,0,1785,1777,1,0,0,0,1786,283,1,0,0,
		0,1787,1788,5,99,0,0,1788,1789,5,89,0,0,1789,1790,3,282,141,0,1790,1791,
		5,90,0,0,1791,285,1,0,0,0,1792,1793,5,99,0,0,1793,1795,5,4,0,0,1794,1796,
		3,288,144,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,
		1798,5,5,0,0,1798,287,1,0,0,0,1799,1802,3,290,145,0,1800,1801,5,11,0,0,
		1801,1803,3,288,144,0,1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,289,1,0,
		0,0,1804,1805,5,99,0,0,1805,1807,5,12,0,0,1806,1804,1,0,0,0,1806,1807,
		1,0,0,0,1807,1808,1,0,0,0,1808,1809,3,282,141,0,1809,291,1,0,0,0,1810,
		1813,3,294,147,0,1811,1812,7,4,0,0,1812,1814,3,292,146,0,1813,1811,1,0,
		0,0,1813,1814,1,0,0,0,1814,293,1,0,0,0,1815,1818,3,296,148,0,1816,1817,
		7,4,0,0,1817,1819,3,294,147,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,
		1837,1,0,0,0,1820,1821,5,4,0,0,1821,1824,3,296,148,0,1822,1823,7,4,0,0,
		1823,1825,3,294,147,0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,
		0,0,0,1826,1827,5,5,0,0,1827,1837,1,0,0,0,1828,1829,5,4,0,0,1829,1832,
		3,294,147,0,1830,1831,7,4,0,0,1831,1833,3,294,147,0,1832,1830,1,0,0,0,
		1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,1835,5,5,0,0,1835,1837,1,0,0,
		0,1836,1815,1,0,0,0,1836,1820,1,0,0,0,1836,1828,1,0,0,0,1837,295,1,0,0,
		0,1838,1839,5,99,0,0,1839,1840,7,5,0,0,1840,1904,3,36,18,0,1841,1843,5,
		99,0,0,1842,1844,5,37,0,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,1844,1845,
		1,0,0,0,1845,1846,5,19,0,0,1846,1847,5,4,0,0,1847,1848,3,34,17,0,1848,
		1849,5,5,0,0,1849,1904,1,0,0,0,1850,1855,5,99,0,0,1851,1856,5,38,0,0,1852,
		1853,5,39,0,0,1853,1854,5,37,0,0,1854,1856,5,40,0,0,1855,1851,1,0,0,0,
		1855,1852,1,0,0,0,1856,1858,1,0,0,0,1857,1859,5,41,0,0,1858,1857,1,0,0,
		0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1904,3,36,18,0,1861,1863,5,
		99,0,0,1862,1864,5,37,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,
		1,0,0,0,1865,1866,5,42,0,0,1866,1904,3,36,18,0,1867,1872,5,99,0,0,1868,
		1873,5,43,0,0,1869,1870,5,39,0,0,1870,1871,5,37,0,0,1871,1873,5,44,0,0,
		1872,1868,1,0,0,0,1872,1869,1,0,0,0,1873,1874,1,0,0,0,1874,1875,5,45,0,
		0,1875,1904,3,36,18,0,1876,1881,5,99,0,0,1877,1882,5,46,0,0,1878,1879,
		5,39,0,0,1879,1880,5,37,0,0,1880,1882,5,47,0,0,1881,1877,1,0,0,0,1881,
		1878,1,0,0,0,1882,1883,1,0,0,0,1883,1884,5,45,0,0,1884,1904,3,36,18,0,
		1885,1886,5,99,0,0,1886,1888,5,79,0,0,1887,1889,5,37,0,0,1888,1887,1,0,
		0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1904,5,80,0,0,1891,1892,5,
		99,0,0,1892,1894,5,79,0,0,1893,1895,5,37,0,0,1894,1893,1,0,0,0,1894,1895,
		1,0,0,0,1895,1896,1,0,0,0,1896,1904,5,81,0,0,1897,1898,5,99,0,0,1898,1900,
		5,79,0,0,1899,1901,5,37,0,0,1900,1899,1,0,0,0,1900,1901,1,0,0,0,1901,1902,
		1,0,0,0,1902,1904,5,91,0,0,1903,1838,1,0,0,0,1903,1841,1,0,0,0,1903,1850,
		1,0,0,0,1903,1861,1,0,0,0,1903,1867,1,0,0,0,1903,1876,1,0,0,0,1903,1885,
		1,0,0,0,1903,1891,1,0,0,0,1903,1897,1,0,0,0,1904,297,1,0,0,0,1905,1908,
		3,180,90,0,1906,1908,3,144,72,0,1907,1905,1,0,0,0,1907,1906,1,0,0,0,1908,
		299,1,0,0,0,1909,1912,3,180,90,0,1910,1912,3,144,72,0,1911,1909,1,0,0,
		0,1911,1910,1,0,0,0,1912,301,1,0,0,0,1913,1916,3,180,90,0,1914,1916,3,
		144,72,0,1915,1913,1,0,0,0,1915,1914,1,0,0,0,1916,303,1,0,0,0,1917,1920,
		3,180,90,0,1918,1920,3,144,72,0,1919,1917,1,0,0,0,1919,1918,1,0,0,0,1920,
		305,1,0,0,0,1921,1922,5,92,0,0,1922,1923,7,8,0,0,1923,307,1,0,0,0,1924,
		1925,5,93,0,0,1925,1926,5,4,0,0,1926,1927,3,366,183,0,1927,1928,5,19,0,
		0,1928,1929,3,310,155,0,1929,1930,5,5,0,0,1930,1931,3,54,27,0,1931,1941,
		1,0,0,0,1932,1933,5,93,0,0,1933,1934,5,4,0,0,1934,1935,3,364,182,0,1935,
		1936,5,19,0,0,1936,1937,3,312,156,0,1937,1938,5,5,0,0,1938,1939,3,54,27,
		0,1939,1941,1,0,0,0,1940,1924,1,0,0,0,1940,1932,1,0,0,0,1941,309,1,0,0,
		0,1942,1951,3,314,157,0,1943,1951,3,318,159,0,1944,1951,3,322,161,0,1945,
		1951,3,326,163,0,1946,1951,3,330,165,0,1947,1951,3,334,167,0,1948,1951,
		3,338,169,0,1949,1951,3,342,171,0,1950,1942,1,0,0,0,1950,1943,1,0,0,0,
		1950,1944,1,0,0,0,1950,1945,1,0,0,0,1950,1946,1,0,0,0,1950,1947,1,0,0,
		0,1950,1948,1,0,0,0,1950,1949,1,0,0,0,1951,311,1,0,0,0,1952,1961,3,316,
		158,0,1953,1961,3,320,160,0,1954,1961,3,324,162,0,1955,1961,3,328,164,
		0,1956,1961,3,332,166,0,1957,1961,3,336,168,0,1958,1961,3,340,170,0,1959,
		1961,3,344,172,0,1960,1952,1,0,0,0,1960,1953,1,0,0,0,1960,1954,1,0,0,0,
		1960,1955,1,0,0,0,1960,1956,1,0,0,0,1960,1957,1,0,0,0,1960,1958,1,0,0,
		0,1960,1959,1,0,0,0,1961,313,1,0,0,0,1962,1966,3,180,90,0,1963,1966,3,
		354,177,0,1964,1966,5,13,0,0,1965,1962,1,0,0,0,1965,1963,1,0,0,0,1965,
		1964,1,0,0,0,1966,1969,1,0,0,0,1967,1968,5,18,0,0,1968,1970,3,292,146,
		0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,315,1,0,0,0,1971,1974,3,354,
		177,0,1972,1974,5,13,0,0,1973,1971,1,0,0,0,1973,1972,1,0,0,0,1974,1977,
		1,0,0,0,1975,1976,5,18,0,0,1976,1978,3,292,146,0,1977,1975,1,0,0,0,1977,
		1978,1,0,0,0,1978,317,1,0,0,0,1979,1983,3,180,90,0,1980,1983,3,356,178,
		0,1981,1983,3,144,72,0,1982,1979,1,0,0,0,1982,1980,1,0,0,0,1982,1981,1,
		0,0,0,1983,1986,1,0,0,0,1984,1985,5,18,0,0,1985,1987,3,218,109,0,1986,
		1984,1,0,0,0,1986,1987,1,0,0,0,1987,319,1,0,0,0,1988,1993,3,356,178,0,
		1989,1990,5,64,0,0,1990,1991,5,19,0,0,1991,1993,3,140,70,0,1992,1988,1,
		0,0,0,1992,1989,1,0,0,0,1993,1996,1,0,0,0,1994,1995,5,18,0,0,1995,1997,
		3,218,109,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,321,1,0,0,0,1998,
		2002,3,180,90,0,1999,2002,3,358,179,0,2000,2002,3,144,72,0,2001,1998,1,
		0,0,0,2001,1999,1,0,0,0,2001,2000,1,0,0,0,2002,2005,1,0,0,0,2003,2004,
		5,18,0,0,2004,2006,3,274,137,0,2005,2003,1,0,0,0,2005,2006,1,0,0,0,2006,
		323,1,0,0,0,2007,2012,3,358,179,0,2008,2009,5,87,0,0,2009,2010,5,19,0,
		0,2010,2012,3,140,70,0,2011,2007,1,0,0,0,2011,2008,1,0,0,0,2012,2015,1,
		0,0,0,2013,2014,5,18,0,0,2014,2016,3,274,137,0,2015,2013,1,0,0,0,2015,
		2016,1,0,0,0,2016,325,1,0,0,0,2017,2021,3,180,90,0,2018,2021,3,360,180,
		0,2019,2021,3,352,176,0,2020,2017,1,0,0,0,2020,2018,1,0,0,0,2020,2019,
		1,0,0,0,2021,2024,1,0,0,0,2022,2023,5,18,0,0,2023,2025,3,108,54,0,2024,
		2022,1,0,0,0,2024,2025,1,0,0,0,2025,327,1,0,0,0,2026,2029,3,360,180,0,
		2027,2029,3,352,176,0,2028,2026,1,0,0,0,2028,2027,1,0,0,0,2029,2032,1,
		0,0,0,2030,2031,5,18,0,0,2031,2033,3,108,54,0,2032,2030,1,0,0,0,2032,2033,
		1,0,0,0,2033,329,1,0,0,0,2034,2038,3,180,90,0,2035,2038,3,362,181,0,2036,
		2038,3,140,70,0,2037,2034,1,0,0,0,2037,2035,1,0,0,0,2037,2036,1,0,0,0,
		2038,2041,1,0,0,0,2039,2040,5,18,0,0,2040,2042,3,252,126,0,2041,2039,1,
		0,0,0,2041,2042,1,0,0,0,2042,331,1,0,0,0,2043,2048,3,362,181,0,2044,2045,
		5,75,0,0,2045,2046,5,19,0,0,2046,2048,3,140,70,0,2047,2043,1,0,0,0,2047,
		2044,1,0,0,0,2048,2051,1,0,0,0,2049,2050,5,18,0,0,2050,2052,3,252,126,
		0,2051,2049,1,0,0,0,2051,2052,1,0,0,0,2052,333,1,0,0,0,2053,2058,3,180,
		90,0,2054,2055,5,54,0,0,2055,2058,3,180,90,0,2056,2058,3,346,173,0,2057,
		2053,1,0,0,0,2057,2054,1,0,0,0,2057,2056,1,0,0,0,2058,335,1,0,0,0,2059,
		2060,5,54,0,0,2060,2063,3,180,90,0,2061,2063,3,346,173,0,2062,2059,1,0,
		0,0,2062,2061,1,0,0,0,2063,337,1,0,0,0,2064,2069,3,180,90,0,2065,2066,
		5,41,0,0,2066,2069,3,180,90,0,2067,2069,3,348,174,0,2068,2064,1,0,0,0,
		2068,2065,1,0,0,0,2068,2067,1,0,0,0,2069,339,1,0,0,0,2070,2071,5,41,0,
		0,2071,2074,3,180,90,0,2072,2074,3,348,174,0,2073,2070,1,0,0,0,2073,2072,
		1,0,0,0,2074,341,1,0,0,0,2075,2080,3,180,90,0,2076,2077,5,94,0,0,2077,
		2080,3,180,90,0,2078,2080,3,350,175,0,2079,2075,1,0,0,0,2079,2076,1,0,
		0,0,2079,2078,1,0,0,0,2080,343,1,0,0,0,2081,2082,5,94,0,0,2082,2085,3,
		180,90,0,2083,2085,3,350,175,0,2084,2081,1,0,0,0,2084,2083,1,0,0,0,2085,
		345,1,0,0,0,2086,2088,5,89,0,0,2087,2089,3,280,140,0,2088,2087,1,0,0,0,
		2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,2091,5,90,0,0,2091,347,1,0,0,
		0,2092,2094,5,89,0,0,2093,2095,3,260,130,0,2094,2093,1,0,0,0,2094,2095,
		1,0,0,0,2095,2096,1,0,0,0,2096,2097,5,90,0,0,2097,349,1,0,0,0,2098,2100,
		5,89,0,0,2099,2101,3,228,114,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,
		2102,1,0,0,0,2102,2103,5,90,0,0,2103,351,1,0,0,0,2104,2107,3,152,76,0,
		2105,2107,3,154,77,0,2106,2104,1,0,0,0,2106,2105,1,0,0,0,2107,353,1,0,
		0,0,2108,2109,5,3,0,0,2109,2110,3,180,90,0,2110,355,1,0,0,0,2111,2112,
		5,20,0,0,2112,2113,3,180,90,0,2113,357,1,0,0,0,2114,2115,5,23,0,0,2115,
		2116,3,180,90,0,2116,359,1,0,0,0,2117,2118,5,95,0,0,2118,2119,3,180,90,
		0,2119,361,1,0,0,0,2120,2121,5,55,0,0,2121,2122,3,180,90,0,2122,363,1,
		0,0,0,2123,2124,5,53,0,0,2124,2125,5,99,0,0,2125,365,1,0,0,0,2126,2135,
		3,368,184,0,2127,2135,3,370,185,0,2128,2135,3,372,186,0,2129,2135,3,374,
		187,0,2130,2135,3,376,188,0,2131,2135,3,378,189,0,2132,2135,3,380,190,
		0,2133,2135,3,382,191,0,2134,2126,1,0,0,0,2134,2127,1,0,0,0,2134,2128,
		1,0,0,0,2134,2129,1,0,0,0,2134,2130,1,0,0,0,2134,2131,1,0,0,0,2134,2132,
		1,0,0,0,2134,2133,1,0,0,0,2135,367,1,0,0,0,2136,2137,5,3,0,0,2137,2138,
		5,99,0,0,2138,369,1,0,0,0,2139,2140,5,20,0,0,2140,2141,5,99,0,0,2141,371,
		1,0,0,0,2142,2143,5,23,0,0,2143,2144,5,99,0,0,2144,373,1,0,0,0,2145,2146,
		5,23,0,0,2146,2147,5,25,0,0,2147,2148,5,99,0,0,2148,375,1,0,0,0,2149,2150,
		5,55,0,0,2150,2151,5,99,0,0,2151,377,1,0,0,0,2152,2153,5,54,0,0,2153,2154,
		5,99,0,0,2154,379,1,0,0,0,2155,2156,5,41,0,0,2156,2157,5,99,0,0,2157,381,
		1,0,0,0,2158,2159,5,94,0,0,2159,2160,5,99,0,0,2160,383,1,0,0,0,2161,2164,
		3,180,90,0,2162,2164,3,152,76,0,2163,2161,1,0,0,0,2163,2162,1,0,0,0,2164,
		385,1,0,0,0,242,391,512,521,542,552,563,568,572,574,578,586,593,598,603,
		608,614,619,624,652,656,661,665,676,681,693,699,707,718,723,746,761,765,
		776,784,788,799,802,813,818,826,834,837,844,849,854,860,868,872,879,891,
		894,899,908,917,921,928,972,974,980,986,992,998,1004,1011,1016,1019,1025,
		1032,1036,1042,1045,1052,1057,1064,1067,1073,1081,1101,1129,1135,1148,
		1154,1158,1162,1166,1170,1174,1178,1182,1188,1198,1208,1216,1221,1226,
		1232,1240,1244,1251,1263,1266,1271,1280,1289,1293,1298,1307,1312,1315,
		1325,1349,1357,1365,1373,1381,1386,1391,1397,1405,1409,1416,1428,1431,
		1436,1445,1454,1461,1467,1471,1475,1478,1483,1487,1490,1493,1501,1508,
		1511,1515,1522,1527,1534,1539,1546,1549,1553,1560,1565,1572,1577,1581,
		1584,1587,1595,1599,1602,1605,1613,1620,1630,1633,1643,1651,1661,1666,
		1672,1677,1682,1688,1696,1700,1707,1719,1722,1727,1736,1745,1749,1754,
		1760,1764,1770,1774,1781,1785,1795,1802,1806,1813,1818,1824,1832,1836,
		1843,1855,1858,1863,1872,1881,1888,1894,1900,1903,1907,1911,1915,1919,
		1940,1950,1960,1965,1969,1973,1977,1982,1986,1992,1996,2001,2005,2011,
		2015,2020,2024,2028,2032,2037,2041,2047,2051,2057,2062,2068,2073,2079,
		2084,2088,2094,2100,2106,2134,2163
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
