//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, STATEMENTEND=101, 
		WS=102, STRINGLITERAL=103, VARID=104, INTLITERAL=105, REGEXLITERAL=106, 
		LINE_COMMENT=107, BLOCK_COMMENT=108;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createDatasourceStatement = 3, 
		RULE_deleteDatasourceStatement = 4, RULE_updateDatasourceStatement = 5, 
		RULE_datasourceUpdateList = 6, RULE_datasourceUpdate = 7, RULE_createDatasourceEntryStatement = 8, 
		RULE_updateDatasourceEntriesStatement = 9, RULE_deleteDatasourceEntriesStatement = 10, 
		RULE_copyDatasourceEntriesStatement = 11, RULE_syncDatasourceEntriesStatement = 12, 
		RULE_datasourceEntryCopyOptionList = 13, RULE_datasourceEntryCopyOption = 14, 
		RULE_datasourceEntryUpdateList = 15, RULE_datasourceEntryUpdate = 16, 
		RULE_datasourceEntriesSourceLocation = 17, RULE_urlSpec = 18, RULE_datasourceEntriesTargetLocation = 19, 
		RULE_datasourceEntryConstraintExprList = 20, RULE_datasourceEntryConstraintExpr = 21, 
		RULE_datasourceEntryConstraint = 22, RULE_loginStatement = 23, RULE_loginOnlyStatement = 24, 
		RULE_loginWithGlobalUserNameStatement = 25, RULE_loginWithGlobalPasswordStatement = 26, 
		RULE_loginWithGlobalTokenStatement = 27, RULE_loginWithGlobalUserNameAndPasswordStatement = 28, 
		RULE_varStatement = 29, RULE_spaceVarStatement = 30, RULE_blockVarStatement = 31, 
		RULE_stringVarStatement = 32, RULE_regexVarStatement = 33, RULE_storyVarStatement = 34, 
		RULE_datasourceEntryVarStatement = 35, RULE_spaceSpec = 36, RULE_shortSpaceSpec = 37, 
		RULE_blockSpec = 38, RULE_storySpec = 39, RULE_datasourceEntrySpec = 40, 
		RULE_datasourceSpec = 41, RULE_datasourceShortSpec = 42, RULE_assignmentStatement = 43, 
		RULE_spaceAssignmentStatement = 44, RULE_blockAssignmentStatement = 45, 
		RULE_stringAssignmentStatement = 46, RULE_copySpacesStatement = 47, RULE_printStatement = 48, 
		RULE_printSpacesStatement = 49, RULE_printVarStatement = 50, RULE_printSpaceStatement = 51, 
		RULE_printStringLiteralStatement = 52, RULE_printSymbolTableStatement = 53, 
		RULE_printLocalCacheStatement = 54, RULE_realDataLocation = 55, RULE_spacesOutputLocation = 56, 
		RULE_fileSpec = 57, RULE_blockOutputLocation = 58, RULE_blocksOutputLocation = 59, 
		RULE_storyOutputLocation = 60, RULE_filesSpec = 61, RULE_spaceOutputLocation = 62, 
		RULE_varGetFrom = 63, RULE_createBlockStatement = 64, RULE_updateBlocksStatement = 65, 
		RULE_copyBlocksStatement = 66, RULE_deleteBlocksStatement = 67, RULE_blockConstraintExprList = 68, 
		RULE_blockConstraintExpr = 69, RULE_blockConstraint = 70, RULE_blockUpdateList = 71, 
		RULE_blockUpdate = 72, RULE_intExprList = 73, RULE_intExpr = 74, RULE_verbosityStatement = 75, 
		RULE_waitStatement = 76, RULE_compareStatement = 77, RULE_compareSpacesStatement = 78, 
		RULE_compareBlocksStatement = 79, RULE_compareAllBlocksStatement = 80, 
		RULE_storiesInputLocation = 81, RULE_storiesOutputLocation = 82, RULE_copyStoriesStatement = 83, 
		RULE_publishStoriesStatement = 84, RULE_unpublishStoriesStatement = 85, 
		RULE_deleteStoriesStatement = 86, RULE_storyConstraintExprList = 87, RULE_storyConstraintExpr = 88, 
		RULE_storyConstraint = 89, RULE_regexExpr = 90, RULE_regexExprList = 91, 
		RULE_copyDatasourcesStatement = 92, RULE_updateDatasourcesStatement = 93, 
		RULE_deleteDatasourcesStatement = 94, RULE_syncDatasourcesStatement = 95, 
		RULE_datasourceConstraintExprList = 96, RULE_datasourceConstraintExpr = 97, 
		RULE_datasourceConstraint = 98, RULE_stringExprList = 99, RULE_stringExpr = 100, 
		RULE_forEachStatement = 101;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createDatasourceStatement", "deleteDatasourceStatement", 
		"updateDatasourceStatement", "datasourceUpdateList", "datasourceUpdate", 
		"createDatasourceEntryStatement", "updateDatasourceEntriesStatement", 
		"deleteDatasourceEntriesStatement", "copyDatasourceEntriesStatement", 
		"syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", "datasourceEntryCopyOption", 
		"datasourceEntryUpdateList", "datasourceEntryUpdate", "datasourceEntriesSourceLocation", 
		"urlSpec", "datasourceEntriesTargetLocation", "datasourceEntryConstraintExprList", 
		"datasourceEntryConstraintExpr", "datasourceEntryConstraint", "loginStatement", 
		"loginOnlyStatement", "loginWithGlobalUserNameStatement", "loginWithGlobalPasswordStatement", 
		"loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "blockSpec", "storySpec", "datasourceEntrySpec", 
		"datasourceSpec", "datasourceShortSpec", "assignmentStatement", "spaceAssignmentStatement", 
		"blockAssignmentStatement", "stringAssignmentStatement", "copySpacesStatement", 
		"printStatement", "printSpacesStatement", "printVarStatement", "printSpaceStatement", 
		"printStringLiteralStatement", "printSymbolTableStatement", "printLocalCacheStatement", 
		"realDataLocation", "spacesOutputLocation", "fileSpec", "blockOutputLocation", 
		"blocksOutputLocation", "storyOutputLocation", "filesSpec", "spaceOutputLocation", 
		"varGetFrom", "createBlockStatement", "updateBlocksStatement", "copyBlocksStatement", 
		"deleteBlocksStatement", "blockConstraintExprList", "blockConstraintExpr", 
		"blockConstraint", "blockUpdateList", "blockUpdate", "intExprList", "intExpr", 
		"verbosityStatement", "waitStatement", "compareStatement", "compareSpacesStatement", 
		"compareBlocksStatement", "compareAllBlocksStatement", "storiesInputLocation", 
		"storiesOutputLocation", "copyStoriesStatement", "publishStoriesStatement", 
		"unpublishStoriesStatement", "deleteStoriesStatement", "storyConstraintExprList", 
		"storyConstraintExpr", "storyConstraint", "regexExpr", "regexExprList", 
		"copyDatasourcesStatement", "updateDatasourcesStatement", "deleteDatasourcesStatement", 
		"syncDatasourcesStatement", "datasourceConstraintExprList", "datasourceConstraintExpr", 
		"datasourceConstraint", "stringExprList", "stringExpr", "forEachStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'datasource'", "'('", "')'", "'for'", "'in'", "'delete'", 
		"'update'", "'set'", "','", "'name'", "'='", "'slug'", "'entry'", "'entries'", 
		"'where'", "'copy'", "'from'", "'to'", "'sync'", "'skip'", "'updates'", 
		"'creates'", "'value'", "'local cache'", "'csv'", "'json'", "'url'", "'console'", 
		"'and'", "'or'", "'id'", "'!='", "'not'", "'matches'", "'does'", "'match'", 
		"'regex'", "'like'", "'starts'", "'start'", "'with'", "'ends'", "'end'", 
		"'login'", "'global'", "'username'", "'password'", "'token'", "'var'", 
		"'space'", "'block'", "'string'", "'story'", "'spaces'", "'print'", "'symbol'", 
		"'tables'", "'local'", "'cache'", "'server'", "'file'", "'files'", "'on'", 
		"'blocks'", "'technical'", "'display'", "'type'", "'nestable'", "'content'", 
		"'universal'", "'add'", "'tag'", "'remove'", "'preview'", "'field'", "'template'", 
		"'screenshot'", "'+'", "'-'", "'*'", "'%'", "'be'", "'quiet'", "'verbose'", 
		"'debugger'", "'wait'", "'compare'", "'all'", "'stories'", "'publish'", 
		"'unpublish'", "'any'", "'tags'", "'do'", "'no'", "'datasources'", "'foreach'", 
		"'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "STATEMENTEND", "WS", "STRINGLITERAL", "VARID", 
		"INTLITERAL", "REGEXLITERAL", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENTEND() { return GetTokens(BlokScriptGrammarParser.STATEMENTEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND(int i) {
			return GetToken(BlokScriptGrammarParser.STATEMENTEND, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 206;
				statement();
				State = 207;
				Match(STATEMENTEND);
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 106995950401225094L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 2097983L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				loginStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				varStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215;
				assignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 216;
				printStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 217;
				verbosityStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 218;
				waitStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 219;
				compareStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 220;
				createDatasourceEntryStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 221;
				updateDatasourceEntriesStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 222;
				deleteDatasourceEntriesStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 223;
				copyDatasourceEntriesStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 224;
				syncDatasourceEntriesStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 225;
				copyBlocksStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 226;
				copySpacesStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 227;
				copyBlocksStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 228;
				copyStoriesStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 229;
				publishStoriesStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 230;
				unpublishStoriesStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 231;
				deleteStoriesStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 232;
				copyDatasourcesStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 233;
				deleteBlocksStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 234;
				deleteDatasourcesStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 235;
				createDatasourceStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 236;
				updateDatasourceStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 237;
				deleteDatasourceStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__0);
			State = 241;
			Match(T__1);
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 242;
				stringExpr();
				}
				break;
			case T__2:
				{
				State = 243;
				Match(T__2);
				State = 244;
				datasourceUpdateList();
				State = 245;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 249;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 250;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__6);
			State = 253;
			Match(T__1);
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 254;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 255;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__7);
			State = 259;
			Match(T__1);
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 260;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 261;
				datasourceSpec();
				}
				break;
			}
			State = 264;
			Match(T__8);
			State = 265;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 12, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			datasourceUpdate();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 268;
				Match(T__9);
				State = 269;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 14, RULE_datasourceUpdate);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(T__10);
				State = 273;
				Match(T__11);
				State = 274;
				stringExpr();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				Match(T__12);
				State = 276;
				Match(T__11);
				State = 277;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(T__0);
			State = 281;
			Match(T__1);
			State = 282;
			Match(T__13);
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 283;
				stringExpr();
				}
				break;
			case T__10:
			case T__23:
				{
				State = 284;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 287;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 288;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(T__7);
			State = 291;
			Match(T__1);
			State = 292;
			Match(T__14);
			State = 293;
			Match(T__5);
			State = 294;
			datasourceSpec();
			State = 295;
			Match(T__8);
			State = 296;
			datasourceEntryUpdateList();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 297;
				Match(T__15);
				State = 298;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__6);
			State = 302;
			Match(T__1);
			State = 303;
			Match(T__14);
			State = 304;
			Match(T__5);
			State = 305;
			datasourceSpec();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 306;
				Match(T__15);
				State = 307;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(T__16);
			State = 311;
			Match(T__1);
			State = 312;
			Match(T__14);
			State = 313;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 314;
			datasourceEntriesSourceLocation();
			State = 315;
			Match(T__18);
			State = 316;
			datasourceEntriesTargetLocation();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 317;
				Match(T__15);
				State = 318;
				datasourceEntryConstraintExprList();
				}
			}

			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 321;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(T__19);
			State = 325;
			Match(T__1);
			State = 326;
			Match(T__14);
			State = 327;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 328;
			datasourceEntriesSourceLocation();
			State = 329;
			Match(T__18);
			State = 330;
			datasourceEntriesSourceLocation();
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 331;
				Match(T__15);
				State = 332;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 26, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			datasourceEntryCopyOption();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 336;
				Match(T__9);
				State = 337;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 28, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(T__20);
			State = 341;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12583170L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 30, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			datasourceEntryUpdate();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 344;
				Match(T__9);
				State = 345;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 32, RULE_datasourceEntryUpdate);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				Match(T__10);
				State = 349;
				Match(T__11);
				State = 350;
				stringExpr();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				Match(T__23);
				State = 352;
				Match(T__11);
				State = 353;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 34, RULE_datasourceEntriesSourceLocation);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				datasourceSpec();
				}
				break;
			case T__25:
			case T__26:
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				urlSpec();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 358;
				fileSpec();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 359;
				Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25 || _la==T__26) {
				{
				State = 362;
				_la = TokenStream.LA(1);
				if ( !(_la==T__25 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 365;
			Match(T__27);
			State = 366;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 38, RULE_datasourceEntriesTargetLocation);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				datasourceSpec();
				}
				break;
			case T__25:
			case T__26:
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				urlSpec();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370;
				fileSpec();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 371;
				Match(T__24);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 5);
				{
				State = 372;
				Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 40, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			datasourceEntryConstraintExpr();
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 376;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 377;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				datasourceEntryConstraint();
				State = 383;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 381;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 382;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385;
				Match(T__2);
				State = 386;
				datasourceEntryConstraint();
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 387;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 388;
					datasourceEntryConstraintExpr();
					}
				}

				State = 391;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 393;
				Match(T__2);
				State = 394;
				datasourceEntryConstraintExpr();
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 395;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 396;
					datasourceEntryConstraintExpr();
					}
				}

				State = 399;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 44, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				Match(T__31);
				State = 404;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 405;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(T__31);
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 407;
					Match(T__33);
					}
				}

				State = 410;
				Match(T__5);
				State = 411;
				Match(T__2);
				State = 412;
				intExprList();
				State = 413;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 415;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 416;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 417;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 419;
					Match(T__33);
					}
				}

				State = 422;
				Match(T__5);
				State = 423;
				Match(T__2);
				State = 426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 424;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 425;
					regexExprList();
					}
					break;
				}
				State = 428;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 430;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 435;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 431;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 432;
					Match(T__35);
					State = 433;
					Match(T__33);
					State = 434;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 437;
					Match(T__37);
					}
				}

				State = 440;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 441;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 442;
					Match(T__33);
					}
				}

				State = 445;
				Match(T__5);
				State = 446;
				Match(T__2);
				State = 447;
				stringExprList();
				State = 448;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 450;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 451;
					Match(T__33);
					}
				}

				State = 454;
				Match(T__38);
				State = 455;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 456;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 461;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 457;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 458;
					Match(T__35);
					State = 459;
					Match(T__33);
					State = 460;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 463;
				Match(T__41);
				State = 464;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 465;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 470;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 466;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 467;
					Match(T__35);
					State = 468;
					Match(T__33);
					State = 469;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 472;
				Match(T__41);
				State = 473;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_loginStatement);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(T__44);
			State = 486;
			Match(T__41);
			State = 487;
			Match(T__45);
			State = 488;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(T__44);
			State = 491;
			Match(T__41);
			State = 492;
			Match(T__45);
			State = 493;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(T__44);
			State = 496;
			Match(T__41);
			State = 497;
			Match(T__45);
			State = 498;
			Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(T__44);
			State = 501;
			Match(T__41);
			State = 502;
			Match(T__45);
			State = 503;
			Match(T__46);
			State = 504;
			Match(T__29);
			State = 505;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_varStatement);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				spaceVarStatement();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508;
				blockVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509;
				stringVarStatement();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 4);
				{
				State = 510;
				regexVarStatement();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 5);
				{
				State = 511;
				storyVarStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 512;
				datasourceEntryVarStatement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 7);
				{
				State = 513;
				Match(T__49);
				State = 514;
				Match(VARID);
				State = 515;
				Match(T__11);
				State = 525;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 516;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 517;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 518;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 519;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 520;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 521;
					storySpec();
					}
					break;
				case 7:
					{
					State = 522;
					intExpr();
					}
					break;
				case 8:
					{
					State = 523;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 524;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(T__50);
			State = 530;
			Match(VARID);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 531;
				Match(T__11);
				State = 532;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(T__51);
			State = 536;
			Match(VARID);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 537;
				Match(T__11);
				State = 538;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(T__52);
			State = 542;
			Match(VARID);
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 543;
				Match(T__11);
				State = 544;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(T__37);
			State = 548;
			Match(VARID);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 549;
				Match(T__11);
				State = 550;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(T__53);
			State = 554;
			Match(VARID);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 555;
				Match(T__11);
				State = 556;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(T__1);
			State = 560;
			Match(T__13);
			State = 561;
			Match(VARID);
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 562;
				Match(T__11);
				State = 563;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 72, RULE_spaceSpec);
		int _la;
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				Match(T__50);
				State = 567;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5 || _la==T__63) {
					{
					State = 568;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 74, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 76, RULE_blockSpec);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576;
				Match(T__51);
				State = 577;
				Match(STRINGLITERAL);
				State = 578;
				Match(T__5);
				State = 581;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
				case VARID:
					{
					State = 579;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 580;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583;
				Match(T__51);
				State = 584;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 78, RULE_storySpec);
		int _la;
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 588;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 591;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
				case VARID:
					{
					State = 589;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 590;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 596;
				Match(T__1);
				State = 597;
				Match(T__13);
				State = 601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 598;
					intExpr();
					}
					break;
				case 2:
					{
					State = 599;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 600;
					Match(VARID);
					}
					break;
				}
				State = 603;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 604;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceSpec);
		int _la;
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608;
				Match(T__1);
				State = 609;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 610;
				Match(T__5);
				State = 611;
				spaceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 612;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 84, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 616;
			Match(T__5);
			State = 617;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_assignmentStatement);
		try {
			State = 625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(VARID);
				State = 620;
				Match(T__11);
				State = 621;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 623;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 624;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(VARID);
			State = 628;
			Match(T__11);
			State = 629;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(VARID);
			State = 632;
			Match(T__11);
			State = 633;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(VARID);
			State = 636;
			Match(T__11);
			State = 637;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(T__16);
			State = 640;
			Match(T__54);
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 641;
				Match(T__17);
				State = 642;
				realDataLocation();
				}
			}

			State = 645;
			Match(T__18);
			State = 646;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_printStatement);
		try {
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 650;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 652;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 653;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(T__55);
			State = 657;
			Match(T__54);
			State = 658;
			Match(T__17);
			State = 659;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(T__55);
			State = 662;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			Match(T__55);
			State = 665;
			Match(T__50);
			State = 666;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(T__55);
			State = 669;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(T__55);
			State = 672;
			Match(T__56);
			State = 673;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(T__55);
			State = 676;
			Match(T__58);
			State = 677;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 110, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				{
				State = 679;
				Match(T__60);
				}
				break;
			case T__58:
				{
				State = 680;
				Match(T__58);
				State = 681;
				Match(T__59);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 112, RULE_spacesOutputLocation);
		try {
			State = 688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 684;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				Match(T__58);
				State = 686;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 687;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 114, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(T__61);
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL || _la==VARID) {
				{
				State = 691;
				_la = TokenStream.LA(1);
				if ( !(_la==STRINGLITERAL || _la==VARID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 116, RULE_blockOutputLocation);
		int _la;
		try {
			State = 702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				Match(T__58);
				State = 696;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 697;
				Match(T__61);
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRINGLITERAL) {
					{
					State = 698;
					Match(STRINGLITERAL);
					}
				}

				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 701;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 118, RULE_blocksOutputLocation);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 704;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 705;
				Match(T__58);
				State = 706;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707;
				fileSpec();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 4);
				{
				State = 708;
				filesSpec();
				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 709;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 120, RULE_storyOutputLocation);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713;
				Match(T__58);
				State = 714;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 715;
				fileSpec();
				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 716;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilesSpecContext : ParserRuleContext {
		public FilesSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filesSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilesSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilesSpecContext filesSpec() {
		FilesSpecContext _localctx = new FilesSpecContext(Context, State);
		EnterRule(_localctx, 122, RULE_filesSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(T__62);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 124, RULE_spaceOutputLocation);
		try {
			State = 725;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722;
				Match(T__58);
				State = 723;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 724;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 126, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				{
				State = 727;
				Match(T__63);
				State = 728;
				Match(T__60);
				}
				break;
			case T__5:
				{
				State = 729;
				Match(T__5);
				State = 730;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(T__0);
			State = 734;
			Match(T__51);
			State = 735;
			Match(T__2);
			State = 736;
			blockUpdateList();
			State = 737;
			Match(T__3);
			State = 738;
			Match(T__5);
			State = 739;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			Match(T__7);
			State = 742;
			Match(T__64);
			State = 743;
			Match(T__5);
			State = 744;
			spaceSpec();
			State = 745;
			Match(T__8);
			State = 746;
			blockUpdateList();
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 747;
				Match(T__15);
				State = 748;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(T__16);
			State = 752;
			Match(T__64);
			State = 753;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 754;
			spaceSpec();
			State = 755;
			Match(T__18);
			State = 756;
			blocksOutputLocation();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 757;
				Match(T__15);
				State = 758;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(T__6);
			State = 762;
			Match(T__64);
			State = 763;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 764;
			spaceSpec();
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 765;
				Match(T__15);
				State = 766;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 136, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			blockConstraintExpr();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 770;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 771;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774;
				blockConstraint();
				State = 777;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 775;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 776;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				Match(T__2);
				State = 780;
				blockConstraint();
				State = 783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 781;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 782;
					blockConstraintExpr();
					}
				}

				State = 785;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787;
				Match(T__2);
				State = 788;
				blockConstraintExpr();
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 789;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 790;
					blockConstraintExpr();
					}
				}

				State = 793;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 140, RULE_blockConstraint);
		int _la;
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				Match(T__31);
				State = 798;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 799;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800;
				Match(T__31);
				State = 802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 801;
					Match(T__33);
					}
				}

				State = 804;
				Match(T__5);
				State = 805;
				Match(T__2);
				State = 806;
				intExprList();
				State = 807;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 809;
				Match(T__10);
				State = 810;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 811;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 812;
				Match(T__10);
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 813;
					Match(T__33);
					}
				}

				State = 816;
				Match(T__5);
				State = 817;
				Match(T__2);
				State = 818;
				stringExprList();
				State = 819;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 821;
				Match(T__10);
				State = 826;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 822;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 823;
					Match(T__35);
					State = 824;
					Match(T__33);
					State = 825;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 828;
					Match(T__37);
					}
				}

				State = 831;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 832;
				Match(T__10);
				State = 834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 833;
					Match(T__33);
					}
				}

				State = 836;
				Match(T__5);
				State = 837;
				Match(T__2);
				State = 838;
				regexExprList();
				State = 839;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 841;
				Match(T__10);
				State = 843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 842;
					Match(T__33);
					}
				}

				State = 845;
				Match(T__38);
				State = 846;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 847;
				Match(T__10);
				State = 852;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 848;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 849;
					Match(T__35);
					State = 850;
					Match(T__33);
					State = 851;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 854;
				Match(T__41);
				State = 855;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 856;
				Match(T__10);
				State = 861;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 857;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 858;
					Match(T__35);
					State = 859;
					Match(T__33);
					State = 860;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 863;
				Match(T__41);
				State = 864;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 142, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			blockUpdate();
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 868;
				Match(T__9);
				State = 869;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 144, RULE_blockUpdate);
		int _la;
		try {
			State = 901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 872;
				Match(T__65);
				State = 873;
				Match(T__10);
				State = 874;
				Match(T__11);
				State = 875;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876;
				Match(T__66);
				State = 877;
				Match(T__10);
				State = 878;
				Match(T__11);
				State = 879;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 880;
				Match(T__67);
				State = 881;
				Match(T__11);
				State = 882;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 883;
				Match(T__71);
				State = 884;
				Match(T__72);
				State = 885;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 886;
				Match(T__73);
				State = 887;
				Match(T__72);
				State = 888;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 889;
				Match(T__74);
				State = 890;
				Match(T__75);
				State = 891;
				Match(T__11);
				State = 892;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 893;
				Match(T__74);
				State = 894;
				Match(T__76);
				State = 895;
				Match(T__11);
				State = 896;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 897;
				Match(T__74);
				State = 898;
				Match(T__77);
				State = 899;
				Match(T__11);
				State = 900;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 146, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			intExpr();
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 904;
				Match(T__9);
				State = 905;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 148, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) {
				{
				State = 909;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 910;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__82) {
				{
				State = 913;
				Match(T__82);
				}
			}

			State = 916;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(T__86);
			State = 919;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_compareStatement);
		try {
			State = 924;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 922;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 923;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			Match(T__87);
			State = 927;
			spaceSpec();
			State = 928;
			Match(T__29);
			State = 929;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			Match(T__87);
			State = 932;
			blockSpec();
			State = 933;
			Match(T__29);
			State = 934;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(T__87);
			State = 937;
			Match(T__88);
			State = 938;
			Match(T__64);
			State = 939;
			Match(T__5);
			State = 940;
			spaceSpec();
			State = 941;
			Match(T__29);
			State = 942;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 162, RULE_storiesInputLocation);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__58:
				EnterOuterAlt(_localctx, 1);
				{
				State = 944;
				Match(T__58);
				State = 945;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946;
				fileSpec();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 3);
				{
				State = 947;
				filesSpec();
				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 948;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 949;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 164, RULE_storiesOutputLocation);
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 953;
				Match(T__58);
				State = 954;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 955;
				fileSpec();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 4);
				{
				State = 956;
				filesSpec();
				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 957;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 958;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(T__16);
			State = 962;
			Match(T__89);
			State = 963;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 964;
			storiesInputLocation();
			State = 965;
			Match(T__18);
			State = 966;
			storiesOutputLocation();
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 967;
				Match(T__15);
				State = 968;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(T__90);
			State = 972;
			Match(T__89);
			State = 973;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 974;
			spaceSpec();
			State = 977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 975;
				Match(T__15);
				State = 976;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(T__91);
			State = 980;
			Match(T__89);
			State = 981;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 982;
			spaceSpec();
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 983;
				Match(T__15);
				State = 984;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(T__6);
			State = 988;
			Match(T__89);
			State = 989;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
			case VARID:
				{
				State = 990;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 991;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 994;
				Match(T__15);
				State = 995;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 174, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			storyConstraintExpr();
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 999;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1000;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 176, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003;
				storyConstraint();
				State = 1006;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 1004;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1005;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1008;
				Match(T__2);
				State = 1009;
				storyConstraint();
				State = 1012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1010;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1011;
					storyConstraintExpr();
					}
				}

				State = 1014;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1016;
				Match(T__2);
				State = 1017;
				storyConstraintExpr();
				State = 1020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1018;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1019;
					storyConstraintExpr();
					}
				}

				State = 1022;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 178, RULE_storyConstraint);
		int _la;
		try {
			State = 1237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				Match(T__31);
				State = 1027;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1028;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				Match(T__31);
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1030;
					Match(T__33);
					}
				}

				State = 1033;
				Match(T__5);
				State = 1034;
				Match(T__2);
				State = 1035;
				intExprList();
				State = 1036;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1038;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1039;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1040;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1041;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1042;
					Match(T__33);
					}
				}

				State = 1045;
				Match(T__5);
				State = 1046;
				Match(T__2);
				State = 1047;
				stringExprList();
				State = 1048;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1050;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1055;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1051;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1052;
					Match(T__35);
					State = 1053;
					Match(T__33);
					State = 1054;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1057;
					Match(T__37);
					}
				}

				State = 1060;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1061;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1062;
					Match(T__33);
					}
				}

				State = 1065;
				Match(T__5);
				State = 1066;
				Match(T__2);
				State = 1067;
				stringExprList();
				State = 1068;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1070;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1071;
					Match(T__33);
					}
				}

				State = 1074;
				Match(T__38);
				State = 1075;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1076;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1081;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1077;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1078;
					Match(T__35);
					State = 1079;
					Match(T__33);
					State = 1080;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1083;
				Match(T__41);
				State = 1084;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1085;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1090;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1086;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1087;
					Match(T__35);
					State = 1088;
					Match(T__33);
					State = 1089;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1092;
				Match(T__41);
				State = 1093;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1102;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1095;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1094;
						Match(T__92);
						}
					}

					State = 1097;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1098;
						Match(T__88);
						}
					}

					State = 1101;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1104;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1105;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1106;
						Match(T__92);
						}
					}

					State = 1109;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1110;
						Match(T__88);
						}
					}

					State = 1113;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1116;
					Match(T__33);
					}
				}

				State = 1119;
				Match(T__5);
				State = 1120;
				Match(T__2);
				State = 1121;
				stringExprList();
				State = 1122;
				Match(T__3);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1124;
					Match(T__92);
					}
				}

				State = 1127;
				Match(T__72);
				State = 1132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1128;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1129;
					Match(T__35);
					State = 1130;
					Match(T__33);
					State = 1131;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1134;
					Match(T__37);
					}
				}

				State = 1137;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1138;
					Match(T__92);
					}
				}

				State = 1141;
				Match(T__72);
				State = 1146;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1142;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1143;
					Match(T__35);
					State = 1144;
					Match(T__33);
					State = 1145;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1148;
				Match(T__41);
				State = 1149;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1150;
					Match(T__92);
					}
				}

				State = 1153;
				Match(T__72);
				State = 1158;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1154;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1155;
					Match(T__35);
					State = 1156;
					Match(T__33);
					State = 1157;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1160;
				Match(T__41);
				State = 1161;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1162;
					Match(T__88);
					}
				}

				State = 1165;
				Match(T__93);
				State = 1170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 1166;
					Match(T__36);
					}
					break;
				case T__94:
					{
					State = 1167;
					Match(T__94);
					State = 1168;
					Match(T__33);
					State = 1169;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1172;
					Match(T__37);
					}
				}

				State = 1175;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1176;
					Match(T__88);
					}
				}

				State = 1179;
				Match(T__93);
				State = 1184;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1180;
					Match(T__40);
					}
					break;
				case T__94:
					{
					State = 1181;
					Match(T__94);
					State = 1182;
					Match(T__33);
					State = 1183;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1186;
				Match(T__41);
				State = 1187;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1188;
					Match(T__88);
					}
				}

				State = 1191;
				Match(T__93);
				State = 1196;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1192;
					Match(T__43);
					}
					break;
				case T__94:
					{
					State = 1193;
					Match(T__94);
					State = 1194;
					Match(T__33);
					State = 1195;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1198;
				Match(T__41);
				State = 1199;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1208;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1200;
						Match(T__92);
						}
					}

					State = 1203;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1204;
						Match(T__88);
						}
					}

					State = 1207;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1210;
					Match(T__33);
					}
				}

				State = 1213;
				Match(T__5);
				State = 1214;
				Match(T__2);
				State = 1215;
				regexExprList();
				State = 1216;
				Match(T__3);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1218;
						Match(T__92);
						}
					}

					State = 1221;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1222;
						Match(T__88);
						}
					}

					State = 1225;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1228;
					Match(T__33);
					}
				}

				State = 1231;
				Match(T__38);
				State = 1232;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1233;
				Match(T__95);
				State = 1234;
				Match(T__93);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1235;
				Match(T__92);
				State = 1236;
				Match(T__93);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 180, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 182, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241;
			regexExpr();
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1242;
				Match(T__9);
				State = 1243;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			Match(T__16);
			State = 1247;
			Match(T__96);
			State = 1248;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1249;
			spaceSpec();
			State = 1250;
			Match(T__18);
			State = 1251;
			spaceSpec();
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 1252;
				Match(T__15);
				State = 1253;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			Match(T__7);
			State = 1257;
			Match(T__96);
			State = 1258;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1259;
			spaceSpec();
			State = 1260;
			Match(T__18);
			State = 1261;
			spaceSpec();
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 1262;
				Match(T__15);
				State = 1263;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			Match(T__6);
			State = 1267;
			Match(T__96);
			State = 1268;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1269;
			spaceSpec();
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 1270;
				Match(T__15);
				State = 1271;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274;
			Match(T__16);
			State = 1275;
			Match(T__96);
			State = 1276;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1277;
			spaceSpec();
			State = 1278;
			Match(T__18);
			State = 1279;
			spaceSpec();
			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 1280;
				Match(T__15);
				State = 1281;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 192, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284;
			datasourceConstraintExpr();
			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 1285;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1286;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 194, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289;
				datasourceConstraint();
				State = 1292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
				case 1:
					{
					State = 1290;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1291;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1294;
				Match(T__2);
				State = 1295;
				datasourceConstraint();
				State = 1298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1296;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1297;
					datasourceConstraintExpr();
					}
				}

				State = 1300;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1302;
				Match(T__2);
				State = 1303;
				datasourceConstraintExpr();
				State = 1306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1304;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1305;
					datasourceConstraintExpr();
					}
				}

				State = 1308;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 196, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1312;
				Match(T__31);
				State = 1313;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1314;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1315;
				Match(T__31);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1316;
					Match(T__33);
					}
				}

				State = 1319;
				Match(T__5);
				State = 1320;
				Match(T__2);
				State = 1321;
				intExprList();
				State = 1322;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1324;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1325;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1326;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1327;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1328;
					Match(T__33);
					}
				}

				State = 1331;
				Match(T__5);
				State = 1332;
				Match(T__2);
				State = 1333;
				stringExprList();
				State = 1334;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1336;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1341;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1337;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1338;
					Match(T__35);
					State = 1339;
					Match(T__33);
					State = 1340;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1343;
					Match(T__37);
					}
				}

				State = 1346;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1347;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1348;
					Match(T__33);
					}
				}

				State = 1351;
				Match(T__5);
				State = 1352;
				Match(T__2);
				State = 1353;
				regexExprList();
				State = 1354;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1356;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1357;
					Match(T__33);
					}
				}

				State = 1360;
				Match(T__38);
				State = 1361;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1362;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1367;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1363;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1364;
					Match(T__35);
					State = 1365;
					Match(T__33);
					State = 1366;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1369;
				Match(T__41);
				State = 1370;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1371;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1376;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1372;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1373;
					Match(T__35);
					State = 1374;
					Match(T__33);
					State = 1375;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1378;
				Match(T__41);
				{
				State = 1379;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 198, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382;
			stringExpr();
			State = 1385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1383;
				Match(T__9);
				State = 1384;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 200, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__78) {
				{
				State = 1388;
				Match(T__78);
				State = 1389;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1392;
			Match(T__97);
			State = 1393;
			Match(T__2);
			State = 1394;
			Match(T__3);
			State = 1395;
			Match(T__98);
			State = 1396;
			statementList();
			State = 1397;
			Match(T__99);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,108,1400,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,1,1,1,1,1,1,4,1,210,8,1,11,1,
		12,1,211,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,239,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,248,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,257,8,4,1,5,1,5,1,
		5,1,5,3,5,263,8,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,271,8,6,1,7,1,7,1,7,1,7,
		1,7,1,7,3,7,279,8,7,1,8,1,8,1,8,1,8,1,8,3,8,286,8,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,300,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,309,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,320,
		8,11,1,11,3,11,323,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,334,8,12,1,13,1,13,1,13,3,13,339,8,13,1,14,1,14,1,14,1,15,1,15,1,15,
		3,15,347,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,355,8,16,1,17,1,17,1,
		17,1,17,3,17,361,8,17,1,18,3,18,364,8,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,3,19,374,8,19,1,20,1,20,1,20,3,20,379,8,20,1,21,1,21,1,21,3,
		21,384,8,21,1,21,1,21,1,21,1,21,3,21,390,8,21,1,21,1,21,1,21,1,21,1,21,
		1,21,3,21,398,8,21,1,21,1,21,3,21,402,8,21,1,22,1,22,1,22,1,22,1,22,3,
		22,409,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,421,
		8,22,1,22,1,22,1,22,1,22,3,22,427,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,3,22,436,8,22,1,22,3,22,439,8,22,1,22,1,22,1,22,3,22,444,8,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,453,8,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,3,22,462,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,471,8,22,
		1,22,1,22,3,22,475,8,22,1,23,1,23,1,23,1,23,1,23,3,23,482,8,23,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
		27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,526,
		8,29,3,29,528,8,29,1,30,1,30,1,30,1,30,3,30,534,8,30,1,31,1,31,1,31,1,
		31,3,31,540,8,31,1,32,1,32,1,32,1,32,3,32,546,8,32,1,33,1,33,1,33,1,33,
		3,33,552,8,33,1,34,1,34,1,34,1,34,3,34,558,8,34,1,35,1,35,1,35,1,35,1,
		35,3,35,565,8,35,1,36,1,36,1,36,3,36,570,8,36,1,36,3,36,573,8,36,1,37,
		1,37,1,38,1,38,1,38,1,38,1,38,3,38,582,8,38,1,38,1,38,3,38,586,8,38,1,
		39,1,39,1,39,1,39,3,39,592,8,39,1,39,3,39,595,8,39,1,40,1,40,1,40,1,40,
		1,40,3,40,602,8,40,1,40,1,40,1,40,3,40,607,8,40,1,41,1,41,1,41,1,41,1,
		41,3,41,614,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
		626,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,
		47,1,47,1,47,1,47,3,47,644,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,655,8,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,
		51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,
		55,1,55,3,55,683,8,55,1,56,1,56,1,56,1,56,3,56,689,8,56,1,57,1,57,3,57,
		693,8,57,1,58,1,58,1,58,1,58,1,58,3,58,700,8,58,1,58,3,58,703,8,58,1,59,
		1,59,1,59,1,59,1,59,1,59,3,59,711,8,59,1,60,1,60,1,60,1,60,1,60,3,60,718,
		8,60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,726,8,62,1,63,1,63,1,63,1,63,3,
		63,732,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,3,65,750,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
		66,3,66,760,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,768,8,67,1,68,1,68,
		1,68,3,68,773,8,68,1,69,1,69,1,69,3,69,778,8,69,1,69,1,69,1,69,1,69,3,
		69,784,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,792,8,69,1,69,1,69,3,69,
		796,8,69,1,70,1,70,1,70,1,70,1,70,3,70,803,8,70,1,70,1,70,1,70,1,70,1,
		70,1,70,1,70,1,70,1,70,1,70,3,70,815,8,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,3,70,827,8,70,1,70,3,70,830,8,70,1,70,1,70,1,70,3,
		70,835,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,844,8,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,3,70,853,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
		70,3,70,862,8,70,1,70,1,70,3,70,866,8,70,1,71,1,71,1,71,3,71,871,8,71,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,3,72,902,8,72,1,73,1,73,1,73,3,73,907,8,73,1,74,1,74,1,74,3,74,912,
		8,74,1,75,3,75,915,8,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,3,77,925,
		8,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,951,8,81,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,960,8,82,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,3,83,970,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,978,8,
		84,1,85,1,85,1,85,1,85,1,85,1,85,3,85,986,8,85,1,86,1,86,1,86,1,86,1,86,
		3,86,993,8,86,1,86,1,86,3,86,997,8,86,1,87,1,87,1,87,3,87,1002,8,87,1,
		88,1,88,1,88,3,88,1007,8,88,1,88,1,88,1,88,1,88,3,88,1013,8,88,1,88,1,
		88,1,88,1,88,1,88,1,88,3,88,1021,8,88,1,88,1,88,3,88,1025,8,88,1,89,1,
		89,1,89,1,89,1,89,3,89,1032,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
		89,1,89,1,89,3,89,1044,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
		89,1,89,3,89,1056,8,89,1,89,3,89,1059,8,89,1,89,1,89,1,89,3,89,1064,8,
		89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1073,8,89,1,89,1,89,1,89,1,
		89,1,89,1,89,1,89,3,89,1082,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,
		89,1091,8,89,1,89,1,89,1,89,3,89,1096,8,89,1,89,1,89,3,89,1100,8,89,1,
		89,3,89,1103,8,89,1,89,1,89,1,89,3,89,1108,8,89,1,89,1,89,3,89,1112,8,
		89,1,89,3,89,1115,8,89,1,89,3,89,1118,8,89,1,89,1,89,1,89,1,89,1,89,1,
		89,3,89,1126,8,89,1,89,1,89,1,89,1,89,1,89,3,89,1133,8,89,1,89,3,89,1136,
		8,89,1,89,1,89,3,89,1140,8,89,1,89,1,89,1,89,1,89,1,89,3,89,1147,8,89,
		1,89,1,89,1,89,3,89,1152,8,89,1,89,1,89,1,89,1,89,1,89,3,89,1159,8,89,
		1,89,1,89,1,89,3,89,1164,8,89,1,89,1,89,1,89,1,89,1,89,3,89,1171,8,89,
		1,89,3,89,1174,8,89,1,89,1,89,3,89,1178,8,89,1,89,1,89,1,89,1,89,1,89,
		3,89,1185,8,89,1,89,1,89,1,89,3,89,1190,8,89,1,89,1,89,1,89,1,89,1,89,
		3,89,1197,8,89,1,89,1,89,1,89,3,89,1202,8,89,1,89,1,89,3,89,1206,8,89,
		1,89,3,89,1209,8,89,1,89,3,89,1212,8,89,1,89,1,89,1,89,1,89,1,89,1,89,
		3,89,1220,8,89,1,89,1,89,3,89,1224,8,89,1,89,3,89,1227,8,89,1,89,3,89,
		1230,8,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1238,8,89,1,90,1,90,1,91,
		1,91,1,91,3,91,1245,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,
		1255,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1265,8,93,1,94,
		1,94,1,94,1,94,1,94,1,94,3,94,1273,8,94,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,3,95,1283,8,95,1,96,1,96,1,96,3,96,1288,8,96,1,97,1,97,1,97,
		3,97,1293,8,97,1,97,1,97,1,97,1,97,3,97,1299,8,97,1,97,1,97,1,97,1,97,
		1,97,1,97,3,97,1307,8,97,1,97,1,97,3,97,1311,8,97,1,98,1,98,1,98,1,98,
		1,98,3,98,1318,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
		3,98,1330,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,
		1342,8,98,1,98,3,98,1345,8,98,1,98,1,98,1,98,3,98,1350,8,98,1,98,1,98,
		1,98,1,98,1,98,1,98,1,98,3,98,1359,8,98,1,98,1,98,1,98,1,98,1,98,1,98,
		1,98,3,98,1368,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1377,8,98,
		1,98,1,98,3,98,1381,8,98,1,99,1,99,1,99,3,99,1386,8,99,1,100,1,100,1,100,
		3,100,1391,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,0,0,102,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
		170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,0,
		17,1,0,5,6,2,0,6,6,18,18,3,0,1,1,8,8,22,23,1,0,26,27,1,0,30,31,2,0,12,
		12,33,33,2,0,11,11,24,24,1,0,103,105,2,0,103,103,105,105,1,0,103,104,1,
		0,69,71,1,0,104,105,1,0,79,82,1,0,84,86,2,0,11,11,28,28,2,0,103,104,106,
		106,2,0,11,11,13,13,1572,0,204,1,0,0,0,2,209,1,0,0,0,4,238,1,0,0,0,6,240,
		1,0,0,0,8,252,1,0,0,0,10,258,1,0,0,0,12,267,1,0,0,0,14,278,1,0,0,0,16,
		280,1,0,0,0,18,290,1,0,0,0,20,301,1,0,0,0,22,310,1,0,0,0,24,324,1,0,0,
		0,26,335,1,0,0,0,28,340,1,0,0,0,30,343,1,0,0,0,32,354,1,0,0,0,34,360,1,
		0,0,0,36,363,1,0,0,0,38,373,1,0,0,0,40,375,1,0,0,0,42,401,1,0,0,0,44,474,
		1,0,0,0,46,481,1,0,0,0,48,483,1,0,0,0,50,485,1,0,0,0,52,490,1,0,0,0,54,
		495,1,0,0,0,56,500,1,0,0,0,58,527,1,0,0,0,60,529,1,0,0,0,62,535,1,0,0,
		0,64,541,1,0,0,0,66,547,1,0,0,0,68,553,1,0,0,0,70,559,1,0,0,0,72,572,1,
		0,0,0,74,574,1,0,0,0,76,585,1,0,0,0,78,594,1,0,0,0,80,606,1,0,0,0,82,613,
		1,0,0,0,84,615,1,0,0,0,86,625,1,0,0,0,88,627,1,0,0,0,90,631,1,0,0,0,92,
		635,1,0,0,0,94,639,1,0,0,0,96,654,1,0,0,0,98,656,1,0,0,0,100,661,1,0,0,
		0,102,664,1,0,0,0,104,668,1,0,0,0,106,671,1,0,0,0,108,675,1,0,0,0,110,
		682,1,0,0,0,112,688,1,0,0,0,114,690,1,0,0,0,116,702,1,0,0,0,118,710,1,
		0,0,0,120,717,1,0,0,0,122,719,1,0,0,0,124,725,1,0,0,0,126,731,1,0,0,0,
		128,733,1,0,0,0,130,741,1,0,0,0,132,751,1,0,0,0,134,761,1,0,0,0,136,769,
		1,0,0,0,138,795,1,0,0,0,140,865,1,0,0,0,142,867,1,0,0,0,144,901,1,0,0,
		0,146,903,1,0,0,0,148,908,1,0,0,0,150,914,1,0,0,0,152,918,1,0,0,0,154,
		924,1,0,0,0,156,926,1,0,0,0,158,931,1,0,0,0,160,936,1,0,0,0,162,950,1,
		0,0,0,164,959,1,0,0,0,166,961,1,0,0,0,168,971,1,0,0,0,170,979,1,0,0,0,
		172,987,1,0,0,0,174,998,1,0,0,0,176,1024,1,0,0,0,178,1237,1,0,0,0,180,
		1239,1,0,0,0,182,1241,1,0,0,0,184,1246,1,0,0,0,186,1256,1,0,0,0,188,1266,
		1,0,0,0,190,1274,1,0,0,0,192,1284,1,0,0,0,194,1310,1,0,0,0,196,1380,1,
		0,0,0,198,1382,1,0,0,0,200,1387,1,0,0,0,202,1392,1,0,0,0,204,205,3,2,1,
		0,205,1,1,0,0,0,206,207,3,4,2,0,207,208,5,101,0,0,208,210,1,0,0,0,209,
		206,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,3,1,0,
		0,0,213,239,3,46,23,0,214,239,3,58,29,0,215,239,3,86,43,0,216,239,3,96,
		48,0,217,239,3,150,75,0,218,239,3,152,76,0,219,239,3,154,77,0,220,239,
		3,16,8,0,221,239,3,18,9,0,222,239,3,20,10,0,223,239,3,22,11,0,224,239,
		3,24,12,0,225,239,3,132,66,0,226,239,3,94,47,0,227,239,3,132,66,0,228,
		239,3,166,83,0,229,239,3,168,84,0,230,239,3,170,85,0,231,239,3,172,86,
		0,232,239,3,184,92,0,233,239,3,134,67,0,234,239,3,188,94,0,235,239,3,6,
		3,0,236,239,3,10,5,0,237,239,3,8,4,0,238,213,1,0,0,0,238,214,1,0,0,0,238,
		215,1,0,0,0,238,216,1,0,0,0,238,217,1,0,0,0,238,218,1,0,0,0,238,219,1,
		0,0,0,238,220,1,0,0,0,238,221,1,0,0,0,238,222,1,0,0,0,238,223,1,0,0,0,
		238,224,1,0,0,0,238,225,1,0,0,0,238,226,1,0,0,0,238,227,1,0,0,0,238,228,
		1,0,0,0,238,229,1,0,0,0,238,230,1,0,0,0,238,231,1,0,0,0,238,232,1,0,0,
		0,238,233,1,0,0,0,238,234,1,0,0,0,238,235,1,0,0,0,238,236,1,0,0,0,238,
		237,1,0,0,0,239,5,1,0,0,0,240,241,5,1,0,0,241,247,5,2,0,0,242,248,3,200,
		100,0,243,244,5,3,0,0,244,245,3,12,6,0,245,246,5,4,0,0,246,248,1,0,0,0,
		247,242,1,0,0,0,247,243,1,0,0,0,248,249,1,0,0,0,249,250,7,0,0,0,250,251,
		3,72,36,0,251,7,1,0,0,0,252,253,5,7,0,0,253,256,5,2,0,0,254,257,3,84,42,
		0,255,257,3,82,41,0,256,254,1,0,0,0,256,255,1,0,0,0,257,9,1,0,0,0,258,
		259,5,8,0,0,259,262,5,2,0,0,260,263,3,84,42,0,261,263,3,82,41,0,262,260,
		1,0,0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,265,5,9,0,0,265,266,3,12,6,
		0,266,11,1,0,0,0,267,270,3,14,7,0,268,269,5,10,0,0,269,271,3,12,6,0,270,
		268,1,0,0,0,270,271,1,0,0,0,271,13,1,0,0,0,272,273,5,11,0,0,273,274,5,
		12,0,0,274,279,3,200,100,0,275,276,5,13,0,0,276,277,5,12,0,0,277,279,3,
		200,100,0,278,272,1,0,0,0,278,275,1,0,0,0,279,15,1,0,0,0,280,281,5,1,0,
		0,281,282,5,2,0,0,282,285,5,14,0,0,283,286,3,200,100,0,284,286,3,30,15,
		0,285,283,1,0,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,288,7,0,0,0,288,
		289,3,82,41,0,289,17,1,0,0,0,290,291,5,8,0,0,291,292,5,2,0,0,292,293,5,
		15,0,0,293,294,5,6,0,0,294,295,3,82,41,0,295,296,5,9,0,0,296,299,3,30,
		15,0,297,298,5,16,0,0,298,300,3,40,20,0,299,297,1,0,0,0,299,300,1,0,0,
		0,300,19,1,0,0,0,301,302,5,7,0,0,302,303,5,2,0,0,303,304,5,15,0,0,304,
		305,5,6,0,0,305,308,3,82,41,0,306,307,5,16,0,0,307,309,3,40,20,0,308,306,
		1,0,0,0,308,309,1,0,0,0,309,21,1,0,0,0,310,311,5,17,0,0,311,312,5,2,0,
		0,312,313,5,15,0,0,313,314,7,1,0,0,314,315,3,34,17,0,315,316,5,19,0,0,
		316,319,3,38,19,0,317,318,5,16,0,0,318,320,3,40,20,0,319,317,1,0,0,0,319,
		320,1,0,0,0,320,322,1,0,0,0,321,323,3,26,13,0,322,321,1,0,0,0,322,323,
		1,0,0,0,323,23,1,0,0,0,324,325,5,20,0,0,325,326,5,2,0,0,326,327,5,15,0,
		0,327,328,7,1,0,0,328,329,3,34,17,0,329,330,5,19,0,0,330,333,3,34,17,0,
		331,332,5,16,0,0,332,334,3,40,20,0,333,331,1,0,0,0,333,334,1,0,0,0,334,
		25,1,0,0,0,335,338,3,28,14,0,336,337,5,10,0,0,337,339,3,26,13,0,338,336,
		1,0,0,0,338,339,1,0,0,0,339,27,1,0,0,0,340,341,5,21,0,0,341,342,7,2,0,
		0,342,29,1,0,0,0,343,346,3,32,16,0,344,345,5,10,0,0,345,347,3,30,15,0,
		346,344,1,0,0,0,346,347,1,0,0,0,347,31,1,0,0,0,348,349,5,11,0,0,349,350,
		5,12,0,0,350,355,3,200,100,0,351,352,5,24,0,0,352,353,5,12,0,0,353,355,
		3,200,100,0,354,348,1,0,0,0,354,351,1,0,0,0,355,33,1,0,0,0,356,361,3,82,
		41,0,357,361,3,36,18,0,358,361,3,114,57,0,359,361,5,25,0,0,360,356,1,0,
		0,0,360,357,1,0,0,0,360,358,1,0,0,0,360,359,1,0,0,0,361,35,1,0,0,0,362,
		364,7,3,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,
		28,0,0,366,367,3,200,100,0,367,37,1,0,0,0,368,374,3,82,41,0,369,374,3,
		36,18,0,370,374,3,114,57,0,371,374,5,25,0,0,372,374,5,29,0,0,373,368,1,
		0,0,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,
		374,39,1,0,0,0,375,378,3,42,21,0,376,377,7,4,0,0,377,379,3,40,20,0,378,
		376,1,0,0,0,378,379,1,0,0,0,379,41,1,0,0,0,380,383,3,44,22,0,381,382,7,
		4,0,0,382,384,3,42,21,0,383,381,1,0,0,0,383,384,1,0,0,0,384,402,1,0,0,
		0,385,386,5,3,0,0,386,389,3,44,22,0,387,388,7,4,0,0,388,390,3,42,21,0,
		389,387,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,5,4,0,0,392,402,
		1,0,0,0,393,394,5,3,0,0,394,397,3,42,21,0,395,396,7,4,0,0,396,398,3,42,
		21,0,397,395,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,4,0,0,400,
		402,1,0,0,0,401,380,1,0,0,0,401,385,1,0,0,0,401,393,1,0,0,0,402,43,1,0,
		0,0,403,404,5,32,0,0,404,405,7,5,0,0,405,475,3,148,74,0,406,408,5,32,0,
		0,407,409,5,34,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,
		411,5,6,0,0,411,412,5,3,0,0,412,413,3,146,73,0,413,414,5,4,0,0,414,475,
		1,0,0,0,415,416,7,6,0,0,416,417,7,5,0,0,417,475,3,200,100,0,418,420,7,
		6,0,0,419,421,5,34,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,
		422,423,5,6,0,0,423,426,5,3,0,0,424,427,3,198,99,0,425,427,3,182,91,0,
		426,424,1,0,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,429,5,4,0,0,429,475,
		1,0,0,0,430,435,7,6,0,0,431,436,5,35,0,0,432,433,5,36,0,0,433,434,5,34,
		0,0,434,436,5,37,0,0,435,431,1,0,0,0,435,432,1,0,0,0,436,438,1,0,0,0,437,
		439,5,38,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,475,3,
		180,90,0,441,443,7,6,0,0,442,444,5,34,0,0,443,442,1,0,0,0,443,444,1,0,
		0,0,444,445,1,0,0,0,445,446,5,6,0,0,446,447,5,3,0,0,447,448,3,198,99,0,
		448,449,5,4,0,0,449,475,1,0,0,0,450,452,7,6,0,0,451,453,5,34,0,0,452,451,
		1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,5,39,0,0,455,475,3,200,
		100,0,456,461,7,6,0,0,457,462,5,40,0,0,458,459,5,36,0,0,459,460,5,34,0,
		0,460,462,5,41,0,0,461,457,1,0,0,0,461,458,1,0,0,0,462,463,1,0,0,0,463,
		464,5,42,0,0,464,475,3,200,100,0,465,470,7,6,0,0,466,471,5,43,0,0,467,
		468,5,36,0,0,468,469,5,34,0,0,469,471,5,44,0,0,470,466,1,0,0,0,470,467,
		1,0,0,0,471,472,1,0,0,0,472,473,5,42,0,0,473,475,3,200,100,0,474,403,1,
		0,0,0,474,406,1,0,0,0,474,415,1,0,0,0,474,418,1,0,0,0,474,430,1,0,0,0,
		474,441,1,0,0,0,474,450,1,0,0,0,474,456,1,0,0,0,474,465,1,0,0,0,475,45,
		1,0,0,0,476,482,3,48,24,0,477,482,3,50,25,0,478,482,3,52,26,0,479,482,
		3,54,27,0,480,482,3,56,28,0,481,476,1,0,0,0,481,477,1,0,0,0,481,478,1,
		0,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,47,1,0,0,0,483,484,5,45,0,0,
		484,49,1,0,0,0,485,486,5,45,0,0,486,487,5,42,0,0,487,488,5,46,0,0,488,
		489,5,47,0,0,489,51,1,0,0,0,490,491,5,45,0,0,491,492,5,42,0,0,492,493,
		5,46,0,0,493,494,5,48,0,0,494,53,1,0,0,0,495,496,5,45,0,0,496,497,5,42,
		0,0,497,498,5,46,0,0,498,499,5,49,0,0,499,55,1,0,0,0,500,501,5,45,0,0,
		501,502,5,42,0,0,502,503,5,46,0,0,503,504,5,47,0,0,504,505,5,30,0,0,505,
		506,5,48,0,0,506,57,1,0,0,0,507,528,3,60,30,0,508,528,3,62,31,0,509,528,
		3,64,32,0,510,528,3,66,33,0,511,528,3,68,34,0,512,528,3,70,35,0,513,514,
		5,50,0,0,514,515,5,104,0,0,515,525,5,12,0,0,516,526,5,104,0,0,517,526,
		3,72,36,0,518,526,3,76,38,0,519,526,3,200,100,0,520,526,3,180,90,0,521,
		526,3,78,39,0,522,526,3,148,74,0,523,526,3,80,40,0,524,526,3,82,41,0,525,
		516,1,0,0,0,525,517,1,0,0,0,525,518,1,0,0,0,525,519,1,0,0,0,525,520,1,
		0,0,0,525,521,1,0,0,0,525,522,1,0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,
		526,528,1,0,0,0,527,507,1,0,0,0,527,508,1,0,0,0,527,509,1,0,0,0,527,510,
		1,0,0,0,527,511,1,0,0,0,527,512,1,0,0,0,527,513,1,0,0,0,528,59,1,0,0,0,
		529,530,5,51,0,0,530,533,5,104,0,0,531,532,5,12,0,0,532,534,3,72,36,0,
		533,531,1,0,0,0,533,534,1,0,0,0,534,61,1,0,0,0,535,536,5,52,0,0,536,539,
		5,104,0,0,537,538,5,12,0,0,538,540,3,76,38,0,539,537,1,0,0,0,539,540,1,
		0,0,0,540,63,1,0,0,0,541,542,5,53,0,0,542,545,5,104,0,0,543,544,5,12,0,
		0,544,546,3,200,100,0,545,543,1,0,0,0,545,546,1,0,0,0,546,65,1,0,0,0,547,
		548,5,38,0,0,548,551,5,104,0,0,549,550,5,12,0,0,550,552,3,180,90,0,551,
		549,1,0,0,0,551,552,1,0,0,0,552,67,1,0,0,0,553,554,5,54,0,0,554,557,5,
		104,0,0,555,556,5,12,0,0,556,558,3,78,39,0,557,555,1,0,0,0,557,558,1,0,
		0,0,558,69,1,0,0,0,559,560,5,2,0,0,560,561,5,14,0,0,561,564,5,104,0,0,
		562,563,5,12,0,0,563,565,3,80,40,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
		71,1,0,0,0,566,567,5,51,0,0,567,569,7,7,0,0,568,570,3,126,63,0,569,568,
		1,0,0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,573,5,104,0,0,572,566,1,0,
		0,0,572,571,1,0,0,0,573,73,1,0,0,0,574,575,7,8,0,0,575,75,1,0,0,0,576,
		577,5,52,0,0,577,578,5,103,0,0,578,581,5,6,0,0,579,582,3,72,36,0,580,582,
		3,114,57,0,581,579,1,0,0,0,581,580,1,0,0,0,582,586,1,0,0,0,583,584,5,52,
		0,0,584,586,5,104,0,0,585,576,1,0,0,0,585,583,1,0,0,0,586,77,1,0,0,0,587,
		588,7,7,0,0,588,591,7,1,0,0,589,592,3,72,36,0,590,592,3,114,57,0,591,589,
		1,0,0,0,591,590,1,0,0,0,592,595,1,0,0,0,593,595,5,104,0,0,594,587,1,0,
		0,0,594,593,1,0,0,0,595,79,1,0,0,0,596,597,5,2,0,0,597,601,5,14,0,0,598,
		602,3,148,74,0,599,602,3,200,100,0,600,602,5,104,0,0,601,598,1,0,0,0,601,
		599,1,0,0,0,601,600,1,0,0,0,602,603,1,0,0,0,603,604,7,1,0,0,604,607,3,
		82,41,0,605,607,5,104,0,0,606,596,1,0,0,0,606,605,1,0,0,0,607,81,1,0,0,
		0,608,609,5,2,0,0,609,610,7,7,0,0,610,611,5,6,0,0,611,614,3,72,36,0,612,
		614,5,104,0,0,613,608,1,0,0,0,613,612,1,0,0,0,614,83,1,0,0,0,615,616,7,
		7,0,0,616,617,5,6,0,0,617,618,3,72,36,0,618,85,1,0,0,0,619,620,5,104,0,
		0,620,621,5,12,0,0,621,626,5,104,0,0,622,626,3,88,44,0,623,626,3,92,46,
		0,624,626,3,90,45,0,625,619,1,0,0,0,625,622,1,0,0,0,625,623,1,0,0,0,625,
		624,1,0,0,0,626,87,1,0,0,0,627,628,5,104,0,0,628,629,5,12,0,0,629,630,
		3,72,36,0,630,89,1,0,0,0,631,632,5,104,0,0,632,633,5,12,0,0,633,634,3,
		76,38,0,634,91,1,0,0,0,635,636,5,104,0,0,636,637,5,12,0,0,637,638,5,103,
		0,0,638,93,1,0,0,0,639,640,5,17,0,0,640,643,5,55,0,0,641,642,5,18,0,0,
		642,644,3,110,55,0,643,641,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,
		646,5,19,0,0,646,647,3,112,56,0,647,95,1,0,0,0,648,655,3,98,49,0,649,655,
		3,100,50,0,650,655,3,102,51,0,651,655,3,104,52,0,652,655,3,106,53,0,653,
		655,3,108,54,0,654,648,1,0,0,0,654,649,1,0,0,0,654,650,1,0,0,0,654,651,
		1,0,0,0,654,652,1,0,0,0,654,653,1,0,0,0,655,97,1,0,0,0,656,657,5,56,0,
		0,657,658,5,55,0,0,658,659,5,18,0,0,659,660,3,110,55,0,660,99,1,0,0,0,
		661,662,5,56,0,0,662,663,5,104,0,0,663,101,1,0,0,0,664,665,5,56,0,0,665,
		666,5,51,0,0,666,667,7,9,0,0,667,103,1,0,0,0,668,669,5,56,0,0,669,670,
		5,103,0,0,670,105,1,0,0,0,671,672,5,56,0,0,672,673,5,57,0,0,673,674,5,
		58,0,0,674,107,1,0,0,0,675,676,5,56,0,0,676,677,5,59,0,0,677,678,5,60,
		0,0,678,109,1,0,0,0,679,683,5,61,0,0,680,681,5,59,0,0,681,683,5,60,0,0,
		682,679,1,0,0,0,682,680,1,0,0,0,683,111,1,0,0,0,684,689,5,29,0,0,685,686,
		5,59,0,0,686,689,5,60,0,0,687,689,3,114,57,0,688,684,1,0,0,0,688,685,1,
		0,0,0,688,687,1,0,0,0,689,113,1,0,0,0,690,692,5,62,0,0,691,693,7,9,0,0,
		692,691,1,0,0,0,692,693,1,0,0,0,693,115,1,0,0,0,694,703,5,29,0,0,695,696,
		5,59,0,0,696,703,5,60,0,0,697,699,5,62,0,0,698,700,5,103,0,0,699,698,1,
		0,0,0,699,700,1,0,0,0,700,703,1,0,0,0,701,703,3,72,36,0,702,694,1,0,0,
		0,702,695,1,0,0,0,702,697,1,0,0,0,702,701,1,0,0,0,703,117,1,0,0,0,704,
		711,5,29,0,0,705,706,5,59,0,0,706,711,5,60,0,0,707,711,3,114,57,0,708,
		711,3,122,61,0,709,711,3,72,36,0,710,704,1,0,0,0,710,705,1,0,0,0,710,707,
		1,0,0,0,710,708,1,0,0,0,710,709,1,0,0,0,711,119,1,0,0,0,712,718,5,29,0,
		0,713,714,5,59,0,0,714,718,5,60,0,0,715,718,3,114,57,0,716,718,3,72,36,
		0,717,712,1,0,0,0,717,713,1,0,0,0,717,715,1,0,0,0,717,716,1,0,0,0,718,
		121,1,0,0,0,719,720,5,63,0,0,720,123,1,0,0,0,721,726,5,29,0,0,722,723,
		5,59,0,0,723,726,5,60,0,0,724,726,3,114,57,0,725,721,1,0,0,0,725,722,1,
		0,0,0,725,724,1,0,0,0,726,125,1,0,0,0,727,728,5,64,0,0,728,732,5,61,0,
		0,729,730,5,6,0,0,730,732,3,114,57,0,731,727,1,0,0,0,731,729,1,0,0,0,732,
		127,1,0,0,0,733,734,5,1,0,0,734,735,5,52,0,0,735,736,5,3,0,0,736,737,3,
		142,71,0,737,738,5,4,0,0,738,739,5,6,0,0,739,740,3,72,36,0,740,129,1,0,
		0,0,741,742,5,8,0,0,742,743,5,65,0,0,743,744,5,6,0,0,744,745,3,72,36,0,
		745,746,5,9,0,0,746,749,3,142,71,0,747,748,5,16,0,0,748,750,3,136,68,0,
		749,747,1,0,0,0,749,750,1,0,0,0,750,131,1,0,0,0,751,752,5,17,0,0,752,753,
		5,65,0,0,753,754,7,1,0,0,754,755,3,72,36,0,755,756,5,19,0,0,756,759,3,
		118,59,0,757,758,5,16,0,0,758,760,3,136,68,0,759,757,1,0,0,0,759,760,1,
		0,0,0,760,133,1,0,0,0,761,762,5,7,0,0,762,763,5,65,0,0,763,764,7,1,0,0,
		764,767,3,72,36,0,765,766,5,16,0,0,766,768,3,136,68,0,767,765,1,0,0,0,
		767,768,1,0,0,0,768,135,1,0,0,0,769,772,3,138,69,0,770,771,7,4,0,0,771,
		773,3,136,68,0,772,770,1,0,0,0,772,773,1,0,0,0,773,137,1,0,0,0,774,777,
		3,140,70,0,775,776,7,4,0,0,776,778,3,138,69,0,777,775,1,0,0,0,777,778,
		1,0,0,0,778,796,1,0,0,0,779,780,5,3,0,0,780,783,3,140,70,0,781,782,7,4,
		0,0,782,784,3,138,69,0,783,781,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,
		785,786,5,4,0,0,786,796,1,0,0,0,787,788,5,3,0,0,788,791,3,138,69,0,789,
		790,7,4,0,0,790,792,3,138,69,0,791,789,1,0,0,0,791,792,1,0,0,0,792,793,
		1,0,0,0,793,794,5,4,0,0,794,796,1,0,0,0,795,774,1,0,0,0,795,779,1,0,0,
		0,795,787,1,0,0,0,796,139,1,0,0,0,797,798,5,32,0,0,798,799,7,5,0,0,799,
		866,3,148,74,0,800,802,5,32,0,0,801,803,5,34,0,0,802,801,1,0,0,0,802,803,
		1,0,0,0,803,804,1,0,0,0,804,805,5,6,0,0,805,806,5,3,0,0,806,807,3,146,
		73,0,807,808,5,4,0,0,808,866,1,0,0,0,809,810,5,11,0,0,810,811,7,5,0,0,
		811,866,3,200,100,0,812,814,5,11,0,0,813,815,5,34,0,0,814,813,1,0,0,0,
		814,815,1,0,0,0,815,816,1,0,0,0,816,817,5,6,0,0,817,818,5,3,0,0,818,819,
		3,198,99,0,819,820,5,4,0,0,820,866,1,0,0,0,821,826,5,11,0,0,822,827,5,
		35,0,0,823,824,5,36,0,0,824,825,5,34,0,0,825,827,5,37,0,0,826,822,1,0,
		0,0,826,823,1,0,0,0,827,829,1,0,0,0,828,830,5,38,0,0,829,828,1,0,0,0,829,
		830,1,0,0,0,830,831,1,0,0,0,831,866,3,180,90,0,832,834,5,11,0,0,833,835,
		5,34,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,6,0,
		0,837,838,5,3,0,0,838,839,3,182,91,0,839,840,5,4,0,0,840,866,1,0,0,0,841,
		843,5,11,0,0,842,844,5,34,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,
		1,0,0,0,845,846,5,39,0,0,846,866,3,200,100,0,847,852,5,11,0,0,848,853,
		5,40,0,0,849,850,5,36,0,0,850,851,5,34,0,0,851,853,5,41,0,0,852,848,1,
		0,0,0,852,849,1,0,0,0,853,854,1,0,0,0,854,855,5,42,0,0,855,866,3,200,100,
		0,856,861,5,11,0,0,857,862,5,43,0,0,858,859,5,36,0,0,859,860,5,34,0,0,
		860,862,5,44,0,0,861,857,1,0,0,0,861,858,1,0,0,0,862,863,1,0,0,0,863,864,
		5,42,0,0,864,866,3,200,100,0,865,797,1,0,0,0,865,800,1,0,0,0,865,809,1,
		0,0,0,865,812,1,0,0,0,865,821,1,0,0,0,865,832,1,0,0,0,865,841,1,0,0,0,
		865,847,1,0,0,0,865,856,1,0,0,0,866,141,1,0,0,0,867,870,3,144,72,0,868,
		869,5,10,0,0,869,871,3,142,71,0,870,868,1,0,0,0,870,871,1,0,0,0,871,143,
		1,0,0,0,872,873,5,66,0,0,873,874,5,11,0,0,874,875,5,12,0,0,875,902,3,200,
		100,0,876,877,5,67,0,0,877,878,5,11,0,0,878,879,5,12,0,0,879,902,3,200,
		100,0,880,881,5,68,0,0,881,882,5,12,0,0,882,902,7,10,0,0,883,884,5,72,
		0,0,884,885,5,73,0,0,885,902,3,200,100,0,886,887,5,74,0,0,887,888,5,73,
		0,0,888,902,3,200,100,0,889,890,5,75,0,0,890,891,5,76,0,0,891,892,5,12,
		0,0,892,902,3,200,100,0,893,894,5,75,0,0,894,895,5,77,0,0,895,896,5,12,
		0,0,896,902,3,200,100,0,897,898,5,75,0,0,898,899,5,78,0,0,899,900,5,12,
		0,0,900,902,3,200,100,0,901,872,1,0,0,0,901,876,1,0,0,0,901,880,1,0,0,
		0,901,883,1,0,0,0,901,886,1,0,0,0,901,889,1,0,0,0,901,893,1,0,0,0,901,
		897,1,0,0,0,902,145,1,0,0,0,903,906,3,148,74,0,904,905,5,10,0,0,905,907,
		3,146,73,0,906,904,1,0,0,0,906,907,1,0,0,0,907,147,1,0,0,0,908,911,7,11,
		0,0,909,910,7,12,0,0,910,912,3,148,74,0,911,909,1,0,0,0,911,912,1,0,0,
		0,912,149,1,0,0,0,913,915,5,83,0,0,914,913,1,0,0,0,914,915,1,0,0,0,915,
		916,1,0,0,0,916,917,7,13,0,0,917,151,1,0,0,0,918,919,5,87,0,0,919,920,
		5,105,0,0,920,153,1,0,0,0,921,925,3,156,78,0,922,925,3,158,79,0,923,925,
		3,160,80,0,924,921,1,0,0,0,924,922,1,0,0,0,924,923,1,0,0,0,925,155,1,0,
		0,0,926,927,5,88,0,0,927,928,3,72,36,0,928,929,5,30,0,0,929,930,3,72,36,
		0,930,157,1,0,0,0,931,932,5,88,0,0,932,933,3,76,38,0,933,934,5,30,0,0,
		934,935,3,76,38,0,935,159,1,0,0,0,936,937,5,88,0,0,937,938,5,89,0,0,938,
		939,5,65,0,0,939,940,5,6,0,0,940,941,3,72,36,0,941,942,5,30,0,0,942,943,
		3,72,36,0,943,161,1,0,0,0,944,945,5,59,0,0,945,951,5,60,0,0,946,951,3,
		114,57,0,947,951,3,122,61,0,948,951,3,72,36,0,949,951,3,74,37,0,950,944,
		1,0,0,0,950,946,1,0,0,0,950,947,1,0,0,0,950,948,1,0,0,0,950,949,1,0,0,
		0,951,163,1,0,0,0,952,960,5,29,0,0,953,954,5,59,0,0,954,960,5,60,0,0,955,
		960,3,114,57,0,956,960,3,122,61,0,957,960,3,72,36,0,958,960,3,74,37,0,
		959,952,1,0,0,0,959,953,1,0,0,0,959,955,1,0,0,0,959,956,1,0,0,0,959,957,
		1,0,0,0,959,958,1,0,0,0,960,165,1,0,0,0,961,962,5,17,0,0,962,963,5,90,
		0,0,963,964,7,1,0,0,964,965,3,162,81,0,965,966,5,19,0,0,966,969,3,164,
		82,0,967,968,5,16,0,0,968,970,3,174,87,0,969,967,1,0,0,0,969,970,1,0,0,
		0,970,167,1,0,0,0,971,972,5,91,0,0,972,973,5,90,0,0,973,974,7,1,0,0,974,
		977,3,72,36,0,975,976,5,16,0,0,976,978,3,174,87,0,977,975,1,0,0,0,977,
		978,1,0,0,0,978,169,1,0,0,0,979,980,5,92,0,0,980,981,5,90,0,0,981,982,
		7,1,0,0,982,985,3,72,36,0,983,984,5,16,0,0,984,986,3,174,87,0,985,983,
		1,0,0,0,985,986,1,0,0,0,986,171,1,0,0,0,987,988,5,7,0,0,988,989,5,90,0,
		0,989,992,7,1,0,0,990,993,3,72,36,0,991,993,3,74,37,0,992,990,1,0,0,0,
		992,991,1,0,0,0,993,996,1,0,0,0,994,995,5,16,0,0,995,997,3,174,87,0,996,
		994,1,0,0,0,996,997,1,0,0,0,997,173,1,0,0,0,998,1001,3,176,88,0,999,1000,
		7,4,0,0,1000,1002,3,174,87,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,175,
		1,0,0,0,1003,1006,3,178,89,0,1004,1005,7,4,0,0,1005,1007,3,176,88,0,1006,
		1004,1,0,0,0,1006,1007,1,0,0,0,1007,1025,1,0,0,0,1008,1009,5,3,0,0,1009,
		1012,3,178,89,0,1010,1011,7,4,0,0,1011,1013,3,176,88,0,1012,1010,1,0,0,
		0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1015,5,4,0,0,1015,1025,1,0,
		0,0,1016,1017,5,3,0,0,1017,1020,3,176,88,0,1018,1019,7,4,0,0,1019,1021,
		3,176,88,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,
		1023,5,4,0,0,1023,1025,1,0,0,0,1024,1003,1,0,0,0,1024,1008,1,0,0,0,1024,
		1016,1,0,0,0,1025,177,1,0,0,0,1026,1027,5,32,0,0,1027,1028,7,5,0,0,1028,
		1238,3,148,74,0,1029,1031,5,32,0,0,1030,1032,5,34,0,0,1031,1030,1,0,0,
		0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1034,5,6,0,0,1034,1035,5,3,
		0,0,1035,1036,3,146,73,0,1036,1037,5,4,0,0,1037,1238,1,0,0,0,1038,1039,
		7,14,0,0,1039,1040,7,5,0,0,1040,1238,3,200,100,0,1041,1043,7,14,0,0,1042,
		1044,5,34,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
		1046,5,6,0,0,1046,1047,5,3,0,0,1047,1048,3,198,99,0,1048,1049,5,4,0,0,
		1049,1238,1,0,0,0,1050,1055,7,14,0,0,1051,1056,5,35,0,0,1052,1053,5,36,
		0,0,1053,1054,5,34,0,0,1054,1056,5,37,0,0,1055,1051,1,0,0,0,1055,1052,
		1,0,0,0,1056,1058,1,0,0,0,1057,1059,5,38,0,0,1058,1057,1,0,0,0,1058,1059,
		1,0,0,0,1059,1060,1,0,0,0,1060,1238,3,180,90,0,1061,1063,7,14,0,0,1062,
		1064,5,34,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,
		1066,5,6,0,0,1066,1067,5,3,0,0,1067,1068,3,198,99,0,1068,1069,5,4,0,0,
		1069,1238,1,0,0,0,1070,1072,7,14,0,0,1071,1073,5,34,0,0,1072,1071,1,0,
		0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1075,5,39,0,0,1075,1238,3,
		200,100,0,1076,1081,7,14,0,0,1077,1082,5,40,0,0,1078,1079,5,36,0,0,1079,
		1080,5,34,0,0,1080,1082,5,41,0,0,1081,1077,1,0,0,0,1081,1078,1,0,0,0,1082,
		1083,1,0,0,0,1083,1084,5,42,0,0,1084,1238,3,200,100,0,1085,1090,7,14,0,
		0,1086,1091,5,43,0,0,1087,1088,5,36,0,0,1088,1089,5,34,0,0,1089,1091,5,
		44,0,0,1090,1086,1,0,0,0,1090,1087,1,0,0,0,1091,1092,1,0,0,0,1092,1093,
		5,42,0,0,1093,1238,3,200,100,0,1094,1096,5,93,0,0,1095,1094,1,0,0,0,1095,
		1096,1,0,0,0,1096,1097,1,0,0,0,1097,1103,5,73,0,0,1098,1100,5,89,0,0,1099,
		1098,1,0,0,0,1099,1100,1,0,0,0,1100,1101,1,0,0,0,1101,1103,5,94,0,0,1102,
		1095,1,0,0,0,1102,1099,1,0,0,0,1103,1104,1,0,0,0,1104,1105,7,5,0,0,1105,
		1238,3,200,100,0,1106,1108,5,93,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,
		0,1108,1109,1,0,0,0,1109,1115,5,73,0,0,1110,1112,5,89,0,0,1111,1110,1,
		0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,5,94,0,0,1114,1107,
		1,0,0,0,1114,1111,1,0,0,0,1115,1117,1,0,0,0,1116,1118,5,34,0,0,1117,1116,
		1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,6,0,0,1120,1121,
		5,3,0,0,1121,1122,3,198,99,0,1122,1123,5,4,0,0,1123,1238,1,0,0,0,1124,
		1126,5,93,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,
		1132,5,73,0,0,1128,1133,5,35,0,0,1129,1130,5,36,0,0,1130,1131,5,34,0,0,
		1131,1133,5,37,0,0,1132,1128,1,0,0,0,1132,1129,1,0,0,0,1133,1135,1,0,0,
		0,1134,1136,5,38,0,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,
		0,0,1137,1238,3,180,90,0,1138,1140,5,93,0,0,1139,1138,1,0,0,0,1139,1140,
		1,0,0,0,1140,1141,1,0,0,0,1141,1146,5,73,0,0,1142,1147,5,40,0,0,1143,1144,
		5,36,0,0,1144,1145,5,34,0,0,1145,1147,5,41,0,0,1146,1142,1,0,0,0,1146,
		1143,1,0,0,0,1147,1148,1,0,0,0,1148,1149,5,42,0,0,1149,1238,3,200,100,
		0,1150,1152,5,93,0,0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,1153,1,0,
		0,0,1153,1158,5,73,0,0,1154,1159,5,43,0,0,1155,1156,5,36,0,0,1156,1157,
		5,34,0,0,1157,1159,5,44,0,0,1158,1154,1,0,0,0,1158,1155,1,0,0,0,1159,1160,
		1,0,0,0,1160,1161,5,42,0,0,1161,1238,3,200,100,0,1162,1164,5,89,0,0,1163,
		1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1170,5,94,0,0,1166,
		1171,5,37,0,0,1167,1168,5,95,0,0,1168,1169,5,34,0,0,1169,1171,5,37,0,0,
		1170,1166,1,0,0,0,1170,1167,1,0,0,0,1171,1173,1,0,0,0,1172,1174,5,38,0,
		0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1238,3,180,
		90,0,1176,1178,5,89,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,
		1,0,0,0,1179,1184,5,94,0,0,1180,1185,5,41,0,0,1181,1182,5,95,0,0,1182,
		1183,5,34,0,0,1183,1185,5,41,0,0,1184,1180,1,0,0,0,1184,1181,1,0,0,0,1185,
		1186,1,0,0,0,1186,1187,5,42,0,0,1187,1238,3,200,100,0,1188,1190,5,89,0,
		0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1196,5,94,
		0,0,1192,1197,5,44,0,0,1193,1194,5,95,0,0,1194,1195,5,34,0,0,1195,1197,
		5,44,0,0,1196,1192,1,0,0,0,1196,1193,1,0,0,0,1197,1198,1,0,0,0,1198,1199,
		5,42,0,0,1199,1238,3,200,100,0,1200,1202,5,93,0,0,1201,1200,1,0,0,0,1201,
		1202,1,0,0,0,1202,1203,1,0,0,0,1203,1209,5,73,0,0,1204,1206,5,89,0,0,1205,
		1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1209,5,94,0,0,1208,
		1201,1,0,0,0,1208,1205,1,0,0,0,1209,1211,1,0,0,0,1210,1212,5,34,0,0,1211,
		1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1214,5,6,0,0,1214,
		1215,5,3,0,0,1215,1216,3,182,91,0,1216,1217,5,4,0,0,1217,1238,1,0,0,0,
		1218,1220,5,93,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,
		0,1221,1227,5,73,0,0,1222,1224,5,89,0,0,1223,1222,1,0,0,0,1223,1224,1,
		0,0,0,1224,1225,1,0,0,0,1225,1227,5,94,0,0,1226,1219,1,0,0,0,1226,1223,
		1,0,0,0,1227,1229,1,0,0,0,1228,1230,5,34,0,0,1229,1228,1,0,0,0,1229,1230,
		1,0,0,0,1230,1231,1,0,0,0,1231,1232,5,39,0,0,1232,1238,3,200,100,0,1233,
		1234,5,96,0,0,1234,1238,5,94,0,0,1235,1236,5,93,0,0,1236,1238,5,94,0,0,
		1237,1026,1,0,0,0,1237,1029,1,0,0,0,1237,1038,1,0,0,0,1237,1041,1,0,0,
		0,1237,1050,1,0,0,0,1237,1061,1,0,0,0,1237,1070,1,0,0,0,1237,1076,1,0,
		0,0,1237,1085,1,0,0,0,1237,1102,1,0,0,0,1237,1114,1,0,0,0,1237,1125,1,
		0,0,0,1237,1139,1,0,0,0,1237,1151,1,0,0,0,1237,1163,1,0,0,0,1237,1177,
		1,0,0,0,1237,1189,1,0,0,0,1237,1208,1,0,0,0,1237,1226,1,0,0,0,1237,1233,
		1,0,0,0,1237,1235,1,0,0,0,1238,179,1,0,0,0,1239,1240,7,15,0,0,1240,181,
		1,0,0,0,1241,1244,3,180,90,0,1242,1243,5,10,0,0,1243,1245,3,182,91,0,1244,
		1242,1,0,0,0,1244,1245,1,0,0,0,1245,183,1,0,0,0,1246,1247,5,17,0,0,1247,
		1248,5,97,0,0,1248,1249,7,1,0,0,1249,1250,3,72,36,0,1250,1251,5,19,0,0,
		1251,1254,3,72,36,0,1252,1253,5,16,0,0,1253,1255,3,192,96,0,1254,1252,
		1,0,0,0,1254,1255,1,0,0,0,1255,185,1,0,0,0,1256,1257,5,8,0,0,1257,1258,
		5,97,0,0,1258,1259,7,1,0,0,1259,1260,3,72,36,0,1260,1261,5,19,0,0,1261,
		1264,3,72,36,0,1262,1263,5,16,0,0,1263,1265,3,192,96,0,1264,1262,1,0,0,
		0,1264,1265,1,0,0,0,1265,187,1,0,0,0,1266,1267,5,7,0,0,1267,1268,5,97,
		0,0,1268,1269,7,1,0,0,1269,1272,3,72,36,0,1270,1271,5,16,0,0,1271,1273,
		3,192,96,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,189,1,0,0,0,1274,1275,
		5,17,0,0,1275,1276,5,97,0,0,1276,1277,7,1,0,0,1277,1278,3,72,36,0,1278,
		1279,5,19,0,0,1279,1282,3,72,36,0,1280,1281,5,16,0,0,1281,1283,3,192,96,
		0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,191,1,0,0,0,1284,1287,3,194,
		97,0,1285,1286,7,4,0,0,1286,1288,3,192,96,0,1287,1285,1,0,0,0,1287,1288,
		1,0,0,0,1288,193,1,0,0,0,1289,1292,3,196,98,0,1290,1291,7,4,0,0,1291,1293,
		3,194,97,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1311,1,0,0,0,1294,
		1295,5,3,0,0,1295,1298,3,196,98,0,1296,1297,7,4,0,0,1297,1299,3,194,97,
		0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,1301,5,4,
		0,0,1301,1311,1,0,0,0,1302,1303,5,3,0,0,1303,1306,3,194,97,0,1304,1305,
		7,4,0,0,1305,1307,3,194,97,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,
		1308,1,0,0,0,1308,1309,5,4,0,0,1309,1311,1,0,0,0,1310,1289,1,0,0,0,1310,
		1294,1,0,0,0,1310,1302,1,0,0,0,1311,195,1,0,0,0,1312,1313,5,32,0,0,1313,
		1314,7,5,0,0,1314,1381,3,148,74,0,1315,1317,5,32,0,0,1316,1318,5,34,0,
		0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,6,
		0,0,1320,1321,5,3,0,0,1321,1322,3,146,73,0,1322,1323,5,4,0,0,1323,1381,
		1,0,0,0,1324,1325,7,16,0,0,1325,1326,7,5,0,0,1326,1381,3,200,100,0,1327,
		1329,7,16,0,0,1328,1330,5,34,0,0,1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,
		1331,1,0,0,0,1331,1332,5,6,0,0,1332,1333,5,3,0,0,1333,1334,3,198,99,0,
		1334,1335,5,4,0,0,1335,1381,1,0,0,0,1336,1341,7,16,0,0,1337,1342,5,35,
		0,0,1338,1339,5,36,0,0,1339,1340,5,34,0,0,1340,1342,5,37,0,0,1341,1337,
		1,0,0,0,1341,1338,1,0,0,0,1342,1344,1,0,0,0,1343,1345,5,38,0,0,1344,1343,
		1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1381,3,180,90,0,1347,
		1349,7,16,0,0,1348,1350,5,34,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,
		1351,1,0,0,0,1351,1352,5,6,0,0,1352,1353,5,3,0,0,1353,1354,3,182,91,0,
		1354,1355,5,4,0,0,1355,1381,1,0,0,0,1356,1358,7,16,0,0,1357,1359,5,34,
		0,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,
		39,0,0,1361,1381,3,200,100,0,1362,1367,7,16,0,0,1363,1368,5,40,0,0,1364,
		1365,5,36,0,0,1365,1366,5,34,0,0,1366,1368,5,41,0,0,1367,1363,1,0,0,0,
		1367,1364,1,0,0,0,1368,1369,1,0,0,0,1369,1370,5,42,0,0,1370,1381,3,200,
		100,0,1371,1376,7,16,0,0,1372,1377,5,43,0,0,1373,1374,5,36,0,0,1374,1375,
		5,34,0,0,1375,1377,5,44,0,0,1376,1372,1,0,0,0,1376,1373,1,0,0,0,1377,1378,
		1,0,0,0,1378,1379,5,42,0,0,1379,1381,3,200,100,0,1380,1312,1,0,0,0,1380,
		1315,1,0,0,0,1380,1324,1,0,0,0,1380,1327,1,0,0,0,1380,1336,1,0,0,0,1380,
		1347,1,0,0,0,1380,1356,1,0,0,0,1380,1362,1,0,0,0,1380,1371,1,0,0,0,1381,
		197,1,0,0,0,1382,1385,3,200,100,0,1383,1384,5,10,0,0,1384,1386,3,198,99,
		0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,199,1,0,0,0,1387,1390,7,9,0,
		0,1388,1389,5,79,0,0,1389,1391,3,200,100,0,1390,1388,1,0,0,0,1390,1391,
		1,0,0,0,1391,201,1,0,0,0,1392,1393,5,98,0,0,1393,1394,5,3,0,0,1394,1395,
		5,4,0,0,1395,1396,5,99,0,0,1396,1397,3,2,1,0,1397,1398,5,100,0,0,1398,
		203,1,0,0,0,158,211,238,247,256,262,270,278,285,299,308,319,322,333,338,
		346,354,360,363,373,378,383,389,397,401,408,420,426,435,438,443,452,461,
		470,474,481,525,527,533,539,545,551,557,564,569,572,581,585,591,594,601,
		606,613,625,643,654,682,688,692,699,702,710,717,725,731,749,759,767,772,
		777,783,791,795,802,814,826,829,834,843,852,861,865,870,901,906,911,914,
		924,950,959,969,977,985,992,996,1001,1006,1012,1020,1024,1031,1043,1055,
		1058,1063,1072,1081,1090,1095,1099,1102,1107,1111,1114,1117,1125,1132,
		1135,1139,1146,1151,1158,1163,1170,1173,1177,1184,1189,1196,1201,1205,
		1208,1211,1219,1223,1226,1229,1237,1244,1254,1264,1272,1282,1287,1292,
		1298,1306,1310,1317,1329,1341,1344,1349,1358,1367,1376,1380,1385,1390
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
