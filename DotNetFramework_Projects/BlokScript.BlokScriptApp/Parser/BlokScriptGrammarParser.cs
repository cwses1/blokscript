//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, STATEMENTEND=107, 
		WS=108, STRINGLITERAL=109, VARID=110, INTLITERAL=111, REGEXLITERAL=112, 
		LINE_COMMENT=113, BLOCK_COMMENT=114;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createSpaceStatement = 3, 
		RULE_copySpaceStatement = 4, RULE_updateSpaceStatement = 5, RULE_deleteSpaceStatement = 6, 
		RULE_spaceUpdateList = 7, RULE_spaceUpdate = 8, RULE_copySpacesStatement = 9, 
		RULE_createBlockStatement = 10, RULE_copyBlockStatement = 11, RULE_updateBlockStatement = 12, 
		RULE_deleteBlockStatement = 13, RULE_longOrShortBlockSpec = 14, RULE_shortBlockSpec = 15, 
		RULE_scriptBlockDef = 16, RULE_createDatasourceStatement = 17, RULE_copyDatasourceStatement = 18, 
		RULE_deleteDatasourceStatement = 19, RULE_updateDatasourceStatement = 20, 
		RULE_datasourceUpdateList = 21, RULE_datasourceUpdate = 22, RULE_createDatasourceEntryStatement = 23, 
		RULE_copyDatasourceEntryStatement = 24, RULE_deleteDatasourceEntryStatement = 25, 
		RULE_updateDatasourceEntryStatement = 26, RULE_longOrShortDatasourceEntrySpec = 27, 
		RULE_datasourceEntryFullSpec = 28, RULE_datasourceEntryShortSpec = 29, 
		RULE_datasourceEntryIdentifier = 30, RULE_datasourceEntryOutputLocation = 31, 
		RULE_updateDatasourceEntriesStatement = 32, RULE_deleteDatasourceEntriesStatement = 33, 
		RULE_copyDatasourceEntriesStatement = 34, RULE_syncDatasourceEntriesStatement = 35, 
		RULE_datasourceEntryCopyOptionList = 36, RULE_datasourceEntryCopyOption = 37, 
		RULE_datasourceEntryUpdateList = 38, RULE_datasourceEntryUpdate = 39, 
		RULE_datasourceEntriesSourceLocation = 40, RULE_urlSpec = 41, RULE_datasourceEntriesTargetLocation = 42, 
		RULE_datasourceEntryConstraintExprList = 43, RULE_datasourceEntryConstraintExpr = 44, 
		RULE_datasourceEntryConstraint = 45, RULE_loginStatement = 46, RULE_loginOnlyStatement = 47, 
		RULE_loginWithGlobalUserNameStatement = 48, RULE_loginWithGlobalPasswordStatement = 49, 
		RULE_loginWithGlobalTokenStatement = 50, RULE_loginWithGlobalUserNameAndPasswordStatement = 51, 
		RULE_varStatement = 52, RULE_spaceVarStatement = 53, RULE_blockVarStatement = 54, 
		RULE_stringVarStatement = 55, RULE_regexVarStatement = 56, RULE_storyVarStatement = 57, 
		RULE_datasourceEntryVarStatement = 58, RULE_spaceSpec = 59, RULE_shortSpaceSpec = 60, 
		RULE_longOrShortSpaceSpec = 61, RULE_blockSpec = 62, RULE_storySpec = 63, 
		RULE_datasourceEntrySpec = 64, RULE_datasourceSpec = 65, RULE_datasourceShortSpec = 66, 
		RULE_assignmentStatement = 67, RULE_spaceAssignmentStatement = 68, RULE_blockAssignmentStatement = 69, 
		RULE_stringAssignmentStatement = 70, RULE_printStatement = 71, RULE_printSpacesStatement = 72, 
		RULE_printVarStatement = 73, RULE_printSpaceStatement = 74, RULE_printStringLiteralStatement = 75, 
		RULE_printSymbolTableStatement = 76, RULE_printLocalCacheStatement = 77, 
		RULE_realDataLocation = 78, RULE_fileSpec = 79, RULE_completeFileSpec = 80, 
		RULE_spaceInputLocation = 81, RULE_spaceOutputLocation = 82, RULE_spacesInputLocation = 83, 
		RULE_spacesOutputLocation = 84, RULE_shortFileSpec = 85, RULE_blockInputLocation = 86, 
		RULE_blockOutputLocation = 87, RULE_blocksInputLocation = 88, RULE_blocksOutputLocation = 89, 
		RULE_storyInputLocation = 90, RULE_storyOutputLocation = 91, RULE_storiesInputLocation = 92, 
		RULE_storiesOutputLocation = 93, RULE_varGetFrom = 94, RULE_updateBlocksStatement = 95, 
		RULE_copyBlocksStatement = 96, RULE_deleteBlocksStatement = 97, RULE_blockConstraintExprList = 98, 
		RULE_blockConstraintExpr = 99, RULE_blockConstraint = 100, RULE_blockUpdateList = 101, 
		RULE_blockUpdate = 102, RULE_intExprList = 103, RULE_intExpr = 104, RULE_verbosityStatement = 105, 
		RULE_waitStatement = 106, RULE_compareStatement = 107, RULE_compareSpacesStatement = 108, 
		RULE_compareBlocksStatement = 109, RULE_compareAllBlocksStatement = 110, 
		RULE_copyStoriesStatement = 111, RULE_publishStoriesStatement = 112, RULE_unpublishStoriesStatement = 113, 
		RULE_deleteStoriesStatement = 114, RULE_storyConstraintExprList = 115, 
		RULE_storyConstraintExpr = 116, RULE_storyConstraint = 117, RULE_regexExpr = 118, 
		RULE_regexExprList = 119, RULE_copyDatasourcesStatement = 120, RULE_updateDatasourcesStatement = 121, 
		RULE_deleteDatasourcesStatement = 122, RULE_syncDatasourcesStatement = 123, 
		RULE_datasourceCopyOptionList = 124, RULE_datasourceCopyOption = 125, 
		RULE_datasourceConstraintExprList = 126, RULE_datasourceConstraintExpr = 127, 
		RULE_datasourceConstraint = 128, RULE_stringExprList = 129, RULE_stringExpr = 130, 
		RULE_varFieldExpr = 131, RULE_fnCallExpr = 132, RULE_fnCallActualArgList = 133, 
		RULE_fnActualArg = 134, RULE_spaceConstraintExprList = 135, RULE_spaceConstraintExpr = 136, 
		RULE_spaceConstraint = 137, RULE_datasourcesInputLocation = 138, RULE_datasourcesOutputLocation = 139, 
		RULE_datasourceInputLocation = 140, RULE_datasourceOutputLocation = 141, 
		RULE_dirSpec = 142, RULE_forEachStatement = 143, RULE_foreachEntityListForTypedVarDecl = 144, 
		RULE_foreachEntityListForUntypedVarDecl = 145, RULE_foreachSpaceListForTypedVarDecl = 146, 
		RULE_foreachSpaceListForUntypedVarDecl = 147, RULE_foreachBlockListForTypedVarDecl = 148, 
		RULE_foreachBlockListForUntypedVarDecl = 149, RULE_foreachDatasourceListForTypedVarDecl = 150, 
		RULE_foreachDatasourceListForUntypedVarDecl = 151, RULE_foreachDatasourceEntryListForTypedVarDecl = 152, 
		RULE_foreachDatasourceEntryListForUntypedVarDecl = 153, RULE_foreachStoryListForTypedVarDecl = 154, 
		RULE_foreachStoryListForUntypedVarDecl = 155, RULE_foreachStringListForTypedVarDecl = 156, 
		RULE_foreachStringListForUntypedVarDecl = 157, RULE_foreachRegexListForTypedVarDecl = 158, 
		RULE_foreachRegexListForUntypedVarDecl = 159, RULE_foreachIntegerListForTypedVarDecl = 160, 
		RULE_foreachIntegerListForUntypedVarDecl = 161, RULE_stringArrayLiteral = 162, 
		RULE_regexArrayLiteral = 163, RULE_intArrayLiteral = 164, RULE_longOrShortDatasourceSpec = 165, 
		RULE_spaceFileSpec = 166, RULE_blockFileSpec = 167, RULE_datasourceFileSpec = 168, 
		RULE_datasourceEntryFileSpec = 169, RULE_storyFileSpec = 170, RULE_untypedVarDecl = 171, 
		RULE_typedVarDecl = 172, RULE_spaceVarDecl = 173, RULE_blockVarDecl = 174, 
		RULE_datasourceVarDecl = 175, RULE_datasourceEntryVarDecl = 176, RULE_storyVarDecl = 177, 
		RULE_stringVarDecl = 178, RULE_regexVarDecl = 179, RULE_integerVarDecl = 180, 
		RULE_datasourceEntriesInputLocation = 181;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createSpaceStatement", "copySpaceStatement", 
		"updateSpaceStatement", "deleteSpaceStatement", "spaceUpdateList", "spaceUpdate", 
		"copySpacesStatement", "createBlockStatement", "copyBlockStatement", "updateBlockStatement", 
		"deleteBlockStatement", "longOrShortBlockSpec", "shortBlockSpec", "scriptBlockDef", 
		"createDatasourceStatement", "copyDatasourceStatement", "deleteDatasourceStatement", 
		"updateDatasourceStatement", "datasourceUpdateList", "datasourceUpdate", 
		"createDatasourceEntryStatement", "copyDatasourceEntryStatement", "deleteDatasourceEntryStatement", 
		"updateDatasourceEntryStatement", "longOrShortDatasourceEntrySpec", "datasourceEntryFullSpec", 
		"datasourceEntryShortSpec", "datasourceEntryIdentifier", "datasourceEntryOutputLocation", 
		"updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"printStatement", "printSpacesStatement", "printVarStatement", "printSpaceStatement", 
		"printStringLiteralStatement", "printSymbolTableStatement", "printLocalCacheStatement", 
		"realDataLocation", "fileSpec", "completeFileSpec", "spaceInputLocation", 
		"spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "updateBlocksStatement", "copyBlocksStatement", 
		"deleteBlocksStatement", "blockConstraintExprList", "blockConstraintExpr", 
		"blockConstraint", "blockUpdateList", "blockUpdate", "intExprList", "intExpr", 
		"verbosityStatement", "waitStatement", "compareStatement", "compareSpacesStatement", 
		"compareBlocksStatement", "compareAllBlocksStatement", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintExprList", "storyConstraintExpr", "storyConstraint", "regexExpr", 
		"regexExprList", "copyDatasourcesStatement", "updateDatasourcesStatement", 
		"deleteDatasourcesStatement", "syncDatasourcesStatement", "datasourceCopyOptionList", 
		"datasourceCopyOption", "datasourceConstraintExprList", "datasourceConstraintExpr", 
		"datasourceConstraint", "stringExprList", "stringExpr", "varFieldExpr", 
		"fnCallExpr", "fnCallActualArgList", "fnActualArg", "spaceConstraintExprList", 
		"spaceConstraintExpr", "spaceConstraint", "datasourcesInputLocation", 
		"datasourcesOutputLocation", "datasourceInputLocation", "datasourceOutputLocation", 
		"dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", "foreachEntityListForUntypedVarDecl", 
		"foreachSpaceListForTypedVarDecl", "foreachSpaceListForUntypedVarDecl", 
		"foreachBlockListForTypedVarDecl", "foreachBlockListForUntypedVarDecl", 
		"foreachDatasourceListForTypedVarDecl", "foreachDatasourceListForUntypedVarDecl", 
		"foreachDatasourceEntryListForTypedVarDecl", "foreachDatasourceEntryListForUntypedVarDecl", 
		"foreachStoryListForTypedVarDecl", "foreachStoryListForUntypedVarDecl", 
		"foreachStringListForTypedVarDecl", "foreachStringListForUntypedVarDecl", 
		"foreachRegexListForTypedVarDecl", "foreachRegexListForUntypedVarDecl", 
		"foreachIntegerListForTypedVarDecl", "foreachIntegerListForUntypedVarDecl", 
		"stringArrayLiteral", "regexArrayLiteral", "intArrayLiteral", "longOrShortDatasourceSpec", 
		"spaceFileSpec", "blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", 
		"storyFileSpec", "untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", 
		"datasourceVarDecl", "datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", 
		"regexVarDecl", "integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'create'", "'space'", "'('", "')'", "'copy'", "'to'", 
		"'update'", "'set'", "'delete'", "','", "'name'", "'='", "'server'", "'location'", 
		"'default'", "'content'", "'type'", "'spaces'", "'from'", "'block'", "'in'", 
		"'{'", "'}'", "'datasource'", "'for'", "'slug'", "'entry'", "'entries'", 
		"'where'", "'sync'", "'skip'", "'updates'", "'creates'", "'value'", "'csv'", 
		"'json'", "'url'", "'and'", "'or'", "'id'", "'!='", "'not'", "'matches'", 
		"'does'", "'match'", "'regex'", "'like'", "'starts'", "'start'", "'with'", 
		"'ends'", "'end'", "'login'", "'global'", "'username'", "'password'", 
		"'token'", "'var'", "'string'", "'story'", "'print'", "'symbol'", "'tables'", 
		"'local'", "'cache'", "'file'", "'on'", "'blocks'", "'technical'", "'display'", 
		"'nestable'", "'universal'", "'add'", "'tag'", "'remove'", "'preview'", 
		"'field'", "'template'", "'screenshot'", "'+'", "'-'", "'*'", "'%'", "'be'", 
		"'quiet'", "'verbose'", "'debugger'", "'wait'", "'compare'", "'all'", 
		"'stories'", "'publish'", "'unpublish'", "'any'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'include'", "'['", "']'", "'directory'", "'foreach'", 
		"'int'", "'datasource entry'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "STATEMENTEND", 
		"WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8665066422740714830L) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 34079551L) != 0)) {
				{
				{
				State = 366;
				statement();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpaceStatementContext createSpaceStatement() {
			return GetRuleContext<CreateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSpaceStatementContext updateSpaceStatement() {
			return GetRuleContext<UpdateSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteSpaceStatementContext deleteSpaceStatement() {
			return GetRuleContext<DeleteSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateBlockStatementContext createBlockStatement() {
			return GetRuleContext<CreateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateBlockStatementContext updateBlockStatement() {
			return GetRuleContext<UpdateBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlockStatementContext deleteBlockStatement() {
			return GetRuleContext<DeleteBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceStatementContext copyDatasourceStatement() {
			return GetRuleContext<CopyDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
			return GetRuleContext<CopyDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				loginStatement();
				State = 373;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				varStatement();
				State = 376;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 378;
				assignmentStatement();
				State = 379;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 381;
				printStatement();
				State = 382;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 384;
				verbosityStatement();
				State = 385;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 387;
				waitStatement();
				State = 388;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 390;
				compareStatement();
				State = 391;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 393;
				createSpaceStatement();
				State = 394;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 396;
				copySpaceStatement();
				State = 397;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 399;
				updateSpaceStatement();
				State = 400;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 402;
				deleteSpaceStatement();
				State = 403;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 405;
				copySpacesStatement();
				State = 406;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 408;
				createBlockStatement();
				State = 409;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 411;
				copyBlockStatement();
				State = 412;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 414;
				updateBlockStatement();
				State = 415;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 417;
				deleteBlockStatement();
				State = 418;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 420;
				copyBlocksStatement();
				State = 421;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 423;
				deleteBlocksStatement();
				State = 424;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 426;
				createDatasourceStatement();
				State = 427;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 429;
				copyDatasourceStatement();
				State = 430;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 432;
				updateDatasourceStatement();
				State = 433;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 435;
				deleteDatasourceStatement();
				State = 436;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 438;
				copyDatasourcesStatement();
				State = 439;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 441;
				deleteDatasourcesStatement();
				State = 442;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 444;
				updateDatasourcesStatement();
				State = 445;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 447;
				copyStoriesStatement();
				State = 448;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 450;
				publishStoriesStatement();
				State = 451;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 453;
				unpublishStoriesStatement();
				State = 454;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 456;
				deleteStoriesStatement();
				State = 457;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 459;
				createDatasourceEntryStatement();
				State = 460;
				Match(STATEMENTEND);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 462;
				copyDatasourceEntryStatement();
				State = 463;
				Match(STATEMENTEND);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 465;
				deleteDatasourceEntryStatement();
				State = 466;
				Match(STATEMENTEND);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 468;
				updateDatasourceEntryStatement();
				State = 469;
				Match(STATEMENTEND);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 471;
				updateDatasourceEntriesStatement();
				State = 472;
				Match(STATEMENTEND);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 474;
				deleteDatasourceEntriesStatement();
				State = 475;
				Match(STATEMENTEND);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 477;
				copyDatasourceEntriesStatement();
				State = 478;
				Match(STATEMENTEND);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 480;
				syncDatasourceEntriesStatement();
				State = 481;
				Match(STATEMENTEND);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 483;
				Match(T__0);
				State = 484;
				Match(STATEMENTEND);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 485;
				scriptBlockDef();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 486;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public CreateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpaceStatementContext createSpaceStatement() {
		CreateSpaceStatementContext _localctx = new CreateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(T__1);
			State = 490;
			Match(T__2);
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 491;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 492;
				Match(T__3);
				State = 493;
				spaceUpdateList();
				State = 494;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(T__5);
			State = 499;
			Match(T__2);
			State = 500;
			longOrShortSpaceSpec();
			State = 501;
			Match(T__6);
			State = 502;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public UpdateSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSpaceStatementContext updateSpaceStatement() {
		UpdateSpaceStatementContext _localctx = new UpdateSpaceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(T__7);
			State = 505;
			Match(T__2);
			State = 506;
			longOrShortSpaceSpec();
			State = 507;
			Match(T__8);
			State = 508;
			spaceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DeleteSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSpaceStatementContext deleteSpaceStatement() {
		DeleteSpaceStatementContext _localctx = new DeleteSpaceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_deleteSpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			Match(T__9);
			State = 511;
			Match(T__2);
			State = 512;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateContext spaceUpdate() {
			return GetRuleContext<SpaceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceUpdateListContext spaceUpdateList() {
			return GetRuleContext<SpaceUpdateListContext>(0);
		}
		public SpaceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateListContext spaceUpdateList() {
		SpaceUpdateListContext _localctx = new SpaceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_spaceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			spaceUpdate();
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 515;
				Match(T__10);
				State = 516;
				spaceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public SpaceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceUpdateContext spaceUpdate() {
		SpaceUpdateContext _localctx = new SpaceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_spaceUpdate);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519;
				Match(T__11);
				State = 520;
				Match(T__12);
				State = 521;
				stringExpr();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522;
				Match(T__13);
				State = 523;
				Match(T__14);
				State = 524;
				Match(T__12);
				State = 525;
				stringExpr();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 3);
				{
				State = 526;
				Match(T__15);
				State = 527;
				Match(T__16);
				State = 528;
				Match(T__17);
				State = 529;
				Match(T__12);
				State = 530;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(T__5);
			State = 534;
			Match(T__18);
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 535;
				Match(T__19);
				State = 536;
				realDataLocation();
				}
			}

			State = 539;
			Match(T__6);
			State = 540;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(T__1);
			State = 543;
			Match(T__20);
			State = 544;
			Match(T__3);
			State = 545;
			blockUpdateList();
			State = 546;
			Match(T__4);
			State = 547;
			Match(T__21);
			State = 548;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(T__5);
			State = 551;
			Match(T__20);
			State = 552;
			longOrShortBlockSpec();
			State = 553;
			Match(T__6);
			State = 554;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public UpdateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlockStatementContext updateBlockStatement() {
		UpdateBlockStatementContext _localctx = new UpdateBlockStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_updateBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__7);
			State = 557;
			Match(T__20);
			State = 558;
			longOrShortBlockSpec();
			State = 559;
			Match(T__8);
			State = 560;
			blockUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortBlockSpecContext longOrShortBlockSpec() {
			return GetRuleContext<LongOrShortBlockSpecContext>(0);
		}
		public DeleteBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlockStatementContext deleteBlockStatement() {
		DeleteBlockStatementContext _localctx = new DeleteBlockStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_deleteBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(T__9);
			State = 563;
			Match(T__20);
			State = 564;
			longOrShortBlockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortBlockSpecContext shortBlockSpec() {
			return GetRuleContext<ShortBlockSpecContext>(0);
		}
		public LongOrShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortBlockSpecContext longOrShortBlockSpec() {
		LongOrShortBlockSpecContext _localctx = new LongOrShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 28, RULE_longOrShortBlockSpec);
		try {
			State = 568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				blockSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				shortBlockSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortBlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public ShortBlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortBlockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortBlockSpecContext shortBlockSpec() {
		ShortBlockSpecContext _localctx = new ShortBlockSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_shortBlockSpec);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 570;
					stringExpr();
					}
					break;
				case 2:
					{
					State = 571;
					Match(VARID);
					}
					break;
				}
				State = 574;
				Match(T__21);
				State = 575;
				longOrShortSpaceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(T__22);
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 580;
				statementList();
				}
				break;
			}
			State = 583;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(T__1);
			State = 586;
			Match(T__24);
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 587;
				stringExpr();
				}
				break;
			case 2:
				{
				State = 588;
				Match(T__3);
				State = 589;
				datasourceUpdateList();
				State = 590;
				Match(T__4);
				}
				break;
			}
			State = 594;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 595;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 596;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceOutputLocationContext datasourceOutputLocation() {
			return GetRuleContext<DatasourceOutputLocationContext>(0);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_copyDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(T__5);
			State = 600;
			Match(T__24);
			State = 601;
			longOrShortDatasourceSpec();
			State = 602;
			Match(T__6);
			State = 603;
			datasourceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(T__9);
			State = 606;
			Match(T__24);
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 607;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 608;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(T__7);
			State = 612;
			Match(T__24);
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 613;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 614;
				datasourceSpec();
				}
				break;
			}
			State = 617;
			Match(T__8);
			State = 618;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 42, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			datasourceUpdate();
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 621;
				Match(T__10);
				State = 622;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 44, RULE_datasourceUpdate);
		try {
			State = 631;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 625;
				Match(T__11);
				State = 626;
				Match(T__12);
				State = 627;
				stringExpr();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				Match(T__26);
				State = 629;
				Match(T__12);
				State = 630;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			Match(T__1);
			State = 634;
			Match(T__24);
			State = 635;
			Match(T__27);
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case STRINGLITERAL:
			case VARID:
				{
				State = 636;
				stringExpr();
				}
				break;
			case T__11:
			case T__34:
				{
				State = 637;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 640;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 641;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 642;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
			return GetRuleContext<LongOrShortDatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
			return GetRuleContext<DatasourceEntryOutputLocationContext>(0);
		}
		public CopyDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntryStatementContext copyDatasourceEntryStatement() {
		CopyDatasourceEntryStatementContext _localctx = new CopyDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_copyDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(T__5);
			State = 646;
			Match(T__24);
			State = 647;
			Match(T__27);
			State = 648;
			longOrShortDatasourceEntrySpec();
			State = 649;
			Match(T__6);
			State = 650;
			datasourceEntryOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(T__9);
			State = 653;
			Match(T__24);
			State = 654;
			Match(T__27);
			State = 655;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(T__7);
			State = 658;
			Match(T__24);
			State = 659;
			Match(T__27);
			State = 660;
			datasourceEntryShortSpec();
			State = 661;
			Match(T__8);
			State = 662;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
			return GetRuleContext<DatasourceEntryFullSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public LongOrShortDatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceEntrySpecContext longOrShortDatasourceEntrySpec() {
		LongOrShortDatasourceEntrySpecContext _localctx = new LongOrShortDatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 54, RULE_longOrShortDatasourceEntrySpec);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664;
				datasourceEntryFullSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				datasourceEntryShortSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 56, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(T__24);
			State = 669;
			Match(T__27);
			State = 670;
			datasourceEntryIdentifier();
			State = 671;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 672;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 58, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			datasourceEntryIdentifier();
			State = 675;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 676;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 678;
				intExpr();
				}
				break;
			case 2:
				{
				State = 679;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 680;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryOutputLocationContext datasourceEntryOutputLocation() {
		DatasourceEntryOutputLocationContext _localctx = new DatasourceEntryOutputLocationContext(Context, State);
		EnterRule(_localctx, 62, RULE_datasourceEntryOutputLocation);
		try {
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				longOrShortDatasourceSpec();
				}
				break;
			case T__35:
			case T__36:
			case T__66:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(T__7);
			State = 688;
			Match(T__24);
			State = 689;
			Match(T__28);
			State = 690;
			Match(T__21);
			State = 691;
			datasourceSpec();
			State = 692;
			Match(T__8);
			State = 693;
			datasourceEntryUpdateList();
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 694;
				Match(T__29);
				State = 695;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(T__9);
			State = 699;
			Match(T__24);
			State = 700;
			Match(T__28);
			State = 701;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 702;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 703;
				datasourceShortSpec();
				}
				break;
			}
			State = 708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 706;
				Match(T__29);
				State = 707;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(T__5);
			State = 711;
			Match(T__24);
			State = 712;
			Match(T__28);
			State = 713;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 714;
			datasourceEntriesSourceLocation();
			State = 715;
			Match(T__6);
			State = 716;
			datasourceEntriesTargetLocation();
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 717;
				Match(T__29);
				State = 718;
				datasourceEntryConstraintExprList();
				}
			}

			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31) {
				{
				State = 721;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(T__30);
			State = 725;
			Match(T__24);
			State = 726;
			Match(T__28);
			State = 727;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 728;
			datasourceEntriesSourceLocation();
			State = 729;
			Match(T__6);
			State = 730;
			datasourceEntriesSourceLocation();
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 731;
				Match(T__29);
				State = 732;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 72, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			datasourceEntryCopyOption();
			State = 738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 736;
				Match(T__10);
				State = 737;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 74, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(T__31);
			State = 741;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25769804036L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 76, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			datasourceEntryUpdate();
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 744;
				Match(T__10);
				State = 745;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 78, RULE_datasourceEntryUpdate);
		try {
			State = 754;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748;
				Match(T__11);
				State = 749;
				Match(T__12);
				State = 750;
				stringExpr();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751;
				Match(T__34);
				State = 752;
				Match(T__12);
				State = 753;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntriesSourceLocation);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756;
				longOrShortDatasourceSpec();
				}
				break;
			case T__35:
			case T__36:
			case T__66:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 82, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35 || _la==T__36) {
				{
				State = 760;
				_la = TokenStream.LA(1);
				if ( !(_la==T__35 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 763;
			Match(T__37);
			State = 764;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 84, RULE_datasourceEntriesTargetLocation);
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				longOrShortDatasourceSpec();
				}
				break;
			case T__35:
			case T__36:
			case T__66:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 86, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			datasourceEntryConstraintExpr();
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38 || _la==T__39) {
				{
				State = 771;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 772;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 775;
				datasourceEntryConstraint();
				State = 778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 776;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 777;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 780;
				Match(T__3);
				State = 781;
				datasourceEntryConstraint();
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 782;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 783;
					datasourceEntryConstraintExpr();
					}
				}

				State = 786;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 788;
				Match(T__3);
				State = 789;
				datasourceEntryConstraintExpr();
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 790;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 791;
					datasourceEntryConstraintExpr();
					}
				}

				State = 794;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 90, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798;
				Match(T__40);
				State = 799;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 800;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801;
				Match(T__40);
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 802;
					Match(T__42);
					}
				}

				State = 805;
				Match(T__21);
				State = 806;
				Match(T__3);
				State = 807;
				intExprList();
				State = 808;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 810;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 811;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 812;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 813;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 814;
					Match(T__42);
					}
				}

				State = 817;
				Match(T__21);
				State = 818;
				Match(T__3);
				State = 821;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 819;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 820;
					regexExprList();
					}
					break;
				}
				State = 823;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 825;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 830;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 826;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 827;
					Match(T__44);
					State = 828;
					Match(T__42);
					State = 829;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 832;
					Match(T__46);
					}
				}

				State = 835;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 836;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 837;
					Match(T__42);
					}
				}

				State = 840;
				Match(T__21);
				State = 841;
				Match(T__3);
				State = 842;
				stringExprList();
				State = 843;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 845;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 846;
					Match(T__42);
					}
				}

				State = 849;
				Match(T__47);
				State = 850;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 851;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 856;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 852;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 853;
					Match(T__44);
					State = 854;
					Match(T__42);
					State = 855;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 858;
				Match(T__50);
				State = 859;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 860;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 865;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 861;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 862;
					Match(T__44);
					State = 863;
					Match(T__42);
					State = 864;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 867;
				Match(T__50);
				State = 868;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_loginStatement);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 871;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 872;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 873;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 874;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 875;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(T__53);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			Match(T__53);
			State = 881;
			Match(T__50);
			State = 882;
			Match(T__54);
			State = 883;
			Match(T__55);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(T__53);
			State = 886;
			Match(T__50);
			State = 887;
			Match(T__54);
			State = 888;
			Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			Match(T__53);
			State = 891;
			Match(T__50);
			State = 892;
			Match(T__54);
			State = 893;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(T__53);
			State = 896;
			Match(T__50);
			State = 897;
			Match(T__54);
			State = 898;
			Match(T__55);
			State = 899;
			Match(T__38);
			State = 900;
			Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_varStatement);
		try {
			State = 922;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 902;
				spaceVarStatement();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 903;
				blockVarStatement();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 3);
				{
				State = 904;
				stringVarStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 4);
				{
				State = 905;
				regexVarStatement();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 5);
				{
				State = 906;
				storyVarStatement();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 6);
				{
				State = 907;
				datasourceEntryVarStatement();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 7);
				{
				State = 908;
				Match(T__58);
				State = 909;
				Match(VARID);
				State = 910;
				Match(T__12);
				State = 920;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 911;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 912;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 913;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 914;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 915;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 916;
					storySpec();
					}
					break;
				case 7:
					{
					State = 917;
					intExpr();
					}
					break;
				case 8:
					{
					State = 918;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 919;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(T__2);
			State = 925;
			Match(VARID);
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 926;
				Match(T__12);
				State = 927;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(T__20);
			State = 931;
			Match(VARID);
			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 932;
				Match(T__12);
				State = 933;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(T__59);
			State = 937;
			Match(VARID);
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 938;
				Match(T__12);
				State = 939;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			Match(T__46);
			State = 943;
			Match(VARID);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 944;
				Match(T__12);
				State = 945;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			Match(T__60);
			State = 949;
			Match(VARID);
			State = 952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 950;
				Match(T__12);
				State = 951;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			Match(T__24);
			State = 955;
			Match(T__27);
			State = 956;
			Match(VARID);
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 957;
				Match(T__12);
				State = 958;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 118, RULE_spaceSpec);
		int _la;
		try {
			State = 967;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 961;
				Match(T__2);
				State = 962;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__21 || _la==T__67) {
					{
					State = 963;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 966;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 120, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 122, RULE_longOrShortSpaceSpec);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 124, RULE_blockSpec);
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975;
				Match(T__20);
				State = 976;
				Match(STRINGLITERAL);
				State = 977;
				Match(T__21);
				State = 980;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 978;
					spaceSpec();
					}
					break;
				case T__66:
					{
					State = 979;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 982;
				Match(T__20);
				State = 983;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_storySpec);
		int _la;
		try {
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 987;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 990;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 988;
					spaceSpec();
					}
					break;
				case T__66:
					{
					State = 989;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 992;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 128, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 1005;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995;
				Match(T__24);
				State = 996;
				Match(T__27);
				State = 1000;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 997;
					intExpr();
					}
					break;
				case 2:
					{
					State = 998;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 999;
					Match(VARID);
					}
					break;
				}
				State = 1002;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1003;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 130, RULE_datasourceSpec);
		int _la;
		try {
			State = 1015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1007;
				Match(T__24);
				State = 1008;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1009;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1012;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case VARID:
					{
					State = 1010;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 1011;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 132, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1018;
			Match(T__21);
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case VARID:
				{
				State = 1019;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 1020;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_assignmentStatement);
		try {
			State = 1029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023;
				Match(VARID);
				State = 1024;
				Match(T__12);
				State = 1025;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1026;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1027;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1028;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(VARID);
			State = 1032;
			Match(T__12);
			State = 1033;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(VARID);
			State = 1036;
			Match(T__12);
			State = 1037;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			Match(VARID);
			State = 1040;
			Match(T__12);
			State = 1041;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_printStatement);
		try {
			State = 1049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1044;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1045;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1046;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1047;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1048;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			Match(T__61);
			State = 1052;
			Match(T__18);
			State = 1053;
			Match(T__19);
			State = 1054;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(T__61);
			State = 1057;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			Match(T__61);
			State = 1060;
			Match(T__2);
			State = 1061;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(T__61);
			State = 1064;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066;
			Match(T__61);
			State = 1067;
			Match(T__62);
			State = 1068;
			Match(T__63);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(T__61);
			State = 1071;
			Match(T__64);
			State = 1072;
			Match(T__65);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 156, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 1074;
				Match(T__13);
				}
				break;
			case T__64:
				{
				State = 1075;
				Match(T__64);
				State = 1076;
				Match(T__65);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 158, RULE_fileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1079;
			Match(T__66);
			State = 1080;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public CompleteFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteFileSpecContext completeFileSpec() {
		CompleteFileSpecContext _localctx = new CompleteFileSpecContext(Context, State);
		EnterRule(_localctx, 160, RULE_completeFileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__35 || _la==T__36) {
				{
				State = 1082;
				_la = TokenStream.LA(1);
				if ( !(_la==T__35 || _la==T__36) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1085;
			Match(T__66);
			State = 1086;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 162, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 164, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 166, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 168, RULE_spacesOutputLocation);
		try {
			State = 1096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094;
				fileSpec();
				}
				break;
			case T__3:
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 170, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 172, RULE_blockInputLocation);
		try {
			State = 1102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1100;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1101;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 174, RULE_blockOutputLocation);
		try {
			State = 1106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 176, RULE_blocksInputLocation);
		try {
			State = 1110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 178, RULE_blocksOutputLocation);
		try {
			State = 1114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1112;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1113;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 180, RULE_storyInputLocation);
		try {
			State = 1118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1116;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1117;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 182, RULE_storyOutputLocation);
		try {
			State = 1122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1121;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_storiesInputLocation);
		try {
			State = 1126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 186, RULE_storiesOutputLocation);
		try {
			State = 1130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 188, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__67:
				{
				State = 1132;
				Match(T__67);
				State = 1133;
				Match(T__13);
				}
				break;
			case T__21:
				{
				State = 1134;
				Match(T__21);
				State = 1135;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			Match(T__7);
			State = 1139;
			Match(T__68);
			State = 1140;
			Match(T__21);
			State = 1141;
			longOrShortSpaceSpec();
			State = 1142;
			Match(T__8);
			State = 1143;
			blockUpdateList();
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1144;
				Match(T__29);
				State = 1145;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			Match(T__5);
			State = 1149;
			Match(T__68);
			State = 1150;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1151;
			longOrShortSpaceSpec();
			State = 1152;
			Match(T__6);
			State = 1153;
			blocksOutputLocation();
			State = 1156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1154;
				Match(T__29);
				State = 1155;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			Match(T__9);
			State = 1159;
			Match(T__68);
			State = 1160;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1161;
			longOrShortSpaceSpec();
			State = 1164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1162;
				Match(T__29);
				State = 1163;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 196, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			blockConstraintExpr();
			State = 1169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38 || _la==T__39) {
				{
				State = 1167;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1168;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 198, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171;
				blockConstraint();
				State = 1174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 1172;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1173;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				Match(T__3);
				State = 1177;
				blockConstraint();
				State = 1180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1178;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1179;
					blockConstraintExpr();
					}
				}

				State = 1182;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1184;
				Match(T__3);
				State = 1185;
				blockConstraintExpr();
				State = 1188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1186;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1187;
					blockConstraintExpr();
					}
				}

				State = 1190;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 200, RULE_blockConstraint);
		int _la;
		try {
			State = 1262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1194;
				Match(T__40);
				State = 1195;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1196;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1197;
				Match(T__40);
				State = 1199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1198;
					Match(T__42);
					}
				}

				State = 1201;
				Match(T__21);
				State = 1202;
				Match(T__3);
				State = 1203;
				intExprList();
				State = 1204;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1206;
				Match(T__11);
				State = 1207;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1208;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1209;
				Match(T__11);
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1210;
					Match(T__42);
					}
				}

				State = 1213;
				Match(T__21);
				State = 1214;
				Match(T__3);
				State = 1215;
				stringExprList();
				State = 1216;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1218;
				Match(T__11);
				State = 1223;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1219;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 1220;
					Match(T__44);
					State = 1221;
					Match(T__42);
					State = 1222;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1225;
					Match(T__46);
					}
				}

				State = 1228;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1229;
				Match(T__11);
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1230;
					Match(T__42);
					}
				}

				State = 1233;
				Match(T__21);
				State = 1234;
				Match(T__3);
				State = 1235;
				regexExprList();
				State = 1236;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1238;
				Match(T__11);
				State = 1240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1239;
					Match(T__42);
					}
				}

				State = 1242;
				Match(T__47);
				State = 1243;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1244;
				Match(T__11);
				State = 1249;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 1245;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 1246;
					Match(T__44);
					State = 1247;
					Match(T__42);
					State = 1248;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1251;
				Match(T__50);
				State = 1252;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1253;
				Match(T__11);
				State = 1258;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1254;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 1255;
					Match(T__44);
					State = 1256;
					Match(T__42);
					State = 1257;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1260;
				Match(T__50);
				State = 1261;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 202, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264;
			blockUpdate();
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1265;
				Match(T__10);
				State = 1266;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 204, RULE_blockUpdate);
		int _la;
		try {
			State = 1298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269;
				Match(T__69);
				State = 1270;
				Match(T__11);
				State = 1271;
				Match(T__12);
				State = 1272;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273;
				Match(T__70);
				State = 1274;
				Match(T__11);
				State = 1275;
				Match(T__12);
				State = 1276;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1277;
				Match(T__17);
				State = 1278;
				Match(T__12);
				State = 1279;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & 108086391056891905L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1280;
				Match(T__73);
				State = 1281;
				Match(T__74);
				State = 1282;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1283;
				Match(T__75);
				State = 1284;
				Match(T__74);
				State = 1285;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1286;
				Match(T__76);
				State = 1287;
				Match(T__77);
				State = 1288;
				Match(T__12);
				State = 1289;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1290;
				Match(T__76);
				State = 1291;
				Match(T__78);
				State = 1292;
				Match(T__12);
				State = 1293;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1294;
				Match(T__76);
				State = 1295;
				Match(T__79);
				State = 1296;
				Match(T__12);
				State = 1297;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 206, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300;
			intExpr();
			State = 1303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1301;
				Match(T__10);
				State = 1302;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 208, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 15L) != 0)) {
				{
				State = 1306;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1307;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__84) {
				{
				State = 1310;
				Match(T__84);
				}
			}

			State = 1313;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			Match(T__88);
			State = 1316;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_compareStatement);
		try {
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1318;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1319;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1320;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323;
			Match(T__89);
			State = 1324;
			spaceSpec();
			State = 1325;
			Match(T__38);
			State = 1326;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328;
			Match(T__89);
			State = 1329;
			blockSpec();
			State = 1330;
			Match(T__38);
			State = 1331;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			Match(T__89);
			State = 1334;
			Match(T__90);
			State = 1335;
			Match(T__68);
			State = 1336;
			Match(T__21);
			State = 1337;
			spaceSpec();
			State = 1338;
			Match(T__38);
			State = 1339;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 222, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1341;
			Match(T__5);
			State = 1342;
			Match(T__91);
			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__50) {
				{
				State = 1343;
				Match(T__50);
				State = 1344;
				Match(T__16);
				}
			}

			State = 1347;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1348;
			storiesInputLocation();
			State = 1349;
			Match(T__6);
			State = 1350;
			storiesOutputLocation();
			State = 1353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1351;
				Match(T__29);
				State = 1352;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 224, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			Match(T__92);
			State = 1356;
			Match(T__91);
			State = 1357;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1358;
			longOrShortSpaceSpec();
			State = 1361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1359;
				Match(T__29);
				State = 1360;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363;
			Match(T__93);
			State = 1364;
			Match(T__91);
			State = 1365;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1366;
			longOrShortSpaceSpec();
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1367;
				Match(T__29);
				State = 1368;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			Match(T__9);
			State = 1372;
			Match(T__91);
			State = 1373;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1374;
			longOrShortSpaceSpec();
			State = 1377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1375;
				Match(T__29);
				State = 1376;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 230, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			storyConstraintExpr();
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38 || _la==T__39) {
				{
				State = 1380;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1381;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 232, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1384;
				storyConstraint();
				State = 1387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1385;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1386;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1389;
				Match(T__3);
				State = 1390;
				storyConstraint();
				State = 1393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1391;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1392;
					storyConstraintExpr();
					}
				}

				State = 1395;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1397;
				Match(T__3);
				State = 1398;
				storyConstraintExpr();
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1399;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1400;
					storyConstraintExpr();
					}
				}

				State = 1403;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 234, RULE_storyConstraint);
		int _la;
		try {
			State = 1618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1407;
				Match(T__40);
				State = 1408;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1409;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410;
				Match(T__40);
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1411;
					Match(T__42);
					}
				}

				State = 1414;
				Match(T__21);
				State = 1415;
				Match(T__3);
				State = 1416;
				intExprList();
				State = 1417;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1419;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1420;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1421;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1422;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1423;
					Match(T__42);
					}
				}

				State = 1426;
				Match(T__21);
				State = 1427;
				Match(T__3);
				State = 1428;
				stringExprList();
				State = 1429;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1431;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1436;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1432;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 1433;
					Match(T__44);
					State = 1434;
					Match(T__42);
					State = 1435;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1438;
					Match(T__46);
					}
				}

				State = 1441;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1442;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1443;
					Match(T__42);
					}
				}

				State = 1446;
				Match(T__21);
				State = 1447;
				Match(T__3);
				State = 1448;
				stringExprList();
				State = 1449;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1451;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1452;
					Match(T__42);
					}
				}

				State = 1455;
				Match(T__47);
				State = 1456;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1457;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1462;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 1458;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 1459;
					Match(T__44);
					State = 1460;
					Match(T__42);
					State = 1461;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1464;
				Match(T__50);
				State = 1465;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1466;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1471;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1467;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 1468;
					Match(T__44);
					State = 1469;
					Match(T__42);
					State = 1470;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1473;
				Match(T__50);
				State = 1474;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1483;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1476;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1475;
						Match(T__94);
						}
					}

					State = 1478;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1480;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1479;
						Match(T__90);
						}
					}

					State = 1482;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1485;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1486;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1495;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1487;
						Match(T__94);
						}
					}

					State = 1490;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1491;
						Match(T__90);
						}
					}

					State = 1494;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1497;
					Match(T__42);
					}
				}

				State = 1500;
				Match(T__21);
				State = 1501;
				Match(T__3);
				State = 1502;
				stringExprList();
				State = 1503;
				Match(T__4);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1505;
					Match(T__94);
					}
				}

				State = 1508;
				Match(T__74);
				State = 1513;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1509;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 1510;
					Match(T__44);
					State = 1511;
					Match(T__42);
					State = 1512;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1515;
					Match(T__46);
					}
				}

				State = 1518;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1519;
					Match(T__94);
					}
				}

				State = 1522;
				Match(T__74);
				State = 1527;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 1523;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 1524;
					Match(T__44);
					State = 1525;
					Match(T__42);
					State = 1526;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1529;
				Match(T__50);
				State = 1530;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1531;
					Match(T__94);
					}
				}

				State = 1534;
				Match(T__74);
				State = 1539;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1535;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 1536;
					Match(T__44);
					State = 1537;
					Match(T__42);
					State = 1538;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1541;
				Match(T__50);
				State = 1542;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1543;
					Match(T__90);
					}
				}

				State = 1546;
				Match(T__95);
				State = 1551;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1547;
					Match(T__45);
					}
					break;
				case T__96:
					{
					State = 1548;
					Match(T__96);
					State = 1549;
					Match(T__42);
					State = 1550;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1553;
					Match(T__46);
					}
				}

				State = 1556;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1557;
					Match(T__90);
					}
				}

				State = 1560;
				Match(T__95);
				State = 1565;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__49:
					{
					State = 1561;
					Match(T__49);
					}
					break;
				case T__96:
					{
					State = 1562;
					Match(T__96);
					State = 1563;
					Match(T__42);
					State = 1564;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1567;
				Match(T__50);
				State = 1568;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1569;
					Match(T__90);
					}
				}

				State = 1572;
				Match(T__95);
				State = 1577;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__52:
					{
					State = 1573;
					Match(T__52);
					}
					break;
				case T__96:
					{
					State = 1574;
					Match(T__96);
					State = 1575;
					Match(T__42);
					State = 1576;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1579;
				Match(T__50);
				State = 1580;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1589;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1581;
						Match(T__94);
						}
					}

					State = 1584;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1586;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1585;
						Match(T__90);
						}
					}

					State = 1588;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1591;
					Match(T__42);
					}
				}

				State = 1594;
				Match(T__21);
				State = 1595;
				Match(T__3);
				State = 1596;
				regexExprList();
				State = 1597;
				Match(T__4);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1607;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1600;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1599;
						Match(T__94);
						}
					}

					State = 1602;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1603;
						Match(T__90);
						}
					}

					State = 1606;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1609;
					Match(T__42);
					}
				}

				State = 1612;
				Match(T__47);
				State = 1613;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1614;
				Match(T__97);
				State = 1615;
				Match(T__95);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1616;
				Match(T__94);
				State = 1617;
				Match(T__95);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 236, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 238, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			regexExpr();
			State = 1625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1623;
				Match(T__10);
				State = 1624;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 240, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(T__5);
			State = 1628;
			Match(T__98);
			State = 1629;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1630;
			longOrShortSpaceSpec();
			State = 1631;
			Match(T__6);
			State = 1632;
			longOrShortSpaceSpec();
			State = 1635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1633;
				Match(T__29);
				State = 1634;
				datasourceConstraintExprList();
				}
			}

			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31 || _la==T__99) {
				{
				State = 1637;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640;
			Match(T__7);
			State = 1641;
			Match(T__98);
			State = 1642;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1643;
			longOrShortSpaceSpec();
			State = 1644;
			Match(T__8);
			State = 1645;
			datasourceUpdateList();
			State = 1648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1646;
				Match(T__29);
				State = 1647;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			Match(T__9);
			State = 1651;
			Match(T__98);
			State = 1652;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1653;
			longOrShortSpaceSpec();
			State = 1656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1654;
				Match(T__29);
				State = 1655;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 246, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			Match(T__5);
			State = 1659;
			Match(T__98);
			State = 1660;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1661;
			longOrShortSpaceSpec();
			State = 1662;
			Match(T__6);
			State = 1663;
			longOrShortSpaceSpec();
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1664;
				Match(T__29);
				State = 1665;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 248, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			datasourceCopyOption();
			State = 1671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1669;
				Match(T__10);
				State = 1670;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 250, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1673;
				Match(T__31);
				State = 1674;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 25769804036L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__99:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675;
				Match(T__99);
				State = 1676;
				Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 252, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679;
			datasourceConstraintExpr();
			State = 1682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38 || _la==T__39) {
				{
				State = 1680;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1681;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 254, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1684;
				datasourceConstraint();
				State = 1687;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1685;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1686;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1689;
				Match(T__3);
				State = 1690;
				datasourceConstraint();
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1691;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1692;
					datasourceConstraintExpr();
					}
				}

				State = 1695;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1697;
				Match(T__3);
				State = 1698;
				datasourceConstraintExpr();
				State = 1701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1699;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1700;
					datasourceConstraintExpr();
					}
				}

				State = 1703;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 256, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1707;
				Match(T__40);
				State = 1708;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1709;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1710;
				Match(T__40);
				State = 1712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1711;
					Match(T__42);
					}
				}

				State = 1714;
				Match(T__21);
				State = 1715;
				Match(T__3);
				State = 1716;
				intExprList();
				State = 1717;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1719;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1720;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1721;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1722;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1723;
					Match(T__42);
					}
				}

				State = 1726;
				Match(T__21);
				State = 1727;
				Match(T__3);
				State = 1728;
				stringExprList();
				State = 1729;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1731;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1736;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1732;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 1733;
					Match(T__44);
					State = 1734;
					Match(T__42);
					State = 1735;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1738;
					Match(T__46);
					}
				}

				State = 1741;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1742;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1743;
					Match(T__42);
					}
				}

				State = 1746;
				Match(T__21);
				State = 1747;
				Match(T__3);
				State = 1748;
				regexExprList();
				State = 1749;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1751;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1752;
					Match(T__42);
					}
				}

				State = 1755;
				Match(T__47);
				State = 1756;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1757;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1762;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 1758;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 1759;
					Match(T__44);
					State = 1760;
					Match(T__42);
					State = 1761;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1764;
				Match(T__50);
				State = 1765;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1766;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1771;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1767;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 1768;
					Match(T__44);
					State = 1769;
					Match(T__42);
					State = 1770;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1773;
				Match(T__50);
				{
				State = 1774;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 258, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777;
			stringExpr();
			State = 1780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1778;
				Match(T__10);
				State = 1779;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarFieldExprContext varFieldExpr() {
			return GetRuleContext<VarFieldExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallExprContext fnCallExpr() {
			return GetRuleContext<FnCallExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 260, RULE_stringExpr);
		int _la;
		try {
			State = 1811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1786;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
				case 1:
					{
					State = 1782;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1783;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1784;
					varFieldExpr();
					}
					break;
				case 4:
					{
					State = 1785;
					fnCallExpr();
					}
					break;
				}
				State = 1790;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1788;
					Match(T__80);
					State = 1789;
					stringExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1792;
				Match(T__3);
				State = 1796;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1793;
					Match(STRINGLITERAL);
					}
					break;
				case 2:
					{
					State = 1794;
					Match(VARID);
					}
					break;
				case 3:
					{
					State = 1795;
					varFieldExpr();
					}
					break;
				}
				State = 1800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__80) {
					{
					State = 1798;
					Match(T__80);
					State = 1799;
					stringExpr();
					}
				}

				State = 1802;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1803;
				Match(T__3);
				State = 1804;
				stringExpr();
				State = 1807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__80) {
					{
					State = 1805;
					Match(T__80);
					State = 1806;
					stringExpr();
					}
				}

				State = 1809;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarFieldExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public VarFieldExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varFieldExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarFieldExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarFieldExprContext varFieldExpr() {
		VarFieldExprContext _localctx = new VarFieldExprContext(Context, State);
		EnterRule(_localctx, 262, RULE_varFieldExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			Match(VARID);
			State = 1814;
			Match(T__100);
			State = 1815;
			stringExpr();
			State = 1816;
			Match(T__101);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallExprContext fnCallExpr() {
		FnCallExprContext _localctx = new FnCallExprContext(Context, State);
		EnterRule(_localctx, 264, RULE_fnCallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818;
			Match(VARID);
			State = 1819;
			Match(T__3);
			State = 1821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 1820;
				fnCallActualArgList();
				}
			}

			State = 1823;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallActualArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FnActualArgContext fnActualArg() {
			return GetRuleContext<FnActualArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnCallActualArgListContext fnCallActualArgList() {
			return GetRuleContext<FnCallActualArgListContext>(0);
		}
		public FnCallActualArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCallActualArgList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallActualArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallActualArgListContext fnCallActualArgList() {
		FnCallActualArgListContext _localctx = new FnCallActualArgListContext(Context, State);
		EnterRule(_localctx, 266, RULE_fnCallActualArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825;
			fnActualArg();
			State = 1828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 1826;
				Match(T__10);
				State = 1827;
				fnCallActualArgList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnActualArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FnActualArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnActualArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnActualArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnActualArgContext fnActualArg() {
		FnActualArgContext _localctx = new FnActualArgContext(Context, State);
		EnterRule(_localctx, 268, RULE_fnActualArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1830;
				Match(VARID);
				State = 1831;
				Match(T__12);
				}
				break;
			}
			State = 1834;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 270, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			spaceConstraintExpr();
			State = 1839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__38 || _la==T__39) {
				{
				State = 1837;
				_la = TokenStream.LA(1);
				if ( !(_la==T__38 || _la==T__39) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1838;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 272, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1841;
				spaceConstraint();
				State = 1844;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1842;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1843;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1846;
				Match(T__3);
				State = 1847;
				spaceConstraint();
				State = 1850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1848;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1849;
					spaceConstraintExpr();
					}
				}

				State = 1852;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1854;
				Match(T__3);
				State = 1855;
				spaceConstraintExpr();
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==T__39) {
					{
					State = 1856;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1857;
					spaceConstraintExpr();
					}
				}

				State = 1860;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 274, RULE_spaceConstraint);
		int _la;
		try {
			State = 1932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1864;
				Match(T__40);
				State = 1865;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1866;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1867;
				Match(T__40);
				State = 1869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1868;
					Match(T__42);
					}
				}

				State = 1871;
				Match(T__21);
				State = 1872;
				Match(T__3);
				State = 1873;
				intExprList();
				State = 1874;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1876;
				Match(T__11);
				State = 1877;
				_la = TokenStream.LA(1);
				if ( !(_la==T__12 || _la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1878;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1879;
				Match(T__11);
				State = 1881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1880;
					Match(T__42);
					}
				}

				State = 1883;
				Match(T__21);
				State = 1884;
				Match(T__3);
				State = 1885;
				stringExprList();
				State = 1886;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1888;
				Match(T__11);
				State = 1893;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1889;
					Match(T__43);
					}
					break;
				case T__44:
					{
					State = 1890;
					Match(T__44);
					State = 1891;
					Match(T__42);
					State = 1892;
					Match(T__45);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__46) {
					{
					State = 1895;
					Match(T__46);
					}
				}

				State = 1898;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1899;
				Match(T__11);
				State = 1901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1900;
					Match(T__42);
					}
				}

				State = 1903;
				Match(T__21);
				State = 1904;
				Match(T__3);
				State = 1905;
				regexExprList();
				State = 1906;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1908;
				Match(T__11);
				State = 1910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__42) {
					{
					State = 1909;
					Match(T__42);
					}
				}

				State = 1912;
				Match(T__47);
				State = 1913;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1914;
				Match(T__11);
				State = 1919;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__48:
					{
					State = 1915;
					Match(T__48);
					}
					break;
				case T__44:
					{
					State = 1916;
					Match(T__44);
					State = 1917;
					Match(T__42);
					State = 1918;
					Match(T__49);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1921;
				Match(T__50);
				State = 1922;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1923;
				Match(T__11);
				State = 1928;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
					{
					State = 1924;
					Match(T__51);
					}
					break;
				case T__44:
					{
					State = 1925;
					Match(T__44);
					State = 1926;
					Match(T__42);
					State = 1927;
					Match(T__52);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1930;
				Match(T__50);
				{
				State = 1931;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 276, RULE_datasourcesInputLocation);
		try {
			State = 1936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1934;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1935;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 278, RULE_datasourcesOutputLocation);
		try {
			State = 1940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1938;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1939;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 280, RULE_datasourceInputLocation);
		try {
			State = 1944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1942;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1943;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 282, RULE_datasourceOutputLocation);
		try {
			State = 1948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1946;
				fileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1947;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 284, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950;
			Match(T__102);
			State = 1951;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 286, RULE_forEachStatement);
		try {
			State = 1969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1953;
				Match(T__103);
				State = 1954;
				Match(T__3);
				State = 1955;
				typedVarDecl();
				State = 1956;
				Match(T__21);
				State = 1957;
				foreachEntityListForTypedVarDecl();
				State = 1958;
				Match(T__4);
				State = 1959;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1961;
				Match(T__103);
				State = 1962;
				Match(T__3);
				State = 1963;
				untypedVarDecl();
				State = 1964;
				Match(T__21);
				State = 1965;
				foreachEntityListForUntypedVarDecl();
				State = 1966;
				Match(T__4);
				State = 1967;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 288, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 1979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1971;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1972;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1973;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1974;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1975;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1976;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1977;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1978;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 290, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 1989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1981;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1982;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1983;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1984;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1985;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1986;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1987;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1988;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 292, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 1991;
				fileSpec();
				}
				break;
			case T__2:
				{
				State = 1992;
				spaceFileSpec();
				}
				break;
			case T__18:
			case T__90:
				{
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1993;
					Match(T__90);
					}
				}

				State = 1996;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 1999;
				Match(T__29);
				State = 2000;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 294, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 2003;
				spaceFileSpec();
				}
				break;
			case T__18:
			case T__90:
				{
				State = 2005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 2004;
					Match(T__90);
					}
				}

				State = 2007;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2010;
				Match(T__29);
				State = 2011;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 296, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 2014;
				fileSpec();
				}
				break;
			case T__20:
				{
				State = 2015;
				blockFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2016;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2019;
				Match(T__29);
				State = 2020;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 298, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				{
				State = 2023;
				blockFileSpec();
				}
				break;
			case T__68:
				{
				State = 2024;
				Match(T__68);
				State = 2025;
				Match(T__21);
				State = 2026;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2029;
				Match(T__29);
				State = 2030;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 300, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 2033;
				fileSpec();
				}
				break;
			case T__24:
				{
				State = 2034;
				datasourceFileSpec();
				}
				break;
			case T__2:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2035;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2038;
				Match(T__29);
				State = 2039;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 302, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				{
				State = 2042;
				datasourceFileSpec();
				}
				break;
			case T__98:
				{
				State = 2043;
				Match(T__98);
				State = 2044;
				Match(T__21);
				State = 2045;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2048;
				Match(T__29);
				State = 2049;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 304, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 2052;
				fileSpec();
				}
				break;
			case T__105:
				{
				State = 2053;
				datasourceEntryFileSpec();
				}
				break;
			case T__24:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2054;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2057;
				Match(T__29);
				State = 2058;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 306, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__105:
				{
				State = 2061;
				datasourceEntryFileSpec();
				}
				break;
			case T__24:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 2062;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2065;
				Match(T__29);
				State = 2066;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				{
				State = 2069;
				fileSpec();
				}
				break;
			case T__60:
				{
				State = 2070;
				storyFileSpec();
				}
				break;
			case T__2:
			case VARID:
				{
				State = 2071;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2074;
				Match(T__29);
				State = 2075;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				{
				State = 2078;
				storyFileSpec();
				}
				break;
			case T__91:
				{
				State = 2079;
				Match(T__91);
				State = 2080;
				Match(T__21);
				State = 2081;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 2084;
				Match(T__29);
				State = 2085;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 2092;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2088;
				fileSpec();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2089;
				Match(T__59);
				State = 2090;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2091;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringArrayLiteralContext stringArrayLiteral() {
			return GetRuleContext<StringArrayLiteralContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 2097;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__59:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2094;
				Match(T__59);
				State = 2095;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2096;
				stringArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 316, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 2103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2099;
				fileSpec();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2100;
				Match(T__46);
				State = 2101;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2102;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexArrayLiteralContext regexArrayLiteral() {
			return GetRuleContext<RegexArrayLiteralContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 318, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 2108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2105;
				Match(T__46);
				State = 2106;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2107;
				regexArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 320, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 2114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2110;
				fileSpec();
				}
				break;
			case T__104:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2111;
				Match(T__104);
				State = 2112;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2113;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntArrayLiteralContext intArrayLiteral() {
			return GetRuleContext<IntArrayLiteralContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 322, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 2119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__104:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2116;
				Match(T__104);
				State = 2117;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2118;
				intArrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringArrayLiteralContext stringArrayLiteral() {
		StringArrayLiteralContext _localctx = new StringArrayLiteralContext(Context, State);
		EnterRule(_localctx, 324, RULE_stringArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2121;
			Match(T__100);
			State = 2123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3 || _la==STRINGLITERAL || _la==VARID) {
				{
				State = 2122;
				stringExprList();
				}
			}

			State = 2125;
			Match(T__101);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexArrayLiteralContext regexArrayLiteral() {
		RegexArrayLiteralContext _localctx = new RegexArrayLiteralContext(Context, State);
		EnterRule(_localctx, 326, RULE_regexArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127;
			Match(T__100);
			State = 2129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 11L) != 0)) {
				{
				State = 2128;
				regexExprList();
				}
			}

			State = 2131;
			Match(T__101);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intArrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntArrayLiteralContext intArrayLiteral() {
		IntArrayLiteralContext _localctx = new IntArrayLiteralContext(Context, State);
		EnterRule(_localctx, 328, RULE_intArrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2133;
			Match(T__100);
			State = 2135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARID || _la==INTLITERAL) {
				{
				State = 2134;
				intExprList();
				}
			}

			State = 2137;
			Match(T__101);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 330, RULE_longOrShortDatasourceSpec);
		try {
			State = 2141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2139;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2140;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 332, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2143;
			Match(T__2);
			State = 2144;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 334, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2146;
			Match(T__20);
			State = 2147;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 336, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2149;
			Match(T__24);
			State = 2150;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 338, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2152;
			Match(T__105);
			State = 2153;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 340, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(T__60);
			State = 2156;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 342, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2158;
			Match(T__58);
			State = 2159;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 344, RULE_typedVarDecl);
		try {
			State = 2169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2161;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2162;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2163;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2164;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2165;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2166;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2167;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2168;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 346, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171;
			Match(T__2);
			State = 2172;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 348, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174;
			Match(T__20);
			State = 2175;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 350, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177;
			Match(T__24);
			State = 2178;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 352, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			Match(T__24);
			State = 2181;
			Match(T__27);
			State = 2182;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 354, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			Match(T__60);
			State = 2185;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 356, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2187;
			Match(T__59);
			State = 2188;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 358, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190;
			Match(T__46);
			State = 2191;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 360, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2193;
			Match(T__104);
			State = 2194;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 362, RULE_datasourceEntriesInputLocation);
		try {
			State = 2198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__66:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2196;
				fileSpec();
				}
				break;
			case T__24:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2197;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,114,2201,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,1,0,1,0,1,
		1,5,1,368,8,1,10,1,12,1,371,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,488,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,497,8,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,518,8,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,532,8,8,1,9,1,9,
		1,9,1,9,3,9,538,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,14,1,14,3,14,569,8,14,1,15,1,15,3,15,573,8,15,1,15,1,15,1,
		15,3,15,578,8,15,1,16,1,16,3,16,582,8,16,1,16,1,16,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,3,17,593,8,17,1,17,1,17,1,17,3,17,598,8,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,610,8,19,1,20,1,20,1,20,1,20,
		3,20,616,8,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,624,8,21,1,22,1,22,1,
		22,1,22,1,22,1,22,3,22,632,8,22,1,23,1,23,1,23,1,23,1,23,3,23,639,8,23,
		1,23,1,23,1,23,3,23,644,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,3,27,667,
		8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		3,30,682,8,30,1,31,1,31,3,31,686,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,3,32,697,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,705,8,33,
		1,33,1,33,3,33,709,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,
		34,720,8,34,1,34,3,34,723,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,3,35,734,8,35,1,36,1,36,1,36,3,36,739,8,36,1,37,1,37,1,37,1,38,1,
		38,1,38,3,38,747,8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,755,8,39,1,40,
		1,40,3,40,759,8,40,1,41,3,41,762,8,41,1,41,1,41,1,41,1,42,1,42,3,42,769,
		8,42,1,43,1,43,1,43,3,43,774,8,43,1,44,1,44,1,44,3,44,779,8,44,1,44,1,
		44,1,44,1,44,3,44,785,8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,793,8,44,
		1,44,1,44,3,44,797,8,44,1,45,1,45,1,45,1,45,1,45,3,45,804,8,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,816,8,45,1,45,1,45,1,45,
		1,45,3,45,822,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,831,8,45,1,
		45,3,45,834,8,45,1,45,1,45,1,45,3,45,839,8,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,3,45,848,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,857,8,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,866,8,45,1,45,1,45,3,45,870,
		8,45,1,46,1,46,1,46,1,46,1,46,3,46,877,8,46,1,47,1,47,1,48,1,48,1,48,1,
		48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
		52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,921,8,52,3,52,923,8,52,
		1,53,1,53,1,53,1,53,3,53,929,8,53,1,54,1,54,1,54,1,54,3,54,935,8,54,1,
		55,1,55,1,55,1,55,3,55,941,8,55,1,56,1,56,1,56,1,56,3,56,947,8,56,1,57,
		1,57,1,57,1,57,3,57,953,8,57,1,58,1,58,1,58,1,58,1,58,3,58,960,8,58,1,
		59,1,59,1,59,3,59,965,8,59,1,59,3,59,968,8,59,1,60,1,60,1,61,1,61,3,61,
		974,8,61,1,62,1,62,1,62,1,62,1,62,3,62,981,8,62,1,62,1,62,3,62,985,8,62,
		1,63,1,63,1,63,1,63,3,63,991,8,63,1,63,3,63,994,8,63,1,64,1,64,1,64,1,
		64,1,64,3,64,1001,8,64,1,64,1,64,1,64,3,64,1006,8,64,1,65,1,65,1,65,1,
		65,1,65,3,65,1013,8,65,1,65,3,65,1016,8,65,1,66,1,66,1,66,1,66,3,66,1022,
		8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1030,8,67,1,68,1,68,1,68,1,68,
		1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,
		3,71,1050,8,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,
		1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,
		1,78,3,78,1078,8,78,1,79,1,79,1,79,1,80,3,80,1084,8,80,1,80,1,80,1,80,
		1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,3,84,1097,8,84,1,85,1,85,1,86,
		1,86,3,86,1103,8,86,1,87,1,87,3,87,1107,8,87,1,88,1,88,3,88,1111,8,88,
		1,89,1,89,3,89,1115,8,89,1,90,1,90,3,90,1119,8,90,1,91,1,91,3,91,1123,
		8,91,1,92,1,92,3,92,1127,8,92,1,93,1,93,3,93,1131,8,93,1,94,1,94,1,94,
		1,94,3,94,1137,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1147,
		8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1157,8,96,1,97,1,97,
		1,97,1,97,1,97,1,97,3,97,1165,8,97,1,98,1,98,1,98,3,98,1170,8,98,1,99,
		1,99,1,99,3,99,1175,8,99,1,99,1,99,1,99,1,99,3,99,1181,8,99,1,99,1,99,
		1,99,1,99,1,99,1,99,3,99,1189,8,99,1,99,1,99,3,99,1193,8,99,1,100,1,100,
		1,100,1,100,1,100,3,100,1200,8,100,1,100,1,100,1,100,1,100,1,100,1,100,
		1,100,1,100,1,100,1,100,3,100,1212,8,100,1,100,1,100,1,100,1,100,1,100,
		1,100,1,100,1,100,1,100,1,100,3,100,1224,8,100,1,100,3,100,1227,8,100,
		1,100,1,100,1,100,3,100,1232,8,100,1,100,1,100,1,100,1,100,1,100,1,100,
		1,100,3,100,1241,8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,
		1250,8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1259,8,100,
		1,100,1,100,3,100,1263,8,100,1,101,1,101,1,101,3,101,1268,8,101,1,102,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		1,102,1,102,1,102,1,102,3,102,1299,8,102,1,103,1,103,1,103,3,103,1304,
		8,103,1,104,1,104,1,104,3,104,1309,8,104,1,105,3,105,1312,8,105,1,105,
		1,105,1,106,1,106,1,106,1,107,1,107,1,107,3,107,1322,8,107,1,108,1,108,
		1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,
		1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,3,111,1346,8,111,1,111,
		1,111,1,111,1,111,1,111,1,111,3,111,1354,8,111,1,112,1,112,1,112,1,112,
		1,112,1,112,3,112,1362,8,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,
		1370,8,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1378,8,114,1,115,
		1,115,1,115,3,115,1383,8,115,1,116,1,116,1,116,3,116,1388,8,116,1,116,
		1,116,1,116,1,116,3,116,1394,8,116,1,116,1,116,1,116,1,116,1,116,1,116,
		3,116,1402,8,116,1,116,1,116,3,116,1406,8,116,1,117,1,117,1,117,1,117,
		1,117,3,117,1413,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
		1,117,1,117,3,117,1425,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
		1,117,1,117,1,117,3,117,1437,8,117,1,117,3,117,1440,8,117,1,117,1,117,
		1,117,3,117,1445,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,
		1454,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1463,8,117,
		1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1472,8,117,1,117,1,117,
		1,117,3,117,1477,8,117,1,117,1,117,3,117,1481,8,117,1,117,3,117,1484,8,
		117,1,117,1,117,1,117,3,117,1489,8,117,1,117,1,117,3,117,1493,8,117,1,
		117,3,117,1496,8,117,1,117,3,117,1499,8,117,1,117,1,117,1,117,1,117,1,
		117,1,117,3,117,1507,8,117,1,117,1,117,1,117,1,117,1,117,3,117,1514,8,
		117,1,117,3,117,1517,8,117,1,117,1,117,3,117,1521,8,117,1,117,1,117,1,
		117,1,117,1,117,3,117,1528,8,117,1,117,1,117,1,117,3,117,1533,8,117,1,
		117,1,117,1,117,1,117,1,117,3,117,1540,8,117,1,117,1,117,1,117,3,117,1545,
		8,117,1,117,1,117,1,117,1,117,1,117,3,117,1552,8,117,1,117,3,117,1555,
		8,117,1,117,1,117,3,117,1559,8,117,1,117,1,117,1,117,1,117,1,117,3,117,
		1566,8,117,1,117,1,117,1,117,3,117,1571,8,117,1,117,1,117,1,117,1,117,
		1,117,3,117,1578,8,117,1,117,1,117,1,117,3,117,1583,8,117,1,117,1,117,
		3,117,1587,8,117,1,117,3,117,1590,8,117,1,117,3,117,1593,8,117,1,117,1,
		117,1,117,1,117,1,117,1,117,3,117,1601,8,117,1,117,1,117,3,117,1605,8,
		117,1,117,3,117,1608,8,117,1,117,3,117,1611,8,117,1,117,1,117,1,117,1,
		117,1,117,1,117,3,117,1619,8,117,1,118,1,118,1,119,1,119,1,119,3,119,1626,
		8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1636,8,120,
		1,120,3,120,1639,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
		3,121,1649,8,121,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1657,8,122,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1667,8,123,1,124,
		1,124,1,124,3,124,1672,8,124,1,125,1,125,1,125,1,125,3,125,1678,8,125,
		1,126,1,126,1,126,3,126,1683,8,126,1,127,1,127,1,127,3,127,1688,8,127,
		1,127,1,127,1,127,1,127,3,127,1694,8,127,1,127,1,127,1,127,1,127,1,127,
		1,127,3,127,1702,8,127,1,127,1,127,3,127,1706,8,127,1,128,1,128,1,128,
		1,128,1,128,3,128,1713,8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
		1,128,1,128,1,128,3,128,1725,8,128,1,128,1,128,1,128,1,128,1,128,1,128,
		1,128,1,128,1,128,1,128,3,128,1737,8,128,1,128,3,128,1740,8,128,1,128,
		1,128,1,128,3,128,1745,8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
		3,128,1754,8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1763,
		8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1772,8,128,1,128,
		1,128,3,128,1776,8,128,1,129,1,129,1,129,3,129,1781,8,129,1,130,1,130,
		1,130,1,130,3,130,1787,8,130,1,130,1,130,3,130,1791,8,130,1,130,1,130,
		1,130,1,130,3,130,1797,8,130,1,130,1,130,3,130,1801,8,130,1,130,1,130,
		1,130,1,130,1,130,3,130,1808,8,130,1,130,1,130,3,130,1812,8,130,1,131,
		1,131,1,131,1,131,1,131,1,132,1,132,1,132,3,132,1822,8,132,1,132,1,132,
		1,133,1,133,1,133,3,133,1829,8,133,1,134,1,134,3,134,1833,8,134,1,134,
		1,134,1,135,1,135,1,135,3,135,1840,8,135,1,136,1,136,1,136,3,136,1845,
		8,136,1,136,1,136,1,136,1,136,3,136,1851,8,136,1,136,1,136,1,136,1,136,
		1,136,1,136,3,136,1859,8,136,1,136,1,136,3,136,1863,8,136,1,137,1,137,
		1,137,1,137,1,137,3,137,1870,8,137,1,137,1,137,1,137,1,137,1,137,1,137,
		1,137,1,137,1,137,1,137,3,137,1882,8,137,1,137,1,137,1,137,1,137,1,137,
		1,137,1,137,1,137,1,137,1,137,3,137,1894,8,137,1,137,3,137,1897,8,137,
		1,137,1,137,1,137,3,137,1902,8,137,1,137,1,137,1,137,1,137,1,137,1,137,
		1,137,3,137,1911,8,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,
		1920,8,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,1929,8,137,
		1,137,1,137,3,137,1933,8,137,1,138,1,138,3,138,1937,8,138,1,139,1,139,
		3,139,1941,8,139,1,140,1,140,3,140,1945,8,140,1,141,1,141,3,141,1949,8,
		141,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,1970,8,143,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,1980,8,144,1,145,1,145,
		1,145,1,145,1,145,1,145,1,145,1,145,3,145,1990,8,145,1,146,1,146,1,146,
		3,146,1995,8,146,1,146,3,146,1998,8,146,1,146,1,146,3,146,2002,8,146,1,
		147,1,147,3,147,2006,8,147,1,147,3,147,2009,8,147,1,147,1,147,3,147,2013,
		8,147,1,148,1,148,1,148,3,148,2018,8,148,1,148,1,148,3,148,2022,8,148,
		1,149,1,149,1,149,1,149,3,149,2028,8,149,1,149,1,149,3,149,2032,8,149,
		1,150,1,150,1,150,3,150,2037,8,150,1,150,1,150,3,150,2041,8,150,1,151,
		1,151,1,151,1,151,3,151,2047,8,151,1,151,1,151,3,151,2051,8,151,1,152,
		1,152,1,152,3,152,2056,8,152,1,152,1,152,3,152,2060,8,152,1,153,1,153,
		3,153,2064,8,153,1,153,1,153,3,153,2068,8,153,1,154,1,154,1,154,3,154,
		2073,8,154,1,154,1,154,3,154,2077,8,154,1,155,1,155,1,155,1,155,3,155,
		2083,8,155,1,155,1,155,3,155,2087,8,155,1,156,1,156,1,156,1,156,3,156,
		2093,8,156,1,157,1,157,1,157,3,157,2098,8,157,1,158,1,158,1,158,1,158,
		3,158,2104,8,158,1,159,1,159,1,159,3,159,2109,8,159,1,160,1,160,1,160,
		1,160,3,160,2115,8,160,1,161,1,161,1,161,3,161,2120,8,161,1,162,1,162,
		3,162,2124,8,162,1,162,1,162,1,163,1,163,3,163,2130,8,163,1,163,1,163,
		1,164,1,164,3,164,2136,8,164,1,164,1,164,1,165,1,165,3,165,2142,8,165,
		1,166,1,166,1,166,1,167,1,167,1,167,1,168,1,168,1,168,1,169,1,169,1,169,
		1,170,1,170,1,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,172,
		1,172,1,172,3,172,2170,8,172,1,173,1,173,1,173,1,174,1,174,1,174,1,175,
		1,175,1,175,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,
		1,179,1,179,1,179,1,180,1,180,1,180,1,181,1,181,3,181,2199,8,181,1,181,
		0,0,182,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
		276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
		312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
		348,350,352,354,356,358,360,362,0,17,2,0,22,22,26,26,2,0,20,20,22,22,3,
		0,2,2,8,8,33,34,1,0,36,37,1,0,39,40,2,0,13,13,42,42,2,0,12,12,35,35,1,
		0,109,111,2,0,109,109,111,111,1,0,109,110,2,0,17,17,72,73,1,0,110,111,
		1,0,81,84,1,0,86,88,2,0,12,12,38,38,2,0,109,110,112,112,2,0,12,12,27,27,
		2410,0,364,1,0,0,0,2,369,1,0,0,0,4,487,1,0,0,0,6,489,1,0,0,0,8,498,1,0,
		0,0,10,504,1,0,0,0,12,510,1,0,0,0,14,514,1,0,0,0,16,531,1,0,0,0,18,533,
		1,0,0,0,20,542,1,0,0,0,22,550,1,0,0,0,24,556,1,0,0,0,26,562,1,0,0,0,28,
		568,1,0,0,0,30,577,1,0,0,0,32,579,1,0,0,0,34,585,1,0,0,0,36,599,1,0,0,
		0,38,605,1,0,0,0,40,611,1,0,0,0,42,620,1,0,0,0,44,631,1,0,0,0,46,633,1,
		0,0,0,48,645,1,0,0,0,50,652,1,0,0,0,52,657,1,0,0,0,54,666,1,0,0,0,56,668,
		1,0,0,0,58,674,1,0,0,0,60,681,1,0,0,0,62,685,1,0,0,0,64,687,1,0,0,0,66,
		698,1,0,0,0,68,710,1,0,0,0,70,724,1,0,0,0,72,735,1,0,0,0,74,740,1,0,0,
		0,76,743,1,0,0,0,78,754,1,0,0,0,80,758,1,0,0,0,82,761,1,0,0,0,84,768,1,
		0,0,0,86,770,1,0,0,0,88,796,1,0,0,0,90,869,1,0,0,0,92,876,1,0,0,0,94,878,
		1,0,0,0,96,880,1,0,0,0,98,885,1,0,0,0,100,890,1,0,0,0,102,895,1,0,0,0,
		104,922,1,0,0,0,106,924,1,0,0,0,108,930,1,0,0,0,110,936,1,0,0,0,112,942,
		1,0,0,0,114,948,1,0,0,0,116,954,1,0,0,0,118,967,1,0,0,0,120,969,1,0,0,
		0,122,973,1,0,0,0,124,984,1,0,0,0,126,993,1,0,0,0,128,1005,1,0,0,0,130,
		1015,1,0,0,0,132,1017,1,0,0,0,134,1029,1,0,0,0,136,1031,1,0,0,0,138,1035,
		1,0,0,0,140,1039,1,0,0,0,142,1049,1,0,0,0,144,1051,1,0,0,0,146,1056,1,
		0,0,0,148,1059,1,0,0,0,150,1063,1,0,0,0,152,1066,1,0,0,0,154,1070,1,0,
		0,0,156,1077,1,0,0,0,158,1079,1,0,0,0,160,1083,1,0,0,0,162,1088,1,0,0,
		0,164,1090,1,0,0,0,166,1092,1,0,0,0,168,1096,1,0,0,0,170,1098,1,0,0,0,
		172,1102,1,0,0,0,174,1106,1,0,0,0,176,1110,1,0,0,0,178,1114,1,0,0,0,180,
		1118,1,0,0,0,182,1122,1,0,0,0,184,1126,1,0,0,0,186,1130,1,0,0,0,188,1136,
		1,0,0,0,190,1138,1,0,0,0,192,1148,1,0,0,0,194,1158,1,0,0,0,196,1166,1,
		0,0,0,198,1192,1,0,0,0,200,1262,1,0,0,0,202,1264,1,0,0,0,204,1298,1,0,
		0,0,206,1300,1,0,0,0,208,1305,1,0,0,0,210,1311,1,0,0,0,212,1315,1,0,0,
		0,214,1321,1,0,0,0,216,1323,1,0,0,0,218,1328,1,0,0,0,220,1333,1,0,0,0,
		222,1341,1,0,0,0,224,1355,1,0,0,0,226,1363,1,0,0,0,228,1371,1,0,0,0,230,
		1379,1,0,0,0,232,1405,1,0,0,0,234,1618,1,0,0,0,236,1620,1,0,0,0,238,1622,
		1,0,0,0,240,1627,1,0,0,0,242,1640,1,0,0,0,244,1650,1,0,0,0,246,1658,1,
		0,0,0,248,1668,1,0,0,0,250,1677,1,0,0,0,252,1679,1,0,0,0,254,1705,1,0,
		0,0,256,1775,1,0,0,0,258,1777,1,0,0,0,260,1811,1,0,0,0,262,1813,1,0,0,
		0,264,1818,1,0,0,0,266,1825,1,0,0,0,268,1832,1,0,0,0,270,1836,1,0,0,0,
		272,1862,1,0,0,0,274,1932,1,0,0,0,276,1936,1,0,0,0,278,1940,1,0,0,0,280,
		1944,1,0,0,0,282,1948,1,0,0,0,284,1950,1,0,0,0,286,1969,1,0,0,0,288,1979,
		1,0,0,0,290,1989,1,0,0,0,292,1997,1,0,0,0,294,2008,1,0,0,0,296,2017,1,
		0,0,0,298,2027,1,0,0,0,300,2036,1,0,0,0,302,2046,1,0,0,0,304,2055,1,0,
		0,0,306,2063,1,0,0,0,308,2072,1,0,0,0,310,2082,1,0,0,0,312,2092,1,0,0,
		0,314,2097,1,0,0,0,316,2103,1,0,0,0,318,2108,1,0,0,0,320,2114,1,0,0,0,
		322,2119,1,0,0,0,324,2121,1,0,0,0,326,2127,1,0,0,0,328,2133,1,0,0,0,330,
		2141,1,0,0,0,332,2143,1,0,0,0,334,2146,1,0,0,0,336,2149,1,0,0,0,338,2152,
		1,0,0,0,340,2155,1,0,0,0,342,2158,1,0,0,0,344,2169,1,0,0,0,346,2171,1,
		0,0,0,348,2174,1,0,0,0,350,2177,1,0,0,0,352,2180,1,0,0,0,354,2184,1,0,
		0,0,356,2187,1,0,0,0,358,2190,1,0,0,0,360,2193,1,0,0,0,362,2198,1,0,0,
		0,364,365,3,2,1,0,365,1,1,0,0,0,366,368,3,4,2,0,367,366,1,0,0,0,368,371,
		1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,3,1,0,0,0,371,369,1,0,0,0,
		372,373,3,92,46,0,373,374,5,107,0,0,374,488,1,0,0,0,375,376,3,104,52,0,
		376,377,5,107,0,0,377,488,1,0,0,0,378,379,3,134,67,0,379,380,5,107,0,0,
		380,488,1,0,0,0,381,382,3,142,71,0,382,383,5,107,0,0,383,488,1,0,0,0,384,
		385,3,210,105,0,385,386,5,107,0,0,386,488,1,0,0,0,387,388,3,212,106,0,
		388,389,5,107,0,0,389,488,1,0,0,0,390,391,3,214,107,0,391,392,5,107,0,
		0,392,488,1,0,0,0,393,394,3,6,3,0,394,395,5,107,0,0,395,488,1,0,0,0,396,
		397,3,8,4,0,397,398,5,107,0,0,398,488,1,0,0,0,399,400,3,10,5,0,400,401,
		5,107,0,0,401,488,1,0,0,0,402,403,3,12,6,0,403,404,5,107,0,0,404,488,1,
		0,0,0,405,406,3,18,9,0,406,407,5,107,0,0,407,488,1,0,0,0,408,409,3,20,
		10,0,409,410,5,107,0,0,410,488,1,0,0,0,411,412,3,22,11,0,412,413,5,107,
		0,0,413,488,1,0,0,0,414,415,3,24,12,0,415,416,5,107,0,0,416,488,1,0,0,
		0,417,418,3,26,13,0,418,419,5,107,0,0,419,488,1,0,0,0,420,421,3,192,96,
		0,421,422,5,107,0,0,422,488,1,0,0,0,423,424,3,194,97,0,424,425,5,107,0,
		0,425,488,1,0,0,0,426,427,3,34,17,0,427,428,5,107,0,0,428,488,1,0,0,0,
		429,430,3,36,18,0,430,431,5,107,0,0,431,488,1,0,0,0,432,433,3,40,20,0,
		433,434,5,107,0,0,434,488,1,0,0,0,435,436,3,38,19,0,436,437,5,107,0,0,
		437,488,1,0,0,0,438,439,3,240,120,0,439,440,5,107,0,0,440,488,1,0,0,0,
		441,442,3,244,122,0,442,443,5,107,0,0,443,488,1,0,0,0,444,445,3,242,121,
		0,445,446,5,107,0,0,446,488,1,0,0,0,447,448,3,222,111,0,448,449,5,107,
		0,0,449,488,1,0,0,0,450,451,3,224,112,0,451,452,5,107,0,0,452,488,1,0,
		0,0,453,454,3,226,113,0,454,455,5,107,0,0,455,488,1,0,0,0,456,457,3,228,
		114,0,457,458,5,107,0,0,458,488,1,0,0,0,459,460,3,46,23,0,460,461,5,107,
		0,0,461,488,1,0,0,0,462,463,3,48,24,0,463,464,5,107,0,0,464,488,1,0,0,
		0,465,466,3,50,25,0,466,467,5,107,0,0,467,488,1,0,0,0,468,469,3,52,26,
		0,469,470,5,107,0,0,470,488,1,0,0,0,471,472,3,64,32,0,472,473,5,107,0,
		0,473,488,1,0,0,0,474,475,3,66,33,0,475,476,5,107,0,0,476,488,1,0,0,0,
		477,478,3,68,34,0,478,479,5,107,0,0,479,488,1,0,0,0,480,481,3,70,35,0,
		481,482,5,107,0,0,482,488,1,0,0,0,483,484,5,1,0,0,484,488,5,107,0,0,485,
		488,3,32,16,0,486,488,3,286,143,0,487,372,1,0,0,0,487,375,1,0,0,0,487,
		378,1,0,0,0,487,381,1,0,0,0,487,384,1,0,0,0,487,387,1,0,0,0,487,390,1,
		0,0,0,487,393,1,0,0,0,487,396,1,0,0,0,487,399,1,0,0,0,487,402,1,0,0,0,
		487,405,1,0,0,0,487,408,1,0,0,0,487,411,1,0,0,0,487,414,1,0,0,0,487,417,
		1,0,0,0,487,420,1,0,0,0,487,423,1,0,0,0,487,426,1,0,0,0,487,429,1,0,0,
		0,487,432,1,0,0,0,487,435,1,0,0,0,487,438,1,0,0,0,487,441,1,0,0,0,487,
		444,1,0,0,0,487,447,1,0,0,0,487,450,1,0,0,0,487,453,1,0,0,0,487,456,1,
		0,0,0,487,459,1,0,0,0,487,462,1,0,0,0,487,465,1,0,0,0,487,468,1,0,0,0,
		487,471,1,0,0,0,487,474,1,0,0,0,487,477,1,0,0,0,487,480,1,0,0,0,487,483,
		1,0,0,0,487,485,1,0,0,0,487,486,1,0,0,0,488,5,1,0,0,0,489,490,5,2,0,0,
		490,496,5,3,0,0,491,497,3,260,130,0,492,493,5,4,0,0,493,494,3,14,7,0,494,
		495,5,5,0,0,495,497,1,0,0,0,496,491,1,0,0,0,496,492,1,0,0,0,497,7,1,0,
		0,0,498,499,5,6,0,0,499,500,5,3,0,0,500,501,3,122,61,0,501,502,5,7,0,0,
		502,503,3,164,82,0,503,9,1,0,0,0,504,505,5,8,0,0,505,506,5,3,0,0,506,507,
		3,122,61,0,507,508,5,9,0,0,508,509,3,14,7,0,509,11,1,0,0,0,510,511,5,10,
		0,0,511,512,5,3,0,0,512,513,3,122,61,0,513,13,1,0,0,0,514,517,3,16,8,0,
		515,516,5,11,0,0,516,518,3,14,7,0,517,515,1,0,0,0,517,518,1,0,0,0,518,
		15,1,0,0,0,519,520,5,12,0,0,520,521,5,13,0,0,521,532,3,260,130,0,522,523,
		5,14,0,0,523,524,5,15,0,0,524,525,5,13,0,0,525,532,3,260,130,0,526,527,
		5,16,0,0,527,528,5,17,0,0,528,529,5,18,0,0,529,530,5,13,0,0,530,532,3,
		260,130,0,531,519,1,0,0,0,531,522,1,0,0,0,531,526,1,0,0,0,532,17,1,0,0,
		0,533,534,5,6,0,0,534,537,5,19,0,0,535,536,5,20,0,0,536,538,3,156,78,0,
		537,535,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,5,7,0,0,540,541,
		3,168,84,0,541,19,1,0,0,0,542,543,5,2,0,0,543,544,5,21,0,0,544,545,5,4,
		0,0,545,546,3,202,101,0,546,547,5,5,0,0,547,548,5,22,0,0,548,549,3,122,
		61,0,549,21,1,0,0,0,550,551,5,6,0,0,551,552,5,21,0,0,552,553,3,28,14,0,
		553,554,5,7,0,0,554,555,3,174,87,0,555,23,1,0,0,0,556,557,5,8,0,0,557,
		558,5,21,0,0,558,559,3,28,14,0,559,560,5,9,0,0,560,561,3,202,101,0,561,
		25,1,0,0,0,562,563,5,10,0,0,563,564,5,21,0,0,564,565,3,28,14,0,565,27,
		1,0,0,0,566,569,3,124,62,0,567,569,3,30,15,0,568,566,1,0,0,0,568,567,1,
		0,0,0,569,29,1,0,0,0,570,573,3,260,130,0,571,573,5,110,0,0,572,570,1,0,
		0,0,572,571,1,0,0,0,573,574,1,0,0,0,574,575,5,22,0,0,575,578,3,122,61,
		0,576,578,5,110,0,0,577,572,1,0,0,0,577,576,1,0,0,0,578,31,1,0,0,0,579,
		581,5,23,0,0,580,582,3,2,1,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,
		0,0,0,583,584,5,24,0,0,584,33,1,0,0,0,585,586,5,2,0,0,586,592,5,25,0,0,
		587,593,3,260,130,0,588,589,5,4,0,0,589,590,3,42,21,0,590,591,5,5,0,0,
		591,593,1,0,0,0,592,587,1,0,0,0,592,588,1,0,0,0,593,594,1,0,0,0,594,597,
		7,0,0,0,595,598,3,118,59,0,596,598,3,120,60,0,597,595,1,0,0,0,597,596,
		1,0,0,0,598,35,1,0,0,0,599,600,5,6,0,0,600,601,5,25,0,0,601,602,3,330,
		165,0,602,603,5,7,0,0,603,604,3,282,141,0,604,37,1,0,0,0,605,606,5,10,
		0,0,606,609,5,25,0,0,607,610,3,132,66,0,608,610,3,130,65,0,609,607,1,0,
		0,0,609,608,1,0,0,0,610,39,1,0,0,0,611,612,5,8,0,0,612,615,5,25,0,0,613,
		616,3,132,66,0,614,616,3,130,65,0,615,613,1,0,0,0,615,614,1,0,0,0,616,
		617,1,0,0,0,617,618,5,9,0,0,618,619,3,42,21,0,619,41,1,0,0,0,620,623,3,
		44,22,0,621,622,5,11,0,0,622,624,3,42,21,0,623,621,1,0,0,0,623,624,1,0,
		0,0,624,43,1,0,0,0,625,626,5,12,0,0,626,627,5,13,0,0,627,632,3,260,130,
		0,628,629,5,27,0,0,629,630,5,13,0,0,630,632,3,260,130,0,631,625,1,0,0,
		0,631,628,1,0,0,0,632,45,1,0,0,0,633,634,5,2,0,0,634,635,5,25,0,0,635,
		638,5,28,0,0,636,639,3,260,130,0,637,639,3,76,38,0,638,636,1,0,0,0,638,
		637,1,0,0,0,639,640,1,0,0,0,640,643,7,0,0,0,641,644,3,130,65,0,642,644,
		3,132,66,0,643,641,1,0,0,0,643,642,1,0,0,0,644,47,1,0,0,0,645,646,5,6,
		0,0,646,647,5,25,0,0,647,648,5,28,0,0,648,649,3,54,27,0,649,650,5,7,0,
		0,650,651,3,62,31,0,651,49,1,0,0,0,652,653,5,10,0,0,653,654,5,25,0,0,654,
		655,5,28,0,0,655,656,3,58,29,0,656,51,1,0,0,0,657,658,5,8,0,0,658,659,
		5,25,0,0,659,660,5,28,0,0,660,661,3,58,29,0,661,662,5,9,0,0,662,663,3,
		76,38,0,663,53,1,0,0,0,664,667,3,56,28,0,665,667,3,58,29,0,666,664,1,0,
		0,0,666,665,1,0,0,0,667,55,1,0,0,0,668,669,5,25,0,0,669,670,5,28,0,0,670,
		671,3,60,30,0,671,672,7,1,0,0,672,673,3,130,65,0,673,57,1,0,0,0,674,675,
		3,60,30,0,675,676,7,1,0,0,676,677,3,130,65,0,677,59,1,0,0,0,678,682,3,
		208,104,0,679,682,3,260,130,0,680,682,5,110,0,0,681,678,1,0,0,0,681,679,
		1,0,0,0,681,680,1,0,0,0,682,61,1,0,0,0,683,686,3,330,165,0,684,686,3,160,
		80,0,685,683,1,0,0,0,685,684,1,0,0,0,686,63,1,0,0,0,687,688,5,8,0,0,688,
		689,5,25,0,0,689,690,5,29,0,0,690,691,5,22,0,0,691,692,3,130,65,0,692,
		693,5,9,0,0,693,696,3,76,38,0,694,695,5,30,0,0,695,697,3,86,43,0,696,694,
		1,0,0,0,696,697,1,0,0,0,697,65,1,0,0,0,698,699,5,10,0,0,699,700,5,25,0,
		0,700,701,5,29,0,0,701,704,7,1,0,0,702,705,3,130,65,0,703,705,3,132,66,
		0,704,702,1,0,0,0,704,703,1,0,0,0,705,708,1,0,0,0,706,707,5,30,0,0,707,
		709,3,86,43,0,708,706,1,0,0,0,708,709,1,0,0,0,709,67,1,0,0,0,710,711,5,
		6,0,0,711,712,5,25,0,0,712,713,5,29,0,0,713,714,7,1,0,0,714,715,3,80,40,
		0,715,716,5,7,0,0,716,719,3,84,42,0,717,718,5,30,0,0,718,720,3,86,43,0,
		719,717,1,0,0,0,719,720,1,0,0,0,720,722,1,0,0,0,721,723,3,72,36,0,722,
		721,1,0,0,0,722,723,1,0,0,0,723,69,1,0,0,0,724,725,5,31,0,0,725,726,5,
		25,0,0,726,727,5,29,0,0,727,728,7,1,0,0,728,729,3,80,40,0,729,730,5,7,
		0,0,730,733,3,80,40,0,731,732,5,30,0,0,732,734,3,86,43,0,733,731,1,0,0,
		0,733,734,1,0,0,0,734,71,1,0,0,0,735,738,3,74,37,0,736,737,5,11,0,0,737,
		739,3,72,36,0,738,736,1,0,0,0,738,739,1,0,0,0,739,73,1,0,0,0,740,741,5,
		32,0,0,741,742,7,2,0,0,742,75,1,0,0,0,743,746,3,78,39,0,744,745,5,11,0,
		0,745,747,3,76,38,0,746,744,1,0,0,0,746,747,1,0,0,0,747,77,1,0,0,0,748,
		749,5,12,0,0,749,750,5,13,0,0,750,755,3,260,130,0,751,752,5,35,0,0,752,
		753,5,13,0,0,753,755,3,260,130,0,754,748,1,0,0,0,754,751,1,0,0,0,755,79,
		1,0,0,0,756,759,3,330,165,0,757,759,3,160,80,0,758,756,1,0,0,0,758,757,
		1,0,0,0,759,81,1,0,0,0,760,762,7,3,0,0,761,760,1,0,0,0,761,762,1,0,0,0,
		762,763,1,0,0,0,763,764,5,38,0,0,764,765,3,260,130,0,765,83,1,0,0,0,766,
		769,3,330,165,0,767,769,3,160,80,0,768,766,1,0,0,0,768,767,1,0,0,0,769,
		85,1,0,0,0,770,773,3,88,44,0,771,772,7,4,0,0,772,774,3,86,43,0,773,771,
		1,0,0,0,773,774,1,0,0,0,774,87,1,0,0,0,775,778,3,90,45,0,776,777,7,4,0,
		0,777,779,3,88,44,0,778,776,1,0,0,0,778,779,1,0,0,0,779,797,1,0,0,0,780,
		781,5,4,0,0,781,784,3,90,45,0,782,783,7,4,0,0,783,785,3,88,44,0,784,782,
		1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,5,5,0,0,787,797,1,0,0,
		0,788,789,5,4,0,0,789,792,3,88,44,0,790,791,7,4,0,0,791,793,3,88,44,0,
		792,790,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,5,5,0,0,795,797,
		1,0,0,0,796,775,1,0,0,0,796,780,1,0,0,0,796,788,1,0,0,0,797,89,1,0,0,0,
		798,799,5,41,0,0,799,800,7,5,0,0,800,870,3,208,104,0,801,803,5,41,0,0,
		802,804,5,43,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,
		5,22,0,0,806,807,5,4,0,0,807,808,3,206,103,0,808,809,5,5,0,0,809,870,1,
		0,0,0,810,811,7,6,0,0,811,812,7,5,0,0,812,870,3,260,130,0,813,815,7,6,
		0,0,814,816,5,43,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,
		818,5,22,0,0,818,821,5,4,0,0,819,822,3,258,129,0,820,822,3,238,119,0,821,
		819,1,0,0,0,821,820,1,0,0,0,822,823,1,0,0,0,823,824,5,5,0,0,824,870,1,
		0,0,0,825,830,7,6,0,0,826,831,5,44,0,0,827,828,5,45,0,0,828,829,5,43,0,
		0,829,831,5,46,0,0,830,826,1,0,0,0,830,827,1,0,0,0,831,833,1,0,0,0,832,
		834,5,47,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,870,3,
		236,118,0,836,838,7,6,0,0,837,839,5,43,0,0,838,837,1,0,0,0,838,839,1,0,
		0,0,839,840,1,0,0,0,840,841,5,22,0,0,841,842,5,4,0,0,842,843,3,258,129,
		0,843,844,5,5,0,0,844,870,1,0,0,0,845,847,7,6,0,0,846,848,5,43,0,0,847,
		846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,850,5,48,0,0,850,870,3,
		260,130,0,851,856,7,6,0,0,852,857,5,49,0,0,853,854,5,45,0,0,854,855,5,
		43,0,0,855,857,5,50,0,0,856,852,1,0,0,0,856,853,1,0,0,0,857,858,1,0,0,
		0,858,859,5,51,0,0,859,870,3,260,130,0,860,865,7,6,0,0,861,866,5,52,0,
		0,862,863,5,45,0,0,863,864,5,43,0,0,864,866,5,53,0,0,865,861,1,0,0,0,865,
		862,1,0,0,0,866,867,1,0,0,0,867,868,5,51,0,0,868,870,3,260,130,0,869,798,
		1,0,0,0,869,801,1,0,0,0,869,810,1,0,0,0,869,813,1,0,0,0,869,825,1,0,0,
		0,869,836,1,0,0,0,869,845,1,0,0,0,869,851,1,0,0,0,869,860,1,0,0,0,870,
		91,1,0,0,0,871,877,3,94,47,0,872,877,3,96,48,0,873,877,3,98,49,0,874,877,
		3,100,50,0,875,877,3,102,51,0,876,871,1,0,0,0,876,872,1,0,0,0,876,873,
		1,0,0,0,876,874,1,0,0,0,876,875,1,0,0,0,877,93,1,0,0,0,878,879,5,54,0,
		0,879,95,1,0,0,0,880,881,5,54,0,0,881,882,5,51,0,0,882,883,5,55,0,0,883,
		884,5,56,0,0,884,97,1,0,0,0,885,886,5,54,0,0,886,887,5,51,0,0,887,888,
		5,55,0,0,888,889,5,57,0,0,889,99,1,0,0,0,890,891,5,54,0,0,891,892,5,51,
		0,0,892,893,5,55,0,0,893,894,5,58,0,0,894,101,1,0,0,0,895,896,5,54,0,0,
		896,897,5,51,0,0,897,898,5,55,0,0,898,899,5,56,0,0,899,900,5,39,0,0,900,
		901,5,57,0,0,901,103,1,0,0,0,902,923,3,106,53,0,903,923,3,108,54,0,904,
		923,3,110,55,0,905,923,3,112,56,0,906,923,3,114,57,0,907,923,3,116,58,
		0,908,909,5,59,0,0,909,910,5,110,0,0,910,920,5,13,0,0,911,921,5,110,0,
		0,912,921,3,118,59,0,913,921,3,124,62,0,914,921,3,260,130,0,915,921,3,
		236,118,0,916,921,3,126,63,0,917,921,3,208,104,0,918,921,3,128,64,0,919,
		921,3,130,65,0,920,911,1,0,0,0,920,912,1,0,0,0,920,913,1,0,0,0,920,914,
		1,0,0,0,920,915,1,0,0,0,920,916,1,0,0,0,920,917,1,0,0,0,920,918,1,0,0,
		0,920,919,1,0,0,0,921,923,1,0,0,0,922,902,1,0,0,0,922,903,1,0,0,0,922,
		904,1,0,0,0,922,905,1,0,0,0,922,906,1,0,0,0,922,907,1,0,0,0,922,908,1,
		0,0,0,923,105,1,0,0,0,924,925,5,3,0,0,925,928,5,110,0,0,926,927,5,13,0,
		0,927,929,3,118,59,0,928,926,1,0,0,0,928,929,1,0,0,0,929,107,1,0,0,0,930,
		931,5,21,0,0,931,934,5,110,0,0,932,933,5,13,0,0,933,935,3,124,62,0,934,
		932,1,0,0,0,934,935,1,0,0,0,935,109,1,0,0,0,936,937,5,60,0,0,937,940,5,
		110,0,0,938,939,5,13,0,0,939,941,3,260,130,0,940,938,1,0,0,0,940,941,1,
		0,0,0,941,111,1,0,0,0,942,943,5,47,0,0,943,946,5,110,0,0,944,945,5,13,
		0,0,945,947,3,236,118,0,946,944,1,0,0,0,946,947,1,0,0,0,947,113,1,0,0,
		0,948,949,5,61,0,0,949,952,5,110,0,0,950,951,5,13,0,0,951,953,3,126,63,
		0,952,950,1,0,0,0,952,953,1,0,0,0,953,115,1,0,0,0,954,955,5,25,0,0,955,
		956,5,28,0,0,956,959,5,110,0,0,957,958,5,13,0,0,958,960,3,128,64,0,959,
		957,1,0,0,0,959,960,1,0,0,0,960,117,1,0,0,0,961,962,5,3,0,0,962,964,7,
		7,0,0,963,965,3,188,94,0,964,963,1,0,0,0,964,965,1,0,0,0,965,968,1,0,0,
		0,966,968,5,110,0,0,967,961,1,0,0,0,967,966,1,0,0,0,968,119,1,0,0,0,969,
		970,7,8,0,0,970,121,1,0,0,0,971,974,3,118,59,0,972,974,3,120,60,0,973,
		971,1,0,0,0,973,972,1,0,0,0,974,123,1,0,0,0,975,976,5,21,0,0,976,977,5,
		109,0,0,977,980,5,22,0,0,978,981,3,118,59,0,979,981,3,158,79,0,980,978,
		1,0,0,0,980,979,1,0,0,0,981,985,1,0,0,0,982,983,5,21,0,0,983,985,5,110,
		0,0,984,975,1,0,0,0,984,982,1,0,0,0,985,125,1,0,0,0,986,987,7,7,0,0,987,
		990,7,1,0,0,988,991,3,118,59,0,989,991,3,158,79,0,990,988,1,0,0,0,990,
		989,1,0,0,0,991,994,1,0,0,0,992,994,5,110,0,0,993,986,1,0,0,0,993,992,
		1,0,0,0,994,127,1,0,0,0,995,996,5,25,0,0,996,1000,5,28,0,0,997,1001,3,
		208,104,0,998,1001,3,260,130,0,999,1001,5,110,0,0,1000,997,1,0,0,0,1000,
		998,1,0,0,0,1000,999,1,0,0,0,1001,1002,1,0,0,0,1002,1003,7,1,0,0,1003,
		1006,3,130,65,0,1004,1006,5,110,0,0,1005,995,1,0,0,0,1005,1004,1,0,0,0,
		1006,129,1,0,0,0,1007,1008,5,25,0,0,1008,1009,7,7,0,0,1009,1012,7,1,0,
		0,1010,1013,3,118,59,0,1011,1013,3,120,60,0,1012,1010,1,0,0,0,1012,1011,
		1,0,0,0,1013,1016,1,0,0,0,1014,1016,5,110,0,0,1015,1007,1,0,0,0,1015,1014,
		1,0,0,0,1016,131,1,0,0,0,1017,1018,7,7,0,0,1018,1021,5,22,0,0,1019,1022,
		3,118,59,0,1020,1022,3,120,60,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,
		133,1,0,0,0,1023,1024,5,110,0,0,1024,1025,5,13,0,0,1025,1030,5,110,0,0,
		1026,1030,3,136,68,0,1027,1030,3,140,70,0,1028,1030,3,138,69,0,1029,1023,
		1,0,0,0,1029,1026,1,0,0,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,135,
		1,0,0,0,1031,1032,5,110,0,0,1032,1033,5,13,0,0,1033,1034,3,118,59,0,1034,
		137,1,0,0,0,1035,1036,5,110,0,0,1036,1037,5,13,0,0,1037,1038,3,124,62,
		0,1038,139,1,0,0,0,1039,1040,5,110,0,0,1040,1041,5,13,0,0,1041,1042,5,
		109,0,0,1042,141,1,0,0,0,1043,1050,3,144,72,0,1044,1050,3,146,73,0,1045,
		1050,3,148,74,0,1046,1050,3,150,75,0,1047,1050,3,152,76,0,1048,1050,3,
		154,77,0,1049,1043,1,0,0,0,1049,1044,1,0,0,0,1049,1045,1,0,0,0,1049,1046,
		1,0,0,0,1049,1047,1,0,0,0,1049,1048,1,0,0,0,1050,143,1,0,0,0,1051,1052,
		5,62,0,0,1052,1053,5,19,0,0,1053,1054,5,20,0,0,1054,1055,3,156,78,0,1055,
		145,1,0,0,0,1056,1057,5,62,0,0,1057,1058,5,110,0,0,1058,147,1,0,0,0,1059,
		1060,5,62,0,0,1060,1061,5,3,0,0,1061,1062,7,9,0,0,1062,149,1,0,0,0,1063,
		1064,5,62,0,0,1064,1065,5,109,0,0,1065,151,1,0,0,0,1066,1067,5,62,0,0,
		1067,1068,5,63,0,0,1068,1069,5,64,0,0,1069,153,1,0,0,0,1070,1071,5,62,
		0,0,1071,1072,5,65,0,0,1072,1073,5,66,0,0,1073,155,1,0,0,0,1074,1078,5,
		14,0,0,1075,1076,5,65,0,0,1076,1078,5,66,0,0,1077,1074,1,0,0,0,1077,1075,
		1,0,0,0,1078,157,1,0,0,0,1079,1080,5,67,0,0,1080,1081,3,260,130,0,1081,
		159,1,0,0,0,1082,1084,7,3,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,
		1085,1,0,0,0,1085,1086,5,67,0,0,1086,1087,3,260,130,0,1087,161,1,0,0,0,
		1088,1089,3,158,79,0,1089,163,1,0,0,0,1090,1091,3,158,79,0,1091,165,1,
		0,0,0,1092,1093,3,158,79,0,1093,167,1,0,0,0,1094,1097,3,158,79,0,1095,
		1097,3,170,85,0,1096,1094,1,0,0,0,1096,1095,1,0,0,0,1097,169,1,0,0,0,1098,
		1099,3,260,130,0,1099,171,1,0,0,0,1100,1103,3,158,79,0,1101,1103,3,122,
		61,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,173,1,0,0,0,1104,1107,3,
		158,79,0,1105,1107,3,122,61,0,1106,1104,1,0,0,0,1106,1105,1,0,0,0,1107,
		175,1,0,0,0,1108,1111,3,158,79,0,1109,1111,3,122,61,0,1110,1108,1,0,0,
		0,1110,1109,1,0,0,0,1111,177,1,0,0,0,1112,1115,3,158,79,0,1113,1115,3,
		122,61,0,1114,1112,1,0,0,0,1114,1113,1,0,0,0,1115,179,1,0,0,0,1116,1119,
		3,158,79,0,1117,1119,3,122,61,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,
		181,1,0,0,0,1120,1123,3,158,79,0,1121,1123,3,122,61,0,1122,1120,1,0,0,
		0,1122,1121,1,0,0,0,1123,183,1,0,0,0,1124,1127,3,158,79,0,1125,1127,3,
		122,61,0,1126,1124,1,0,0,0,1126,1125,1,0,0,0,1127,185,1,0,0,0,1128,1131,
		3,158,79,0,1129,1131,3,122,61,0,1130,1128,1,0,0,0,1130,1129,1,0,0,0,1131,
		187,1,0,0,0,1132,1133,5,68,0,0,1133,1137,5,14,0,0,1134,1135,5,22,0,0,1135,
		1137,3,158,79,0,1136,1132,1,0,0,0,1136,1134,1,0,0,0,1137,189,1,0,0,0,1138,
		1139,5,8,0,0,1139,1140,5,69,0,0,1140,1141,5,22,0,0,1141,1142,3,122,61,
		0,1142,1143,5,9,0,0,1143,1146,3,202,101,0,1144,1145,5,30,0,0,1145,1147,
		3,196,98,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,191,1,0,0,0,1148,1149,
		5,6,0,0,1149,1150,5,69,0,0,1150,1151,7,1,0,0,1151,1152,3,122,61,0,1152,
		1153,5,7,0,0,1153,1156,3,178,89,0,1154,1155,5,30,0,0,1155,1157,3,196,98,
		0,1156,1154,1,0,0,0,1156,1157,1,0,0,0,1157,193,1,0,0,0,1158,1159,5,10,
		0,0,1159,1160,5,69,0,0,1160,1161,7,1,0,0,1161,1164,3,122,61,0,1162,1163,
		5,30,0,0,1163,1165,3,196,98,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,
		195,1,0,0,0,1166,1169,3,198,99,0,1167,1168,7,4,0,0,1168,1170,3,196,98,
		0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,197,1,0,0,0,1171,1174,3,200,
		100,0,1172,1173,7,4,0,0,1173,1175,3,198,99,0,1174,1172,1,0,0,0,1174,1175,
		1,0,0,0,1175,1193,1,0,0,0,1176,1177,5,4,0,0,1177,1180,3,200,100,0,1178,
		1179,7,4,0,0,1179,1181,3,198,99,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,
		1181,1182,1,0,0,0,1182,1183,5,5,0,0,1183,1193,1,0,0,0,1184,1185,5,4,0,
		0,1185,1188,3,198,99,0,1186,1187,7,4,0,0,1187,1189,3,198,99,0,1188,1186,
		1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,1190,1191,5,5,0,0,1191,1193,
		1,0,0,0,1192,1171,1,0,0,0,1192,1176,1,0,0,0,1192,1184,1,0,0,0,1193,199,
		1,0,0,0,1194,1195,5,41,0,0,1195,1196,7,5,0,0,1196,1263,3,208,104,0,1197,
		1199,5,41,0,0,1198,1200,5,43,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,
		1201,1,0,0,0,1201,1202,5,22,0,0,1202,1203,5,4,0,0,1203,1204,3,206,103,
		0,1204,1205,5,5,0,0,1205,1263,1,0,0,0,1206,1207,5,12,0,0,1207,1208,7,5,
		0,0,1208,1263,3,260,130,0,1209,1211,5,12,0,0,1210,1212,5,43,0,0,1211,1210,
		1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1214,5,22,0,0,1214,1215,
		5,4,0,0,1215,1216,3,258,129,0,1216,1217,5,5,0,0,1217,1263,1,0,0,0,1218,
		1223,5,12,0,0,1219,1224,5,44,0,0,1220,1221,5,45,0,0,1221,1222,5,43,0,0,
		1222,1224,5,46,0,0,1223,1219,1,0,0,0,1223,1220,1,0,0,0,1224,1226,1,0,0,
		0,1225,1227,5,47,0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,
		0,0,1228,1263,3,236,118,0,1229,1231,5,12,0,0,1230,1232,5,43,0,0,1231,1230,
		1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1234,5,22,0,0,1234,1235,
		5,4,0,0,1235,1236,3,238,119,0,1236,1237,5,5,0,0,1237,1263,1,0,0,0,1238,
		1240,5,12,0,0,1239,1241,5,43,0,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,
		1242,1,0,0,0,1242,1243,5,48,0,0,1243,1263,3,260,130,0,1244,1249,5,12,0,
		0,1245,1250,5,49,0,0,1246,1247,5,45,0,0,1247,1248,5,43,0,0,1248,1250,5,
		50,0,0,1249,1245,1,0,0,0,1249,1246,1,0,0,0,1250,1251,1,0,0,0,1251,1252,
		5,51,0,0,1252,1263,3,260,130,0,1253,1258,5,12,0,0,1254,1259,5,52,0,0,1255,
		1256,5,45,0,0,1256,1257,5,43,0,0,1257,1259,5,53,0,0,1258,1254,1,0,0,0,
		1258,1255,1,0,0,0,1259,1260,1,0,0,0,1260,1261,5,51,0,0,1261,1263,3,260,
		130,0,1262,1194,1,0,0,0,1262,1197,1,0,0,0,1262,1206,1,0,0,0,1262,1209,
		1,0,0,0,1262,1218,1,0,0,0,1262,1229,1,0,0,0,1262,1238,1,0,0,0,1262,1244,
		1,0,0,0,1262,1253,1,0,0,0,1263,201,1,0,0,0,1264,1267,3,204,102,0,1265,
		1266,5,11,0,0,1266,1268,3,202,101,0,1267,1265,1,0,0,0,1267,1268,1,0,0,
		0,1268,203,1,0,0,0,1269,1270,5,70,0,0,1270,1271,5,12,0,0,1271,1272,5,13,
		0,0,1272,1299,3,260,130,0,1273,1274,5,71,0,0,1274,1275,5,12,0,0,1275,1276,
		5,13,0,0,1276,1299,3,260,130,0,1277,1278,5,18,0,0,1278,1279,5,13,0,0,1279,
		1299,7,10,0,0,1280,1281,5,74,0,0,1281,1282,5,75,0,0,1282,1299,3,260,130,
		0,1283,1284,5,76,0,0,1284,1285,5,75,0,0,1285,1299,3,260,130,0,1286,1287,
		5,77,0,0,1287,1288,5,78,0,0,1288,1289,5,13,0,0,1289,1299,3,260,130,0,1290,
		1291,5,77,0,0,1291,1292,5,79,0,0,1292,1293,5,13,0,0,1293,1299,3,260,130,
		0,1294,1295,5,77,0,0,1295,1296,5,80,0,0,1296,1297,5,13,0,0,1297,1299,3,
		260,130,0,1298,1269,1,0,0,0,1298,1273,1,0,0,0,1298,1277,1,0,0,0,1298,1280,
		1,0,0,0,1298,1283,1,0,0,0,1298,1286,1,0,0,0,1298,1290,1,0,0,0,1298,1294,
		1,0,0,0,1299,205,1,0,0,0,1300,1303,3,208,104,0,1301,1302,5,11,0,0,1302,
		1304,3,206,103,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,207,1,0,0,0,
		1305,1308,7,11,0,0,1306,1307,7,12,0,0,1307,1309,3,208,104,0,1308,1306,
		1,0,0,0,1308,1309,1,0,0,0,1309,209,1,0,0,0,1310,1312,5,85,0,0,1311,1310,
		1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,1314,7,13,0,0,1314,211,
		1,0,0,0,1315,1316,5,89,0,0,1316,1317,5,111,0,0,1317,213,1,0,0,0,1318,1322,
		3,216,108,0,1319,1322,3,218,109,0,1320,1322,3,220,110,0,1321,1318,1,0,
		0,0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,215,1,0,0,0,1323,1324,5,90,
		0,0,1324,1325,3,118,59,0,1325,1326,5,39,0,0,1326,1327,3,118,59,0,1327,
		217,1,0,0,0,1328,1329,5,90,0,0,1329,1330,3,124,62,0,1330,1331,5,39,0,0,
		1331,1332,3,124,62,0,1332,219,1,0,0,0,1333,1334,5,90,0,0,1334,1335,5,91,
		0,0,1335,1336,5,69,0,0,1336,1337,5,22,0,0,1337,1338,3,118,59,0,1338,1339,
		5,39,0,0,1339,1340,3,118,59,0,1340,221,1,0,0,0,1341,1342,5,6,0,0,1342,
		1345,5,92,0,0,1343,1344,5,51,0,0,1344,1346,5,17,0,0,1345,1343,1,0,0,0,
		1345,1346,1,0,0,0,1346,1347,1,0,0,0,1347,1348,7,1,0,0,1348,1349,3,184,
		92,0,1349,1350,5,7,0,0,1350,1353,3,186,93,0,1351,1352,5,30,0,0,1352,1354,
		3,230,115,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,223,1,0,0,0,1355,
		1356,5,93,0,0,1356,1357,5,92,0,0,1357,1358,7,1,0,0,1358,1361,3,122,61,
		0,1359,1360,5,30,0,0,1360,1362,3,230,115,0,1361,1359,1,0,0,0,1361,1362,
		1,0,0,0,1362,225,1,0,0,0,1363,1364,5,94,0,0,1364,1365,5,92,0,0,1365,1366,
		7,1,0,0,1366,1369,3,122,61,0,1367,1368,5,30,0,0,1368,1370,3,230,115,0,
		1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,227,1,0,0,0,1371,1372,5,10,0,
		0,1372,1373,5,92,0,0,1373,1374,7,1,0,0,1374,1377,3,122,61,0,1375,1376,
		5,30,0,0,1376,1378,3,230,115,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,
		229,1,0,0,0,1379,1382,3,232,116,0,1380,1381,7,4,0,0,1381,1383,3,230,115,
		0,1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,231,1,0,0,0,1384,1387,3,234,
		117,0,1385,1386,7,4,0,0,1386,1388,3,232,116,0,1387,1385,1,0,0,0,1387,1388,
		1,0,0,0,1388,1406,1,0,0,0,1389,1390,5,4,0,0,1390,1393,3,234,117,0,1391,
		1392,7,4,0,0,1392,1394,3,232,116,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,
		1394,1395,1,0,0,0,1395,1396,5,5,0,0,1396,1406,1,0,0,0,1397,1398,5,4,0,
		0,1398,1401,3,232,116,0,1399,1400,7,4,0,0,1400,1402,3,232,116,0,1401,1399,
		1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,5,0,0,1404,1406,
		1,0,0,0,1405,1384,1,0,0,0,1405,1389,1,0,0,0,1405,1397,1,0,0,0,1406,233,
		1,0,0,0,1407,1408,5,41,0,0,1408,1409,7,5,0,0,1409,1619,3,208,104,0,1410,
		1412,5,41,0,0,1411,1413,5,43,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,
		1414,1,0,0,0,1414,1415,5,22,0,0,1415,1416,5,4,0,0,1416,1417,3,206,103,
		0,1417,1418,5,5,0,0,1418,1619,1,0,0,0,1419,1420,7,14,0,0,1420,1421,7,5,
		0,0,1421,1619,3,260,130,0,1422,1424,7,14,0,0,1423,1425,5,43,0,0,1424,1423,
		1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,22,0,0,1427,1428,
		5,4,0,0,1428,1429,3,258,129,0,1429,1430,5,5,0,0,1430,1619,1,0,0,0,1431,
		1436,7,14,0,0,1432,1437,5,44,0,0,1433,1434,5,45,0,0,1434,1435,5,43,0,0,
		1435,1437,5,46,0,0,1436,1432,1,0,0,0,1436,1433,1,0,0,0,1437,1439,1,0,0,
		0,1438,1440,5,47,0,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,1,0,
		0,0,1441,1619,3,236,118,0,1442,1444,7,14,0,0,1443,1445,5,43,0,0,1444,1443,
		1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1447,5,22,0,0,1447,1448,
		5,4,0,0,1448,1449,3,258,129,0,1449,1450,5,5,0,0,1450,1619,1,0,0,0,1451,
		1453,7,14,0,0,1452,1454,5,43,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,
		1455,1,0,0,0,1455,1456,5,48,0,0,1456,1619,3,260,130,0,1457,1462,7,14,0,
		0,1458,1463,5,49,0,0,1459,1460,5,45,0,0,1460,1461,5,43,0,0,1461,1463,5,
		50,0,0,1462,1458,1,0,0,0,1462,1459,1,0,0,0,1463,1464,1,0,0,0,1464,1465,
		5,51,0,0,1465,1619,3,260,130,0,1466,1471,7,14,0,0,1467,1472,5,52,0,0,1468,
		1469,5,45,0,0,1469,1470,5,43,0,0,1470,1472,5,53,0,0,1471,1467,1,0,0,0,
		1471,1468,1,0,0,0,1472,1473,1,0,0,0,1473,1474,5,51,0,0,1474,1619,3,260,
		130,0,1475,1477,5,95,0,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,
		1,0,0,0,1478,1484,5,75,0,0,1479,1481,5,91,0,0,1480,1479,1,0,0,0,1480,1481,
		1,0,0,0,1481,1482,1,0,0,0,1482,1484,5,96,0,0,1483,1476,1,0,0,0,1483,1480,
		1,0,0,0,1484,1485,1,0,0,0,1485,1486,7,5,0,0,1486,1619,3,260,130,0,1487,
		1489,5,95,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,
		1496,5,75,0,0,1491,1493,5,91,0,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,
		1494,1,0,0,0,1494,1496,5,96,0,0,1495,1488,1,0,0,0,1495,1492,1,0,0,0,1496,
		1498,1,0,0,0,1497,1499,5,43,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,
		1500,1,0,0,0,1500,1501,5,22,0,0,1501,1502,5,4,0,0,1502,1503,3,258,129,
		0,1503,1504,5,5,0,0,1504,1619,1,0,0,0,1505,1507,5,95,0,0,1506,1505,1,0,
		0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,1513,5,75,0,0,1509,1514,5,
		44,0,0,1510,1511,5,45,0,0,1511,1512,5,43,0,0,1512,1514,5,46,0,0,1513,1509,
		1,0,0,0,1513,1510,1,0,0,0,1514,1516,1,0,0,0,1515,1517,5,47,0,0,1516,1515,
		1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1619,3,236,118,0,1519,
		1521,5,95,0,0,1520,1519,1,0,0,0,1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,
		1527,5,75,0,0,1523,1528,5,49,0,0,1524,1525,5,45,0,0,1525,1526,5,43,0,0,
		1526,1528,5,50,0,0,1527,1523,1,0,0,0,1527,1524,1,0,0,0,1528,1529,1,0,0,
		0,1529,1530,5,51,0,0,1530,1619,3,260,130,0,1531,1533,5,95,0,0,1532,1531,
		1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1539,5,75,0,0,1535,1540,
		5,52,0,0,1536,1537,5,45,0,0,1537,1538,5,43,0,0,1538,1540,5,53,0,0,1539,
		1535,1,0,0,0,1539,1536,1,0,0,0,1540,1541,1,0,0,0,1541,1542,5,51,0,0,1542,
		1619,3,260,130,0,1543,1545,5,91,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,
		0,1545,1546,1,0,0,0,1546,1551,5,96,0,0,1547,1552,5,46,0,0,1548,1549,5,
		97,0,0,1549,1550,5,43,0,0,1550,1552,5,46,0,0,1551,1547,1,0,0,0,1551,1548,
		1,0,0,0,1552,1554,1,0,0,0,1553,1555,5,47,0,0,1554,1553,1,0,0,0,1554,1555,
		1,0,0,0,1555,1556,1,0,0,0,1556,1619,3,236,118,0,1557,1559,5,91,0,0,1558,
		1557,1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1565,5,96,0,0,1561,
		1566,5,50,0,0,1562,1563,5,97,0,0,1563,1564,5,43,0,0,1564,1566,5,50,0,0,
		1565,1561,1,0,0,0,1565,1562,1,0,0,0,1566,1567,1,0,0,0,1567,1568,5,51,0,
		0,1568,1619,3,260,130,0,1569,1571,5,91,0,0,1570,1569,1,0,0,0,1570,1571,
		1,0,0,0,1571,1572,1,0,0,0,1572,1577,5,96,0,0,1573,1578,5,53,0,0,1574,1575,
		5,97,0,0,1575,1576,5,43,0,0,1576,1578,5,53,0,0,1577,1573,1,0,0,0,1577,
		1574,1,0,0,0,1578,1579,1,0,0,0,1579,1580,5,51,0,0,1580,1619,3,260,130,
		0,1581,1583,5,95,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1584,1,0,
		0,0,1584,1590,5,75,0,0,1585,1587,5,91,0,0,1586,1585,1,0,0,0,1586,1587,
		1,0,0,0,1587,1588,1,0,0,0,1588,1590,5,96,0,0,1589,1582,1,0,0,0,1589,1586,
		1,0,0,0,1590,1592,1,0,0,0,1591,1593,5,43,0,0,1592,1591,1,0,0,0,1592,1593,
		1,0,0,0,1593,1594,1,0,0,0,1594,1595,5,22,0,0,1595,1596,5,4,0,0,1596,1597,
		3,238,119,0,1597,1598,5,5,0,0,1598,1619,1,0,0,0,1599,1601,5,95,0,0,1600,
		1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,1602,1608,5,75,0,0,1603,
		1605,5,91,0,0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,
		1608,5,96,0,0,1607,1600,1,0,0,0,1607,1604,1,0,0,0,1608,1610,1,0,0,0,1609,
		1611,5,43,0,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,
		1613,5,48,0,0,1613,1619,3,260,130,0,1614,1615,5,98,0,0,1615,1619,5,96,
		0,0,1616,1617,5,95,0,0,1617,1619,5,96,0,0,1618,1407,1,0,0,0,1618,1410,
		1,0,0,0,1618,1419,1,0,0,0,1618,1422,1,0,0,0,1618,1431,1,0,0,0,1618,1442,
		1,0,0,0,1618,1451,1,0,0,0,1618,1457,1,0,0,0,1618,1466,1,0,0,0,1618,1483,
		1,0,0,0,1618,1495,1,0,0,0,1618,1506,1,0,0,0,1618,1520,1,0,0,0,1618,1532,
		1,0,0,0,1618,1544,1,0,0,0,1618,1558,1,0,0,0,1618,1570,1,0,0,0,1618,1589,
		1,0,0,0,1618,1607,1,0,0,0,1618,1614,1,0,0,0,1618,1616,1,0,0,0,1619,235,
		1,0,0,0,1620,1621,7,15,0,0,1621,237,1,0,0,0,1622,1625,3,236,118,0,1623,
		1624,5,11,0,0,1624,1626,3,238,119,0,1625,1623,1,0,0,0,1625,1626,1,0,0,
		0,1626,239,1,0,0,0,1627,1628,5,6,0,0,1628,1629,5,99,0,0,1629,1630,7,1,
		0,0,1630,1631,3,122,61,0,1631,1632,5,7,0,0,1632,1635,3,122,61,0,1633,1634,
		5,30,0,0,1634,1636,3,252,126,0,1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,
		1638,1,0,0,0,1637,1639,3,248,124,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,
		1639,241,1,0,0,0,1640,1641,5,8,0,0,1641,1642,5,99,0,0,1642,1643,7,1,0,
		0,1643,1644,3,122,61,0,1644,1645,5,9,0,0,1645,1648,3,42,21,0,1646,1647,
		5,30,0,0,1647,1649,3,252,126,0,1648,1646,1,0,0,0,1648,1649,1,0,0,0,1649,
		243,1,0,0,0,1650,1651,5,10,0,0,1651,1652,5,99,0,0,1652,1653,7,1,0,0,1653,
		1656,3,122,61,0,1654,1655,5,30,0,0,1655,1657,3,252,126,0,1656,1654,1,0,
		0,0,1656,1657,1,0,0,0,1657,245,1,0,0,0,1658,1659,5,6,0,0,1659,1660,5,99,
		0,0,1660,1661,7,1,0,0,1661,1662,3,122,61,0,1662,1663,5,7,0,0,1663,1666,
		3,122,61,0,1664,1665,5,30,0,0,1665,1667,3,252,126,0,1666,1664,1,0,0,0,
		1666,1667,1,0,0,0,1667,247,1,0,0,0,1668,1671,3,250,125,0,1669,1670,5,11,
		0,0,1670,1672,3,248,124,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,249,
		1,0,0,0,1673,1674,5,32,0,0,1674,1678,7,2,0,0,1675,1676,5,100,0,0,1676,
		1678,5,29,0,0,1677,1673,1,0,0,0,1677,1675,1,0,0,0,1678,251,1,0,0,0,1679,
		1682,3,254,127,0,1680,1681,7,4,0,0,1681,1683,3,252,126,0,1682,1680,1,0,
		0,0,1682,1683,1,0,0,0,1683,253,1,0,0,0,1684,1687,3,256,128,0,1685,1686,
		7,4,0,0,1686,1688,3,254,127,0,1687,1685,1,0,0,0,1687,1688,1,0,0,0,1688,
		1706,1,0,0,0,1689,1690,5,4,0,0,1690,1693,3,256,128,0,1691,1692,7,4,0,0,
		1692,1694,3,254,127,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1695,1,
		0,0,0,1695,1696,5,5,0,0,1696,1706,1,0,0,0,1697,1698,5,4,0,0,1698,1701,
		3,254,127,0,1699,1700,7,4,0,0,1700,1702,3,254,127,0,1701,1699,1,0,0,0,
		1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1704,5,5,0,0,1704,1706,1,0,0,
		0,1705,1684,1,0,0,0,1705,1689,1,0,0,0,1705,1697,1,0,0,0,1706,255,1,0,0,
		0,1707,1708,5,41,0,0,1708,1709,7,5,0,0,1709,1776,3,208,104,0,1710,1712,
		5,41,0,0,1711,1713,5,43,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,
		1,0,0,0,1714,1715,5,22,0,0,1715,1716,5,4,0,0,1716,1717,3,206,103,0,1717,
		1718,5,5,0,0,1718,1776,1,0,0,0,1719,1720,7,16,0,0,1720,1721,7,5,0,0,1721,
		1776,3,260,130,0,1722,1724,7,16,0,0,1723,1725,5,43,0,0,1724,1723,1,0,0,
		0,1724,1725,1,0,0,0,1725,1726,1,0,0,0,1726,1727,5,22,0,0,1727,1728,5,4,
		0,0,1728,1729,3,258,129,0,1729,1730,5,5,0,0,1730,1776,1,0,0,0,1731,1736,
		7,16,0,0,1732,1737,5,44,0,0,1733,1734,5,45,0,0,1734,1735,5,43,0,0,1735,
		1737,5,46,0,0,1736,1732,1,0,0,0,1736,1733,1,0,0,0,1737,1739,1,0,0,0,1738,
		1740,5,47,0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,
		1776,3,236,118,0,1742,1744,7,16,0,0,1743,1745,5,43,0,0,1744,1743,1,0,0,
		0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,1747,5,22,0,0,1747,1748,5,4,
		0,0,1748,1749,3,238,119,0,1749,1750,5,5,0,0,1750,1776,1,0,0,0,1751,1753,
		7,16,0,0,1752,1754,5,43,0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,1755,
		1,0,0,0,1755,1756,5,48,0,0,1756,1776,3,260,130,0,1757,1762,7,16,0,0,1758,
		1763,5,49,0,0,1759,1760,5,45,0,0,1760,1761,5,43,0,0,1761,1763,5,50,0,0,
		1762,1758,1,0,0,0,1762,1759,1,0,0,0,1763,1764,1,0,0,0,1764,1765,5,51,0,
		0,1765,1776,3,260,130,0,1766,1771,7,16,0,0,1767,1772,5,52,0,0,1768,1769,
		5,45,0,0,1769,1770,5,43,0,0,1770,1772,5,53,0,0,1771,1767,1,0,0,0,1771,
		1768,1,0,0,0,1772,1773,1,0,0,0,1773,1774,5,51,0,0,1774,1776,3,260,130,
		0,1775,1707,1,0,0,0,1775,1710,1,0,0,0,1775,1719,1,0,0,0,1775,1722,1,0,
		0,0,1775,1731,1,0,0,0,1775,1742,1,0,0,0,1775,1751,1,0,0,0,1775,1757,1,
		0,0,0,1775,1766,1,0,0,0,1776,257,1,0,0,0,1777,1780,3,260,130,0,1778,1779,
		5,11,0,0,1779,1781,3,258,129,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,
		259,1,0,0,0,1782,1787,5,109,0,0,1783,1787,5,110,0,0,1784,1787,3,262,131,
		0,1785,1787,3,264,132,0,1786,1782,1,0,0,0,1786,1783,1,0,0,0,1786,1784,
		1,0,0,0,1786,1785,1,0,0,0,1787,1790,1,0,0,0,1788,1789,5,81,0,0,1789,1791,
		3,260,130,0,1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,1812,1,0,0,0,1792,
		1796,5,4,0,0,1793,1797,5,109,0,0,1794,1797,5,110,0,0,1795,1797,3,262,131,
		0,1796,1793,1,0,0,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,1800,1,0,
		0,0,1798,1799,5,81,0,0,1799,1801,3,260,130,0,1800,1798,1,0,0,0,1800,1801,
		1,0,0,0,1801,1802,1,0,0,0,1802,1812,5,5,0,0,1803,1804,5,4,0,0,1804,1807,
		3,260,130,0,1805,1806,5,81,0,0,1806,1808,3,260,130,0,1807,1805,1,0,0,0,
		1807,1808,1,0,0,0,1808,1809,1,0,0,0,1809,1810,5,5,0,0,1810,1812,1,0,0,
		0,1811,1786,1,0,0,0,1811,1792,1,0,0,0,1811,1803,1,0,0,0,1812,261,1,0,0,
		0,1813,1814,5,110,0,0,1814,1815,5,101,0,0,1815,1816,3,260,130,0,1816,1817,
		5,102,0,0,1817,263,1,0,0,0,1818,1819,5,110,0,0,1819,1821,5,4,0,0,1820,
		1822,3,266,133,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,0,
		1823,1824,5,5,0,0,1824,265,1,0,0,0,1825,1828,3,268,134,0,1826,1827,5,11,
		0,0,1827,1829,3,266,133,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,267,
		1,0,0,0,1830,1831,5,110,0,0,1831,1833,5,13,0,0,1832,1830,1,0,0,0,1832,
		1833,1,0,0,0,1833,1834,1,0,0,0,1834,1835,3,260,130,0,1835,269,1,0,0,0,
		1836,1839,3,272,136,0,1837,1838,7,4,0,0,1838,1840,3,270,135,0,1839,1837,
		1,0,0,0,1839,1840,1,0,0,0,1840,271,1,0,0,0,1841,1844,3,274,137,0,1842,
		1843,7,4,0,0,1843,1845,3,272,136,0,1844,1842,1,0,0,0,1844,1845,1,0,0,0,
		1845,1863,1,0,0,0,1846,1847,5,4,0,0,1847,1850,3,274,137,0,1848,1849,7,
		4,0,0,1849,1851,3,272,136,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,1852,
		1,0,0,0,1852,1853,5,5,0,0,1853,1863,1,0,0,0,1854,1855,5,4,0,0,1855,1858,
		3,272,136,0,1856,1857,7,4,0,0,1857,1859,3,272,136,0,1858,1856,1,0,0,0,
		1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1861,5,5,0,0,1861,1863,1,0,0,
		0,1862,1841,1,0,0,0,1862,1846,1,0,0,0,1862,1854,1,0,0,0,1863,273,1,0,0,
		0,1864,1865,5,41,0,0,1865,1866,7,5,0,0,1866,1933,3,208,104,0,1867,1869,
		5,41,0,0,1868,1870,5,43,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1871,
		1,0,0,0,1871,1872,5,22,0,0,1872,1873,5,4,0,0,1873,1874,3,206,103,0,1874,
		1875,5,5,0,0,1875,1933,1,0,0,0,1876,1877,5,12,0,0,1877,1878,7,5,0,0,1878,
		1933,3,260,130,0,1879,1881,5,12,0,0,1880,1882,5,43,0,0,1881,1880,1,0,0,
		0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,1883,1884,5,22,0,0,1884,1885,5,4,
		0,0,1885,1886,3,258,129,0,1886,1887,5,5,0,0,1887,1933,1,0,0,0,1888,1893,
		5,12,0,0,1889,1894,5,44,0,0,1890,1891,5,45,0,0,1891,1892,5,43,0,0,1892,
		1894,5,46,0,0,1893,1889,1,0,0,0,1893,1890,1,0,0,0,1894,1896,1,0,0,0,1895,
		1897,5,47,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,
		1933,3,236,118,0,1899,1901,5,12,0,0,1900,1902,5,43,0,0,1901,1900,1,0,0,
		0,1901,1902,1,0,0,0,1902,1903,1,0,0,0,1903,1904,5,22,0,0,1904,1905,5,4,
		0,0,1905,1906,3,238,119,0,1906,1907,5,5,0,0,1907,1933,1,0,0,0,1908,1910,
		5,12,0,0,1909,1911,5,43,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,
		1,0,0,0,1912,1913,5,48,0,0,1913,1933,3,260,130,0,1914,1919,5,12,0,0,1915,
		1920,5,49,0,0,1916,1917,5,45,0,0,1917,1918,5,43,0,0,1918,1920,5,50,0,0,
		1919,1915,1,0,0,0,1919,1916,1,0,0,0,1920,1921,1,0,0,0,1921,1922,5,51,0,
		0,1922,1933,3,260,130,0,1923,1928,5,12,0,0,1924,1929,5,52,0,0,1925,1926,
		5,45,0,0,1926,1927,5,43,0,0,1927,1929,5,53,0,0,1928,1924,1,0,0,0,1928,
		1925,1,0,0,0,1929,1930,1,0,0,0,1930,1931,5,51,0,0,1931,1933,3,260,130,
		0,1932,1864,1,0,0,0,1932,1867,1,0,0,0,1932,1876,1,0,0,0,1932,1879,1,0,
		0,0,1932,1888,1,0,0,0,1932,1899,1,0,0,0,1932,1908,1,0,0,0,1932,1914,1,
		0,0,0,1932,1923,1,0,0,0,1933,275,1,0,0,0,1934,1937,3,158,79,0,1935,1937,
		3,122,61,0,1936,1934,1,0,0,0,1936,1935,1,0,0,0,1937,277,1,0,0,0,1938,1941,
		3,158,79,0,1939,1941,3,122,61,0,1940,1938,1,0,0,0,1940,1939,1,0,0,0,1941,
		279,1,0,0,0,1942,1945,3,158,79,0,1943,1945,3,122,61,0,1944,1942,1,0,0,
		0,1944,1943,1,0,0,0,1945,281,1,0,0,0,1946,1949,3,158,79,0,1947,1949,3,
		122,61,0,1948,1946,1,0,0,0,1948,1947,1,0,0,0,1949,283,1,0,0,0,1950,1951,
		5,103,0,0,1951,1952,7,9,0,0,1952,285,1,0,0,0,1953,1954,5,104,0,0,1954,
		1955,5,4,0,0,1955,1956,3,344,172,0,1956,1957,5,22,0,0,1957,1958,3,288,
		144,0,1958,1959,5,5,0,0,1959,1960,3,32,16,0,1960,1970,1,0,0,0,1961,1962,
		5,104,0,0,1962,1963,5,4,0,0,1963,1964,3,342,171,0,1964,1965,5,22,0,0,1965,
		1966,3,290,145,0,1966,1967,5,5,0,0,1967,1968,3,32,16,0,1968,1970,1,0,0,
		0,1969,1953,1,0,0,0,1969,1961,1,0,0,0,1970,287,1,0,0,0,1971,1980,3,292,
		146,0,1972,1980,3,296,148,0,1973,1980,3,300,150,0,1974,1980,3,304,152,
		0,1975,1980,3,308,154,0,1976,1980,3,312,156,0,1977,1980,3,316,158,0,1978,
		1980,3,320,160,0,1979,1971,1,0,0,0,1979,1972,1,0,0,0,1979,1973,1,0,0,0,
		1979,1974,1,0,0,0,1979,1975,1,0,0,0,1979,1976,1,0,0,0,1979,1977,1,0,0,
		0,1979,1978,1,0,0,0,1980,289,1,0,0,0,1981,1990,3,294,147,0,1982,1990,3,
		298,149,0,1983,1990,3,302,151,0,1984,1990,3,306,153,0,1985,1990,3,310,
		155,0,1986,1990,3,314,157,0,1987,1990,3,318,159,0,1988,1990,3,322,161,
		0,1989,1981,1,0,0,0,1989,1982,1,0,0,0,1989,1983,1,0,0,0,1989,1984,1,0,
		0,0,1989,1985,1,0,0,0,1989,1986,1,0,0,0,1989,1987,1,0,0,0,1989,1988,1,
		0,0,0,1990,291,1,0,0,0,1991,1998,3,158,79,0,1992,1998,3,332,166,0,1993,
		1995,5,91,0,0,1994,1993,1,0,0,0,1994,1995,1,0,0,0,1995,1996,1,0,0,0,1996,
		1998,5,19,0,0,1997,1991,1,0,0,0,1997,1992,1,0,0,0,1997,1994,1,0,0,0,1998,
		2001,1,0,0,0,1999,2000,5,30,0,0,2000,2002,3,270,135,0,2001,1999,1,0,0,
		0,2001,2002,1,0,0,0,2002,293,1,0,0,0,2003,2009,3,332,166,0,2004,2006,5,
		91,0,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2009,
		5,19,0,0,2008,2003,1,0,0,0,2008,2005,1,0,0,0,2009,2012,1,0,0,0,2010,2011,
		5,30,0,0,2011,2013,3,270,135,0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,
		295,1,0,0,0,2014,2018,3,158,79,0,2015,2018,3,334,167,0,2016,2018,3,122,
		61,0,2017,2014,1,0,0,0,2017,2015,1,0,0,0,2017,2016,1,0,0,0,2018,2021,1,
		0,0,0,2019,2020,5,30,0,0,2020,2022,3,196,98,0,2021,2019,1,0,0,0,2021,2022,
		1,0,0,0,2022,297,1,0,0,0,2023,2028,3,334,167,0,2024,2025,5,69,0,0,2025,
		2026,5,22,0,0,2026,2028,3,118,59,0,2027,2023,1,0,0,0,2027,2024,1,0,0,0,
		2028,2031,1,0,0,0,2029,2030,5,30,0,0,2030,2032,3,196,98,0,2031,2029,1,
		0,0,0,2031,2032,1,0,0,0,2032,299,1,0,0,0,2033,2037,3,158,79,0,2034,2037,
		3,336,168,0,2035,2037,3,122,61,0,2036,2033,1,0,0,0,2036,2034,1,0,0,0,2036,
		2035,1,0,0,0,2037,2040,1,0,0,0,2038,2039,5,30,0,0,2039,2041,3,252,126,
		0,2040,2038,1,0,0,0,2040,2041,1,0,0,0,2041,301,1,0,0,0,2042,2047,3,336,
		168,0,2043,2044,5,99,0,0,2044,2045,5,22,0,0,2045,2047,3,118,59,0,2046,
		2042,1,0,0,0,2046,2043,1,0,0,0,2047,2050,1,0,0,0,2048,2049,5,30,0,0,2049,
		2051,3,252,126,0,2050,2048,1,0,0,0,2050,2051,1,0,0,0,2051,303,1,0,0,0,
		2052,2056,3,158,79,0,2053,2056,3,338,169,0,2054,2056,3,330,165,0,2055,
		2052,1,0,0,0,2055,2053,1,0,0,0,2055,2054,1,0,0,0,2056,2059,1,0,0,0,2057,
		2058,5,30,0,0,2058,2060,3,86,43,0,2059,2057,1,0,0,0,2059,2060,1,0,0,0,
		2060,305,1,0,0,0,2061,2064,3,338,169,0,2062,2064,3,330,165,0,2063,2061,
		1,0,0,0,2063,2062,1,0,0,0,2064,2067,1,0,0,0,2065,2066,5,30,0,0,2066,2068,
		3,86,43,0,2067,2065,1,0,0,0,2067,2068,1,0,0,0,2068,307,1,0,0,0,2069,2073,
		3,158,79,0,2070,2073,3,340,170,0,2071,2073,3,118,59,0,2072,2069,1,0,0,
		0,2072,2070,1,0,0,0,2072,2071,1,0,0,0,2073,2076,1,0,0,0,2074,2075,5,30,
		0,0,2075,2077,3,230,115,0,2076,2074,1,0,0,0,2076,2077,1,0,0,0,2077,309,
		1,0,0,0,2078,2083,3,340,170,0,2079,2080,5,92,0,0,2080,2081,5,22,0,0,2081,
		2083,3,118,59,0,2082,2078,1,0,0,0,2082,2079,1,0,0,0,2083,2086,1,0,0,0,
		2084,2085,5,30,0,0,2085,2087,3,230,115,0,2086,2084,1,0,0,0,2086,2087,1,
		0,0,0,2087,311,1,0,0,0,2088,2093,3,158,79,0,2089,2090,5,60,0,0,2090,2093,
		3,158,79,0,2091,2093,3,324,162,0,2092,2088,1,0,0,0,2092,2089,1,0,0,0,2092,
		2091,1,0,0,0,2093,313,1,0,0,0,2094,2095,5,60,0,0,2095,2098,3,158,79,0,
		2096,2098,3,324,162,0,2097,2094,1,0,0,0,2097,2096,1,0,0,0,2098,315,1,0,
		0,0,2099,2104,3,158,79,0,2100,2101,5,47,0,0,2101,2104,3,158,79,0,2102,
		2104,3,326,163,0,2103,2099,1,0,0,0,2103,2100,1,0,0,0,2103,2102,1,0,0,0,
		2104,317,1,0,0,0,2105,2106,5,47,0,0,2106,2109,3,158,79,0,2107,2109,3,326,
		163,0,2108,2105,1,0,0,0,2108,2107,1,0,0,0,2109,319,1,0,0,0,2110,2115,3,
		158,79,0,2111,2112,5,105,0,0,2112,2115,3,158,79,0,2113,2115,3,328,164,
		0,2114,2110,1,0,0,0,2114,2111,1,0,0,0,2114,2113,1,0,0,0,2115,321,1,0,0,
		0,2116,2117,5,105,0,0,2117,2120,3,158,79,0,2118,2120,3,328,164,0,2119,
		2116,1,0,0,0,2119,2118,1,0,0,0,2120,323,1,0,0,0,2121,2123,5,101,0,0,2122,
		2124,3,258,129,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,0,
		2125,2126,5,102,0,0,2126,325,1,0,0,0,2127,2129,5,101,0,0,2128,2130,3,238,
		119,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,0,0,2131,2132,
		5,102,0,0,2132,327,1,0,0,0,2133,2135,5,101,0,0,2134,2136,3,206,103,0,2135,
		2134,1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,5,102,0,0,2138,
		329,1,0,0,0,2139,2142,3,130,65,0,2140,2142,3,132,66,0,2141,2139,1,0,0,
		0,2141,2140,1,0,0,0,2142,331,1,0,0,0,2143,2144,5,3,0,0,2144,2145,3,158,
		79,0,2145,333,1,0,0,0,2146,2147,5,21,0,0,2147,2148,3,158,79,0,2148,335,
		1,0,0,0,2149,2150,5,25,0,0,2150,2151,3,158,79,0,2151,337,1,0,0,0,2152,
		2153,5,106,0,0,2153,2154,3,158,79,0,2154,339,1,0,0,0,2155,2156,5,61,0,
		0,2156,2157,3,158,79,0,2157,341,1,0,0,0,2158,2159,5,59,0,0,2159,2160,5,
		110,0,0,2160,343,1,0,0,0,2161,2170,3,346,173,0,2162,2170,3,348,174,0,2163,
		2170,3,350,175,0,2164,2170,3,352,176,0,2165,2170,3,354,177,0,2166,2170,
		3,356,178,0,2167,2170,3,358,179,0,2168,2170,3,360,180,0,2169,2161,1,0,
		0,0,2169,2162,1,0,0,0,2169,2163,1,0,0,0,2169,2164,1,0,0,0,2169,2165,1,
		0,0,0,2169,2166,1,0,0,0,2169,2167,1,0,0,0,2169,2168,1,0,0,0,2170,345,1,
		0,0,0,2171,2172,5,3,0,0,2172,2173,5,110,0,0,2173,347,1,0,0,0,2174,2175,
		5,21,0,0,2175,2176,5,110,0,0,2176,349,1,0,0,0,2177,2178,5,25,0,0,2178,
		2179,5,110,0,0,2179,351,1,0,0,0,2180,2181,5,25,0,0,2181,2182,5,28,0,0,
		2182,2183,5,110,0,0,2183,353,1,0,0,0,2184,2185,5,61,0,0,2185,2186,5,110,
		0,0,2186,355,1,0,0,0,2187,2188,5,60,0,0,2188,2189,5,110,0,0,2189,357,1,
		0,0,0,2190,2191,5,47,0,0,2191,2192,5,110,0,0,2192,359,1,0,0,0,2193,2194,
		5,105,0,0,2194,2195,5,110,0,0,2195,361,1,0,0,0,2196,2199,3,158,79,0,2197,
		2199,3,130,65,0,2198,2196,1,0,0,0,2198,2197,1,0,0,0,2199,363,1,0,0,0,241,
		369,487,496,517,531,537,568,572,577,581,592,597,609,615,623,631,638,643,
		666,681,685,696,704,708,719,722,733,738,746,754,758,761,768,773,778,784,
		792,796,803,815,821,830,833,838,847,856,865,869,876,920,922,928,934,940,
		946,952,959,964,967,973,980,984,990,993,1000,1005,1012,1015,1021,1029,
		1049,1077,1083,1096,1102,1106,1110,1114,1118,1122,1126,1130,1136,1146,
		1156,1164,1169,1174,1180,1188,1192,1199,1211,1223,1226,1231,1240,1249,
		1258,1262,1267,1298,1303,1308,1311,1321,1345,1353,1361,1369,1377,1382,
		1387,1393,1401,1405,1412,1424,1436,1439,1444,1453,1462,1471,1476,1480,
		1483,1488,1492,1495,1498,1506,1513,1516,1520,1527,1532,1539,1544,1551,
		1554,1558,1565,1570,1577,1582,1586,1589,1592,1600,1604,1607,1610,1618,
		1625,1635,1638,1648,1656,1666,1671,1677,1682,1687,1693,1701,1705,1712,
		1724,1736,1739,1744,1753,1762,1771,1775,1780,1786,1790,1796,1800,1807,
		1811,1821,1828,1832,1839,1844,1850,1858,1862,1869,1881,1893,1896,1901,
		1910,1919,1928,1932,1936,1940,1944,1948,1969,1979,1989,1994,1997,2001,
		2005,2008,2012,2017,2021,2027,2031,2036,2040,2046,2050,2055,2059,2063,
		2067,2072,2076,2082,2086,2092,2097,2103,2108,2114,2119,2123,2129,2135,
		2141,2169,2198
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
