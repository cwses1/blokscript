//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, STATEMENTEND=100, WS=101, 
		STRINGLITERAL=102, VARID=103, INTLITERAL=104, REGEXLITERAL=105, LINE_COMMENT=106, 
		BLOCK_COMMENT=107;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createDatasourceStatement = 3, 
		RULE_deleteDatasourceStatement = 4, RULE_updateDatasourceStatement = 5, 
		RULE_datasourceUpdateList = 6, RULE_datasourceUpdate = 7, RULE_createDatasourceEntryStatement = 8, 
		RULE_deleteDatasourceEntryStatement = 9, RULE_updateDatasourceEntryStatement = 10, 
		RULE_datasourceEntryFullSpec = 11, RULE_datasourceEntryShortSpec = 12, 
		RULE_datasourceEntryIdentifier = 13, RULE_updateDatasourceEntriesStatement = 14, 
		RULE_deleteDatasourceEntriesStatement = 15, RULE_copyDatasourceEntriesStatement = 16, 
		RULE_syncDatasourceEntriesStatement = 17, RULE_datasourceEntryCopyOptionList = 18, 
		RULE_datasourceEntryCopyOption = 19, RULE_datasourceEntryUpdateList = 20, 
		RULE_datasourceEntryUpdate = 21, RULE_datasourceEntriesSourceLocation = 22, 
		RULE_urlSpec = 23, RULE_datasourceEntriesTargetLocation = 24, RULE_datasourceEntryConstraintExprList = 25, 
		RULE_datasourceEntryConstraintExpr = 26, RULE_datasourceEntryConstraint = 27, 
		RULE_loginStatement = 28, RULE_loginOnlyStatement = 29, RULE_loginWithGlobalUserNameStatement = 30, 
		RULE_loginWithGlobalPasswordStatement = 31, RULE_loginWithGlobalTokenStatement = 32, 
		RULE_loginWithGlobalUserNameAndPasswordStatement = 33, RULE_varStatement = 34, 
		RULE_spaceVarStatement = 35, RULE_blockVarStatement = 36, RULE_stringVarStatement = 37, 
		RULE_regexVarStatement = 38, RULE_storyVarStatement = 39, RULE_datasourceEntryVarStatement = 40, 
		RULE_spaceSpec = 41, RULE_shortSpaceSpec = 42, RULE_longOrShortSpaceSpec = 43, 
		RULE_blockSpec = 44, RULE_storySpec = 45, RULE_datasourceEntrySpec = 46, 
		RULE_datasourceSpec = 47, RULE_datasourceShortSpec = 48, RULE_assignmentStatement = 49, 
		RULE_spaceAssignmentStatement = 50, RULE_blockAssignmentStatement = 51, 
		RULE_stringAssignmentStatement = 52, RULE_copySpacesStatement = 53, RULE_printStatement = 54, 
		RULE_printSpacesStatement = 55, RULE_printVarStatement = 56, RULE_printSpaceStatement = 57, 
		RULE_printStringLiteralStatement = 58, RULE_printSymbolTableStatement = 59, 
		RULE_printLocalCacheStatement = 60, RULE_realDataLocation = 61, RULE_spacesOutputLocation = 62, 
		RULE_fileSpec = 63, RULE_blockOutputLocation = 64, RULE_blocksOutputLocation = 65, 
		RULE_storyOutputLocation = 66, RULE_spaceOutputLocation = 67, RULE_varGetFrom = 68, 
		RULE_createBlockStatement = 69, RULE_updateBlocksStatement = 70, RULE_copyBlocksStatement = 71, 
		RULE_deleteBlocksStatement = 72, RULE_blockConstraintExprList = 73, RULE_blockConstraintExpr = 74, 
		RULE_blockConstraint = 75, RULE_blockUpdateList = 76, RULE_blockUpdate = 77, 
		RULE_intExprList = 78, RULE_intExpr = 79, RULE_verbosityStatement = 80, 
		RULE_waitStatement = 81, RULE_compareStatement = 82, RULE_compareSpacesStatement = 83, 
		RULE_compareBlocksStatement = 84, RULE_compareAllBlocksStatement = 85, 
		RULE_storiesInputLocation = 86, RULE_storiesOutputLocation = 87, RULE_copyStoriesStatement = 88, 
		RULE_publishStoriesStatement = 89, RULE_unpublishStoriesStatement = 90, 
		RULE_deleteStoriesStatement = 91, RULE_storyConstraintExprList = 92, RULE_storyConstraintExpr = 93, 
		RULE_storyConstraint = 94, RULE_regexExpr = 95, RULE_regexExprList = 96, 
		RULE_copyDatasourcesStatement = 97, RULE_updateDatasourcesStatement = 98, 
		RULE_deleteDatasourcesStatement = 99, RULE_syncDatasourcesStatement = 100, 
		RULE_datasourceConstraintExprList = 101, RULE_datasourceConstraintExpr = 102, 
		RULE_datasourceConstraint = 103, RULE_stringExprList = 104, RULE_stringExpr = 105, 
		RULE_forEachStatement = 106;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createDatasourceStatement", "deleteDatasourceStatement", 
		"updateDatasourceStatement", "datasourceUpdateList", "datasourceUpdate", 
		"createDatasourceEntryStatement", "deleteDatasourceEntryStatement", "updateDatasourceEntryStatement", 
		"datasourceEntryFullSpec", "datasourceEntryShortSpec", "datasourceEntryIdentifier", 
		"updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"copySpacesStatement", "printStatement", "printSpacesStatement", "printVarStatement", 
		"printSpaceStatement", "printStringLiteralStatement", "printSymbolTableStatement", 
		"printLocalCacheStatement", "realDataLocation", "spacesOutputLocation", 
		"fileSpec", "blockOutputLocation", "blocksOutputLocation", "storyOutputLocation", 
		"spaceOutputLocation", "varGetFrom", "createBlockStatement", "updateBlocksStatement", 
		"copyBlocksStatement", "deleteBlocksStatement", "blockConstraintExprList", 
		"blockConstraintExpr", "blockConstraint", "blockUpdateList", "blockUpdate", 
		"intExprList", "intExpr", "verbosityStatement", "waitStatement", "compareStatement", 
		"compareSpacesStatement", "compareBlocksStatement", "compareAllBlocksStatement", 
		"storiesInputLocation", "storiesOutputLocation", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintExprList", "storyConstraintExpr", "storyConstraint", "regexExpr", 
		"regexExprList", "copyDatasourcesStatement", "updateDatasourcesStatement", 
		"deleteDatasourcesStatement", "syncDatasourcesStatement", "datasourceConstraintExprList", 
		"datasourceConstraintExpr", "datasourceConstraint", "stringExprList", 
		"stringExpr", "forEachStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'datasource'", "'('", "')'", "'for'", "'in'", "'delete'", 
		"'update'", "'set'", "','", "'name'", "'='", "'slug'", "'entry'", "'from'", 
		"'entries'", "'where'", "'copy'", "'to'", "'sync'", "'skip'", "'updates'", 
		"'creates'", "'value'", "'local cache'", "'csv'", "'json'", "'url'", "'console'", 
		"'and'", "'or'", "'id'", "'!='", "'not'", "'matches'", "'does'", "'match'", 
		"'regex'", "'like'", "'starts'", "'start'", "'with'", "'ends'", "'end'", 
		"'login'", "'global'", "'username'", "'password'", "'token'", "'var'", 
		"'space'", "'block'", "'string'", "'story'", "'spaces'", "'print'", "'symbol'", 
		"'tables'", "'local'", "'cache'", "'server'", "'file'", "'on'", "'blocks'", 
		"'technical'", "'display'", "'type'", "'nestable'", "'content'", "'universal'", 
		"'add'", "'tag'", "'remove'", "'preview'", "'field'", "'template'", "'screenshot'", 
		"'+'", "'-'", "'*'", "'%'", "'be'", "'quiet'", "'verbose'", "'debugger'", 
		"'wait'", "'compare'", "'all'", "'stories'", "'publish'", "'unpublish'", 
		"'any'", "'tags'", "'do'", "'no'", "'datasources'", "'foreach'", "'{'", 
		"'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "STATEMENTEND", "WS", "STRINGLITERAL", "VARID", 
		"INTLITERAL", "REGEXLITERAL", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENTEND() { return GetTokens(BlokScriptGrammarParser.STATEMENTEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND(int i) {
			return GetToken(BlokScriptGrammarParser.STATEMENTEND, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 216;
				statement();
				State = 217;
				Match(STATEMENTEND);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 106995950401356166L) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 2097983L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				loginStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				varStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				assignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226;
				printStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				verbosityStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 228;
				waitStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 229;
				compareStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 230;
				copyBlocksStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 231;
				copySpacesStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 232;
				copyBlocksStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 233;
				copyStoriesStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 234;
				publishStoriesStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 235;
				unpublishStoriesStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 236;
				deleteStoriesStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 237;
				copyDatasourcesStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 238;
				deleteBlocksStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 239;
				deleteDatasourcesStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 240;
				createDatasourceStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 241;
				updateDatasourceStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 242;
				deleteDatasourceStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 243;
				createDatasourceEntryStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 244;
				deleteDatasourceEntryStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 245;
				updateDatasourceEntryStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 246;
				updateDatasourceEntriesStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 247;
				deleteDatasourceEntriesStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 248;
				copyDatasourceEntriesStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 249;
				syncDatasourceEntriesStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 250;
				updateDatasourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(T__0);
			State = 254;
			Match(T__1);
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 255;
				stringExpr();
				}
				break;
			case T__2:
				{
				State = 256;
				Match(T__2);
				State = 257;
				datasourceUpdateList();
				State = 258;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 262;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
			case VARID:
				{
				State = 263;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 264;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__6);
			State = 268;
			Match(T__1);
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 269;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 270;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__7);
			State = 274;
			Match(T__1);
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 275;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 276;
				datasourceSpec();
				}
				break;
			}
			State = 279;
			Match(T__8);
			State = 280;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 12, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			datasourceUpdate();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 283;
				Match(T__9);
				State = 284;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 14, RULE_datasourceUpdate);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				Match(T__10);
				State = 288;
				Match(T__11);
				State = 289;
				stringExpr();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(T__12);
				State = 291;
				Match(T__11);
				State = 292;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(T__0);
			State = 296;
			Match(T__1);
			State = 297;
			Match(T__13);
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 298;
				stringExpr();
				}
				break;
			case T__10:
			case T__23:
				{
				State = 299;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 302;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 303;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 304;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__6);
			State = 308;
			Match(T__1);
			State = 309;
			Match(T__13);
			State = 310;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__7);
			State = 313;
			Match(T__1);
			State = 314;
			Match(T__13);
			State = 315;
			datasourceEntryShortSpec();
			State = 316;
			Match(T__8);
			State = 317;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(T__1);
			State = 320;
			Match(T__13);
			State = 321;
			datasourceEntryIdentifier();
			State = 322;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 323;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			datasourceEntryIdentifier();
			State = 326;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 327;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 329;
				intExpr();
				}
				break;
			case 2:
				{
				State = 330;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 331;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(T__7);
			State = 335;
			Match(T__1);
			State = 336;
			Match(T__15);
			State = 337;
			Match(T__5);
			State = 338;
			datasourceSpec();
			State = 339;
			Match(T__8);
			State = 340;
			datasourceEntryUpdateList();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 341;
				Match(T__16);
				State = 342;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(T__6);
			State = 346;
			Match(T__1);
			State = 347;
			Match(T__15);
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 349;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 350;
				datasourceShortSpec();
				}
				break;
			}
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 353;
				Match(T__16);
				State = 354;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(T__17);
			State = 358;
			Match(T__1);
			State = 359;
			Match(T__15);
			State = 360;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 361;
			datasourceEntriesSourceLocation();
			State = 362;
			Match(T__18);
			State = 363;
			datasourceEntriesTargetLocation();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 364;
				Match(T__16);
				State = 365;
				datasourceEntryConstraintExprList();
				}
			}

			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 368;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(T__19);
			State = 372;
			Match(T__1);
			State = 373;
			Match(T__15);
			State = 374;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 375;
			datasourceEntriesSourceLocation();
			State = 376;
			Match(T__18);
			State = 377;
			datasourceEntriesSourceLocation();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 378;
				Match(T__16);
				State = 379;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 36, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			datasourceEntryCopyOption();
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 383;
				Match(T__9);
				State = 384;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 38, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(T__20);
			State = 388;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12583170L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 40, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			datasourceEntryUpdate();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 391;
				Match(T__9);
				State = 392;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 42, RULE_datasourceEntryUpdate);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				Match(T__10);
				State = 396;
				Match(T__11);
				State = 397;
				stringExpr();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398;
				Match(T__23);
				State = 399;
				Match(T__11);
				State = 400;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 44, RULE_datasourceEntriesSourceLocation);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				datasourceShortSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405;
				urlSpec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 406;
				fileSpec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 407;
				Match(T__24);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 46, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25 || _la==T__26) {
				{
				State = 410;
				_la = TokenStream.LA(1);
				if ( !(_la==T__25 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 413;
			Match(T__27);
			State = 414;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 48, RULE_datasourceEntriesTargetLocation);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				datasourceShortSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				urlSpec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				fileSpec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 420;
				Match(T__24);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 421;
				Match(T__28);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 50, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			datasourceEntryConstraintExpr();
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 425;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 426;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429;
				datasourceEntryConstraint();
				State = 432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 430;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 431;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				Match(T__2);
				State = 435;
				datasourceEntryConstraint();
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 436;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 437;
					datasourceEntryConstraintExpr();
					}
				}

				State = 440;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442;
				Match(T__2);
				State = 443;
				datasourceEntryConstraintExpr();
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 444;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 445;
					datasourceEntryConstraintExpr();
					}
				}

				State = 448;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 54, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				Match(T__31);
				State = 453;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 454;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				Match(T__31);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 456;
					Match(T__33);
					}
				}

				State = 459;
				Match(T__5);
				State = 460;
				Match(T__2);
				State = 461;
				intExprList();
				State = 462;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 464;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 465;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 466;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 467;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 468;
					Match(T__33);
					}
				}

				State = 471;
				Match(T__5);
				State = 472;
				Match(T__2);
				State = 475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 473;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 474;
					regexExprList();
					}
					break;
				}
				State = 477;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 484;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 480;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 481;
					Match(T__35);
					State = 482;
					Match(T__33);
					State = 483;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 486;
					Match(T__37);
					}
				}

				State = 489;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 490;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 491;
					Match(T__33);
					}
				}

				State = 494;
				Match(T__5);
				State = 495;
				Match(T__2);
				State = 496;
				stringExprList();
				State = 497;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 499;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 500;
					Match(T__33);
					}
				}

				State = 503;
				Match(T__38);
				State = 504;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 505;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 510;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 506;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 507;
					Match(T__35);
					State = 508;
					Match(T__33);
					State = 509;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 512;
				Match(T__41);
				State = 513;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 514;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 519;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 515;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 516;
					Match(T__35);
					State = 517;
					Match(T__33);
					State = 518;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 521;
				Match(T__41);
				State = 522;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_loginStatement);
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 528;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 529;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(T__44);
			State = 535;
			Match(T__41);
			State = 536;
			Match(T__45);
			State = 537;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(T__44);
			State = 540;
			Match(T__41);
			State = 541;
			Match(T__45);
			State = 542;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(T__44);
			State = 545;
			Match(T__41);
			State = 546;
			Match(T__45);
			State = 547;
			Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(T__44);
			State = 550;
			Match(T__41);
			State = 551;
			Match(T__45);
			State = 552;
			Match(T__46);
			State = 553;
			Match(T__29);
			State = 554;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_varStatement);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556;
				spaceVarStatement();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 557;
				blockVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 3);
				{
				State = 558;
				stringVarStatement();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 4);
				{
				State = 559;
				regexVarStatement();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 5);
				{
				State = 560;
				storyVarStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 561;
				datasourceEntryVarStatement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 7);
				{
				State = 562;
				Match(T__49);
				State = 563;
				Match(VARID);
				State = 564;
				Match(T__11);
				State = 574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 565;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 566;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 567;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 568;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 569;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 570;
					storySpec();
					}
					break;
				case 7:
					{
					State = 571;
					intExpr();
					}
					break;
				case 8:
					{
					State = 572;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 573;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(T__50);
			State = 579;
			Match(VARID);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 580;
				Match(T__11);
				State = 581;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(T__51);
			State = 585;
			Match(VARID);
			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 586;
				Match(T__11);
				State = 587;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(T__52);
			State = 591;
			Match(VARID);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 592;
				Match(T__11);
				State = 593;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(T__37);
			State = 597;
			Match(VARID);
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 598;
				Match(T__11);
				State = 599;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(T__53);
			State = 603;
			Match(VARID);
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 604;
				Match(T__11);
				State = 605;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(T__1);
			State = 609;
			Match(T__13);
			State = 610;
			Match(VARID);
			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 611;
				Match(T__11);
				State = 612;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 82, RULE_spaceSpec);
		int _la;
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615;
				Match(T__50);
				State = 616;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5 || _la==T__62) {
					{
					State = 617;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 620;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 84, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 86, RULE_longOrShortSpaceSpec);
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 625;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 88, RULE_blockSpec);
		try {
			State = 638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629;
				Match(T__51);
				State = 630;
				Match(STRINGLITERAL);
				State = 631;
				Match(T__5);
				State = 634;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
				case VARID:
					{
					State = 632;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 633;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				Match(T__51);
				State = 637;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 90, RULE_storySpec);
		int _la;
		try {
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 641;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 644;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
				case VARID:
					{
					State = 642;
					spaceSpec();
					}
					break;
				case T__61:
					{
					State = 643;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 92, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649;
				Match(T__1);
				State = 650;
				Match(T__13);
				State = 654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 651;
					intExpr();
					}
					break;
				case 2:
					{
					State = 652;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 653;
					Match(VARID);
					}
					break;
				}
				State = 656;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 657;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceSpec);
		int _la;
		try {
			State = 669;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 661;
				Match(T__1);
				State = 662;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 663;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 666;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__50:
				case VARID:
					{
					State = 664;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 665;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 672;
			Match(T__5);
			State = 675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__50:
			case VARID:
				{
				State = 673;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 674;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_assignmentStatement);
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 677;
				Match(VARID);
				State = 678;
				Match(T__11);
				State = 679;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 681;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 682;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(VARID);
			State = 686;
			Match(T__11);
			State = 687;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(VARID);
			State = 690;
			Match(T__11);
			State = 691;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(VARID);
			State = 694;
			Match(T__11);
			State = 695;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(T__17);
			State = 698;
			Match(T__54);
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 699;
				Match(T__14);
				State = 700;
				realDataLocation();
				}
			}

			State = 703;
			Match(T__18);
			State = 704;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_printStatement);
		try {
			State = 712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 710;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 711;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(T__55);
			State = 715;
			Match(T__54);
			State = 716;
			Match(T__14);
			State = 717;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(T__55);
			State = 720;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(T__55);
			State = 723;
			Match(T__50);
			State = 724;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			Match(T__55);
			State = 727;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(T__55);
			State = 730;
			Match(T__56);
			State = 731;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			Match(T__55);
			State = 734;
			Match(T__58);
			State = 735;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 122, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				{
				State = 737;
				Match(T__60);
				}
				break;
			case T__58:
				{
				State = 738;
				Match(T__58);
				State = 739;
				Match(T__59);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 124, RULE_spacesOutputLocation);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743;
				Match(T__58);
				State = 744;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 745;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(T__61);
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL || _la==VARID) {
				{
				State = 749;
				_la = TokenStream.LA(1);
				if ( !(_la==STRINGLITERAL || _la==VARID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 128, RULE_blockOutputLocation);
		int _la;
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				Match(T__58);
				State = 754;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 755;
				Match(T__61);
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRINGLITERAL) {
					{
					State = 756;
					Match(STRINGLITERAL);
					}
				}

				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 759;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 130, RULE_blocksOutputLocation);
		try {
			State = 767;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				Match(T__58);
				State = 764;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 765;
				fileSpec();
				}
				break;
			case T__50:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 766;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 132, RULE_storyOutputLocation);
		try {
			State = 774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770;
				Match(T__58);
				State = 771;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772;
				fileSpec();
				}
				break;
			case T__50:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 134, RULE_spaceOutputLocation);
		try {
			State = 780;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 776;
				Match(T__28);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 777;
				Match(T__58);
				State = 778;
				Match(T__59);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 3);
				{
				State = 779;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 136, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				{
				State = 782;
				Match(T__62);
				State = 783;
				Match(T__60);
				}
				break;
			case T__5:
				{
				State = 784;
				Match(T__5);
				State = 785;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			Match(T__0);
			State = 789;
			Match(T__51);
			State = 790;
			Match(T__2);
			State = 791;
			blockUpdateList();
			State = 792;
			Match(T__3);
			State = 793;
			Match(T__5);
			State = 794;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			Match(T__7);
			State = 797;
			Match(T__63);
			State = 798;
			Match(T__5);
			State = 799;
			longOrShortSpaceSpec();
			State = 800;
			Match(T__8);
			State = 801;
			blockUpdateList();
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 802;
				Match(T__16);
				State = 803;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(T__17);
			State = 807;
			Match(T__63);
			State = 808;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 809;
			longOrShortSpaceSpec();
			State = 810;
			Match(T__18);
			State = 811;
			blocksOutputLocation();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 812;
				Match(T__16);
				State = 813;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(T__6);
			State = 817;
			Match(T__63);
			State = 818;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 819;
			longOrShortSpaceSpec();
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 820;
				Match(T__16);
				State = 821;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 146, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			blockConstraintExpr();
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 825;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 826;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 148, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829;
				blockConstraint();
				State = 832;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 830;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 831;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 834;
				Match(T__2);
				State = 835;
				blockConstraint();
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 836;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 837;
					blockConstraintExpr();
					}
				}

				State = 840;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 842;
				Match(T__2);
				State = 843;
				blockConstraintExpr();
				State = 846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 844;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 845;
					blockConstraintExpr();
					}
				}

				State = 848;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 150, RULE_blockConstraint);
		int _la;
		try {
			State = 920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852;
				Match(T__31);
				State = 853;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 854;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				Match(T__31);
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 856;
					Match(T__33);
					}
				}

				State = 859;
				Match(T__5);
				State = 860;
				Match(T__2);
				State = 861;
				intExprList();
				State = 862;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 864;
				Match(T__10);
				State = 865;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 866;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 867;
				Match(T__10);
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 868;
					Match(T__33);
					}
				}

				State = 871;
				Match(T__5);
				State = 872;
				Match(T__2);
				State = 873;
				stringExprList();
				State = 874;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 876;
				Match(T__10);
				State = 881;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 877;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 878;
					Match(T__35);
					State = 879;
					Match(T__33);
					State = 880;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 883;
					Match(T__37);
					}
				}

				State = 886;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 887;
				Match(T__10);
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 888;
					Match(T__33);
					}
				}

				State = 891;
				Match(T__5);
				State = 892;
				Match(T__2);
				State = 893;
				regexExprList();
				State = 894;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 896;
				Match(T__10);
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 897;
					Match(T__33);
					}
				}

				State = 900;
				Match(T__38);
				State = 901;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 902;
				Match(T__10);
				State = 907;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 903;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 904;
					Match(T__35);
					State = 905;
					Match(T__33);
					State = 906;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 909;
				Match(T__41);
				State = 910;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 911;
				Match(T__10);
				State = 916;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 912;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 913;
					Match(T__35);
					State = 914;
					Match(T__33);
					State = 915;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 918;
				Match(T__41);
				State = 919;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 152, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			blockUpdate();
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 923;
				Match(T__9);
				State = 924;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 154, RULE_blockUpdate);
		int _la;
		try {
			State = 956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				Match(T__64);
				State = 928;
				Match(T__10);
				State = 929;
				Match(T__11);
				State = 930;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				Match(T__65);
				State = 932;
				Match(T__10);
				State = 933;
				Match(T__11);
				State = 934;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 935;
				Match(T__66);
				State = 936;
				Match(T__11);
				State = 937;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 938;
				Match(T__70);
				State = 939;
				Match(T__71);
				State = 940;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 941;
				Match(T__72);
				State = 942;
				Match(T__71);
				State = 943;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 944;
				Match(T__73);
				State = 945;
				Match(T__74);
				State = 946;
				Match(T__11);
				State = 947;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 948;
				Match(T__73);
				State = 949;
				Match(T__75);
				State = 950;
				Match(T__11);
				State = 951;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 952;
				Match(T__73);
				State = 953;
				Match(T__76);
				State = 954;
				Match(T__11);
				State = 955;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 156, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			intExpr();
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 959;
				Match(T__9);
				State = 960;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 158, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 15L) != 0)) {
				{
				State = 964;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 965;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__81) {
				{
				State = 968;
				Match(T__81);
				}
			}

			State = 971;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(T__85);
			State = 974;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_compareStatement);
		try {
			State = 979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 976;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 977;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 978;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(T__86);
			State = 982;
			spaceSpec();
			State = 983;
			Match(T__29);
			State = 984;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			Match(T__86);
			State = 987;
			blockSpec();
			State = 988;
			Match(T__29);
			State = 989;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			Match(T__86);
			State = 992;
			Match(T__87);
			State = 993;
			Match(T__63);
			State = 994;
			Match(T__5);
			State = 995;
			spaceSpec();
			State = 996;
			Match(T__29);
			State = 997;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 172, RULE_storiesInputLocation);
		try {
			State = 1001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				EnterOuterAlt(_localctx, 1);
				{
				State = 999;
				fileSpec();
				}
				break;
			case T__50:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 174, RULE_storiesOutputLocation);
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003;
				Match(T__28);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004;
				fileSpec();
				}
				break;
			case T__50:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1005;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(T__17);
			State = 1009;
			Match(T__88);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 1010;
				Match(T__41);
				State = 1011;
				Match(T__68);
				}
			}

			State = 1014;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1015;
			storiesInputLocation();
			State = 1016;
			Match(T__18);
			State = 1017;
			storiesOutputLocation();
			State = 1020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1018;
				Match(T__16);
				State = 1019;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(T__89);
			State = 1023;
			Match(T__88);
			State = 1024;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1025;
			longOrShortSpaceSpec();
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1026;
				Match(T__16);
				State = 1027;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			Match(T__90);
			State = 1031;
			Match(T__88);
			State = 1032;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1033;
			longOrShortSpaceSpec();
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1034;
				Match(T__16);
				State = 1035;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038;
			Match(T__6);
			State = 1039;
			Match(T__88);
			State = 1040;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1041;
			longOrShortSpaceSpec();
			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1042;
				Match(T__16);
				State = 1043;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 184, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			storyConstraintExpr();
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 1047;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1048;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 186, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1051;
				storyConstraint();
				State = 1054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 1052;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1053;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056;
				Match(T__2);
				State = 1057;
				storyConstraint();
				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1058;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1059;
					storyConstraintExpr();
					}
				}

				State = 1062;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1064;
				Match(T__2);
				State = 1065;
				storyConstraintExpr();
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1066;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1067;
					storyConstraintExpr();
					}
				}

				State = 1070;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 188, RULE_storyConstraint);
		int _la;
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				Match(T__31);
				State = 1075;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1076;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1077;
				Match(T__31);
				State = 1079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1078;
					Match(T__33);
					}
				}

				State = 1081;
				Match(T__5);
				State = 1082;
				Match(T__2);
				State = 1083;
				intExprList();
				State = 1084;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1086;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1087;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1088;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1089;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1090;
					Match(T__33);
					}
				}

				State = 1093;
				Match(T__5);
				State = 1094;
				Match(T__2);
				State = 1095;
				stringExprList();
				State = 1096;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1098;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1099;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1100;
					Match(T__35);
					State = 1101;
					Match(T__33);
					State = 1102;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1105;
					Match(T__37);
					}
				}

				State = 1108;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1109;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1110;
					Match(T__33);
					}
				}

				State = 1113;
				Match(T__5);
				State = 1114;
				Match(T__2);
				State = 1115;
				stringExprList();
				State = 1116;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1118;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1119;
					Match(T__33);
					}
				}

				State = 1122;
				Match(T__38);
				State = 1123;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1124;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1129;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1125;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1126;
					Match(T__35);
					State = 1127;
					Match(T__33);
					State = 1128;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1131;
				Match(T__41);
				State = 1132;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1133;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__27) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1138;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1134;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1135;
					Match(T__35);
					State = 1136;
					Match(T__33);
					State = 1137;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1140;
				Match(T__41);
				State = 1141;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__71:
				case T__91:
					{
					{
					State = 1143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1142;
						Match(T__91);
						}
					}

					State = 1145;
					Match(T__71);
					}
					}
					break;
				case T__87:
				case T__92:
					{
					{
					State = 1147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__87) {
						{
						State = 1146;
						Match(T__87);
						}
					}

					State = 1149;
					Match(T__92);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1152;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1153;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1162;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__71:
				case T__91:
					{
					{
					State = 1155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1154;
						Match(T__91);
						}
					}

					State = 1157;
					Match(T__71);
					}
					}
					break;
				case T__87:
				case T__92:
					{
					{
					State = 1159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__87) {
						{
						State = 1158;
						Match(T__87);
						}
					}

					State = 1161;
					Match(T__92);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1164;
					Match(T__33);
					}
				}

				State = 1167;
				Match(T__5);
				State = 1168;
				Match(T__2);
				State = 1169;
				stringExprList();
				State = 1170;
				Match(T__3);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1172;
					Match(T__91);
					}
				}

				State = 1175;
				Match(T__71);
				State = 1180;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1176;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1177;
					Match(T__35);
					State = 1178;
					Match(T__33);
					State = 1179;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1182;
					Match(T__37);
					}
				}

				State = 1185;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1186;
					Match(T__91);
					}
				}

				State = 1189;
				Match(T__71);
				State = 1194;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1190;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1191;
					Match(T__35);
					State = 1192;
					Match(T__33);
					State = 1193;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1196;
				Match(T__41);
				State = 1197;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__91) {
					{
					State = 1198;
					Match(T__91);
					}
				}

				State = 1201;
				Match(T__71);
				State = 1206;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1202;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1203;
					Match(T__35);
					State = 1204;
					Match(T__33);
					State = 1205;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1208;
				Match(T__41);
				State = 1209;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__87) {
					{
					State = 1210;
					Match(T__87);
					}
				}

				State = 1213;
				Match(T__92);
				State = 1218;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 1214;
					Match(T__36);
					}
					break;
				case T__93:
					{
					State = 1215;
					Match(T__93);
					State = 1216;
					Match(T__33);
					State = 1217;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1220;
					Match(T__37);
					}
				}

				State = 1223;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__87) {
					{
					State = 1224;
					Match(T__87);
					}
				}

				State = 1227;
				Match(T__92);
				State = 1232;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1228;
					Match(T__40);
					}
					break;
				case T__93:
					{
					State = 1229;
					Match(T__93);
					State = 1230;
					Match(T__33);
					State = 1231;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1234;
				Match(T__41);
				State = 1235;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__87) {
					{
					State = 1236;
					Match(T__87);
					}
				}

				State = 1239;
				Match(T__92);
				State = 1244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1240;
					Match(T__43);
					}
					break;
				case T__93:
					{
					State = 1241;
					Match(T__93);
					State = 1242;
					Match(T__33);
					State = 1243;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1246;
				Match(T__41);
				State = 1247;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__71:
				case T__91:
					{
					{
					State = 1249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1248;
						Match(T__91);
						}
					}

					State = 1251;
					Match(T__71);
					}
					}
					break;
				case T__87:
				case T__92:
					{
					{
					State = 1253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__87) {
						{
						State = 1252;
						Match(T__87);
						}
					}

					State = 1255;
					Match(T__92);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1258;
					Match(T__33);
					}
				}

				State = 1261;
				Match(T__5);
				State = 1262;
				Match(T__2);
				State = 1263;
				regexExprList();
				State = 1264;
				Match(T__3);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1274;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__71:
				case T__91:
					{
					{
					State = 1267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__91) {
						{
						State = 1266;
						Match(T__91);
						}
					}

					State = 1269;
					Match(T__71);
					}
					}
					break;
				case T__87:
				case T__92:
					{
					{
					State = 1271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__87) {
						{
						State = 1270;
						Match(T__87);
						}
					}

					State = 1273;
					Match(T__92);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1276;
					Match(T__33);
					}
				}

				State = 1279;
				Match(T__38);
				State = 1280;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1281;
				Match(T__94);
				State = 1282;
				Match(T__92);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1283;
				Match(T__91);
				State = 1284;
				Match(T__92);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 190, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 192, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			regexExpr();
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1290;
				Match(T__9);
				State = 1291;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			Match(T__17);
			State = 1295;
			Match(T__95);
			State = 1296;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1297;
			longOrShortSpaceSpec();
			State = 1298;
			Match(T__18);
			State = 1299;
			longOrShortSpaceSpec();
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1300;
				Match(T__16);
				State = 1301;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304;
			Match(T__7);
			State = 1305;
			Match(T__95);
			State = 1306;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1307;
			longOrShortSpaceSpec();
			State = 1308;
			Match(T__8);
			State = 1309;
			datasourceUpdateList();
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1310;
				Match(T__16);
				State = 1311;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			Match(T__6);
			State = 1315;
			Match(T__95);
			State = 1316;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1317;
			longOrShortSpaceSpec();
			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1318;
				Match(T__16);
				State = 1319;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			Match(T__17);
			State = 1323;
			Match(T__95);
			State = 1324;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1325;
			longOrShortSpaceSpec();
			State = 1326;
			Match(T__18);
			State = 1327;
			longOrShortSpaceSpec();
			State = 1330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 1328;
				Match(T__16);
				State = 1329;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 202, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			datasourceConstraintExpr();
			State = 1335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29 || _la==T__30) {
				{
				State = 1333;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1334;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 204, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1337;
				datasourceConstraint();
				State = 1340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1338;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1339;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1342;
				Match(T__2);
				State = 1343;
				datasourceConstraint();
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1344;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1345;
					datasourceConstraintExpr();
					}
				}

				State = 1348;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1350;
				Match(T__2);
				State = 1351;
				datasourceConstraintExpr();
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29 || _la==T__30) {
					{
					State = 1352;
					_la = TokenStream.LA(1);
					if ( !(_la==T__29 || _la==T__30) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1353;
					datasourceConstraintExpr();
					}
				}

				State = 1356;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 206, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360;
				Match(T__31);
				State = 1361;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1362;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1363;
				Match(T__31);
				State = 1365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1364;
					Match(T__33);
					}
				}

				State = 1367;
				Match(T__5);
				State = 1368;
				Match(T__2);
				State = 1369;
				intExprList();
				State = 1370;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1372;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1373;
				_la = TokenStream.LA(1);
				if ( !(_la==T__11 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1374;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1375;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1376;
					Match(T__33);
					}
				}

				State = 1379;
				Match(T__5);
				State = 1380;
				Match(T__2);
				State = 1381;
				stringExprList();
				State = 1382;
				Match(T__3);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1384;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__34:
					{
					State = 1385;
					Match(T__34);
					}
					break;
				case T__35:
					{
					State = 1386;
					Match(T__35);
					State = 1387;
					Match(T__33);
					State = 1388;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 1391;
					Match(T__37);
					}
				}

				State = 1394;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1395;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1396;
					Match(T__33);
					}
				}

				State = 1399;
				Match(T__5);
				State = 1400;
				Match(T__2);
				State = 1401;
				regexExprList();
				State = 1402;
				Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1404;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1405;
					Match(T__33);
					}
				}

				State = 1408;
				Match(T__38);
				State = 1409;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1410;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1415;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1411;
					Match(T__39);
					}
					break;
				case T__35:
					{
					State = 1412;
					Match(T__35);
					State = 1413;
					Match(T__33);
					State = 1414;
					Match(T__40);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1417;
				Match(T__41);
				State = 1418;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1419;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__12) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1424;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1420;
					Match(T__42);
					}
					break;
				case T__35:
					{
					State = 1421;
					Match(T__35);
					State = 1422;
					Match(T__33);
					State = 1423;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1426;
				Match(T__41);
				{
				State = 1427;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 208, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			stringExpr();
			State = 1433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 1431;
				Match(T__9);
				State = 1432;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 210, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__77) {
				{
				State = 1436;
				Match(T__77);
				State = 1437;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1440;
			Match(T__96);
			State = 1441;
			Match(T__2);
			State = 1442;
			Match(T__3);
			State = 1443;
			Match(T__97);
			State = 1444;
			statementList();
			State = 1445;
			Match(T__98);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,107,1448,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,1,0,1,0,1,1,1,1,1,1,4,1,220,8,1,11,1,12,1,221,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,252,8,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,261,8,3,1,3,1,3,1,3,3,3,266,8,3,1,4,1,4,1,4,1,4,3,4,272,
		8,4,1,5,1,5,1,5,1,5,3,5,278,8,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,286,8,6,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,294,8,7,1,8,1,8,1,8,1,8,1,8,3,8,301,8,8,1,8,
		1,8,1,8,3,8,306,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		3,13,333,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,344,8,
		14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,352,8,15,1,15,1,15,3,15,356,8,15,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,367,8,16,1,16,3,16,370,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,381,8,17,1,18,1,
		18,1,18,3,18,386,8,18,1,19,1,19,1,19,1,20,1,20,1,20,3,20,394,8,20,1,21,
		1,21,1,21,1,21,1,21,1,21,3,21,402,8,21,1,22,1,22,1,22,1,22,1,22,3,22,409,
		8,22,1,23,3,23,412,8,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,
		24,423,8,24,1,25,1,25,1,25,3,25,428,8,25,1,26,1,26,1,26,3,26,433,8,26,
		1,26,1,26,1,26,1,26,3,26,439,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,447,
		8,26,1,26,1,26,3,26,451,8,26,1,27,1,27,1,27,1,27,1,27,3,27,458,8,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,470,8,27,1,27,1,27,
		1,27,1,27,3,27,476,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,485,8,
		27,1,27,3,27,488,8,27,1,27,1,27,1,27,3,27,493,8,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,3,27,502,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,511,
		8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,520,8,27,1,27,1,27,3,27,524,
		8,27,1,28,1,28,1,28,1,28,1,28,3,28,531,8,28,1,29,1,29,1,30,1,30,1,30,1,
		30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,575,8,34,3,34,577,8,34,
		1,35,1,35,1,35,1,35,3,35,583,8,35,1,36,1,36,1,36,1,36,3,36,589,8,36,1,
		37,1,37,1,37,1,37,3,37,595,8,37,1,38,1,38,1,38,1,38,3,38,601,8,38,1,39,
		1,39,1,39,1,39,3,39,607,8,39,1,40,1,40,1,40,1,40,1,40,3,40,614,8,40,1,
		41,1,41,1,41,3,41,619,8,41,1,41,3,41,622,8,41,1,42,1,42,1,43,1,43,3,43,
		628,8,43,1,44,1,44,1,44,1,44,1,44,3,44,635,8,44,1,44,1,44,3,44,639,8,44,
		1,45,1,45,1,45,1,45,3,45,645,8,45,1,45,3,45,648,8,45,1,46,1,46,1,46,1,
		46,1,46,3,46,655,8,46,1,46,1,46,1,46,3,46,660,8,46,1,47,1,47,1,47,1,47,
		1,47,3,47,667,8,47,1,47,3,47,670,8,47,1,48,1,48,1,48,1,48,3,48,676,8,48,
		1,49,1,49,1,49,1,49,1,49,1,49,3,49,684,8,49,1,50,1,50,1,50,1,50,1,51,1,
		51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,702,8,53,1,53,
		1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,713,8,54,1,55,1,55,1,55,1,
		55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,
		59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,741,8,61,1,62,1,62,1,62,
		1,62,3,62,747,8,62,1,63,1,63,3,63,751,8,63,1,64,1,64,1,64,1,64,1,64,3,
		64,758,8,64,1,64,3,64,761,8,64,1,65,1,65,1,65,1,65,1,65,3,65,768,8,65,
		1,66,1,66,1,66,1,66,1,66,3,66,775,8,66,1,67,1,67,1,67,1,67,3,67,781,8,
		67,1,68,1,68,1,68,1,68,3,68,787,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,805,8,70,1,71,1,71,1,
		71,1,71,1,71,1,71,1,71,1,71,3,71,815,8,71,1,72,1,72,1,72,1,72,1,72,1,72,
		3,72,823,8,72,1,73,1,73,1,73,3,73,828,8,73,1,74,1,74,1,74,3,74,833,8,74,
		1,74,1,74,1,74,1,74,3,74,839,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,847,
		8,74,1,74,1,74,3,74,851,8,74,1,75,1,75,1,75,1,75,1,75,3,75,858,8,75,1,
		75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,870,8,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,882,8,75,1,75,3,75,885,8,
		75,1,75,1,75,1,75,3,75,890,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
		899,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,908,8,75,1,75,1,75,1,
		75,1,75,1,75,1,75,1,75,3,75,917,8,75,1,75,1,75,3,75,921,8,75,1,76,1,76,
		1,76,3,76,926,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,3,77,957,8,77,1,78,1,78,1,78,3,78,962,8,78,1,79,
		1,79,1,79,3,79,967,8,79,1,80,3,80,970,8,80,1,80,1,80,1,81,1,81,1,81,1,
		82,1,82,1,82,3,82,980,8,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,
		1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,3,86,1002,8,86,
		1,87,1,87,1,87,3,87,1007,8,87,1,88,1,88,1,88,1,88,3,88,1013,8,88,1,88,
		1,88,1,88,1,88,1,88,1,88,3,88,1021,8,88,1,89,1,89,1,89,1,89,1,89,1,89,
		3,89,1029,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1037,8,90,1,91,1,91,
		1,91,1,91,1,91,1,91,3,91,1045,8,91,1,92,1,92,1,92,3,92,1050,8,92,1,93,
		1,93,1,93,3,93,1055,8,93,1,93,1,93,1,93,1,93,3,93,1061,8,93,1,93,1,93,
		1,93,1,93,1,93,1,93,3,93,1069,8,93,1,93,1,93,3,93,1073,8,93,1,94,1,94,
		1,94,1,94,1,94,3,94,1080,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
		1,94,1,94,3,94,1092,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
		1,94,3,94,1104,8,94,1,94,3,94,1107,8,94,1,94,1,94,1,94,3,94,1112,8,94,
		1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1121,8,94,1,94,1,94,1,94,1,94,
		1,94,1,94,1,94,3,94,1130,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
		1139,8,94,1,94,1,94,1,94,3,94,1144,8,94,1,94,1,94,3,94,1148,8,94,1,94,
		3,94,1151,8,94,1,94,1,94,1,94,3,94,1156,8,94,1,94,1,94,3,94,1160,8,94,
		1,94,3,94,1163,8,94,1,94,3,94,1166,8,94,1,94,1,94,1,94,1,94,1,94,1,94,
		3,94,1174,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1181,8,94,1,94,3,94,1184,
		8,94,1,94,1,94,3,94,1188,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1195,8,94,
		1,94,1,94,1,94,3,94,1200,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1207,8,94,
		1,94,1,94,1,94,3,94,1212,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1219,8,94,
		1,94,3,94,1222,8,94,1,94,1,94,3,94,1226,8,94,1,94,1,94,1,94,1,94,1,94,
		3,94,1233,8,94,1,94,1,94,1,94,3,94,1238,8,94,1,94,1,94,1,94,1,94,1,94,
		3,94,1245,8,94,1,94,1,94,1,94,3,94,1250,8,94,1,94,1,94,3,94,1254,8,94,
		1,94,3,94,1257,8,94,1,94,3,94,1260,8,94,1,94,1,94,1,94,1,94,1,94,1,94,
		3,94,1268,8,94,1,94,1,94,3,94,1272,8,94,1,94,3,94,1275,8,94,1,94,3,94,
		1278,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1286,8,94,1,95,1,95,1,96,
		1,96,1,96,3,96,1293,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,
		1303,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1313,8,98,1,99,
		1,99,1,99,1,99,1,99,1,99,3,99,1321,8,99,1,100,1,100,1,100,1,100,1,100,
		1,100,1,100,1,100,3,100,1331,8,100,1,101,1,101,1,101,3,101,1336,8,101,
		1,102,1,102,1,102,3,102,1341,8,102,1,102,1,102,1,102,1,102,3,102,1347,
		8,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1355,8,102,1,102,1,102,
		3,102,1359,8,102,1,103,1,103,1,103,1,103,1,103,3,103,1366,8,103,1,103,
		1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1378,8,103,
		1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1390,
		8,103,1,103,3,103,1393,8,103,1,103,1,103,1,103,3,103,1398,8,103,1,103,
		1,103,1,103,1,103,1,103,1,103,1,103,3,103,1407,8,103,1,103,1,103,1,103,
		1,103,1,103,1,103,1,103,3,103,1416,8,103,1,103,1,103,1,103,1,103,1,103,
		1,103,1,103,3,103,1425,8,103,1,103,1,103,3,103,1429,8,103,1,104,1,104,
		1,104,3,104,1434,8,104,1,105,1,105,1,105,3,105,1439,8,105,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,0,0,107,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,202,204,206,208,210,212,0,17,1,0,5,6,2,
		0,6,6,15,15,3,0,1,1,8,8,22,23,1,0,26,27,1,0,30,31,2,0,12,12,33,33,2,0,
		11,11,24,24,1,0,102,104,2,0,102,102,104,104,1,0,102,103,1,0,68,70,1,0,
		103,104,1,0,78,81,1,0,83,85,2,0,11,11,28,28,2,0,102,103,105,105,2,0,11,
		11,13,13,1621,0,214,1,0,0,0,2,219,1,0,0,0,4,251,1,0,0,0,6,253,1,0,0,0,
		8,267,1,0,0,0,10,273,1,0,0,0,12,282,1,0,0,0,14,293,1,0,0,0,16,295,1,0,
		0,0,18,307,1,0,0,0,20,312,1,0,0,0,22,319,1,0,0,0,24,325,1,0,0,0,26,332,
		1,0,0,0,28,334,1,0,0,0,30,345,1,0,0,0,32,357,1,0,0,0,34,371,1,0,0,0,36,
		382,1,0,0,0,38,387,1,0,0,0,40,390,1,0,0,0,42,401,1,0,0,0,44,408,1,0,0,
		0,46,411,1,0,0,0,48,422,1,0,0,0,50,424,1,0,0,0,52,450,1,0,0,0,54,523,1,
		0,0,0,56,530,1,0,0,0,58,532,1,0,0,0,60,534,1,0,0,0,62,539,1,0,0,0,64,544,
		1,0,0,0,66,549,1,0,0,0,68,576,1,0,0,0,70,578,1,0,0,0,72,584,1,0,0,0,74,
		590,1,0,0,0,76,596,1,0,0,0,78,602,1,0,0,0,80,608,1,0,0,0,82,621,1,0,0,
		0,84,623,1,0,0,0,86,627,1,0,0,0,88,638,1,0,0,0,90,647,1,0,0,0,92,659,1,
		0,0,0,94,669,1,0,0,0,96,671,1,0,0,0,98,683,1,0,0,0,100,685,1,0,0,0,102,
		689,1,0,0,0,104,693,1,0,0,0,106,697,1,0,0,0,108,712,1,0,0,0,110,714,1,
		0,0,0,112,719,1,0,0,0,114,722,1,0,0,0,116,726,1,0,0,0,118,729,1,0,0,0,
		120,733,1,0,0,0,122,740,1,0,0,0,124,746,1,0,0,0,126,748,1,0,0,0,128,760,
		1,0,0,0,130,767,1,0,0,0,132,774,1,0,0,0,134,780,1,0,0,0,136,786,1,0,0,
		0,138,788,1,0,0,0,140,796,1,0,0,0,142,806,1,0,0,0,144,816,1,0,0,0,146,
		824,1,0,0,0,148,850,1,0,0,0,150,920,1,0,0,0,152,922,1,0,0,0,154,956,1,
		0,0,0,156,958,1,0,0,0,158,963,1,0,0,0,160,969,1,0,0,0,162,973,1,0,0,0,
		164,979,1,0,0,0,166,981,1,0,0,0,168,986,1,0,0,0,170,991,1,0,0,0,172,1001,
		1,0,0,0,174,1006,1,0,0,0,176,1008,1,0,0,0,178,1022,1,0,0,0,180,1030,1,
		0,0,0,182,1038,1,0,0,0,184,1046,1,0,0,0,186,1072,1,0,0,0,188,1285,1,0,
		0,0,190,1287,1,0,0,0,192,1289,1,0,0,0,194,1294,1,0,0,0,196,1304,1,0,0,
		0,198,1314,1,0,0,0,200,1322,1,0,0,0,202,1332,1,0,0,0,204,1358,1,0,0,0,
		206,1428,1,0,0,0,208,1430,1,0,0,0,210,1435,1,0,0,0,212,1440,1,0,0,0,214,
		215,3,2,1,0,215,1,1,0,0,0,216,217,3,4,2,0,217,218,5,100,0,0,218,220,1,
		0,0,0,219,216,1,0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,
		222,3,1,0,0,0,223,252,3,56,28,0,224,252,3,68,34,0,225,252,3,98,49,0,226,
		252,3,108,54,0,227,252,3,160,80,0,228,252,3,162,81,0,229,252,3,164,82,
		0,230,252,3,142,71,0,231,252,3,106,53,0,232,252,3,142,71,0,233,252,3,176,
		88,0,234,252,3,178,89,0,235,252,3,180,90,0,236,252,3,182,91,0,237,252,
		3,194,97,0,238,252,3,144,72,0,239,252,3,198,99,0,240,252,3,6,3,0,241,252,
		3,10,5,0,242,252,3,8,4,0,243,252,3,16,8,0,244,252,3,18,9,0,245,252,3,20,
		10,0,246,252,3,28,14,0,247,252,3,30,15,0,248,252,3,32,16,0,249,252,3,34,
		17,0,250,252,3,196,98,0,251,223,1,0,0,0,251,224,1,0,0,0,251,225,1,0,0,
		0,251,226,1,0,0,0,251,227,1,0,0,0,251,228,1,0,0,0,251,229,1,0,0,0,251,
		230,1,0,0,0,251,231,1,0,0,0,251,232,1,0,0,0,251,233,1,0,0,0,251,234,1,
		0,0,0,251,235,1,0,0,0,251,236,1,0,0,0,251,237,1,0,0,0,251,238,1,0,0,0,
		251,239,1,0,0,0,251,240,1,0,0,0,251,241,1,0,0,0,251,242,1,0,0,0,251,243,
		1,0,0,0,251,244,1,0,0,0,251,245,1,0,0,0,251,246,1,0,0,0,251,247,1,0,0,
		0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,5,1,0,0,0,253,254,
		5,1,0,0,254,260,5,2,0,0,255,261,3,210,105,0,256,257,5,3,0,0,257,258,3,
		12,6,0,258,259,5,4,0,0,259,261,1,0,0,0,260,255,1,0,0,0,260,256,1,0,0,0,
		261,262,1,0,0,0,262,265,7,0,0,0,263,266,3,82,41,0,264,266,3,84,42,0,265,
		263,1,0,0,0,265,264,1,0,0,0,266,7,1,0,0,0,267,268,5,7,0,0,268,271,5,2,
		0,0,269,272,3,96,48,0,270,272,3,94,47,0,271,269,1,0,0,0,271,270,1,0,0,
		0,272,9,1,0,0,0,273,274,5,8,0,0,274,277,5,2,0,0,275,278,3,96,48,0,276,
		278,3,94,47,0,277,275,1,0,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,280,
		5,9,0,0,280,281,3,12,6,0,281,11,1,0,0,0,282,285,3,14,7,0,283,284,5,10,
		0,0,284,286,3,12,6,0,285,283,1,0,0,0,285,286,1,0,0,0,286,13,1,0,0,0,287,
		288,5,11,0,0,288,289,5,12,0,0,289,294,3,210,105,0,290,291,5,13,0,0,291,
		292,5,12,0,0,292,294,3,210,105,0,293,287,1,0,0,0,293,290,1,0,0,0,294,15,
		1,0,0,0,295,296,5,1,0,0,296,297,5,2,0,0,297,300,5,14,0,0,298,301,3,210,
		105,0,299,301,3,40,20,0,300,298,1,0,0,0,300,299,1,0,0,0,301,302,1,0,0,
		0,302,305,7,0,0,0,303,306,3,94,47,0,304,306,3,96,48,0,305,303,1,0,0,0,
		305,304,1,0,0,0,306,17,1,0,0,0,307,308,5,7,0,0,308,309,5,2,0,0,309,310,
		5,14,0,0,310,311,3,24,12,0,311,19,1,0,0,0,312,313,5,8,0,0,313,314,5,2,
		0,0,314,315,5,14,0,0,315,316,3,24,12,0,316,317,5,9,0,0,317,318,3,40,20,
		0,318,21,1,0,0,0,319,320,5,2,0,0,320,321,5,14,0,0,321,322,3,26,13,0,322,
		323,7,1,0,0,323,324,3,94,47,0,324,23,1,0,0,0,325,326,3,26,13,0,326,327,
		7,1,0,0,327,328,3,94,47,0,328,25,1,0,0,0,329,333,3,158,79,0,330,333,3,
		210,105,0,331,333,5,103,0,0,332,329,1,0,0,0,332,330,1,0,0,0,332,331,1,
		0,0,0,333,27,1,0,0,0,334,335,5,8,0,0,335,336,5,2,0,0,336,337,5,16,0,0,
		337,338,5,6,0,0,338,339,3,94,47,0,339,340,5,9,0,0,340,343,3,40,20,0,341,
		342,5,17,0,0,342,344,3,50,25,0,343,341,1,0,0,0,343,344,1,0,0,0,344,29,
		1,0,0,0,345,346,5,7,0,0,346,347,5,2,0,0,347,348,5,16,0,0,348,351,7,1,0,
		0,349,352,3,94,47,0,350,352,3,96,48,0,351,349,1,0,0,0,351,350,1,0,0,0,
		352,355,1,0,0,0,353,354,5,17,0,0,354,356,3,50,25,0,355,353,1,0,0,0,355,
		356,1,0,0,0,356,31,1,0,0,0,357,358,5,18,0,0,358,359,5,2,0,0,359,360,5,
		16,0,0,360,361,7,1,0,0,361,362,3,44,22,0,362,363,5,19,0,0,363,366,3,48,
		24,0,364,365,5,17,0,0,365,367,3,50,25,0,366,364,1,0,0,0,366,367,1,0,0,
		0,367,369,1,0,0,0,368,370,3,36,18,0,369,368,1,0,0,0,369,370,1,0,0,0,370,
		33,1,0,0,0,371,372,5,20,0,0,372,373,5,2,0,0,373,374,5,16,0,0,374,375,7,
		1,0,0,375,376,3,44,22,0,376,377,5,19,0,0,377,380,3,44,22,0,378,379,5,17,
		0,0,379,381,3,50,25,0,380,378,1,0,0,0,380,381,1,0,0,0,381,35,1,0,0,0,382,
		385,3,38,19,0,383,384,5,10,0,0,384,386,3,36,18,0,385,383,1,0,0,0,385,386,
		1,0,0,0,386,37,1,0,0,0,387,388,5,21,0,0,388,389,7,2,0,0,389,39,1,0,0,0,
		390,393,3,42,21,0,391,392,5,10,0,0,392,394,3,40,20,0,393,391,1,0,0,0,393,
		394,1,0,0,0,394,41,1,0,0,0,395,396,5,11,0,0,396,397,5,12,0,0,397,402,3,
		210,105,0,398,399,5,24,0,0,399,400,5,12,0,0,400,402,3,210,105,0,401,395,
		1,0,0,0,401,398,1,0,0,0,402,43,1,0,0,0,403,409,3,94,47,0,404,409,3,96,
		48,0,405,409,3,46,23,0,406,409,3,126,63,0,407,409,5,25,0,0,408,403,1,0,
		0,0,408,404,1,0,0,0,408,405,1,0,0,0,408,406,1,0,0,0,408,407,1,0,0,0,409,
		45,1,0,0,0,410,412,7,3,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,
		0,0,413,414,5,28,0,0,414,415,3,210,105,0,415,47,1,0,0,0,416,423,3,94,47,
		0,417,423,3,96,48,0,418,423,3,46,23,0,419,423,3,126,63,0,420,423,5,25,
		0,0,421,423,5,29,0,0,422,416,1,0,0,0,422,417,1,0,0,0,422,418,1,0,0,0,422,
		419,1,0,0,0,422,420,1,0,0,0,422,421,1,0,0,0,423,49,1,0,0,0,424,427,3,52,
		26,0,425,426,7,4,0,0,426,428,3,50,25,0,427,425,1,0,0,0,427,428,1,0,0,0,
		428,51,1,0,0,0,429,432,3,54,27,0,430,431,7,4,0,0,431,433,3,52,26,0,432,
		430,1,0,0,0,432,433,1,0,0,0,433,451,1,0,0,0,434,435,5,3,0,0,435,438,3,
		54,27,0,436,437,7,4,0,0,437,439,3,52,26,0,438,436,1,0,0,0,438,439,1,0,
		0,0,439,440,1,0,0,0,440,441,5,4,0,0,441,451,1,0,0,0,442,443,5,3,0,0,443,
		446,3,52,26,0,444,445,7,4,0,0,445,447,3,52,26,0,446,444,1,0,0,0,446,447,
		1,0,0,0,447,448,1,0,0,0,448,449,5,4,0,0,449,451,1,0,0,0,450,429,1,0,0,
		0,450,434,1,0,0,0,450,442,1,0,0,0,451,53,1,0,0,0,452,453,5,32,0,0,453,
		454,7,5,0,0,454,524,3,158,79,0,455,457,5,32,0,0,456,458,5,34,0,0,457,456,
		1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,5,6,0,0,460,461,5,3,0,
		0,461,462,3,156,78,0,462,463,5,4,0,0,463,524,1,0,0,0,464,465,7,6,0,0,465,
		466,7,5,0,0,466,524,3,210,105,0,467,469,7,6,0,0,468,470,5,34,0,0,469,468,
		1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,6,0,0,472,475,5,3,0,
		0,473,476,3,208,104,0,474,476,3,192,96,0,475,473,1,0,0,0,475,474,1,0,0,
		0,476,477,1,0,0,0,477,478,5,4,0,0,478,524,1,0,0,0,479,484,7,6,0,0,480,
		485,5,35,0,0,481,482,5,36,0,0,482,483,5,34,0,0,483,485,5,37,0,0,484,480,
		1,0,0,0,484,481,1,0,0,0,485,487,1,0,0,0,486,488,5,38,0,0,487,486,1,0,0,
		0,487,488,1,0,0,0,488,489,1,0,0,0,489,524,3,190,95,0,490,492,7,6,0,0,491,
		493,5,34,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,5,
		6,0,0,495,496,5,3,0,0,496,497,3,208,104,0,497,498,5,4,0,0,498,524,1,0,
		0,0,499,501,7,6,0,0,500,502,5,34,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
		503,1,0,0,0,503,504,5,39,0,0,504,524,3,210,105,0,505,510,7,6,0,0,506,511,
		5,40,0,0,507,508,5,36,0,0,508,509,5,34,0,0,509,511,5,41,0,0,510,506,1,
		0,0,0,510,507,1,0,0,0,511,512,1,0,0,0,512,513,5,42,0,0,513,524,3,210,105,
		0,514,519,7,6,0,0,515,520,5,43,0,0,516,517,5,36,0,0,517,518,5,34,0,0,518,
		520,5,44,0,0,519,515,1,0,0,0,519,516,1,0,0,0,520,521,1,0,0,0,521,522,5,
		42,0,0,522,524,3,210,105,0,523,452,1,0,0,0,523,455,1,0,0,0,523,464,1,0,
		0,0,523,467,1,0,0,0,523,479,1,0,0,0,523,490,1,0,0,0,523,499,1,0,0,0,523,
		505,1,0,0,0,523,514,1,0,0,0,524,55,1,0,0,0,525,531,3,58,29,0,526,531,3,
		60,30,0,527,531,3,62,31,0,528,531,3,64,32,0,529,531,3,66,33,0,530,525,
		1,0,0,0,530,526,1,0,0,0,530,527,1,0,0,0,530,528,1,0,0,0,530,529,1,0,0,
		0,531,57,1,0,0,0,532,533,5,45,0,0,533,59,1,0,0,0,534,535,5,45,0,0,535,
		536,5,42,0,0,536,537,5,46,0,0,537,538,5,47,0,0,538,61,1,0,0,0,539,540,
		5,45,0,0,540,541,5,42,0,0,541,542,5,46,0,0,542,543,5,48,0,0,543,63,1,0,
		0,0,544,545,5,45,0,0,545,546,5,42,0,0,546,547,5,46,0,0,547,548,5,49,0,
		0,548,65,1,0,0,0,549,550,5,45,0,0,550,551,5,42,0,0,551,552,5,46,0,0,552,
		553,5,47,0,0,553,554,5,30,0,0,554,555,5,48,0,0,555,67,1,0,0,0,556,577,
		3,70,35,0,557,577,3,72,36,0,558,577,3,74,37,0,559,577,3,76,38,0,560,577,
		3,78,39,0,561,577,3,80,40,0,562,563,5,50,0,0,563,564,5,103,0,0,564,574,
		5,12,0,0,565,575,5,103,0,0,566,575,3,82,41,0,567,575,3,88,44,0,568,575,
		3,210,105,0,569,575,3,190,95,0,570,575,3,90,45,0,571,575,3,158,79,0,572,
		575,3,92,46,0,573,575,3,94,47,0,574,565,1,0,0,0,574,566,1,0,0,0,574,567,
		1,0,0,0,574,568,1,0,0,0,574,569,1,0,0,0,574,570,1,0,0,0,574,571,1,0,0,
		0,574,572,1,0,0,0,574,573,1,0,0,0,575,577,1,0,0,0,576,556,1,0,0,0,576,
		557,1,0,0,0,576,558,1,0,0,0,576,559,1,0,0,0,576,560,1,0,0,0,576,561,1,
		0,0,0,576,562,1,0,0,0,577,69,1,0,0,0,578,579,5,51,0,0,579,582,5,103,0,
		0,580,581,5,12,0,0,581,583,3,82,41,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
		71,1,0,0,0,584,585,5,52,0,0,585,588,5,103,0,0,586,587,5,12,0,0,587,589,
		3,88,44,0,588,586,1,0,0,0,588,589,1,0,0,0,589,73,1,0,0,0,590,591,5,53,
		0,0,591,594,5,103,0,0,592,593,5,12,0,0,593,595,3,210,105,0,594,592,1,0,
		0,0,594,595,1,0,0,0,595,75,1,0,0,0,596,597,5,38,0,0,597,600,5,103,0,0,
		598,599,5,12,0,0,599,601,3,190,95,0,600,598,1,0,0,0,600,601,1,0,0,0,601,
		77,1,0,0,0,602,603,5,54,0,0,603,606,5,103,0,0,604,605,5,12,0,0,605,607,
		3,90,45,0,606,604,1,0,0,0,606,607,1,0,0,0,607,79,1,0,0,0,608,609,5,2,0,
		0,609,610,5,14,0,0,610,613,5,103,0,0,611,612,5,12,0,0,612,614,3,92,46,
		0,613,611,1,0,0,0,613,614,1,0,0,0,614,81,1,0,0,0,615,616,5,51,0,0,616,
		618,7,7,0,0,617,619,3,136,68,0,618,617,1,0,0,0,618,619,1,0,0,0,619,622,
		1,0,0,0,620,622,5,103,0,0,621,615,1,0,0,0,621,620,1,0,0,0,622,83,1,0,0,
		0,623,624,7,8,0,0,624,85,1,0,0,0,625,628,3,82,41,0,626,628,3,84,42,0,627,
		625,1,0,0,0,627,626,1,0,0,0,628,87,1,0,0,0,629,630,5,52,0,0,630,631,5,
		102,0,0,631,634,5,6,0,0,632,635,3,82,41,0,633,635,3,126,63,0,634,632,1,
		0,0,0,634,633,1,0,0,0,635,639,1,0,0,0,636,637,5,52,0,0,637,639,5,103,0,
		0,638,629,1,0,0,0,638,636,1,0,0,0,639,89,1,0,0,0,640,641,7,7,0,0,641,644,
		7,1,0,0,642,645,3,82,41,0,643,645,3,126,63,0,644,642,1,0,0,0,644,643,1,
		0,0,0,645,648,1,0,0,0,646,648,5,103,0,0,647,640,1,0,0,0,647,646,1,0,0,
		0,648,91,1,0,0,0,649,650,5,2,0,0,650,654,5,14,0,0,651,655,3,158,79,0,652,
		655,3,210,105,0,653,655,5,103,0,0,654,651,1,0,0,0,654,652,1,0,0,0,654,
		653,1,0,0,0,655,656,1,0,0,0,656,657,7,1,0,0,657,660,3,94,47,0,658,660,
		5,103,0,0,659,649,1,0,0,0,659,658,1,0,0,0,660,93,1,0,0,0,661,662,5,2,0,
		0,662,663,7,7,0,0,663,666,7,1,0,0,664,667,3,82,41,0,665,667,3,84,42,0,
		666,664,1,0,0,0,666,665,1,0,0,0,667,670,1,0,0,0,668,670,5,103,0,0,669,
		661,1,0,0,0,669,668,1,0,0,0,670,95,1,0,0,0,671,672,7,7,0,0,672,675,5,6,
		0,0,673,676,3,82,41,0,674,676,3,84,42,0,675,673,1,0,0,0,675,674,1,0,0,
		0,676,97,1,0,0,0,677,678,5,103,0,0,678,679,5,12,0,0,679,684,5,103,0,0,
		680,684,3,100,50,0,681,684,3,104,52,0,682,684,3,102,51,0,683,677,1,0,0,
		0,683,680,1,0,0,0,683,681,1,0,0,0,683,682,1,0,0,0,684,99,1,0,0,0,685,686,
		5,103,0,0,686,687,5,12,0,0,687,688,3,82,41,0,688,101,1,0,0,0,689,690,5,
		103,0,0,690,691,5,12,0,0,691,692,3,88,44,0,692,103,1,0,0,0,693,694,5,103,
		0,0,694,695,5,12,0,0,695,696,5,102,0,0,696,105,1,0,0,0,697,698,5,18,0,
		0,698,701,5,55,0,0,699,700,5,15,0,0,700,702,3,122,61,0,701,699,1,0,0,0,
		701,702,1,0,0,0,702,703,1,0,0,0,703,704,5,19,0,0,704,705,3,124,62,0,705,
		107,1,0,0,0,706,713,3,110,55,0,707,713,3,112,56,0,708,713,3,114,57,0,709,
		713,3,116,58,0,710,713,3,118,59,0,711,713,3,120,60,0,712,706,1,0,0,0,712,
		707,1,0,0,0,712,708,1,0,0,0,712,709,1,0,0,0,712,710,1,0,0,0,712,711,1,
		0,0,0,713,109,1,0,0,0,714,715,5,56,0,0,715,716,5,55,0,0,716,717,5,15,0,
		0,717,718,3,122,61,0,718,111,1,0,0,0,719,720,5,56,0,0,720,721,5,103,0,
		0,721,113,1,0,0,0,722,723,5,56,0,0,723,724,5,51,0,0,724,725,7,9,0,0,725,
		115,1,0,0,0,726,727,5,56,0,0,727,728,5,102,0,0,728,117,1,0,0,0,729,730,
		5,56,0,0,730,731,5,57,0,0,731,732,5,58,0,0,732,119,1,0,0,0,733,734,5,56,
		0,0,734,735,5,59,0,0,735,736,5,60,0,0,736,121,1,0,0,0,737,741,5,61,0,0,
		738,739,5,59,0,0,739,741,5,60,0,0,740,737,1,0,0,0,740,738,1,0,0,0,741,
		123,1,0,0,0,742,747,5,29,0,0,743,744,5,59,0,0,744,747,5,60,0,0,745,747,
		3,126,63,0,746,742,1,0,0,0,746,743,1,0,0,0,746,745,1,0,0,0,747,125,1,0,
		0,0,748,750,5,62,0,0,749,751,7,9,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
		127,1,0,0,0,752,761,5,29,0,0,753,754,5,59,0,0,754,761,5,60,0,0,755,757,
		5,62,0,0,756,758,5,102,0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,761,1,0,
		0,0,759,761,3,82,41,0,760,752,1,0,0,0,760,753,1,0,0,0,760,755,1,0,0,0,
		760,759,1,0,0,0,761,129,1,0,0,0,762,768,5,29,0,0,763,764,5,59,0,0,764,
		768,5,60,0,0,765,768,3,126,63,0,766,768,3,86,43,0,767,762,1,0,0,0,767,
		763,1,0,0,0,767,765,1,0,0,0,767,766,1,0,0,0,768,131,1,0,0,0,769,775,5,
		29,0,0,770,771,5,59,0,0,771,775,5,60,0,0,772,775,3,126,63,0,773,775,3,
		82,41,0,774,769,1,0,0,0,774,770,1,0,0,0,774,772,1,0,0,0,774,773,1,0,0,
		0,775,133,1,0,0,0,776,781,5,29,0,0,777,778,5,59,0,0,778,781,5,60,0,0,779,
		781,3,126,63,0,780,776,1,0,0,0,780,777,1,0,0,0,780,779,1,0,0,0,781,135,
		1,0,0,0,782,783,5,63,0,0,783,787,5,61,0,0,784,785,5,6,0,0,785,787,3,126,
		63,0,786,782,1,0,0,0,786,784,1,0,0,0,787,137,1,0,0,0,788,789,5,1,0,0,789,
		790,5,52,0,0,790,791,5,3,0,0,791,792,3,152,76,0,792,793,5,4,0,0,793,794,
		5,6,0,0,794,795,3,86,43,0,795,139,1,0,0,0,796,797,5,8,0,0,797,798,5,64,
		0,0,798,799,5,6,0,0,799,800,3,86,43,0,800,801,5,9,0,0,801,804,3,152,76,
		0,802,803,5,17,0,0,803,805,3,146,73,0,804,802,1,0,0,0,804,805,1,0,0,0,
		805,141,1,0,0,0,806,807,5,18,0,0,807,808,5,64,0,0,808,809,7,1,0,0,809,
		810,3,86,43,0,810,811,5,19,0,0,811,814,3,130,65,0,812,813,5,17,0,0,813,
		815,3,146,73,0,814,812,1,0,0,0,814,815,1,0,0,0,815,143,1,0,0,0,816,817,
		5,7,0,0,817,818,5,64,0,0,818,819,7,1,0,0,819,822,3,86,43,0,820,821,5,17,
		0,0,821,823,3,146,73,0,822,820,1,0,0,0,822,823,1,0,0,0,823,145,1,0,0,0,
		824,827,3,148,74,0,825,826,7,4,0,0,826,828,3,146,73,0,827,825,1,0,0,0,
		827,828,1,0,0,0,828,147,1,0,0,0,829,832,3,150,75,0,830,831,7,4,0,0,831,
		833,3,148,74,0,832,830,1,0,0,0,832,833,1,0,0,0,833,851,1,0,0,0,834,835,
		5,3,0,0,835,838,3,150,75,0,836,837,7,4,0,0,837,839,3,148,74,0,838,836,
		1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,841,5,4,0,0,841,851,1,0,0,
		0,842,843,5,3,0,0,843,846,3,148,74,0,844,845,7,4,0,0,845,847,3,148,74,
		0,846,844,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,5,4,0,0,849,
		851,1,0,0,0,850,829,1,0,0,0,850,834,1,0,0,0,850,842,1,0,0,0,851,149,1,
		0,0,0,852,853,5,32,0,0,853,854,7,5,0,0,854,921,3,158,79,0,855,857,5,32,
		0,0,856,858,5,34,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,
		860,5,6,0,0,860,861,5,3,0,0,861,862,3,156,78,0,862,863,5,4,0,0,863,921,
		1,0,0,0,864,865,5,11,0,0,865,866,7,5,0,0,866,921,3,210,105,0,867,869,5,
		11,0,0,868,870,5,34,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,
		0,871,872,5,6,0,0,872,873,5,3,0,0,873,874,3,208,104,0,874,875,5,4,0,0,
		875,921,1,0,0,0,876,881,5,11,0,0,877,882,5,35,0,0,878,879,5,36,0,0,879,
		880,5,34,0,0,880,882,5,37,0,0,881,877,1,0,0,0,881,878,1,0,0,0,882,884,
		1,0,0,0,883,885,5,38,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,1,0,0,
		0,886,921,3,190,95,0,887,889,5,11,0,0,888,890,5,34,0,0,889,888,1,0,0,0,
		889,890,1,0,0,0,890,891,1,0,0,0,891,892,5,6,0,0,892,893,5,3,0,0,893,894,
		3,192,96,0,894,895,5,4,0,0,895,921,1,0,0,0,896,898,5,11,0,0,897,899,5,
		34,0,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,5,39,0,
		0,901,921,3,210,105,0,902,907,5,11,0,0,903,908,5,40,0,0,904,905,5,36,0,
		0,905,906,5,34,0,0,906,908,5,41,0,0,907,903,1,0,0,0,907,904,1,0,0,0,908,
		909,1,0,0,0,909,910,5,42,0,0,910,921,3,210,105,0,911,916,5,11,0,0,912,
		917,5,43,0,0,913,914,5,36,0,0,914,915,5,34,0,0,915,917,5,44,0,0,916,912,
		1,0,0,0,916,913,1,0,0,0,917,918,1,0,0,0,918,919,5,42,0,0,919,921,3,210,
		105,0,920,852,1,0,0,0,920,855,1,0,0,0,920,864,1,0,0,0,920,867,1,0,0,0,
		920,876,1,0,0,0,920,887,1,0,0,0,920,896,1,0,0,0,920,902,1,0,0,0,920,911,
		1,0,0,0,921,151,1,0,0,0,922,925,3,154,77,0,923,924,5,10,0,0,924,926,3,
		152,76,0,925,923,1,0,0,0,925,926,1,0,0,0,926,153,1,0,0,0,927,928,5,65,
		0,0,928,929,5,11,0,0,929,930,5,12,0,0,930,957,3,210,105,0,931,932,5,66,
		0,0,932,933,5,11,0,0,933,934,5,12,0,0,934,957,3,210,105,0,935,936,5,67,
		0,0,936,937,5,12,0,0,937,957,7,10,0,0,938,939,5,71,0,0,939,940,5,72,0,
		0,940,957,3,210,105,0,941,942,5,73,0,0,942,943,5,72,0,0,943,957,3,210,
		105,0,944,945,5,74,0,0,945,946,5,75,0,0,946,947,5,12,0,0,947,957,3,210,
		105,0,948,949,5,74,0,0,949,950,5,76,0,0,950,951,5,12,0,0,951,957,3,210,
		105,0,952,953,5,74,0,0,953,954,5,77,0,0,954,955,5,12,0,0,955,957,3,210,
		105,0,956,927,1,0,0,0,956,931,1,0,0,0,956,935,1,0,0,0,956,938,1,0,0,0,
		956,941,1,0,0,0,956,944,1,0,0,0,956,948,1,0,0,0,956,952,1,0,0,0,957,155,
		1,0,0,0,958,961,3,158,79,0,959,960,5,10,0,0,960,962,3,156,78,0,961,959,
		1,0,0,0,961,962,1,0,0,0,962,157,1,0,0,0,963,966,7,11,0,0,964,965,7,12,
		0,0,965,967,3,158,79,0,966,964,1,0,0,0,966,967,1,0,0,0,967,159,1,0,0,0,
		968,970,5,82,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,972,
		7,13,0,0,972,161,1,0,0,0,973,974,5,86,0,0,974,975,5,104,0,0,975,163,1,
		0,0,0,976,980,3,166,83,0,977,980,3,168,84,0,978,980,3,170,85,0,979,976,
		1,0,0,0,979,977,1,0,0,0,979,978,1,0,0,0,980,165,1,0,0,0,981,982,5,87,0,
		0,982,983,3,82,41,0,983,984,5,30,0,0,984,985,3,82,41,0,985,167,1,0,0,0,
		986,987,5,87,0,0,987,988,3,88,44,0,988,989,5,30,0,0,989,990,3,88,44,0,
		990,169,1,0,0,0,991,992,5,87,0,0,992,993,5,88,0,0,993,994,5,64,0,0,994,
		995,5,6,0,0,995,996,3,82,41,0,996,997,5,30,0,0,997,998,3,82,41,0,998,171,
		1,0,0,0,999,1002,3,126,63,0,1000,1002,3,86,43,0,1001,999,1,0,0,0,1001,
		1000,1,0,0,0,1002,173,1,0,0,0,1003,1007,5,29,0,0,1004,1007,3,126,63,0,
		1005,1007,3,86,43,0,1006,1003,1,0,0,0,1006,1004,1,0,0,0,1006,1005,1,0,
		0,0,1007,175,1,0,0,0,1008,1009,5,18,0,0,1009,1012,5,89,0,0,1010,1011,5,
		42,0,0,1011,1013,5,69,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1014,
		1,0,0,0,1014,1015,7,1,0,0,1015,1016,3,172,86,0,1016,1017,5,19,0,0,1017,
		1020,3,174,87,0,1018,1019,5,17,0,0,1019,1021,3,184,92,0,1020,1018,1,0,
		0,0,1020,1021,1,0,0,0,1021,177,1,0,0,0,1022,1023,5,90,0,0,1023,1024,5,
		89,0,0,1024,1025,7,1,0,0,1025,1028,3,86,43,0,1026,1027,5,17,0,0,1027,1029,
		3,184,92,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,179,1,0,0,0,1030,1031,
		5,91,0,0,1031,1032,5,89,0,0,1032,1033,7,1,0,0,1033,1036,3,86,43,0,1034,
		1035,5,17,0,0,1035,1037,3,184,92,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,
		1037,181,1,0,0,0,1038,1039,5,7,0,0,1039,1040,5,89,0,0,1040,1041,7,1,0,
		0,1041,1044,3,86,43,0,1042,1043,5,17,0,0,1043,1045,3,184,92,0,1044,1042,
		1,0,0,0,1044,1045,1,0,0,0,1045,183,1,0,0,0,1046,1049,3,186,93,0,1047,1048,
		7,4,0,0,1048,1050,3,184,92,0,1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,
		185,1,0,0,0,1051,1054,3,188,94,0,1052,1053,7,4,0,0,1053,1055,3,186,93,
		0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,1073,1,0,0,0,1056,1057,5,3,
		0,0,1057,1060,3,188,94,0,1058,1059,7,4,0,0,1059,1061,3,186,93,0,1060,1058,
		1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,4,0,0,1063,1073,
		1,0,0,0,1064,1065,5,3,0,0,1065,1068,3,186,93,0,1066,1067,7,4,0,0,1067,
		1069,3,186,93,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,
		1070,1071,5,4,0,0,1071,1073,1,0,0,0,1072,1051,1,0,0,0,1072,1056,1,0,0,
		0,1072,1064,1,0,0,0,1073,187,1,0,0,0,1074,1075,5,32,0,0,1075,1076,7,5,
		0,0,1076,1286,3,158,79,0,1077,1079,5,32,0,0,1078,1080,5,34,0,0,1079,1078,
		1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1082,5,6,0,0,1082,1083,
		5,3,0,0,1083,1084,3,156,78,0,1084,1085,5,4,0,0,1085,1286,1,0,0,0,1086,
		1087,7,14,0,0,1087,1088,7,5,0,0,1088,1286,3,210,105,0,1089,1091,7,14,0,
		0,1090,1092,5,34,0,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,
		0,0,1093,1094,5,6,0,0,1094,1095,5,3,0,0,1095,1096,3,208,104,0,1096,1097,
		5,4,0,0,1097,1286,1,0,0,0,1098,1103,7,14,0,0,1099,1104,5,35,0,0,1100,1101,
		5,36,0,0,1101,1102,5,34,0,0,1102,1104,5,37,0,0,1103,1099,1,0,0,0,1103,
		1100,1,0,0,0,1104,1106,1,0,0,0,1105,1107,5,38,0,0,1106,1105,1,0,0,0,1106,
		1107,1,0,0,0,1107,1108,1,0,0,0,1108,1286,3,190,95,0,1109,1111,7,14,0,0,
		1110,1112,5,34,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,
		0,1113,1114,5,6,0,0,1114,1115,5,3,0,0,1115,1116,3,208,104,0,1116,1117,
		5,4,0,0,1117,1286,1,0,0,0,1118,1120,7,14,0,0,1119,1121,5,34,0,0,1120,1119,
		1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1123,5,39,0,0,1123,1286,
		3,210,105,0,1124,1129,7,14,0,0,1125,1130,5,40,0,0,1126,1127,5,36,0,0,1127,
		1128,5,34,0,0,1128,1130,5,41,0,0,1129,1125,1,0,0,0,1129,1126,1,0,0,0,1130,
		1131,1,0,0,0,1131,1132,5,42,0,0,1132,1286,3,210,105,0,1133,1138,7,14,0,
		0,1134,1139,5,43,0,0,1135,1136,5,36,0,0,1136,1137,5,34,0,0,1137,1139,5,
		44,0,0,1138,1134,1,0,0,0,1138,1135,1,0,0,0,1139,1140,1,0,0,0,1140,1141,
		5,42,0,0,1141,1286,3,210,105,0,1142,1144,5,92,0,0,1143,1142,1,0,0,0,1143,
		1144,1,0,0,0,1144,1145,1,0,0,0,1145,1151,5,72,0,0,1146,1148,5,88,0,0,1147,
		1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1151,5,93,0,0,1150,
		1143,1,0,0,0,1150,1147,1,0,0,0,1151,1152,1,0,0,0,1152,1153,7,5,0,0,1153,
		1286,3,210,105,0,1154,1156,5,92,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,
		0,1156,1157,1,0,0,0,1157,1163,5,72,0,0,1158,1160,5,88,0,0,1159,1158,1,
		0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1163,5,93,0,0,1162,1155,
		1,0,0,0,1162,1159,1,0,0,0,1163,1165,1,0,0,0,1164,1166,5,34,0,0,1165,1164,
		1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,1168,5,6,0,0,1168,1169,
		5,3,0,0,1169,1170,3,208,104,0,1170,1171,5,4,0,0,1171,1286,1,0,0,0,1172,
		1174,5,92,0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,
		1180,5,72,0,0,1176,1181,5,35,0,0,1177,1178,5,36,0,0,1178,1179,5,34,0,0,
		1179,1181,5,37,0,0,1180,1176,1,0,0,0,1180,1177,1,0,0,0,1181,1183,1,0,0,
		0,1182,1184,5,38,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,
		0,0,1185,1286,3,190,95,0,1186,1188,5,92,0,0,1187,1186,1,0,0,0,1187,1188,
		1,0,0,0,1188,1189,1,0,0,0,1189,1194,5,72,0,0,1190,1195,5,40,0,0,1191,1192,
		5,36,0,0,1192,1193,5,34,0,0,1193,1195,5,41,0,0,1194,1190,1,0,0,0,1194,
		1191,1,0,0,0,1195,1196,1,0,0,0,1196,1197,5,42,0,0,1197,1286,3,210,105,
		0,1198,1200,5,92,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1201,1,0,
		0,0,1201,1206,5,72,0,0,1202,1207,5,43,0,0,1203,1204,5,36,0,0,1204,1205,
		5,34,0,0,1205,1207,5,44,0,0,1206,1202,1,0,0,0,1206,1203,1,0,0,0,1207,1208,
		1,0,0,0,1208,1209,5,42,0,0,1209,1286,3,210,105,0,1210,1212,5,88,0,0,1211,
		1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1218,5,93,0,0,1214,
		1219,5,37,0,0,1215,1216,5,94,0,0,1216,1217,5,34,0,0,1217,1219,5,37,0,0,
		1218,1214,1,0,0,0,1218,1215,1,0,0,0,1219,1221,1,0,0,0,1220,1222,5,38,0,
		0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1286,3,190,
		95,0,1224,1226,5,88,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,
		1,0,0,0,1227,1232,5,93,0,0,1228,1233,5,41,0,0,1229,1230,5,94,0,0,1230,
		1231,5,34,0,0,1231,1233,5,41,0,0,1232,1228,1,0,0,0,1232,1229,1,0,0,0,1233,
		1234,1,0,0,0,1234,1235,5,42,0,0,1235,1286,3,210,105,0,1236,1238,5,88,0,
		0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1244,5,93,
		0,0,1240,1245,5,44,0,0,1241,1242,5,94,0,0,1242,1243,5,34,0,0,1243,1245,
		5,44,0,0,1244,1240,1,0,0,0,1244,1241,1,0,0,0,1245,1246,1,0,0,0,1246,1247,
		5,42,0,0,1247,1286,3,210,105,0,1248,1250,5,92,0,0,1249,1248,1,0,0,0,1249,
		1250,1,0,0,0,1250,1251,1,0,0,0,1251,1257,5,72,0,0,1252,1254,5,88,0,0,1253,
		1252,1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,0,0,0,1255,1257,5,93,0,0,1256,
		1249,1,0,0,0,1256,1253,1,0,0,0,1257,1259,1,0,0,0,1258,1260,5,34,0,0,1259,
		1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,6,0,0,1262,
		1263,5,3,0,0,1263,1264,3,192,96,0,1264,1265,5,4,0,0,1265,1286,1,0,0,0,
		1266,1268,5,92,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,
		0,1269,1275,5,72,0,0,1270,1272,5,88,0,0,1271,1270,1,0,0,0,1271,1272,1,
		0,0,0,1272,1273,1,0,0,0,1273,1275,5,93,0,0,1274,1267,1,0,0,0,1274,1271,
		1,0,0,0,1275,1277,1,0,0,0,1276,1278,5,34,0,0,1277,1276,1,0,0,0,1277,1278,
		1,0,0,0,1278,1279,1,0,0,0,1279,1280,5,39,0,0,1280,1286,3,210,105,0,1281,
		1282,5,95,0,0,1282,1286,5,93,0,0,1283,1284,5,92,0,0,1284,1286,5,93,0,0,
		1285,1074,1,0,0,0,1285,1077,1,0,0,0,1285,1086,1,0,0,0,1285,1089,1,0,0,
		0,1285,1098,1,0,0,0,1285,1109,1,0,0,0,1285,1118,1,0,0,0,1285,1124,1,0,
		0,0,1285,1133,1,0,0,0,1285,1150,1,0,0,0,1285,1162,1,0,0,0,1285,1173,1,
		0,0,0,1285,1187,1,0,0,0,1285,1199,1,0,0,0,1285,1211,1,0,0,0,1285,1225,
		1,0,0,0,1285,1237,1,0,0,0,1285,1256,1,0,0,0,1285,1274,1,0,0,0,1285,1281,
		1,0,0,0,1285,1283,1,0,0,0,1286,189,1,0,0,0,1287,1288,7,15,0,0,1288,191,
		1,0,0,0,1289,1292,3,190,95,0,1290,1291,5,10,0,0,1291,1293,3,192,96,0,1292,
		1290,1,0,0,0,1292,1293,1,0,0,0,1293,193,1,0,0,0,1294,1295,5,18,0,0,1295,
		1296,5,96,0,0,1296,1297,7,1,0,0,1297,1298,3,86,43,0,1298,1299,5,19,0,0,
		1299,1302,3,86,43,0,1300,1301,5,17,0,0,1301,1303,3,202,101,0,1302,1300,
		1,0,0,0,1302,1303,1,0,0,0,1303,195,1,0,0,0,1304,1305,5,8,0,0,1305,1306,
		5,96,0,0,1306,1307,7,1,0,0,1307,1308,3,86,43,0,1308,1309,5,9,0,0,1309,
		1312,3,12,6,0,1310,1311,5,17,0,0,1311,1313,3,202,101,0,1312,1310,1,0,0,
		0,1312,1313,1,0,0,0,1313,197,1,0,0,0,1314,1315,5,7,0,0,1315,1316,5,96,
		0,0,1316,1317,7,1,0,0,1317,1320,3,86,43,0,1318,1319,5,17,0,0,1319,1321,
		3,202,101,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,199,1,0,0,0,1322,
		1323,5,18,0,0,1323,1324,5,96,0,0,1324,1325,7,1,0,0,1325,1326,3,86,43,0,
		1326,1327,5,19,0,0,1327,1330,3,86,43,0,1328,1329,5,17,0,0,1329,1331,3,
		202,101,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,201,1,0,0,0,1332,1335,
		3,204,102,0,1333,1334,7,4,0,0,1334,1336,3,202,101,0,1335,1333,1,0,0,0,
		1335,1336,1,0,0,0,1336,203,1,0,0,0,1337,1340,3,206,103,0,1338,1339,7,4,
		0,0,1339,1341,3,204,102,0,1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1359,
		1,0,0,0,1342,1343,5,3,0,0,1343,1346,3,206,103,0,1344,1345,7,4,0,0,1345,
		1347,3,204,102,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,
		1348,1349,5,4,0,0,1349,1359,1,0,0,0,1350,1351,5,3,0,0,1351,1354,3,204,
		102,0,1352,1353,7,4,0,0,1353,1355,3,204,102,0,1354,1352,1,0,0,0,1354,1355,
		1,0,0,0,1355,1356,1,0,0,0,1356,1357,5,4,0,0,1357,1359,1,0,0,0,1358,1337,
		1,0,0,0,1358,1342,1,0,0,0,1358,1350,1,0,0,0,1359,205,1,0,0,0,1360,1361,
		5,32,0,0,1361,1362,7,5,0,0,1362,1429,3,158,79,0,1363,1365,5,32,0,0,1364,
		1366,5,34,0,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,
		1368,5,6,0,0,1368,1369,5,3,0,0,1369,1370,3,156,78,0,1370,1371,5,4,0,0,
		1371,1429,1,0,0,0,1372,1373,7,16,0,0,1373,1374,7,5,0,0,1374,1429,3,210,
		105,0,1375,1377,7,16,0,0,1376,1378,5,34,0,0,1377,1376,1,0,0,0,1377,1378,
		1,0,0,0,1378,1379,1,0,0,0,1379,1380,5,6,0,0,1380,1381,5,3,0,0,1381,1382,
		3,208,104,0,1382,1383,5,4,0,0,1383,1429,1,0,0,0,1384,1389,7,16,0,0,1385,
		1390,5,35,0,0,1386,1387,5,36,0,0,1387,1388,5,34,0,0,1388,1390,5,37,0,0,
		1389,1385,1,0,0,0,1389,1386,1,0,0,0,1390,1392,1,0,0,0,1391,1393,5,38,0,
		0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,1429,3,190,
		95,0,1395,1397,7,16,0,0,1396,1398,5,34,0,0,1397,1396,1,0,0,0,1397,1398,
		1,0,0,0,1398,1399,1,0,0,0,1399,1400,5,6,0,0,1400,1401,5,3,0,0,1401,1402,
		3,192,96,0,1402,1403,5,4,0,0,1403,1429,1,0,0,0,1404,1406,7,16,0,0,1405,
		1407,5,34,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,
		1409,5,39,0,0,1409,1429,3,210,105,0,1410,1415,7,16,0,0,1411,1416,5,40,
		0,0,1412,1413,5,36,0,0,1413,1414,5,34,0,0,1414,1416,5,41,0,0,1415,1411,
		1,0,0,0,1415,1412,1,0,0,0,1416,1417,1,0,0,0,1417,1418,5,42,0,0,1418,1429,
		3,210,105,0,1419,1424,7,16,0,0,1420,1425,5,43,0,0,1421,1422,5,36,0,0,1422,
		1423,5,34,0,0,1423,1425,5,44,0,0,1424,1420,1,0,0,0,1424,1421,1,0,0,0,1425,
		1426,1,0,0,0,1426,1427,5,42,0,0,1427,1429,3,210,105,0,1428,1360,1,0,0,
		0,1428,1363,1,0,0,0,1428,1372,1,0,0,0,1428,1375,1,0,0,0,1428,1384,1,0,
		0,0,1428,1395,1,0,0,0,1428,1404,1,0,0,0,1428,1410,1,0,0,0,1428,1419,1,
		0,0,0,1429,207,1,0,0,0,1430,1433,3,210,105,0,1431,1432,5,10,0,0,1432,1434,
		3,208,104,0,1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,209,1,0,0,0,1435,
		1438,7,9,0,0,1436,1437,5,78,0,0,1437,1439,3,210,105,0,1438,1436,1,0,0,
		0,1438,1439,1,0,0,0,1439,211,1,0,0,0,1440,1441,5,97,0,0,1441,1442,5,3,
		0,0,1442,1443,5,4,0,0,1443,1444,5,98,0,0,1444,1445,3,2,1,0,1445,1446,5,
		99,0,0,1446,213,1,0,0,0,165,221,251,260,265,271,277,285,293,300,305,332,
		343,351,355,366,369,380,385,393,401,408,411,422,427,432,438,446,450,457,
		469,475,484,487,492,501,510,519,523,530,574,576,582,588,594,600,606,613,
		618,621,627,634,638,644,647,654,659,666,669,675,683,701,712,740,746,750,
		757,760,767,774,780,786,804,814,822,827,832,838,846,850,857,869,881,884,
		889,898,907,916,920,925,956,961,966,969,979,1001,1006,1012,1020,1028,1036,
		1044,1049,1054,1060,1068,1072,1079,1091,1103,1106,1111,1120,1129,1138,
		1143,1147,1150,1155,1159,1162,1165,1173,1180,1183,1187,1194,1199,1206,
		1211,1218,1221,1225,1232,1237,1244,1249,1253,1256,1259,1267,1271,1274,
		1277,1285,1292,1302,1312,1320,1330,1335,1340,1346,1354,1358,1365,1377,
		1389,1392,1397,1406,1415,1424,1428,1433,1438
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
