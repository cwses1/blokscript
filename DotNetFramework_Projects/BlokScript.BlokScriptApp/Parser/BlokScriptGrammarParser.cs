//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, STATEMENTEND=107, 
		WS=108, STRINGLITERAL=109, VARID=110, INTLITERAL=111, REGEXLITERAL=112, 
		LINE_COMMENT=113, BLOCK_COMMENT=114;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_scriptBlockDef = 3, 
		RULE_createDatasourceStatement = 4, RULE_deleteDatasourceStatement = 5, 
		RULE_updateDatasourceStatement = 6, RULE_datasourceUpdateList = 7, RULE_datasourceUpdate = 8, 
		RULE_createDatasourceEntryStatement = 9, RULE_deleteDatasourceEntryStatement = 10, 
		RULE_updateDatasourceEntryStatement = 11, RULE_datasourceEntryFullSpec = 12, 
		RULE_datasourceEntryShortSpec = 13, RULE_datasourceEntryIdentifier = 14, 
		RULE_updateDatasourceEntriesStatement = 15, RULE_deleteDatasourceEntriesStatement = 16, 
		RULE_copyDatasourceEntriesStatement = 17, RULE_syncDatasourceEntriesStatement = 18, 
		RULE_datasourceEntryCopyOptionList = 19, RULE_datasourceEntryCopyOption = 20, 
		RULE_datasourceEntryUpdateList = 21, RULE_datasourceEntryUpdate = 22, 
		RULE_datasourceEntriesSourceLocation = 23, RULE_urlSpec = 24, RULE_datasourceEntriesTargetLocation = 25, 
		RULE_datasourceEntryConstraintExprList = 26, RULE_datasourceEntryConstraintExpr = 27, 
		RULE_datasourceEntryConstraint = 28, RULE_loginStatement = 29, RULE_loginOnlyStatement = 30, 
		RULE_loginWithGlobalUserNameStatement = 31, RULE_loginWithGlobalPasswordStatement = 32, 
		RULE_loginWithGlobalTokenStatement = 33, RULE_loginWithGlobalUserNameAndPasswordStatement = 34, 
		RULE_varStatement = 35, RULE_spaceVarStatement = 36, RULE_blockVarStatement = 37, 
		RULE_stringVarStatement = 38, RULE_regexVarStatement = 39, RULE_storyVarStatement = 40, 
		RULE_datasourceEntryVarStatement = 41, RULE_spaceSpec = 42, RULE_shortSpaceSpec = 43, 
		RULE_longOrShortSpaceSpec = 44, RULE_blockSpec = 45, RULE_storySpec = 46, 
		RULE_datasourceEntrySpec = 47, RULE_datasourceSpec = 48, RULE_datasourceShortSpec = 49, 
		RULE_assignmentStatement = 50, RULE_spaceAssignmentStatement = 51, RULE_blockAssignmentStatement = 52, 
		RULE_stringAssignmentStatement = 53, RULE_copySpacesStatement = 54, RULE_printStatement = 55, 
		RULE_printSpacesStatement = 56, RULE_printVarStatement = 57, RULE_printSpaceStatement = 58, 
		RULE_printStringLiteralStatement = 59, RULE_printSymbolTableStatement = 60, 
		RULE_printLocalCacheStatement = 61, RULE_realDataLocation = 62, RULE_fileSpec = 63, 
		RULE_spaceInputLocation = 64, RULE_spaceOutputLocation = 65, RULE_spacesInputLocation = 66, 
		RULE_spacesOutputLocation = 67, RULE_shortFileSpec = 68, RULE_blockInputLocation = 69, 
		RULE_blockOutputLocation = 70, RULE_blocksInputLocation = 71, RULE_blocksOutputLocation = 72, 
		RULE_storyInputLocation = 73, RULE_storyOutputLocation = 74, RULE_storiesInputLocation = 75, 
		RULE_storiesOutputLocation = 76, RULE_varGetFrom = 77, RULE_createBlockStatement = 78, 
		RULE_updateBlocksStatement = 79, RULE_copyBlocksStatement = 80, RULE_deleteBlocksStatement = 81, 
		RULE_blockConstraintExprList = 82, RULE_blockConstraintExpr = 83, RULE_blockConstraint = 84, 
		RULE_blockUpdateList = 85, RULE_blockUpdate = 86, RULE_intExprList = 87, 
		RULE_intExpr = 88, RULE_verbosityStatement = 89, RULE_waitStatement = 90, 
		RULE_compareStatement = 91, RULE_compareSpacesStatement = 92, RULE_compareBlocksStatement = 93, 
		RULE_compareAllBlocksStatement = 94, RULE_copyStoriesStatement = 95, RULE_publishStoriesStatement = 96, 
		RULE_unpublishStoriesStatement = 97, RULE_deleteStoriesStatement = 98, 
		RULE_storyConstraintExprList = 99, RULE_storyConstraintExpr = 100, RULE_storyConstraint = 101, 
		RULE_regexExpr = 102, RULE_regexExprList = 103, RULE_copyDatasourcesStatement = 104, 
		RULE_updateDatasourcesStatement = 105, RULE_deleteDatasourcesStatement = 106, 
		RULE_syncDatasourcesStatement = 107, RULE_datasourceCopyOptionList = 108, 
		RULE_datasourceCopyOption = 109, RULE_datasourceConstraintExprList = 110, 
		RULE_datasourceConstraintExpr = 111, RULE_datasourceConstraint = 112, 
		RULE_stringExprList = 113, RULE_stringExpr = 114, RULE_spaceConstraintExprList = 115, 
		RULE_spaceConstraintExpr = 116, RULE_spaceConstraint = 117, RULE_datasourcesInputLocation = 118, 
		RULE_datasourcesOutputLocation = 119, RULE_datasourceInputLocation = 120, 
		RULE_datasourceOutputLocation = 121, RULE_dirSpec = 122, RULE_forEachStatement = 123, 
		RULE_foreachEntityListForTypedVarDecl = 124, RULE_foreachEntityListForUntypedVarDecl = 125, 
		RULE_foreachSpaceListForTypedVarDecl = 126, RULE_foreachSpaceListForUntypedVarDecl = 127, 
		RULE_foreachBlockListForTypedVarDecl = 128, RULE_foreachBlockListForUntypedVarDecl = 129, 
		RULE_foreachDatasourceListForTypedVarDecl = 130, RULE_foreachDatasourceListForUntypedVarDecl = 131, 
		RULE_foreachDatasourceEntryListForTypedVarDecl = 132, RULE_foreachDatasourceEntryListForUntypedVarDecl = 133, 
		RULE_foreachStoryListForTypedVarDecl = 134, RULE_foreachStoryListForUntypedVarDecl = 135, 
		RULE_foreachStringListForTypedVarDecl = 136, RULE_foreachStringListForUntypedVarDecl = 137, 
		RULE_foreachRegexListForTypedVarDecl = 138, RULE_foreachRegexListForUntypedVarDecl = 139, 
		RULE_foreachIntegerListForTypedVarDecl = 140, RULE_foreachIntegerListForUntypedVarDecl = 141, 
		RULE_longOrShortDatasourceSpec = 142, RULE_spaceFileSpec = 143, RULE_blockFileSpec = 144, 
		RULE_datasourceFileSpec = 145, RULE_datasourceEntryFileSpec = 146, RULE_storyFileSpec = 147, 
		RULE_untypedVarDecl = 148, RULE_typedVarDecl = 149, RULE_spaceVarDecl = 150, 
		RULE_blockVarDecl = 151, RULE_datasourceVarDecl = 152, RULE_datasourceEntryVarDecl = 153, 
		RULE_storyVarDecl = 154, RULE_stringVarDecl = 155, RULE_regexVarDecl = 156, 
		RULE_integerVarDecl = 157, RULE_datasourceEntriesInputLocation = 158;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "scriptBlockDef", "createDatasourceStatement", 
		"deleteDatasourceStatement", "updateDatasourceStatement", "datasourceUpdateList", 
		"datasourceUpdate", "createDatasourceEntryStatement", "deleteDatasourceEntryStatement", 
		"updateDatasourceEntryStatement", "datasourceEntryFullSpec", "datasourceEntryShortSpec", 
		"datasourceEntryIdentifier", "updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"copySpacesStatement", "printStatement", "printSpacesStatement", "printVarStatement", 
		"printSpaceStatement", "printStringLiteralStatement", "printSymbolTableStatement", 
		"printLocalCacheStatement", "realDataLocation", "fileSpec", "spaceInputLocation", 
		"spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "createBlockStatement", "updateBlocksStatement", 
		"copyBlocksStatement", "deleteBlocksStatement", "blockConstraintExprList", 
		"blockConstraintExpr", "blockConstraint", "blockUpdateList", "blockUpdate", 
		"intExprList", "intExpr", "verbosityStatement", "waitStatement", "compareStatement", 
		"compareSpacesStatement", "compareBlocksStatement", "compareAllBlocksStatement", 
		"copyStoriesStatement", "publishStoriesStatement", "unpublishStoriesStatement", 
		"deleteStoriesStatement", "storyConstraintExprList", "storyConstraintExpr", 
		"storyConstraint", "regexExpr", "regexExprList", "copyDatasourcesStatement", 
		"updateDatasourcesStatement", "deleteDatasourcesStatement", "syncDatasourcesStatement", 
		"datasourceCopyOptionList", "datasourceCopyOption", "datasourceConstraintExprList", 
		"datasourceConstraintExpr", "datasourceConstraint", "stringExprList", 
		"stringExpr", "spaceConstraintExprList", "spaceConstraintExpr", "spaceConstraint", 
		"datasourcesInputLocation", "datasourcesOutputLocation", "datasourceInputLocation", 
		"datasourceOutputLocation", "dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", 
		"foreachEntityListForUntypedVarDecl", "foreachSpaceListForTypedVarDecl", 
		"foreachSpaceListForUntypedVarDecl", "foreachBlockListForTypedVarDecl", 
		"foreachBlockListForUntypedVarDecl", "foreachDatasourceListForTypedVarDecl", 
		"foreachDatasourceListForUntypedVarDecl", "foreachDatasourceEntryListForTypedVarDecl", 
		"foreachDatasourceEntryListForUntypedVarDecl", "foreachStoryListForTypedVarDecl", 
		"foreachStoryListForUntypedVarDecl", "foreachStringListForTypedVarDecl", 
		"foreachStringListForUntypedVarDecl", "foreachRegexListForTypedVarDecl", 
		"foreachRegexListForUntypedVarDecl", "foreachIntegerListForTypedVarDecl", 
		"foreachIntegerListForUntypedVarDecl", "longOrShortDatasourceSpec", "spaceFileSpec", 
		"blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", "storyFileSpec", 
		"untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", "datasourceVarDecl", 
		"datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", "regexVarDecl", 
		"integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'{'", "'}'", "'create'", "'datasource'", "'('", "')'", 
		"'for'", "'in'", "'delete'", "'update'", "'set'", "','", "'name'", "'='", 
		"'slug'", "'entry'", "'from'", "'entries'", "'where'", "'copy'", "'to'", 
		"'sync'", "'skip'", "'updates'", "'creates'", "'value'", "'local cache'", 
		"'csv'", "'json'", "'url'", "'console'", "'and'", "'or'", "'id'", "'!='", 
		"'not'", "'matches'", "'does'", "'match'", "'regex'", "'like'", "'starts'", 
		"'start'", "'with'", "'ends'", "'end'", "'login'", "'global'", "'username'", 
		"'password'", "'token'", "'var'", "'space'", "'block'", "'string'", "'story'", 
		"'spaces'", "'print'", "'symbol'", "'tables'", "'local'", "'cache'", "'server'", 
		"'file'", "'on'", "'blocks'", "'technical'", "'display'", "'type'", "'nestable'", 
		"'content'", "'universal'", "'add'", "'tag'", "'remove'", "'preview'", 
		"'field'", "'template'", "'screenshot'", "'+'", "'-'", "'*'", "'%'", "'be'", 
		"'quiet'", "'verbose'", "'debugger'", "'wait'", "'compare'", "'all'", 
		"'stories'", "'publish'", "'unpublish'", "'any'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'include'", "'directory'", "'foreach'", "'['", "']'", 
		"'int'", "'datasource entry'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "STATEMENTEND", 
		"WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 855967603210849334L) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 33686335L) != 0)) {
				{
				{
				State = 320;
				statement();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				loginStatement();
				State = 327;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				varStatement();
				State = 330;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332;
				assignmentStatement();
				State = 333;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 335;
				printStatement();
				State = 336;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 338;
				verbosityStatement();
				State = 339;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 341;
				waitStatement();
				State = 342;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 344;
				compareStatement();
				State = 345;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 347;
				copyBlocksStatement();
				State = 348;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 350;
				copySpacesStatement();
				State = 351;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 353;
				copyBlocksStatement();
				State = 354;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 356;
				copyStoriesStatement();
				State = 357;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 359;
				publishStoriesStatement();
				State = 360;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 362;
				unpublishStoriesStatement();
				State = 363;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 365;
				deleteStoriesStatement();
				State = 366;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 368;
				copyDatasourcesStatement();
				State = 369;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 371;
				deleteBlocksStatement();
				State = 372;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 374;
				deleteDatasourcesStatement();
				State = 375;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 377;
				createDatasourceStatement();
				State = 378;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 380;
				updateDatasourceStatement();
				State = 381;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 383;
				deleteDatasourceStatement();
				State = 384;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 386;
				createDatasourceEntryStatement();
				State = 387;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 389;
				deleteDatasourceEntryStatement();
				State = 390;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 392;
				updateDatasourceEntryStatement();
				State = 393;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 395;
				updateDatasourceEntriesStatement();
				State = 396;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 398;
				deleteDatasourceEntriesStatement();
				State = 399;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 401;
				copyDatasourceEntriesStatement();
				State = 402;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 404;
				syncDatasourceEntriesStatement();
				State = 405;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 407;
				updateDatasourcesStatement();
				State = 408;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 410;
				Match(T__0);
				State = 411;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 412;
				scriptBlockDef();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 413;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(T__1);
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 417;
				statementList();
				}
				break;
			}
			State = 420;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(T__3);
			State = 423;
			Match(T__4);
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 424;
				stringExpr();
				}
				break;
			case T__5:
				{
				State = 425;
				Match(T__5);
				State = 426;
				datasourceUpdateList();
				State = 427;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 431;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
			case VARID:
				{
				State = 432;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 433;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(T__9);
			State = 437;
			Match(T__4);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 438;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 439;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(T__10);
			State = 443;
			Match(T__4);
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 444;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 445;
				datasourceSpec();
				}
				break;
			}
			State = 448;
			Match(T__11);
			State = 449;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			datasourceUpdate();
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 452;
				Match(T__12);
				State = 453;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_datasourceUpdate);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				Match(T__13);
				State = 457;
				Match(T__14);
				State = 458;
				stringExpr();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(T__15);
				State = 460;
				Match(T__14);
				State = 461;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(T__3);
			State = 465;
			Match(T__4);
			State = 466;
			Match(T__16);
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 467;
				stringExpr();
				}
				break;
			case T__13:
			case T__26:
				{
				State = 468;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 471;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 472;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 473;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			Match(T__9);
			State = 477;
			Match(T__4);
			State = 478;
			Match(T__16);
			State = 479;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(T__10);
			State = 482;
			Match(T__4);
			State = 483;
			Match(T__16);
			State = 484;
			datasourceEntryShortSpec();
			State = 485;
			Match(T__11);
			State = 486;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(T__4);
			State = 489;
			Match(T__16);
			State = 490;
			datasourceEntryIdentifier();
			State = 491;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 492;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			datasourceEntryIdentifier();
			State = 495;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 496;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 498;
				intExpr();
				}
				break;
			case 2:
				{
				State = 499;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 500;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(T__10);
			State = 504;
			Match(T__4);
			State = 505;
			Match(T__18);
			State = 506;
			Match(T__8);
			State = 507;
			datasourceSpec();
			State = 508;
			Match(T__11);
			State = 509;
			datasourceEntryUpdateList();
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 510;
				Match(T__19);
				State = 511;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(T__9);
			State = 515;
			Match(T__4);
			State = 516;
			Match(T__18);
			State = 517;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 518;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 519;
				datasourceShortSpec();
				}
				break;
			}
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 522;
				Match(T__19);
				State = 523;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(T__20);
			State = 527;
			Match(T__4);
			State = 528;
			Match(T__18);
			State = 529;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 530;
			datasourceEntriesSourceLocation();
			State = 531;
			Match(T__21);
			State = 532;
			datasourceEntriesTargetLocation();
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 533;
				Match(T__19);
				State = 534;
				datasourceEntryConstraintExprList();
				}
			}

			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 537;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			Match(T__22);
			State = 541;
			Match(T__4);
			State = 542;
			Match(T__18);
			State = 543;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 544;
			datasourceEntriesSourceLocation();
			State = 545;
			Match(T__21);
			State = 546;
			datasourceEntriesSourceLocation();
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 547;
				Match(T__19);
				State = 548;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 38, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			datasourceEntryCopyOption();
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 552;
				Match(T__12);
				State = 553;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 40, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(T__23);
			State = 557;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 100665360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 42, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			datasourceEntryUpdate();
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 560;
				Match(T__12);
				State = 561;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 44, RULE_datasourceEntryUpdate);
		try {
			State = 570;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564;
				Match(T__13);
				State = 565;
				Match(T__14);
				State = 566;
				stringExpr();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				Match(T__26);
				State = 568;
				Match(T__14);
				State = 569;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 46, RULE_datasourceEntriesSourceLocation);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				datasourceShortSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				urlSpec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575;
				fileSpec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576;
				Match(T__27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28 || _la==T__29) {
				{
				State = 579;
				_la = TokenStream.LA(1);
				if ( !(_la==T__28 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 582;
			Match(T__30);
			State = 583;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 50, RULE_datasourceEntriesTargetLocation);
		try {
			State = 591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				datasourceShortSpec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587;
				urlSpec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 588;
				fileSpec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 589;
				Match(T__27);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 590;
				Match(T__31);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 52, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			datasourceEntryConstraintExpr();
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 594;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 595;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598;
				datasourceEntryConstraint();
				State = 601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 599;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 600;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				Match(T__5);
				State = 604;
				datasourceEntryConstraint();
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 605;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 606;
					datasourceEntryConstraintExpr();
					}
				}

				State = 609;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611;
				Match(T__5);
				State = 612;
				datasourceEntryConstraintExpr();
				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 613;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 614;
					datasourceEntryConstraintExpr();
					}
				}

				State = 617;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 56, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(T__34);
				State = 622;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 623;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624;
				Match(T__34);
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 625;
					Match(T__36);
					}
				}

				State = 628;
				Match(T__8);
				State = 629;
				Match(T__5);
				State = 630;
				intExprList();
				State = 631;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 633;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 634;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 635;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 636;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 637;
					Match(T__36);
					}
				}

				State = 640;
				Match(T__8);
				State = 641;
				Match(T__5);
				State = 644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 642;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 643;
					regexExprList();
					}
					break;
				}
				State = 646;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 648;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 653;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 649;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 650;
					Match(T__38);
					State = 651;
					Match(T__36);
					State = 652;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 655;
					Match(T__40);
					}
				}

				State = 658;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 659;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 660;
					Match(T__36);
					}
				}

				State = 663;
				Match(T__8);
				State = 664;
				Match(T__5);
				State = 665;
				stringExprList();
				State = 666;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 668;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 669;
					Match(T__36);
					}
				}

				State = 672;
				Match(T__41);
				State = 673;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 674;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 679;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 675;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 676;
					Match(T__38);
					State = 677;
					Match(T__36);
					State = 678;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 681;
				Match(T__44);
				State = 682;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 683;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 688;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 684;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 685;
					Match(T__38);
					State = 686;
					Match(T__36);
					State = 687;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 690;
				Match(T__44);
				State = 691;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loginStatement);
		try {
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 696;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 697;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 698;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(T__47);
			State = 704;
			Match(T__44);
			State = 705;
			Match(T__48);
			State = 706;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(T__47);
			State = 709;
			Match(T__44);
			State = 710;
			Match(T__48);
			State = 711;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(T__47);
			State = 714;
			Match(T__44);
			State = 715;
			Match(T__48);
			State = 716;
			Match(T__51);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(T__47);
			State = 719;
			Match(T__44);
			State = 720;
			Match(T__48);
			State = 721;
			Match(T__49);
			State = 722;
			Match(T__32);
			State = 723;
			Match(T__50);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_varStatement);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				spaceVarStatement();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				blockVarStatement();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				stringVarStatement();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 728;
				regexVarStatement();
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				storyVarStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 730;
				datasourceEntryVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 7);
				{
				State = 731;
				Match(T__52);
				State = 732;
				Match(VARID);
				State = 733;
				Match(T__14);
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 734;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 735;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 736;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 737;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 738;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 739;
					storySpec();
					}
					break;
				case 7:
					{
					State = 740;
					intExpr();
					}
					break;
				case 8:
					{
					State = 741;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 742;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			Match(T__53);
			State = 748;
			Match(VARID);
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 749;
				Match(T__14);
				State = 750;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(T__54);
			State = 754;
			Match(VARID);
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 755;
				Match(T__14);
				State = 756;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(T__55);
			State = 760;
			Match(VARID);
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 761;
				Match(T__14);
				State = 762;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(T__40);
			State = 766;
			Match(VARID);
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 767;
				Match(T__14);
				State = 768;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(T__56);
			State = 772;
			Match(VARID);
			State = 775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 773;
				Match(T__14);
				State = 774;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			Match(T__4);
			State = 778;
			Match(T__16);
			State = 779;
			Match(VARID);
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 780;
				Match(T__14);
				State = 781;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 84, RULE_spaceSpec);
		int _la;
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				Match(T__53);
				State = 785;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8 || _la==T__65) {
					{
					State = 786;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 86, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 88, RULE_longOrShortSpaceSpec);
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 90, RULE_blockSpec);
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798;
				Match(T__54);
				State = 799;
				Match(STRINGLITERAL);
				State = 800;
				Match(T__8);
				State = 803;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
				case VARID:
					{
					State = 801;
					spaceSpec();
					}
					break;
				case T__64:
					{
					State = 802;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805;
				Match(T__54);
				State = 806;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 92, RULE_storySpec);
		int _la;
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 810;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 813;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
				case VARID:
					{
					State = 811;
					spaceSpec();
					}
					break;
				case T__64:
					{
					State = 812;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 818;
				Match(T__4);
				State = 819;
				Match(T__16);
				State = 823;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 820;
					intExpr();
					}
					break;
				case 2:
					{
					State = 821;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 822;
					Match(VARID);
					}
					break;
				}
				State = 825;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 826;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceSpec);
		int _la;
		try {
			State = 838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 830;
				Match(T__4);
				State = 831;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 832;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 835;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__53:
				case VARID:
					{
					State = 833;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 834;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 837;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 98, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 841;
			Match(T__8);
			State = 844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
			case VARID:
				{
				State = 842;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 843;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_assignmentStatement);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 846;
				Match(VARID);
				State = 847;
				Match(T__14);
				State = 848;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 849;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 850;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 851;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(VARID);
			State = 855;
			Match(T__14);
			State = 856;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			Match(VARID);
			State = 859;
			Match(T__14);
			State = 860;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(VARID);
			State = 863;
			Match(T__14);
			State = 864;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			Match(T__20);
			State = 867;
			Match(T__57);
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 868;
				Match(T__17);
				State = 869;
				realDataLocation();
				}
			}

			State = 872;
			Match(T__21);
			State = 873;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_printStatement);
		try {
			State = 881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 876;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 877;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 878;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 879;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 880;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(T__58);
			State = 884;
			Match(T__57);
			State = 885;
			Match(T__17);
			State = 886;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			Match(T__58);
			State = 889;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			Match(T__58);
			State = 892;
			Match(T__53);
			State = 893;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(T__58);
			State = 896;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898;
			Match(T__58);
			State = 899;
			Match(T__59);
			State = 900;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			Match(T__58);
			State = 903;
			Match(T__61);
			State = 904;
			Match(T__62);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 124, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				{
				State = 906;
				Match(T__63);
				}
				break;
			case T__61:
				{
				State = 907;
				Match(T__61);
				State = 908;
				Match(T__62);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(T__64);
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL || _la==VARID) {
				{
				State = 912;
				_la = TokenStream.LA(1);
				if ( !(_la==STRINGLITERAL || _la==VARID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 128, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 130, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 132, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 134, RULE_spacesOutputLocation);
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 922;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 136, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockInputLocation);
		try {
			State = 929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 928;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 140, RULE_blockOutputLocation);
		try {
			State = 933;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 142, RULE_blocksInputLocation);
		try {
			State = 937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 935;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 936;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 144, RULE_blocksOutputLocation);
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 939;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 940;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 146, RULE_storyInputLocation);
		try {
			State = 945;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 943;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 944;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 148, RULE_storyOutputLocation);
		try {
			State = 949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 947;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 948;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 150, RULE_storiesInputLocation);
		try {
			State = 953;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 951;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 952;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 152, RULE_storiesOutputLocation);
		try {
			State = 957;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 154, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__65:
				{
				State = 959;
				Match(T__65);
				State = 960;
				Match(T__63);
				}
				break;
			case T__8:
				{
				State = 961;
				Match(T__8);
				State = 962;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965;
			Match(T__3);
			State = 966;
			Match(T__54);
			State = 967;
			Match(T__5);
			State = 968;
			blockUpdateList();
			State = 969;
			Match(T__6);
			State = 970;
			Match(T__8);
			State = 971;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			Match(T__10);
			State = 974;
			Match(T__66);
			State = 975;
			Match(T__8);
			State = 976;
			longOrShortSpaceSpec();
			State = 977;
			Match(T__11);
			State = 978;
			blockUpdateList();
			State = 981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 979;
				Match(T__19);
				State = 980;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			Match(T__20);
			State = 984;
			Match(T__66);
			State = 985;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 986;
			longOrShortSpaceSpec();
			State = 987;
			Match(T__21);
			State = 988;
			blocksOutputLocation();
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 989;
				Match(T__19);
				State = 990;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			Match(T__9);
			State = 994;
			Match(T__66);
			State = 995;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 996;
			longOrShortSpaceSpec();
			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 997;
				Match(T__19);
				State = 998;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 164, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1001;
			blockConstraintExpr();
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 1002;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1003;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 166, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1027;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006;
				blockConstraint();
				State = 1009;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 1007;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1008;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011;
				Match(T__5);
				State = 1012;
				blockConstraint();
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1013;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1014;
					blockConstraintExpr();
					}
				}

				State = 1017;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1019;
				Match(T__5);
				State = 1020;
				blockConstraintExpr();
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1021;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1022;
					blockConstraintExpr();
					}
				}

				State = 1025;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 168, RULE_blockConstraint);
		int _la;
		try {
			State = 1097;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1029;
				Match(T__34);
				State = 1030;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1031;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				Match(T__34);
				State = 1034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1033;
					Match(T__36);
					}
				}

				State = 1036;
				Match(T__8);
				State = 1037;
				Match(T__5);
				State = 1038;
				intExprList();
				State = 1039;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1041;
				Match(T__13);
				State = 1042;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1043;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1044;
				Match(T__13);
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1045;
					Match(T__36);
					}
				}

				State = 1048;
				Match(T__8);
				State = 1049;
				Match(T__5);
				State = 1050;
				stringExprList();
				State = 1051;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1053;
				Match(T__13);
				State = 1058;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1054;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1055;
					Match(T__38);
					State = 1056;
					Match(T__36);
					State = 1057;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1060;
					Match(T__40);
					}
				}

				State = 1063;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1064;
				Match(T__13);
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1065;
					Match(T__36);
					}
				}

				State = 1068;
				Match(T__8);
				State = 1069;
				Match(T__5);
				State = 1070;
				regexExprList();
				State = 1071;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1073;
				Match(T__13);
				State = 1075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1074;
					Match(T__36);
					}
				}

				State = 1077;
				Match(T__41);
				State = 1078;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1079;
				Match(T__13);
				State = 1084;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1080;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1081;
					Match(T__38);
					State = 1082;
					Match(T__36);
					State = 1083;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1086;
				Match(T__44);
				State = 1087;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1088;
				Match(T__13);
				State = 1093;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1089;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1090;
					Match(T__38);
					State = 1091;
					Match(T__36);
					State = 1092;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1095;
				Match(T__44);
				State = 1096;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 170, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			blockUpdate();
			State = 1102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1100;
				Match(T__12);
				State = 1101;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 172, RULE_blockUpdate);
		int _la;
		try {
			State = 1133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104;
				Match(T__67);
				State = 1105;
				Match(T__13);
				State = 1106;
				Match(T__14);
				State = 1107;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1108;
				Match(T__68);
				State = 1109;
				Match(T__13);
				State = 1110;
				Match(T__14);
				State = 1111;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1112;
				Match(T__69);
				State = 1113;
				Match(T__14);
				State = 1114;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1115;
				Match(T__73);
				State = 1116;
				Match(T__74);
				State = 1117;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1118;
				Match(T__75);
				State = 1119;
				Match(T__74);
				State = 1120;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1121;
				Match(T__76);
				State = 1122;
				Match(T__77);
				State = 1123;
				Match(T__14);
				State = 1124;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1125;
				Match(T__76);
				State = 1126;
				Match(T__78);
				State = 1127;
				Match(T__14);
				State = 1128;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1129;
				Match(T__76);
				State = 1130;
				Match(T__79);
				State = 1131;
				Match(T__14);
				State = 1132;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 174, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			intExpr();
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1136;
				Match(T__12);
				State = 1137;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 176, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 15L) != 0)) {
				{
				State = 1141;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1142;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__84) {
				{
				State = 1145;
				Match(T__84);
				}
			}

			State = 1148;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150;
			Match(T__88);
			State = 1151;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_compareStatement);
		try {
			State = 1156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1155;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			Match(T__89);
			State = 1159;
			spaceSpec();
			State = 1160;
			Match(T__32);
			State = 1161;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			Match(T__89);
			State = 1164;
			blockSpec();
			State = 1165;
			Match(T__32);
			State = 1166;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168;
			Match(T__89);
			State = 1169;
			Match(T__90);
			State = 1170;
			Match(T__66);
			State = 1171;
			Match(T__8);
			State = 1172;
			spaceSpec();
			State = 1173;
			Match(T__32);
			State = 1174;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176;
			Match(T__20);
			State = 1177;
			Match(T__91);
			State = 1180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 1178;
				Match(T__44);
				State = 1179;
				Match(T__71);
				}
			}

			State = 1182;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1183;
			storiesInputLocation();
			State = 1184;
			Match(T__21);
			State = 1185;
			storiesOutputLocation();
			State = 1188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1186;
				Match(T__19);
				State = 1187;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(T__92);
			State = 1191;
			Match(T__91);
			State = 1192;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1193;
			longOrShortSpaceSpec();
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1194;
				Match(T__19);
				State = 1195;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			Match(T__93);
			State = 1199;
			Match(T__91);
			State = 1200;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1201;
			longOrShortSpaceSpec();
			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1202;
				Match(T__19);
				State = 1203;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			Match(T__9);
			State = 1207;
			Match(T__91);
			State = 1208;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1209;
			longOrShortSpaceSpec();
			State = 1212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1210;
				Match(T__19);
				State = 1211;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 198, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			storyConstraintExpr();
			State = 1217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 1215;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1216;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 200, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1219;
				storyConstraint();
				State = 1222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1220;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1221;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1224;
				Match(T__5);
				State = 1225;
				storyConstraint();
				State = 1228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1226;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1227;
					storyConstraintExpr();
					}
				}

				State = 1230;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1232;
				Match(T__5);
				State = 1233;
				storyConstraintExpr();
				State = 1236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1234;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1235;
					storyConstraintExpr();
					}
				}

				State = 1238;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 202, RULE_storyConstraint);
		int _la;
		try {
			State = 1453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1242;
				Match(T__34);
				State = 1243;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1244;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245;
				Match(T__34);
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1246;
					Match(T__36);
					}
				}

				State = 1249;
				Match(T__8);
				State = 1250;
				Match(T__5);
				State = 1251;
				intExprList();
				State = 1252;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1254;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1255;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1256;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1257;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1258;
					Match(T__36);
					}
				}

				State = 1261;
				Match(T__8);
				State = 1262;
				Match(T__5);
				State = 1263;
				stringExprList();
				State = 1264;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1266;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1271;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1267;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1268;
					Match(T__38);
					State = 1269;
					Match(T__36);
					State = 1270;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1273;
					Match(T__40);
					}
				}

				State = 1276;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1277;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1278;
					Match(T__36);
					}
				}

				State = 1281;
				Match(T__8);
				State = 1282;
				Match(T__5);
				State = 1283;
				stringExprList();
				State = 1284;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1286;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1287;
					Match(T__36);
					}
				}

				State = 1290;
				Match(T__41);
				State = 1291;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1292;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1293;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1294;
					Match(T__38);
					State = 1295;
					Match(T__36);
					State = 1296;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1299;
				Match(T__44);
				State = 1300;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1301;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1306;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1302;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1303;
					Match(T__38);
					State = 1304;
					Match(T__36);
					State = 1305;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1308;
				Match(T__44);
				State = 1309;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1318;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1310;
						Match(T__94);
						}
					}

					State = 1313;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1314;
						Match(T__90);
						}
					}

					State = 1317;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1320;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1321;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1330;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1322;
						Match(T__94);
						}
					}

					State = 1325;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1326;
						Match(T__90);
						}
					}

					State = 1329;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1332;
					Match(T__36);
					}
				}

				State = 1335;
				Match(T__8);
				State = 1336;
				Match(T__5);
				State = 1337;
				stringExprList();
				State = 1338;
				Match(T__6);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1340;
					Match(T__94);
					}
				}

				State = 1343;
				Match(T__74);
				State = 1348;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1344;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1345;
					Match(T__38);
					State = 1346;
					Match(T__36);
					State = 1347;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1350;
					Match(T__40);
					}
				}

				State = 1353;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1354;
					Match(T__94);
					}
				}

				State = 1357;
				Match(T__74);
				State = 1362;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1358;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1359;
					Match(T__38);
					State = 1360;
					Match(T__36);
					State = 1361;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1364;
				Match(T__44);
				State = 1365;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__94) {
					{
					State = 1366;
					Match(T__94);
					}
				}

				State = 1369;
				Match(T__74);
				State = 1374;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1370;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1371;
					Match(T__38);
					State = 1372;
					Match(T__36);
					State = 1373;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1376;
				Match(T__44);
				State = 1377;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1378;
					Match(T__90);
					}
				}

				State = 1381;
				Match(T__95);
				State = 1386;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1382;
					Match(T__39);
					}
					break;
				case T__96:
					{
					State = 1383;
					Match(T__96);
					State = 1384;
					Match(T__36);
					State = 1385;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1388;
					Match(T__40);
					}
				}

				State = 1391;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1392;
					Match(T__90);
					}
				}

				State = 1395;
				Match(T__95);
				State = 1400;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1396;
					Match(T__43);
					}
					break;
				case T__96:
					{
					State = 1397;
					Match(T__96);
					State = 1398;
					Match(T__36);
					State = 1399;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1402;
				Match(T__44);
				State = 1403;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1404;
					Match(T__90);
					}
				}

				State = 1407;
				Match(T__95);
				State = 1412;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
					{
					State = 1408;
					Match(T__46);
					}
					break;
				case T__96:
					{
					State = 1409;
					Match(T__96);
					State = 1410;
					Match(T__36);
					State = 1411;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1414;
				Match(T__44);
				State = 1415;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1424;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1416;
						Match(T__94);
						}
					}

					State = 1419;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1420;
						Match(T__90);
						}
					}

					State = 1423;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1426;
					Match(T__36);
					}
				}

				State = 1429;
				Match(T__8);
				State = 1430;
				Match(T__5);
				State = 1431;
				regexExprList();
				State = 1432;
				Match(T__6);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1442;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__74:
				case T__94:
					{
					{
					State = 1435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__94) {
						{
						State = 1434;
						Match(T__94);
						}
					}

					State = 1437;
					Match(T__74);
					}
					}
					break;
				case T__90:
				case T__95:
					{
					{
					State = 1439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__90) {
						{
						State = 1438;
						Match(T__90);
						}
					}

					State = 1441;
					Match(T__95);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1444;
					Match(T__36);
					}
				}

				State = 1447;
				Match(T__41);
				State = 1448;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1449;
				Match(T__97);
				State = 1450;
				Match(T__95);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1451;
				Match(T__94);
				State = 1452;
				Match(T__95);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 204, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 206, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457;
			regexExpr();
			State = 1460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1458;
				Match(T__12);
				State = 1459;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 208, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			Match(T__20);
			State = 1463;
			Match(T__98);
			State = 1464;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1465;
			longOrShortSpaceSpec();
			State = 1466;
			Match(T__21);
			State = 1467;
			longOrShortSpaceSpec();
			State = 1470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1468;
				Match(T__19);
				State = 1469;
				datasourceConstraintExprList();
				}
			}

			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23 || _la==T__99) {
				{
				State = 1472;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475;
			Match(T__10);
			State = 1476;
			Match(T__98);
			State = 1477;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1478;
			longOrShortSpaceSpec();
			State = 1479;
			Match(T__11);
			State = 1480;
			datasourceUpdateList();
			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1481;
				Match(T__19);
				State = 1482;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485;
			Match(T__9);
			State = 1486;
			Match(T__98);
			State = 1487;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1488;
			longOrShortSpaceSpec();
			State = 1491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1489;
				Match(T__19);
				State = 1490;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			Match(T__20);
			State = 1494;
			Match(T__98);
			State = 1495;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1496;
			longOrShortSpaceSpec();
			State = 1497;
			Match(T__21);
			State = 1498;
			longOrShortSpaceSpec();
			State = 1501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1499;
				Match(T__19);
				State = 1500;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 216, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			datasourceCopyOption();
			State = 1506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1504;
				Match(T__12);
				State = 1505;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 218, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1508;
				Match(T__23);
				State = 1509;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 100665360L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__99:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510;
				Match(T__99);
				State = 1511;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 220, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			datasourceConstraintExpr();
			State = 1517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 1515;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1516;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 222, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1519;
				datasourceConstraint();
				State = 1522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
				case 1:
					{
					State = 1520;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1521;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1524;
				Match(T__5);
				State = 1525;
				datasourceConstraint();
				State = 1528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1526;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1527;
					datasourceConstraintExpr();
					}
				}

				State = 1530;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1532;
				Match(T__5);
				State = 1533;
				datasourceConstraintExpr();
				State = 1536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1534;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1535;
					datasourceConstraintExpr();
					}
				}

				State = 1538;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 224, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1542;
				Match(T__34);
				State = 1543;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1544;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				Match(T__34);
				State = 1547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1546;
					Match(T__36);
					}
				}

				State = 1549;
				Match(T__8);
				State = 1550;
				Match(T__5);
				State = 1551;
				intExprList();
				State = 1552;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1554;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1555;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1556;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1557;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1558;
					Match(T__36);
					}
				}

				State = 1561;
				Match(T__8);
				State = 1562;
				Match(T__5);
				State = 1563;
				stringExprList();
				State = 1564;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1566;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1571;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1567;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1568;
					Match(T__38);
					State = 1569;
					Match(T__36);
					State = 1570;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1573;
					Match(T__40);
					}
				}

				State = 1576;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1577;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1578;
					Match(T__36);
					}
				}

				State = 1581;
				Match(T__8);
				State = 1582;
				Match(T__5);
				State = 1583;
				regexExprList();
				State = 1584;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1586;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1587;
					Match(T__36);
					}
				}

				State = 1590;
				Match(T__41);
				State = 1591;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1592;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1597;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1593;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1594;
					Match(T__38);
					State = 1595;
					Match(T__36);
					State = 1596;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1599;
				Match(T__44);
				State = 1600;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1601;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1606;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1602;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1603;
					Match(T__38);
					State = 1604;
					Match(T__36);
					State = 1605;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1608;
				Match(T__44);
				{
				State = 1609;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 226, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			stringExpr();
			State = 1615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1613;
				Match(T__12);
				State = 1614;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 228, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__80) {
				{
				State = 1618;
				Match(T__80);
				State = 1619;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 230, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			spaceConstraintExpr();
			State = 1625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==T__33) {
				{
				State = 1623;
				_la = TokenStream.LA(1);
				if ( !(_la==T__32 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1624;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 232, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1627;
				spaceConstraint();
				State = 1630;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1628;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1629;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1632;
				Match(T__5);
				State = 1633;
				spaceConstraint();
				State = 1636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1634;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1635;
					spaceConstraintExpr();
					}
				}

				State = 1638;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1640;
				Match(T__5);
				State = 1641;
				spaceConstraintExpr();
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32 || _la==T__33) {
					{
					State = 1642;
					_la = TokenStream.LA(1);
					if ( !(_la==T__32 || _la==T__33) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1643;
					spaceConstraintExpr();
					}
				}

				State = 1646;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 234, RULE_spaceConstraint);
		int _la;
		try {
			State = 1718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1650;
				Match(T__34);
				State = 1651;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1652;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653;
				Match(T__34);
				State = 1655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1654;
					Match(T__36);
					}
				}

				State = 1657;
				Match(T__8);
				State = 1658;
				Match(T__5);
				State = 1659;
				intExprList();
				State = 1660;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1662;
				Match(T__13);
				State = 1663;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1664;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1665;
				Match(T__13);
				State = 1667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1666;
					Match(T__36);
					}
				}

				State = 1669;
				Match(T__8);
				State = 1670;
				Match(T__5);
				State = 1671;
				stringExprList();
				State = 1672;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1674;
				Match(T__13);
				State = 1679;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1675;
					Match(T__37);
					}
					break;
				case T__38:
					{
					State = 1676;
					Match(T__38);
					State = 1677;
					Match(T__36);
					State = 1678;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__40) {
					{
					State = 1681;
					Match(T__40);
					}
				}

				State = 1684;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1685;
				Match(T__13);
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1686;
					Match(T__36);
					}
				}

				State = 1689;
				Match(T__8);
				State = 1690;
				Match(T__5);
				State = 1691;
				regexExprList();
				State = 1692;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1694;
				Match(T__13);
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 1695;
					Match(T__36);
					}
				}

				State = 1698;
				Match(T__41);
				State = 1699;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1700;
				Match(T__13);
				State = 1705;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__42:
					{
					State = 1701;
					Match(T__42);
					}
					break;
				case T__38:
					{
					State = 1702;
					Match(T__38);
					State = 1703;
					Match(T__36);
					State = 1704;
					Match(T__43);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1707;
				Match(T__44);
				State = 1708;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1709;
				Match(T__13);
				State = 1714;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__45:
					{
					State = 1710;
					Match(T__45);
					}
					break;
				case T__38:
					{
					State = 1711;
					Match(T__38);
					State = 1712;
					Match(T__36);
					State = 1713;
					Match(T__46);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1716;
				Match(T__44);
				{
				State = 1717;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 236, RULE_datasourcesInputLocation);
		try {
			State = 1722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1720;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1721;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 238, RULE_datasourcesOutputLocation);
		try {
			State = 1726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 240, RULE_datasourceInputLocation);
		try {
			State = 1730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1728;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1729;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 242, RULE_datasourceOutputLocation);
		try {
			State = 1734;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1732;
				fileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1733;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 244, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			Match(T__100);
			State = 1737;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 246, RULE_forEachStatement);
		try {
			State = 1755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1739;
				Match(T__101);
				State = 1740;
				Match(T__5);
				State = 1741;
				typedVarDecl();
				State = 1742;
				Match(T__8);
				State = 1743;
				foreachEntityListForTypedVarDecl();
				State = 1744;
				Match(T__6);
				State = 1745;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1747;
				Match(T__101);
				State = 1748;
				Match(T__5);
				State = 1749;
				untypedVarDecl();
				State = 1750;
				Match(T__8);
				State = 1751;
				foreachEntityListForUntypedVarDecl();
				State = 1752;
				Match(T__6);
				State = 1753;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 248, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 1765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1757;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1758;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1759;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1760;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1761;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1762;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1763;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1764;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 250, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 1775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1767;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1768;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1769;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1770;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1771;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1772;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1773;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1774;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 252, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				{
				State = 1777;
				fileSpec();
				}
				break;
			case T__53:
				{
				State = 1778;
				spaceFileSpec();
				}
				break;
			case T__57:
			case T__90:
				{
				State = 1780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1779;
					Match(T__90);
					}
				}

				State = 1782;
				Match(T__57);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1785;
				Match(T__19);
				State = 1786;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 254, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				{
				State = 1789;
				spaceFileSpec();
				}
				break;
			case T__57:
			case T__90:
				{
				State = 1791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__90) {
					{
					State = 1790;
					Match(T__90);
					}
				}

				State = 1793;
				Match(T__57);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1796;
				Match(T__19);
				State = 1797;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 256, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				{
				State = 1800;
				fileSpec();
				}
				break;
			case T__54:
				{
				State = 1801;
				blockFileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1802;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1805;
				Match(T__19);
				State = 1806;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 258, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
				{
				State = 1809;
				blockFileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1810;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1813;
				Match(T__19);
				State = 1814;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 260, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				{
				State = 1817;
				fileSpec();
				}
				break;
			case T__4:
				{
				State = 1818;
				datasourceFileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1819;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1822;
				Match(T__19);
				State = 1823;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 262, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 1826;
				datasourceFileSpec();
				}
				break;
			case T__53:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1827;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1830;
				Match(T__19);
				State = 1831;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 264, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				{
				State = 1834;
				fileSpec();
				}
				break;
			case T__105:
				{
				State = 1835;
				datasourceEntryFileSpec();
				}
				break;
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1836;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1839;
				Match(T__19);
				State = 1840;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 266, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__105:
				{
				State = 1843;
				datasourceEntryFileSpec();
				}
				break;
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1844;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1847;
				Match(T__19);
				State = 1848;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 268, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				{
				State = 1851;
				fileSpec();
				}
				break;
			case T__56:
				{
				State = 1852;
				storyFileSpec();
				}
				break;
			case T__53:
			case VARID:
				{
				State = 1853;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1856;
				Match(T__19);
				State = 1857;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 270, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__56:
				{
				State = 1860;
				storyFileSpec();
				}
				break;
			case T__53:
			case VARID:
				{
				State = 1861;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1864;
				Match(T__19);
				State = 1865;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 272, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 1875;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1868;
				fileSpec();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1869;
				Match(T__55);
				State = 1870;
				fileSpec();
				}
				break;
			case T__102:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1871;
				Match(T__102);
				State = 1872;
				stringExprList();
				State = 1873;
				Match(T__103);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 274, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 1880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__55:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1877;
				Match(T__55);
				State = 1878;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1879;
				stringExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 276, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 1886;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1882;
				fileSpec();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1883;
				Match(T__40);
				State = 1884;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
			case REGEXLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1885;
				regexExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 278, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 1891;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1888;
				Match(T__40);
				State = 1889;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
			case REGEXLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1890;
				regexExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 280, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 1897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1893;
				fileSpec();
				}
				break;
			case T__104:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1894;
				Match(T__104);
				State = 1895;
				fileSpec();
				}
				break;
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1896;
				intExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 282, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 1902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__104:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899;
				Match(T__104);
				State = 1900;
				fileSpec();
				}
				break;
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1901;
				intExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 284, RULE_longOrShortDatasourceSpec);
		try {
			State = 1906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 286, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			Match(T__53);
			State = 1909;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 288, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			Match(T__54);
			State = 1912;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 290, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			Match(T__4);
			State = 1915;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 292, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			Match(T__105);
			State = 1918;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 294, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1920;
			Match(T__56);
			State = 1921;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 296, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			Match(T__52);
			State = 1924;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 298, RULE_typedVarDecl);
		try {
			State = 1934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1927;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1928;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1929;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1930;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1931;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1932;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1933;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 300, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936;
			Match(T__53);
			State = 1937;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 302, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939;
			Match(T__54);
			State = 1940;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 304, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942;
			Match(T__4);
			State = 1943;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 306, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			Match(T__4);
			State = 1946;
			Match(T__16);
			State = 1947;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949;
			Match(T__56);
			State = 1950;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952;
			Match(T__55);
			State = 1953;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			Match(T__40);
			State = 1956;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			Match(T__104);
			State = 1959;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 316, RULE_datasourceEntriesInputLocation);
		try {
			State = 1963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1961;
				fileSpec();
				}
				break;
			case T__4:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1962;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,114,1966,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		1,0,1,0,1,1,5,1,322,8,1,10,1,12,1,325,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,415,8,2,1,3,1,3,3,3,419,
		8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,430,8,4,1,4,1,4,1,4,3,4,435,
		8,4,1,5,1,5,1,5,1,5,3,5,441,8,5,1,6,1,6,1,6,1,6,3,6,447,8,6,1,6,1,6,1,
		6,1,7,1,7,1,7,3,7,455,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,463,8,8,1,9,1,9,
		1,9,1,9,1,9,3,9,470,8,9,1,9,1,9,1,9,3,9,475,8,9,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,502,8,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,3,15,513,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,521,
		8,16,1,16,1,16,3,16,525,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,3,17,536,8,17,1,17,3,17,539,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,3,18,550,8,18,1,19,1,19,1,19,3,19,555,8,19,1,20,1,20,1,20,1,
		21,1,21,1,21,3,21,563,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,571,8,22,
		1,23,1,23,1,23,1,23,1,23,3,23,578,8,23,1,24,3,24,581,8,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,592,8,25,1,26,1,26,1,26,3,26,597,
		8,26,1,27,1,27,1,27,3,27,602,8,27,1,27,1,27,1,27,1,27,3,27,608,8,27,1,
		27,1,27,1,27,1,27,1,27,1,27,3,27,616,8,27,1,27,1,27,3,27,620,8,27,1,28,
		1,28,1,28,1,28,1,28,3,28,627,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,3,28,639,8,28,1,28,1,28,1,28,1,28,3,28,645,8,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,3,28,654,8,28,1,28,3,28,657,8,28,1,28,1,28,1,
		28,3,28,662,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,671,8,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,680,8,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,3,28,689,8,28,1,28,1,28,3,28,693,8,28,1,29,1,29,1,29,1,29,1,29,
		3,29,700,8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
		32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,3,35,744,8,35,3,35,746,8,35,1,36,1,36,1,36,1,36,3,36,752,
		8,36,1,37,1,37,1,37,1,37,3,37,758,8,37,1,38,1,38,1,38,1,38,3,38,764,8,
		38,1,39,1,39,1,39,1,39,3,39,770,8,39,1,40,1,40,1,40,1,40,3,40,776,8,40,
		1,41,1,41,1,41,1,41,1,41,3,41,783,8,41,1,42,1,42,1,42,3,42,788,8,42,1,
		42,3,42,791,8,42,1,43,1,43,1,44,1,44,3,44,797,8,44,1,45,1,45,1,45,1,45,
		1,45,3,45,804,8,45,1,45,1,45,3,45,808,8,45,1,46,1,46,1,46,1,46,3,46,814,
		8,46,1,46,3,46,817,8,46,1,47,1,47,1,47,1,47,1,47,3,47,824,8,47,1,47,1,
		47,1,47,3,47,829,8,47,1,48,1,48,1,48,1,48,1,48,3,48,836,8,48,1,48,3,48,
		839,8,48,1,49,1,49,1,49,1,49,3,49,845,8,49,1,50,1,50,1,50,1,50,1,50,1,
		50,3,50,853,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,
		1,53,1,54,1,54,1,54,1,54,3,54,871,8,54,1,54,1,54,1,54,1,55,1,55,1,55,1,
		55,1,55,1,55,3,55,882,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,
		1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
		1,62,1,62,1,62,3,62,910,8,62,1,63,1,63,3,63,914,8,63,1,64,1,64,1,65,1,
		65,1,66,1,66,1,67,1,67,3,67,924,8,67,1,68,1,68,1,69,1,69,3,69,930,8,69,
		1,70,1,70,3,70,934,8,70,1,71,1,71,3,71,938,8,71,1,72,1,72,3,72,942,8,72,
		1,73,1,73,3,73,946,8,73,1,74,1,74,3,74,950,8,74,1,75,1,75,3,75,954,8,75,
		1,76,1,76,3,76,958,8,76,1,77,1,77,1,77,1,77,3,77,964,8,77,1,78,1,78,1,
		78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,
		79,982,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,992,8,80,1,81,
		1,81,1,81,1,81,1,81,1,81,3,81,1000,8,81,1,82,1,82,1,82,3,82,1005,8,82,
		1,83,1,83,1,83,3,83,1010,8,83,1,83,1,83,1,83,1,83,3,83,1016,8,83,1,83,
		1,83,1,83,1,83,1,83,1,83,3,83,1024,8,83,1,83,1,83,3,83,1028,8,83,1,84,
		1,84,1,84,1,84,1,84,3,84,1035,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,3,84,1047,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,3,84,1059,8,84,1,84,3,84,1062,8,84,1,84,1,84,1,84,3,84,1067,
		8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1076,8,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,3,84,1085,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		3,84,1094,8,84,1,84,1,84,3,84,1098,8,84,1,85,1,85,1,85,3,85,1103,8,85,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,3,86,1134,8,86,1,87,1,87,1,87,3,87,1139,8,87,1,88,1,88,1,88,3,88,
		1144,8,88,1,89,3,89,1147,8,89,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,
		3,91,1157,8,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,
		1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,1181,8,95,
		1,95,1,95,1,95,1,95,1,95,1,95,3,95,1189,8,95,1,96,1,96,1,96,1,96,1,96,
		1,96,3,96,1197,8,96,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1205,8,97,1,98,
		1,98,1,98,1,98,1,98,1,98,3,98,1213,8,98,1,99,1,99,1,99,3,99,1218,8,99,
		1,100,1,100,1,100,3,100,1223,8,100,1,100,1,100,1,100,1,100,3,100,1229,
		8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1237,8,100,1,100,1,100,
		3,100,1241,8,100,1,101,1,101,1,101,1,101,1,101,3,101,1248,8,101,1,101,
		1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1260,8,101,
		1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1272,
		8,101,1,101,3,101,1275,8,101,1,101,1,101,1,101,3,101,1280,8,101,1,101,
		1,101,1,101,1,101,1,101,1,101,1,101,3,101,1289,8,101,1,101,1,101,1,101,
		1,101,1,101,1,101,1,101,3,101,1298,8,101,1,101,1,101,1,101,1,101,1,101,
		1,101,1,101,3,101,1307,8,101,1,101,1,101,1,101,3,101,1312,8,101,1,101,
		1,101,3,101,1316,8,101,1,101,3,101,1319,8,101,1,101,1,101,1,101,3,101,
		1324,8,101,1,101,1,101,3,101,1328,8,101,1,101,3,101,1331,8,101,1,101,3,
		101,1334,8,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1342,8,101,1,
		101,1,101,1,101,1,101,1,101,3,101,1349,8,101,1,101,3,101,1352,8,101,1,
		101,1,101,3,101,1356,8,101,1,101,1,101,1,101,1,101,1,101,3,101,1363,8,
		101,1,101,1,101,1,101,3,101,1368,8,101,1,101,1,101,1,101,1,101,1,101,3,
		101,1375,8,101,1,101,1,101,1,101,3,101,1380,8,101,1,101,1,101,1,101,1,
		101,1,101,3,101,1387,8,101,1,101,3,101,1390,8,101,1,101,1,101,3,101,1394,
		8,101,1,101,1,101,1,101,1,101,1,101,3,101,1401,8,101,1,101,1,101,1,101,
		3,101,1406,8,101,1,101,1,101,1,101,1,101,1,101,3,101,1413,8,101,1,101,
		1,101,1,101,3,101,1418,8,101,1,101,1,101,3,101,1422,8,101,1,101,3,101,
		1425,8,101,1,101,3,101,1428,8,101,1,101,1,101,1,101,1,101,1,101,1,101,
		3,101,1436,8,101,1,101,1,101,3,101,1440,8,101,1,101,3,101,1443,8,101,1,
		101,3,101,1446,8,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1454,8,
		101,1,102,1,102,1,103,1,103,1,103,3,103,1461,8,103,1,104,1,104,1,104,1,
		104,1,104,1,104,1,104,1,104,3,104,1471,8,104,1,104,3,104,1474,8,104,1,
		105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1484,8,105,1,106,1,
		106,1,106,1,106,1,106,1,106,3,106,1492,8,106,1,107,1,107,1,107,1,107,1,
		107,1,107,1,107,1,107,3,107,1502,8,107,1,108,1,108,1,108,3,108,1507,8,
		108,1,109,1,109,1,109,1,109,3,109,1513,8,109,1,110,1,110,1,110,3,110,1518,
		8,110,1,111,1,111,1,111,3,111,1523,8,111,1,111,1,111,1,111,1,111,3,111,
		1529,8,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1537,8,111,1,111,
		1,111,3,111,1541,8,111,1,112,1,112,1,112,1,112,1,112,3,112,1548,8,112,
		1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1560,
		8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
		1572,8,112,1,112,3,112,1575,8,112,1,112,1,112,1,112,3,112,1580,8,112,1,
		112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1589,8,112,1,112,1,112,1,
		112,1,112,1,112,1,112,1,112,3,112,1598,8,112,1,112,1,112,1,112,1,112,1,
		112,1,112,1,112,3,112,1607,8,112,1,112,1,112,3,112,1611,8,112,1,113,1,
		113,1,113,3,113,1616,8,113,1,114,1,114,1,114,3,114,1621,8,114,1,115,1,
		115,1,115,3,115,1626,8,115,1,116,1,116,1,116,3,116,1631,8,116,1,116,1,
		116,1,116,1,116,3,116,1637,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,
		116,1645,8,116,1,116,1,116,3,116,1649,8,116,1,117,1,117,1,117,1,117,1,
		117,3,117,1656,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,
		117,1,117,3,117,1668,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,
		117,1,117,1,117,3,117,1680,8,117,1,117,3,117,1683,8,117,1,117,1,117,1,
		117,3,117,1688,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1697,
		8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1706,8,117,1,117,
		1,117,1,117,1,117,1,117,1,117,1,117,3,117,1715,8,117,1,117,1,117,3,117,
		1719,8,117,1,118,1,118,3,118,1723,8,118,1,119,1,119,3,119,1727,8,119,1,
		120,1,120,3,120,1731,8,120,1,121,1,121,3,121,1735,8,121,1,122,1,122,1,
		122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,3,123,1756,8,123,1,124,1,124,1,124,1,124,
		1,124,1,124,1,124,1,124,3,124,1766,8,124,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,3,125,1776,8,125,1,126,1,126,1,126,3,126,1781,8,126,
		1,126,3,126,1784,8,126,1,126,1,126,3,126,1788,8,126,1,127,1,127,3,127,
		1792,8,127,1,127,3,127,1795,8,127,1,127,1,127,3,127,1799,8,127,1,128,1,
		128,1,128,3,128,1804,8,128,1,128,1,128,3,128,1808,8,128,1,129,1,129,3,
		129,1812,8,129,1,129,1,129,3,129,1816,8,129,1,130,1,130,1,130,3,130,1821,
		8,130,1,130,1,130,3,130,1825,8,130,1,131,1,131,3,131,1829,8,131,1,131,
		1,131,3,131,1833,8,131,1,132,1,132,1,132,3,132,1838,8,132,1,132,1,132,
		3,132,1842,8,132,1,133,1,133,3,133,1846,8,133,1,133,1,133,3,133,1850,8,
		133,1,134,1,134,1,134,3,134,1855,8,134,1,134,1,134,3,134,1859,8,134,1,
		135,1,135,3,135,1863,8,135,1,135,1,135,3,135,1867,8,135,1,136,1,136,1,
		136,1,136,1,136,1,136,1,136,3,136,1876,8,136,1,137,1,137,1,137,3,137,1881,
		8,137,1,138,1,138,1,138,1,138,3,138,1887,8,138,1,139,1,139,1,139,3,139,
		1892,8,139,1,140,1,140,1,140,1,140,3,140,1898,8,140,1,141,1,141,1,141,
		3,141,1903,8,141,1,142,1,142,3,142,1907,8,142,1,143,1,143,1,143,1,144,
		1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,1,147,1,148,
		1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,1935,
		8,149,1,150,1,150,1,150,1,151,1,151,1,151,1,152,1,152,1,152,1,153,1,153,
		1,153,1,153,1,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,157,
		1,157,1,157,1,158,1,158,3,158,1964,8,158,1,158,0,0,159,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
		180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
		216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
		252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
		288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,0,17,1,0,8,
		9,2,0,9,9,18,18,3,0,4,4,11,11,25,26,1,0,29,30,1,0,33,34,2,0,15,15,36,36,
		2,0,14,14,27,27,1,0,109,111,2,0,109,109,111,111,1,0,109,110,1,0,71,73,
		1,0,110,111,1,0,81,84,1,0,86,88,2,0,14,14,31,31,2,0,109,110,112,112,2,
		0,14,14,16,16,2172,0,318,1,0,0,0,2,323,1,0,0,0,4,414,1,0,0,0,6,416,1,0,
		0,0,8,422,1,0,0,0,10,436,1,0,0,0,12,442,1,0,0,0,14,451,1,0,0,0,16,462,
		1,0,0,0,18,464,1,0,0,0,20,476,1,0,0,0,22,481,1,0,0,0,24,488,1,0,0,0,26,
		494,1,0,0,0,28,501,1,0,0,0,30,503,1,0,0,0,32,514,1,0,0,0,34,526,1,0,0,
		0,36,540,1,0,0,0,38,551,1,0,0,0,40,556,1,0,0,0,42,559,1,0,0,0,44,570,1,
		0,0,0,46,577,1,0,0,0,48,580,1,0,0,0,50,591,1,0,0,0,52,593,1,0,0,0,54,619,
		1,0,0,0,56,692,1,0,0,0,58,699,1,0,0,0,60,701,1,0,0,0,62,703,1,0,0,0,64,
		708,1,0,0,0,66,713,1,0,0,0,68,718,1,0,0,0,70,745,1,0,0,0,72,747,1,0,0,
		0,74,753,1,0,0,0,76,759,1,0,0,0,78,765,1,0,0,0,80,771,1,0,0,0,82,777,1,
		0,0,0,84,790,1,0,0,0,86,792,1,0,0,0,88,796,1,0,0,0,90,807,1,0,0,0,92,816,
		1,0,0,0,94,828,1,0,0,0,96,838,1,0,0,0,98,840,1,0,0,0,100,852,1,0,0,0,102,
		854,1,0,0,0,104,858,1,0,0,0,106,862,1,0,0,0,108,866,1,0,0,0,110,881,1,
		0,0,0,112,883,1,0,0,0,114,888,1,0,0,0,116,891,1,0,0,0,118,895,1,0,0,0,
		120,898,1,0,0,0,122,902,1,0,0,0,124,909,1,0,0,0,126,911,1,0,0,0,128,915,
		1,0,0,0,130,917,1,0,0,0,132,919,1,0,0,0,134,923,1,0,0,0,136,925,1,0,0,
		0,138,929,1,0,0,0,140,933,1,0,0,0,142,937,1,0,0,0,144,941,1,0,0,0,146,
		945,1,0,0,0,148,949,1,0,0,0,150,953,1,0,0,0,152,957,1,0,0,0,154,963,1,
		0,0,0,156,965,1,0,0,0,158,973,1,0,0,0,160,983,1,0,0,0,162,993,1,0,0,0,
		164,1001,1,0,0,0,166,1027,1,0,0,0,168,1097,1,0,0,0,170,1099,1,0,0,0,172,
		1133,1,0,0,0,174,1135,1,0,0,0,176,1140,1,0,0,0,178,1146,1,0,0,0,180,1150,
		1,0,0,0,182,1156,1,0,0,0,184,1158,1,0,0,0,186,1163,1,0,0,0,188,1168,1,
		0,0,0,190,1176,1,0,0,0,192,1190,1,0,0,0,194,1198,1,0,0,0,196,1206,1,0,
		0,0,198,1214,1,0,0,0,200,1240,1,0,0,0,202,1453,1,0,0,0,204,1455,1,0,0,
		0,206,1457,1,0,0,0,208,1462,1,0,0,0,210,1475,1,0,0,0,212,1485,1,0,0,0,
		214,1493,1,0,0,0,216,1503,1,0,0,0,218,1512,1,0,0,0,220,1514,1,0,0,0,222,
		1540,1,0,0,0,224,1610,1,0,0,0,226,1612,1,0,0,0,228,1617,1,0,0,0,230,1622,
		1,0,0,0,232,1648,1,0,0,0,234,1718,1,0,0,0,236,1722,1,0,0,0,238,1726,1,
		0,0,0,240,1730,1,0,0,0,242,1734,1,0,0,0,244,1736,1,0,0,0,246,1755,1,0,
		0,0,248,1765,1,0,0,0,250,1775,1,0,0,0,252,1783,1,0,0,0,254,1794,1,0,0,
		0,256,1803,1,0,0,0,258,1811,1,0,0,0,260,1820,1,0,0,0,262,1828,1,0,0,0,
		264,1837,1,0,0,0,266,1845,1,0,0,0,268,1854,1,0,0,0,270,1862,1,0,0,0,272,
		1875,1,0,0,0,274,1880,1,0,0,0,276,1886,1,0,0,0,278,1891,1,0,0,0,280,1897,
		1,0,0,0,282,1902,1,0,0,0,284,1906,1,0,0,0,286,1908,1,0,0,0,288,1911,1,
		0,0,0,290,1914,1,0,0,0,292,1917,1,0,0,0,294,1920,1,0,0,0,296,1923,1,0,
		0,0,298,1934,1,0,0,0,300,1936,1,0,0,0,302,1939,1,0,0,0,304,1942,1,0,0,
		0,306,1945,1,0,0,0,308,1949,1,0,0,0,310,1952,1,0,0,0,312,1955,1,0,0,0,
		314,1958,1,0,0,0,316,1963,1,0,0,0,318,319,3,2,1,0,319,1,1,0,0,0,320,322,
		3,4,2,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,
		0,324,3,1,0,0,0,325,323,1,0,0,0,326,327,3,58,29,0,327,328,5,107,0,0,328,
		415,1,0,0,0,329,330,3,70,35,0,330,331,5,107,0,0,331,415,1,0,0,0,332,333,
		3,100,50,0,333,334,5,107,0,0,334,415,1,0,0,0,335,336,3,110,55,0,336,337,
		5,107,0,0,337,415,1,0,0,0,338,339,3,178,89,0,339,340,5,107,0,0,340,415,
		1,0,0,0,341,342,3,180,90,0,342,343,5,107,0,0,343,415,1,0,0,0,344,345,3,
		182,91,0,345,346,5,107,0,0,346,415,1,0,0,0,347,348,3,160,80,0,348,349,
		5,107,0,0,349,415,1,0,0,0,350,351,3,108,54,0,351,352,5,107,0,0,352,415,
		1,0,0,0,353,354,3,160,80,0,354,355,5,107,0,0,355,415,1,0,0,0,356,357,3,
		190,95,0,357,358,5,107,0,0,358,415,1,0,0,0,359,360,3,192,96,0,360,361,
		5,107,0,0,361,415,1,0,0,0,362,363,3,194,97,0,363,364,5,107,0,0,364,415,
		1,0,0,0,365,366,3,196,98,0,366,367,5,107,0,0,367,415,1,0,0,0,368,369,3,
		208,104,0,369,370,5,107,0,0,370,415,1,0,0,0,371,372,3,162,81,0,372,373,
		5,107,0,0,373,415,1,0,0,0,374,375,3,212,106,0,375,376,5,107,0,0,376,415,
		1,0,0,0,377,378,3,8,4,0,378,379,5,107,0,0,379,415,1,0,0,0,380,381,3,12,
		6,0,381,382,5,107,0,0,382,415,1,0,0,0,383,384,3,10,5,0,384,385,5,107,0,
		0,385,415,1,0,0,0,386,387,3,18,9,0,387,388,5,107,0,0,388,415,1,0,0,0,389,
		390,3,20,10,0,390,391,5,107,0,0,391,415,1,0,0,0,392,393,3,22,11,0,393,
		394,5,107,0,0,394,415,1,0,0,0,395,396,3,30,15,0,396,397,5,107,0,0,397,
		415,1,0,0,0,398,399,3,32,16,0,399,400,5,107,0,0,400,415,1,0,0,0,401,402,
		3,34,17,0,402,403,5,107,0,0,403,415,1,0,0,0,404,405,3,36,18,0,405,406,
		5,107,0,0,406,415,1,0,0,0,407,408,3,210,105,0,408,409,5,107,0,0,409,415,
		1,0,0,0,410,411,5,1,0,0,411,415,5,107,0,0,412,415,3,6,3,0,413,415,3,246,
		123,0,414,326,1,0,0,0,414,329,1,0,0,0,414,332,1,0,0,0,414,335,1,0,0,0,
		414,338,1,0,0,0,414,341,1,0,0,0,414,344,1,0,0,0,414,347,1,0,0,0,414,350,
		1,0,0,0,414,353,1,0,0,0,414,356,1,0,0,0,414,359,1,0,0,0,414,362,1,0,0,
		0,414,365,1,0,0,0,414,368,1,0,0,0,414,371,1,0,0,0,414,374,1,0,0,0,414,
		377,1,0,0,0,414,380,1,0,0,0,414,383,1,0,0,0,414,386,1,0,0,0,414,389,1,
		0,0,0,414,392,1,0,0,0,414,395,1,0,0,0,414,398,1,0,0,0,414,401,1,0,0,0,
		414,404,1,0,0,0,414,407,1,0,0,0,414,410,1,0,0,0,414,412,1,0,0,0,414,413,
		1,0,0,0,415,5,1,0,0,0,416,418,5,2,0,0,417,419,3,2,1,0,418,417,1,0,0,0,
		418,419,1,0,0,0,419,420,1,0,0,0,420,421,5,3,0,0,421,7,1,0,0,0,422,423,
		5,4,0,0,423,429,5,5,0,0,424,430,3,228,114,0,425,426,5,6,0,0,426,427,3,
		14,7,0,427,428,5,7,0,0,428,430,1,0,0,0,429,424,1,0,0,0,429,425,1,0,0,0,
		430,431,1,0,0,0,431,434,7,0,0,0,432,435,3,84,42,0,433,435,3,86,43,0,434,
		432,1,0,0,0,434,433,1,0,0,0,435,9,1,0,0,0,436,437,5,10,0,0,437,440,5,5,
		0,0,438,441,3,98,49,0,439,441,3,96,48,0,440,438,1,0,0,0,440,439,1,0,0,
		0,441,11,1,0,0,0,442,443,5,11,0,0,443,446,5,5,0,0,444,447,3,98,49,0,445,
		447,3,96,48,0,446,444,1,0,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,449,
		5,12,0,0,449,450,3,14,7,0,450,13,1,0,0,0,451,454,3,16,8,0,452,453,5,13,
		0,0,453,455,3,14,7,0,454,452,1,0,0,0,454,455,1,0,0,0,455,15,1,0,0,0,456,
		457,5,14,0,0,457,458,5,15,0,0,458,463,3,228,114,0,459,460,5,16,0,0,460,
		461,5,15,0,0,461,463,3,228,114,0,462,456,1,0,0,0,462,459,1,0,0,0,463,17,
		1,0,0,0,464,465,5,4,0,0,465,466,5,5,0,0,466,469,5,17,0,0,467,470,3,228,
		114,0,468,470,3,42,21,0,469,467,1,0,0,0,469,468,1,0,0,0,470,471,1,0,0,
		0,471,474,7,0,0,0,472,475,3,96,48,0,473,475,3,98,49,0,474,472,1,0,0,0,
		474,473,1,0,0,0,475,19,1,0,0,0,476,477,5,10,0,0,477,478,5,5,0,0,478,479,
		5,17,0,0,479,480,3,26,13,0,480,21,1,0,0,0,481,482,5,11,0,0,482,483,5,5,
		0,0,483,484,5,17,0,0,484,485,3,26,13,0,485,486,5,12,0,0,486,487,3,42,21,
		0,487,23,1,0,0,0,488,489,5,5,0,0,489,490,5,17,0,0,490,491,3,28,14,0,491,
		492,7,1,0,0,492,493,3,96,48,0,493,25,1,0,0,0,494,495,3,28,14,0,495,496,
		7,1,0,0,496,497,3,96,48,0,497,27,1,0,0,0,498,502,3,176,88,0,499,502,3,
		228,114,0,500,502,5,110,0,0,501,498,1,0,0,0,501,499,1,0,0,0,501,500,1,
		0,0,0,502,29,1,0,0,0,503,504,5,11,0,0,504,505,5,5,0,0,505,506,5,19,0,0,
		506,507,5,9,0,0,507,508,3,96,48,0,508,509,5,12,0,0,509,512,3,42,21,0,510,
		511,5,20,0,0,511,513,3,52,26,0,512,510,1,0,0,0,512,513,1,0,0,0,513,31,
		1,0,0,0,514,515,5,10,0,0,515,516,5,5,0,0,516,517,5,19,0,0,517,520,7,1,
		0,0,518,521,3,96,48,0,519,521,3,98,49,0,520,518,1,0,0,0,520,519,1,0,0,
		0,521,524,1,0,0,0,522,523,5,20,0,0,523,525,3,52,26,0,524,522,1,0,0,0,524,
		525,1,0,0,0,525,33,1,0,0,0,526,527,5,21,0,0,527,528,5,5,0,0,528,529,5,
		19,0,0,529,530,7,1,0,0,530,531,3,46,23,0,531,532,5,22,0,0,532,535,3,50,
		25,0,533,534,5,20,0,0,534,536,3,52,26,0,535,533,1,0,0,0,535,536,1,0,0,
		0,536,538,1,0,0,0,537,539,3,38,19,0,538,537,1,0,0,0,538,539,1,0,0,0,539,
		35,1,0,0,0,540,541,5,23,0,0,541,542,5,5,0,0,542,543,5,19,0,0,543,544,7,
		1,0,0,544,545,3,46,23,0,545,546,5,22,0,0,546,549,3,46,23,0,547,548,5,20,
		0,0,548,550,3,52,26,0,549,547,1,0,0,0,549,550,1,0,0,0,550,37,1,0,0,0,551,
		554,3,40,20,0,552,553,5,13,0,0,553,555,3,38,19,0,554,552,1,0,0,0,554,555,
		1,0,0,0,555,39,1,0,0,0,556,557,5,24,0,0,557,558,7,2,0,0,558,41,1,0,0,0,
		559,562,3,44,22,0,560,561,5,13,0,0,561,563,3,42,21,0,562,560,1,0,0,0,562,
		563,1,0,0,0,563,43,1,0,0,0,564,565,5,14,0,0,565,566,5,15,0,0,566,571,3,
		228,114,0,567,568,5,27,0,0,568,569,5,15,0,0,569,571,3,228,114,0,570,564,
		1,0,0,0,570,567,1,0,0,0,571,45,1,0,0,0,572,578,3,96,48,0,573,578,3,98,
		49,0,574,578,3,48,24,0,575,578,3,126,63,0,576,578,5,28,0,0,577,572,1,0,
		0,0,577,573,1,0,0,0,577,574,1,0,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,
		47,1,0,0,0,579,581,7,3,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,
		0,0,582,583,5,31,0,0,583,584,3,228,114,0,584,49,1,0,0,0,585,592,3,96,48,
		0,586,592,3,98,49,0,587,592,3,48,24,0,588,592,3,126,63,0,589,592,5,28,
		0,0,590,592,5,32,0,0,591,585,1,0,0,0,591,586,1,0,0,0,591,587,1,0,0,0,591,
		588,1,0,0,0,591,589,1,0,0,0,591,590,1,0,0,0,592,51,1,0,0,0,593,596,3,54,
		27,0,594,595,7,4,0,0,595,597,3,52,26,0,596,594,1,0,0,0,596,597,1,0,0,0,
		597,53,1,0,0,0,598,601,3,56,28,0,599,600,7,4,0,0,600,602,3,54,27,0,601,
		599,1,0,0,0,601,602,1,0,0,0,602,620,1,0,0,0,603,604,5,6,0,0,604,607,3,
		56,28,0,605,606,7,4,0,0,606,608,3,54,27,0,607,605,1,0,0,0,607,608,1,0,
		0,0,608,609,1,0,0,0,609,610,5,7,0,0,610,620,1,0,0,0,611,612,5,6,0,0,612,
		615,3,54,27,0,613,614,7,4,0,0,614,616,3,54,27,0,615,613,1,0,0,0,615,616,
		1,0,0,0,616,617,1,0,0,0,617,618,5,7,0,0,618,620,1,0,0,0,619,598,1,0,0,
		0,619,603,1,0,0,0,619,611,1,0,0,0,620,55,1,0,0,0,621,622,5,35,0,0,622,
		623,7,5,0,0,623,693,3,176,88,0,624,626,5,35,0,0,625,627,5,37,0,0,626,625,
		1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,5,9,0,0,629,630,5,6,0,
		0,630,631,3,174,87,0,631,632,5,7,0,0,632,693,1,0,0,0,633,634,7,6,0,0,634,
		635,7,5,0,0,635,693,3,228,114,0,636,638,7,6,0,0,637,639,5,37,0,0,638,637,
		1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,9,0,0,641,644,5,6,0,
		0,642,645,3,226,113,0,643,645,3,206,103,0,644,642,1,0,0,0,644,643,1,0,
		0,0,645,646,1,0,0,0,646,647,5,7,0,0,647,693,1,0,0,0,648,653,7,6,0,0,649,
		654,5,38,0,0,650,651,5,39,0,0,651,652,5,37,0,0,652,654,5,40,0,0,653,649,
		1,0,0,0,653,650,1,0,0,0,654,656,1,0,0,0,655,657,5,41,0,0,656,655,1,0,0,
		0,656,657,1,0,0,0,657,658,1,0,0,0,658,693,3,204,102,0,659,661,7,6,0,0,
		660,662,5,37,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,664,
		5,9,0,0,664,665,5,6,0,0,665,666,3,226,113,0,666,667,5,7,0,0,667,693,1,
		0,0,0,668,670,7,6,0,0,669,671,5,37,0,0,670,669,1,0,0,0,670,671,1,0,0,0,
		671,672,1,0,0,0,672,673,5,42,0,0,673,693,3,228,114,0,674,679,7,6,0,0,675,
		680,5,43,0,0,676,677,5,39,0,0,677,678,5,37,0,0,678,680,5,44,0,0,679,675,
		1,0,0,0,679,676,1,0,0,0,680,681,1,0,0,0,681,682,5,45,0,0,682,693,3,228,
		114,0,683,688,7,6,0,0,684,689,5,46,0,0,685,686,5,39,0,0,686,687,5,37,0,
		0,687,689,5,47,0,0,688,684,1,0,0,0,688,685,1,0,0,0,689,690,1,0,0,0,690,
		691,5,45,0,0,691,693,3,228,114,0,692,621,1,0,0,0,692,624,1,0,0,0,692,633,
		1,0,0,0,692,636,1,0,0,0,692,648,1,0,0,0,692,659,1,0,0,0,692,668,1,0,0,
		0,692,674,1,0,0,0,692,683,1,0,0,0,693,57,1,0,0,0,694,700,3,60,30,0,695,
		700,3,62,31,0,696,700,3,64,32,0,697,700,3,66,33,0,698,700,3,68,34,0,699,
		694,1,0,0,0,699,695,1,0,0,0,699,696,1,0,0,0,699,697,1,0,0,0,699,698,1,
		0,0,0,700,59,1,0,0,0,701,702,5,48,0,0,702,61,1,0,0,0,703,704,5,48,0,0,
		704,705,5,45,0,0,705,706,5,49,0,0,706,707,5,50,0,0,707,63,1,0,0,0,708,
		709,5,48,0,0,709,710,5,45,0,0,710,711,5,49,0,0,711,712,5,51,0,0,712,65,
		1,0,0,0,713,714,5,48,0,0,714,715,5,45,0,0,715,716,5,49,0,0,716,717,5,52,
		0,0,717,67,1,0,0,0,718,719,5,48,0,0,719,720,5,45,0,0,720,721,5,49,0,0,
		721,722,5,50,0,0,722,723,5,33,0,0,723,724,5,51,0,0,724,69,1,0,0,0,725,
		746,3,72,36,0,726,746,3,74,37,0,727,746,3,76,38,0,728,746,3,78,39,0,729,
		746,3,80,40,0,730,746,3,82,41,0,731,732,5,53,0,0,732,733,5,110,0,0,733,
		743,5,15,0,0,734,744,5,110,0,0,735,744,3,84,42,0,736,744,3,90,45,0,737,
		744,3,228,114,0,738,744,3,204,102,0,739,744,3,92,46,0,740,744,3,176,88,
		0,741,744,3,94,47,0,742,744,3,96,48,0,743,734,1,0,0,0,743,735,1,0,0,0,
		743,736,1,0,0,0,743,737,1,0,0,0,743,738,1,0,0,0,743,739,1,0,0,0,743,740,
		1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,746,1,0,0,0,745,725,1,0,0,
		0,745,726,1,0,0,0,745,727,1,0,0,0,745,728,1,0,0,0,745,729,1,0,0,0,745,
		730,1,0,0,0,745,731,1,0,0,0,746,71,1,0,0,0,747,748,5,54,0,0,748,751,5,
		110,0,0,749,750,5,15,0,0,750,752,3,84,42,0,751,749,1,0,0,0,751,752,1,0,
		0,0,752,73,1,0,0,0,753,754,5,55,0,0,754,757,5,110,0,0,755,756,5,15,0,0,
		756,758,3,90,45,0,757,755,1,0,0,0,757,758,1,0,0,0,758,75,1,0,0,0,759,760,
		5,56,0,0,760,763,5,110,0,0,761,762,5,15,0,0,762,764,3,228,114,0,763,761,
		1,0,0,0,763,764,1,0,0,0,764,77,1,0,0,0,765,766,5,41,0,0,766,769,5,110,
		0,0,767,768,5,15,0,0,768,770,3,204,102,0,769,767,1,0,0,0,769,770,1,0,0,
		0,770,79,1,0,0,0,771,772,5,57,0,0,772,775,5,110,0,0,773,774,5,15,0,0,774,
		776,3,92,46,0,775,773,1,0,0,0,775,776,1,0,0,0,776,81,1,0,0,0,777,778,5,
		5,0,0,778,779,5,17,0,0,779,782,5,110,0,0,780,781,5,15,0,0,781,783,3,94,
		47,0,782,780,1,0,0,0,782,783,1,0,0,0,783,83,1,0,0,0,784,785,5,54,0,0,785,
		787,7,7,0,0,786,788,3,154,77,0,787,786,1,0,0,0,787,788,1,0,0,0,788,791,
		1,0,0,0,789,791,5,110,0,0,790,784,1,0,0,0,790,789,1,0,0,0,791,85,1,0,0,
		0,792,793,7,8,0,0,793,87,1,0,0,0,794,797,3,84,42,0,795,797,3,86,43,0,796,
		794,1,0,0,0,796,795,1,0,0,0,797,89,1,0,0,0,798,799,5,55,0,0,799,800,5,
		109,0,0,800,803,5,9,0,0,801,804,3,84,42,0,802,804,3,126,63,0,803,801,1,
		0,0,0,803,802,1,0,0,0,804,808,1,0,0,0,805,806,5,55,0,0,806,808,5,110,0,
		0,807,798,1,0,0,0,807,805,1,0,0,0,808,91,1,0,0,0,809,810,7,7,0,0,810,813,
		7,1,0,0,811,814,3,84,42,0,812,814,3,126,63,0,813,811,1,0,0,0,813,812,1,
		0,0,0,814,817,1,0,0,0,815,817,5,110,0,0,816,809,1,0,0,0,816,815,1,0,0,
		0,817,93,1,0,0,0,818,819,5,5,0,0,819,823,5,17,0,0,820,824,3,176,88,0,821,
		824,3,228,114,0,822,824,5,110,0,0,823,820,1,0,0,0,823,821,1,0,0,0,823,
		822,1,0,0,0,824,825,1,0,0,0,825,826,7,1,0,0,826,829,3,96,48,0,827,829,
		5,110,0,0,828,818,1,0,0,0,828,827,1,0,0,0,829,95,1,0,0,0,830,831,5,5,0,
		0,831,832,7,7,0,0,832,835,7,1,0,0,833,836,3,84,42,0,834,836,3,86,43,0,
		835,833,1,0,0,0,835,834,1,0,0,0,836,839,1,0,0,0,837,839,5,110,0,0,838,
		830,1,0,0,0,838,837,1,0,0,0,839,97,1,0,0,0,840,841,7,7,0,0,841,844,5,9,
		0,0,842,845,3,84,42,0,843,845,3,86,43,0,844,842,1,0,0,0,844,843,1,0,0,
		0,845,99,1,0,0,0,846,847,5,110,0,0,847,848,5,15,0,0,848,853,5,110,0,0,
		849,853,3,102,51,0,850,853,3,106,53,0,851,853,3,104,52,0,852,846,1,0,0,
		0,852,849,1,0,0,0,852,850,1,0,0,0,852,851,1,0,0,0,853,101,1,0,0,0,854,
		855,5,110,0,0,855,856,5,15,0,0,856,857,3,84,42,0,857,103,1,0,0,0,858,859,
		5,110,0,0,859,860,5,15,0,0,860,861,3,90,45,0,861,105,1,0,0,0,862,863,5,
		110,0,0,863,864,5,15,0,0,864,865,5,109,0,0,865,107,1,0,0,0,866,867,5,21,
		0,0,867,870,5,58,0,0,868,869,5,18,0,0,869,871,3,124,62,0,870,868,1,0,0,
		0,870,871,1,0,0,0,871,872,1,0,0,0,872,873,5,22,0,0,873,874,3,134,67,0,
		874,109,1,0,0,0,875,882,3,112,56,0,876,882,3,114,57,0,877,882,3,116,58,
		0,878,882,3,118,59,0,879,882,3,120,60,0,880,882,3,122,61,0,881,875,1,0,
		0,0,881,876,1,0,0,0,881,877,1,0,0,0,881,878,1,0,0,0,881,879,1,0,0,0,881,
		880,1,0,0,0,882,111,1,0,0,0,883,884,5,59,0,0,884,885,5,58,0,0,885,886,
		5,18,0,0,886,887,3,124,62,0,887,113,1,0,0,0,888,889,5,59,0,0,889,890,5,
		110,0,0,890,115,1,0,0,0,891,892,5,59,0,0,892,893,5,54,0,0,893,894,7,9,
		0,0,894,117,1,0,0,0,895,896,5,59,0,0,896,897,5,109,0,0,897,119,1,0,0,0,
		898,899,5,59,0,0,899,900,5,60,0,0,900,901,5,61,0,0,901,121,1,0,0,0,902,
		903,5,59,0,0,903,904,5,62,0,0,904,905,5,63,0,0,905,123,1,0,0,0,906,910,
		5,64,0,0,907,908,5,62,0,0,908,910,5,63,0,0,909,906,1,0,0,0,909,907,1,0,
		0,0,910,125,1,0,0,0,911,913,5,65,0,0,912,914,7,9,0,0,913,912,1,0,0,0,913,
		914,1,0,0,0,914,127,1,0,0,0,915,916,3,126,63,0,916,129,1,0,0,0,917,918,
		3,126,63,0,918,131,1,0,0,0,919,920,3,126,63,0,920,133,1,0,0,0,921,924,
		3,126,63,0,922,924,3,136,68,0,923,921,1,0,0,0,923,922,1,0,0,0,924,135,
		1,0,0,0,925,926,3,228,114,0,926,137,1,0,0,0,927,930,3,126,63,0,928,930,
		3,88,44,0,929,927,1,0,0,0,929,928,1,0,0,0,930,139,1,0,0,0,931,934,3,126,
		63,0,932,934,3,88,44,0,933,931,1,0,0,0,933,932,1,0,0,0,934,141,1,0,0,0,
		935,938,3,126,63,0,936,938,3,88,44,0,937,935,1,0,0,0,937,936,1,0,0,0,938,
		143,1,0,0,0,939,942,3,126,63,0,940,942,3,88,44,0,941,939,1,0,0,0,941,940,
		1,0,0,0,942,145,1,0,0,0,943,946,3,126,63,0,944,946,3,88,44,0,945,943,1,
		0,0,0,945,944,1,0,0,0,946,147,1,0,0,0,947,950,3,126,63,0,948,950,3,88,
		44,0,949,947,1,0,0,0,949,948,1,0,0,0,950,149,1,0,0,0,951,954,3,126,63,
		0,952,954,3,88,44,0,953,951,1,0,0,0,953,952,1,0,0,0,954,151,1,0,0,0,955,
		958,3,126,63,0,956,958,3,88,44,0,957,955,1,0,0,0,957,956,1,0,0,0,958,153,
		1,0,0,0,959,960,5,66,0,0,960,964,5,64,0,0,961,962,5,9,0,0,962,964,3,126,
		63,0,963,959,1,0,0,0,963,961,1,0,0,0,964,155,1,0,0,0,965,966,5,4,0,0,966,
		967,5,55,0,0,967,968,5,6,0,0,968,969,3,170,85,0,969,970,5,7,0,0,970,971,
		5,9,0,0,971,972,3,88,44,0,972,157,1,0,0,0,973,974,5,11,0,0,974,975,5,67,
		0,0,975,976,5,9,0,0,976,977,3,88,44,0,977,978,5,12,0,0,978,981,3,170,85,
		0,979,980,5,20,0,0,980,982,3,164,82,0,981,979,1,0,0,0,981,982,1,0,0,0,
		982,159,1,0,0,0,983,984,5,21,0,0,984,985,5,67,0,0,985,986,7,1,0,0,986,
		987,3,88,44,0,987,988,5,22,0,0,988,991,3,144,72,0,989,990,5,20,0,0,990,
		992,3,164,82,0,991,989,1,0,0,0,991,992,1,0,0,0,992,161,1,0,0,0,993,994,
		5,10,0,0,994,995,5,67,0,0,995,996,7,1,0,0,996,999,3,88,44,0,997,998,5,
		20,0,0,998,1000,3,164,82,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,163,1,
		0,0,0,1001,1004,3,166,83,0,1002,1003,7,4,0,0,1003,1005,3,164,82,0,1004,
		1002,1,0,0,0,1004,1005,1,0,0,0,1005,165,1,0,0,0,1006,1009,3,168,84,0,1007,
		1008,7,4,0,0,1008,1010,3,166,83,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,
		1010,1028,1,0,0,0,1011,1012,5,6,0,0,1012,1015,3,168,84,0,1013,1014,7,4,
		0,0,1014,1016,3,166,83,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1017,
		1,0,0,0,1017,1018,5,7,0,0,1018,1028,1,0,0,0,1019,1020,5,6,0,0,1020,1023,
		3,166,83,0,1021,1022,7,4,0,0,1022,1024,3,166,83,0,1023,1021,1,0,0,0,1023,
		1024,1,0,0,0,1024,1025,1,0,0,0,1025,1026,5,7,0,0,1026,1028,1,0,0,0,1027,
		1006,1,0,0,0,1027,1011,1,0,0,0,1027,1019,1,0,0,0,1028,167,1,0,0,0,1029,
		1030,5,35,0,0,1030,1031,7,5,0,0,1031,1098,3,176,88,0,1032,1034,5,35,0,
		0,1033,1035,5,37,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,
		0,0,1036,1037,5,9,0,0,1037,1038,5,6,0,0,1038,1039,3,174,87,0,1039,1040,
		5,7,0,0,1040,1098,1,0,0,0,1041,1042,5,14,0,0,1042,1043,7,5,0,0,1043,1098,
		3,228,114,0,1044,1046,5,14,0,0,1045,1047,5,37,0,0,1046,1045,1,0,0,0,1046,
		1047,1,0,0,0,1047,1048,1,0,0,0,1048,1049,5,9,0,0,1049,1050,5,6,0,0,1050,
		1051,3,226,113,0,1051,1052,5,7,0,0,1052,1098,1,0,0,0,1053,1058,5,14,0,
		0,1054,1059,5,38,0,0,1055,1056,5,39,0,0,1056,1057,5,37,0,0,1057,1059,5,
		40,0,0,1058,1054,1,0,0,0,1058,1055,1,0,0,0,1059,1061,1,0,0,0,1060,1062,
		5,41,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1098,
		3,204,102,0,1064,1066,5,14,0,0,1065,1067,5,37,0,0,1066,1065,1,0,0,0,1066,
		1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,9,0,0,1069,1070,5,6,0,0,1070,
		1071,3,206,103,0,1071,1072,5,7,0,0,1072,1098,1,0,0,0,1073,1075,5,14,0,
		0,1074,1076,5,37,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,
		0,0,1077,1078,5,42,0,0,1078,1098,3,228,114,0,1079,1084,5,14,0,0,1080,1085,
		5,43,0,0,1081,1082,5,39,0,0,1082,1083,5,37,0,0,1083,1085,5,44,0,0,1084,
		1080,1,0,0,0,1084,1081,1,0,0,0,1085,1086,1,0,0,0,1086,1087,5,45,0,0,1087,
		1098,3,228,114,0,1088,1093,5,14,0,0,1089,1094,5,46,0,0,1090,1091,5,39,
		0,0,1091,1092,5,37,0,0,1092,1094,5,47,0,0,1093,1089,1,0,0,0,1093,1090,
		1,0,0,0,1094,1095,1,0,0,0,1095,1096,5,45,0,0,1096,1098,3,228,114,0,1097,
		1029,1,0,0,0,1097,1032,1,0,0,0,1097,1041,1,0,0,0,1097,1044,1,0,0,0,1097,
		1053,1,0,0,0,1097,1064,1,0,0,0,1097,1073,1,0,0,0,1097,1079,1,0,0,0,1097,
		1088,1,0,0,0,1098,169,1,0,0,0,1099,1102,3,172,86,0,1100,1101,5,13,0,0,
		1101,1103,3,170,85,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,171,1,0,
		0,0,1104,1105,5,68,0,0,1105,1106,5,14,0,0,1106,1107,5,15,0,0,1107,1134,
		3,228,114,0,1108,1109,5,69,0,0,1109,1110,5,14,0,0,1110,1111,5,15,0,0,1111,
		1134,3,228,114,0,1112,1113,5,70,0,0,1113,1114,5,15,0,0,1114,1134,7,10,
		0,0,1115,1116,5,74,0,0,1116,1117,5,75,0,0,1117,1134,3,228,114,0,1118,1119,
		5,76,0,0,1119,1120,5,75,0,0,1120,1134,3,228,114,0,1121,1122,5,77,0,0,1122,
		1123,5,78,0,0,1123,1124,5,15,0,0,1124,1134,3,228,114,0,1125,1126,5,77,
		0,0,1126,1127,5,79,0,0,1127,1128,5,15,0,0,1128,1134,3,228,114,0,1129,1130,
		5,77,0,0,1130,1131,5,80,0,0,1131,1132,5,15,0,0,1132,1134,3,228,114,0,1133,
		1104,1,0,0,0,1133,1108,1,0,0,0,1133,1112,1,0,0,0,1133,1115,1,0,0,0,1133,
		1118,1,0,0,0,1133,1121,1,0,0,0,1133,1125,1,0,0,0,1133,1129,1,0,0,0,1134,
		173,1,0,0,0,1135,1138,3,176,88,0,1136,1137,5,13,0,0,1137,1139,3,174,87,
		0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,175,1,0,0,0,1140,1143,7,11,
		0,0,1141,1142,7,12,0,0,1142,1144,3,176,88,0,1143,1141,1,0,0,0,1143,1144,
		1,0,0,0,1144,177,1,0,0,0,1145,1147,5,85,0,0,1146,1145,1,0,0,0,1146,1147,
		1,0,0,0,1147,1148,1,0,0,0,1148,1149,7,13,0,0,1149,179,1,0,0,0,1150,1151,
		5,89,0,0,1151,1152,5,111,0,0,1152,181,1,0,0,0,1153,1157,3,184,92,0,1154,
		1157,3,186,93,0,1155,1157,3,188,94,0,1156,1153,1,0,0,0,1156,1154,1,0,0,
		0,1156,1155,1,0,0,0,1157,183,1,0,0,0,1158,1159,5,90,0,0,1159,1160,3,84,
		42,0,1160,1161,5,33,0,0,1161,1162,3,84,42,0,1162,185,1,0,0,0,1163,1164,
		5,90,0,0,1164,1165,3,90,45,0,1165,1166,5,33,0,0,1166,1167,3,90,45,0,1167,
		187,1,0,0,0,1168,1169,5,90,0,0,1169,1170,5,91,0,0,1170,1171,5,67,0,0,1171,
		1172,5,9,0,0,1172,1173,3,84,42,0,1173,1174,5,33,0,0,1174,1175,3,84,42,
		0,1175,189,1,0,0,0,1176,1177,5,21,0,0,1177,1180,5,92,0,0,1178,1179,5,45,
		0,0,1179,1181,5,72,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1182,1,
		0,0,0,1182,1183,7,1,0,0,1183,1184,3,150,75,0,1184,1185,5,22,0,0,1185,1188,
		3,152,76,0,1186,1187,5,20,0,0,1187,1189,3,198,99,0,1188,1186,1,0,0,0,1188,
		1189,1,0,0,0,1189,191,1,0,0,0,1190,1191,5,93,0,0,1191,1192,5,92,0,0,1192,
		1193,7,1,0,0,1193,1196,3,88,44,0,1194,1195,5,20,0,0,1195,1197,3,198,99,
		0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,193,1,0,0,0,1198,1199,5,94,
		0,0,1199,1200,5,92,0,0,1200,1201,7,1,0,0,1201,1204,3,88,44,0,1202,1203,
		5,20,0,0,1203,1205,3,198,99,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,
		195,1,0,0,0,1206,1207,5,10,0,0,1207,1208,5,92,0,0,1208,1209,7,1,0,0,1209,
		1212,3,88,44,0,1210,1211,5,20,0,0,1211,1213,3,198,99,0,1212,1210,1,0,0,
		0,1212,1213,1,0,0,0,1213,197,1,0,0,0,1214,1217,3,200,100,0,1215,1216,7,
		4,0,0,1216,1218,3,198,99,0,1217,1215,1,0,0,0,1217,1218,1,0,0,0,1218,199,
		1,0,0,0,1219,1222,3,202,101,0,1220,1221,7,4,0,0,1221,1223,3,200,100,0,
		1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1241,1,0,0,0,1224,1225,5,6,0,
		0,1225,1228,3,202,101,0,1226,1227,7,4,0,0,1227,1229,3,200,100,0,1228,1226,
		1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,5,7,0,0,1231,1241,
		1,0,0,0,1232,1233,5,6,0,0,1233,1236,3,200,100,0,1234,1235,7,4,0,0,1235,
		1237,3,200,100,0,1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,
		1238,1239,5,7,0,0,1239,1241,1,0,0,0,1240,1219,1,0,0,0,1240,1224,1,0,0,
		0,1240,1232,1,0,0,0,1241,201,1,0,0,0,1242,1243,5,35,0,0,1243,1244,7,5,
		0,0,1244,1454,3,176,88,0,1245,1247,5,35,0,0,1246,1248,5,37,0,0,1247,1246,
		1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,5,9,0,0,1250,1251,
		5,6,0,0,1251,1252,3,174,87,0,1252,1253,5,7,0,0,1253,1454,1,0,0,0,1254,
		1255,7,14,0,0,1255,1256,7,5,0,0,1256,1454,3,228,114,0,1257,1259,7,14,0,
		0,1258,1260,5,37,0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,
		0,0,1261,1262,5,9,0,0,1262,1263,5,6,0,0,1263,1264,3,226,113,0,1264,1265,
		5,7,0,0,1265,1454,1,0,0,0,1266,1271,7,14,0,0,1267,1272,5,38,0,0,1268,1269,
		5,39,0,0,1269,1270,5,37,0,0,1270,1272,5,40,0,0,1271,1267,1,0,0,0,1271,
		1268,1,0,0,0,1272,1274,1,0,0,0,1273,1275,5,41,0,0,1274,1273,1,0,0,0,1274,
		1275,1,0,0,0,1275,1276,1,0,0,0,1276,1454,3,204,102,0,1277,1279,7,14,0,
		0,1278,1280,5,37,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,
		0,0,1281,1282,5,9,0,0,1282,1283,5,6,0,0,1283,1284,3,226,113,0,1284,1285,
		5,7,0,0,1285,1454,1,0,0,0,1286,1288,7,14,0,0,1287,1289,5,37,0,0,1288,1287,
		1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,42,0,0,1291,1454,
		3,228,114,0,1292,1297,7,14,0,0,1293,1298,5,43,0,0,1294,1295,5,39,0,0,1295,
		1296,5,37,0,0,1296,1298,5,44,0,0,1297,1293,1,0,0,0,1297,1294,1,0,0,0,1298,
		1299,1,0,0,0,1299,1300,5,45,0,0,1300,1454,3,228,114,0,1301,1306,7,14,0,
		0,1302,1307,5,46,0,0,1303,1304,5,39,0,0,1304,1305,5,37,0,0,1305,1307,5,
		47,0,0,1306,1302,1,0,0,0,1306,1303,1,0,0,0,1307,1308,1,0,0,0,1308,1309,
		5,45,0,0,1309,1454,3,228,114,0,1310,1312,5,95,0,0,1311,1310,1,0,0,0,1311,
		1312,1,0,0,0,1312,1313,1,0,0,0,1313,1319,5,75,0,0,1314,1316,5,91,0,0,1315,
		1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1319,5,96,0,0,1318,
		1311,1,0,0,0,1318,1315,1,0,0,0,1319,1320,1,0,0,0,1320,1321,7,5,0,0,1321,
		1454,3,228,114,0,1322,1324,5,95,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,
		0,1324,1325,1,0,0,0,1325,1331,5,75,0,0,1326,1328,5,91,0,0,1327,1326,1,
		0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1331,5,96,0,0,1330,1323,
		1,0,0,0,1330,1327,1,0,0,0,1331,1333,1,0,0,0,1332,1334,5,37,0,0,1333,1332,
		1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,1336,5,9,0,0,1336,1337,
		5,6,0,0,1337,1338,3,226,113,0,1338,1339,5,7,0,0,1339,1454,1,0,0,0,1340,
		1342,5,95,0,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,
		1348,5,75,0,0,1344,1349,5,38,0,0,1345,1346,5,39,0,0,1346,1347,5,37,0,0,
		1347,1349,5,40,0,0,1348,1344,1,0,0,0,1348,1345,1,0,0,0,1349,1351,1,0,0,
		0,1350,1352,5,41,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,
		0,0,1353,1454,3,204,102,0,1354,1356,5,95,0,0,1355,1354,1,0,0,0,1355,1356,
		1,0,0,0,1356,1357,1,0,0,0,1357,1362,5,75,0,0,1358,1363,5,43,0,0,1359,1360,
		5,39,0,0,1360,1361,5,37,0,0,1361,1363,5,44,0,0,1362,1358,1,0,0,0,1362,
		1359,1,0,0,0,1363,1364,1,0,0,0,1364,1365,5,45,0,0,1365,1454,3,228,114,
		0,1366,1368,5,95,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,
		0,0,1369,1374,5,75,0,0,1370,1375,5,46,0,0,1371,1372,5,39,0,0,1372,1373,
		5,37,0,0,1373,1375,5,47,0,0,1374,1370,1,0,0,0,1374,1371,1,0,0,0,1375,1376,
		1,0,0,0,1376,1377,5,45,0,0,1377,1454,3,228,114,0,1378,1380,5,91,0,0,1379,
		1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1386,5,96,0,0,1382,
		1387,5,40,0,0,1383,1384,5,97,0,0,1384,1385,5,37,0,0,1385,1387,5,40,0,0,
		1386,1382,1,0,0,0,1386,1383,1,0,0,0,1387,1389,1,0,0,0,1388,1390,5,41,0,
		0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1454,3,204,
		102,0,1392,1394,5,91,0,0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,
		1,0,0,0,1395,1400,5,96,0,0,1396,1401,5,44,0,0,1397,1398,5,97,0,0,1398,
		1399,5,37,0,0,1399,1401,5,44,0,0,1400,1396,1,0,0,0,1400,1397,1,0,0,0,1401,
		1402,1,0,0,0,1402,1403,5,45,0,0,1403,1454,3,228,114,0,1404,1406,5,91,0,
		0,1405,1404,1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1412,5,96,
		0,0,1408,1413,5,47,0,0,1409,1410,5,97,0,0,1410,1411,5,37,0,0,1411,1413,
		5,47,0,0,1412,1408,1,0,0,0,1412,1409,1,0,0,0,1413,1414,1,0,0,0,1414,1415,
		5,45,0,0,1415,1454,3,228,114,0,1416,1418,5,95,0,0,1417,1416,1,0,0,0,1417,
		1418,1,0,0,0,1418,1419,1,0,0,0,1419,1425,5,75,0,0,1420,1422,5,91,0,0,1421,
		1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,1425,5,96,0,0,1424,
		1417,1,0,0,0,1424,1421,1,0,0,0,1425,1427,1,0,0,0,1426,1428,5,37,0,0,1427,
		1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1430,5,9,0,0,1430,
		1431,5,6,0,0,1431,1432,3,206,103,0,1432,1433,5,7,0,0,1433,1454,1,0,0,0,
		1434,1436,5,95,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,
		0,1437,1443,5,75,0,0,1438,1440,5,91,0,0,1439,1438,1,0,0,0,1439,1440,1,
		0,0,0,1440,1441,1,0,0,0,1441,1443,5,96,0,0,1442,1435,1,0,0,0,1442,1439,
		1,0,0,0,1443,1445,1,0,0,0,1444,1446,5,37,0,0,1445,1444,1,0,0,0,1445,1446,
		1,0,0,0,1446,1447,1,0,0,0,1447,1448,5,42,0,0,1448,1454,3,228,114,0,1449,
		1450,5,98,0,0,1450,1454,5,96,0,0,1451,1452,5,95,0,0,1452,1454,5,96,0,0,
		1453,1242,1,0,0,0,1453,1245,1,0,0,0,1453,1254,1,0,0,0,1453,1257,1,0,0,
		0,1453,1266,1,0,0,0,1453,1277,1,0,0,0,1453,1286,1,0,0,0,1453,1292,1,0,
		0,0,1453,1301,1,0,0,0,1453,1318,1,0,0,0,1453,1330,1,0,0,0,1453,1341,1,
		0,0,0,1453,1355,1,0,0,0,1453,1367,1,0,0,0,1453,1379,1,0,0,0,1453,1393,
		1,0,0,0,1453,1405,1,0,0,0,1453,1424,1,0,0,0,1453,1442,1,0,0,0,1453,1449,
		1,0,0,0,1453,1451,1,0,0,0,1454,203,1,0,0,0,1455,1456,7,15,0,0,1456,205,
		1,0,0,0,1457,1460,3,204,102,0,1458,1459,5,13,0,0,1459,1461,3,206,103,0,
		1460,1458,1,0,0,0,1460,1461,1,0,0,0,1461,207,1,0,0,0,1462,1463,5,21,0,
		0,1463,1464,5,99,0,0,1464,1465,7,1,0,0,1465,1466,3,88,44,0,1466,1467,5,
		22,0,0,1467,1470,3,88,44,0,1468,1469,5,20,0,0,1469,1471,3,220,110,0,1470,
		1468,1,0,0,0,1470,1471,1,0,0,0,1471,1473,1,0,0,0,1472,1474,3,216,108,0,
		1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,209,1,0,0,0,1475,1476,5,11,0,
		0,1476,1477,5,99,0,0,1477,1478,7,1,0,0,1478,1479,3,88,44,0,1479,1480,5,
		12,0,0,1480,1483,3,14,7,0,1481,1482,5,20,0,0,1482,1484,3,220,110,0,1483,
		1481,1,0,0,0,1483,1484,1,0,0,0,1484,211,1,0,0,0,1485,1486,5,10,0,0,1486,
		1487,5,99,0,0,1487,1488,7,1,0,0,1488,1491,3,88,44,0,1489,1490,5,20,0,0,
		1490,1492,3,220,110,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,213,1,0,
		0,0,1493,1494,5,21,0,0,1494,1495,5,99,0,0,1495,1496,7,1,0,0,1496,1497,
		3,88,44,0,1497,1498,5,22,0,0,1498,1501,3,88,44,0,1499,1500,5,20,0,0,1500,
		1502,3,220,110,0,1501,1499,1,0,0,0,1501,1502,1,0,0,0,1502,215,1,0,0,0,
		1503,1506,3,218,109,0,1504,1505,5,13,0,0,1505,1507,3,216,108,0,1506,1504,
		1,0,0,0,1506,1507,1,0,0,0,1507,217,1,0,0,0,1508,1509,5,24,0,0,1509,1513,
		7,2,0,0,1510,1511,5,100,0,0,1511,1513,5,19,0,0,1512,1508,1,0,0,0,1512,
		1510,1,0,0,0,1513,219,1,0,0,0,1514,1517,3,222,111,0,1515,1516,7,4,0,0,
		1516,1518,3,220,110,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,221,1,0,
		0,0,1519,1522,3,224,112,0,1520,1521,7,4,0,0,1521,1523,3,222,111,0,1522,
		1520,1,0,0,0,1522,1523,1,0,0,0,1523,1541,1,0,0,0,1524,1525,5,6,0,0,1525,
		1528,3,224,112,0,1526,1527,7,4,0,0,1527,1529,3,222,111,0,1528,1526,1,0,
		0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1531,5,7,0,0,1531,1541,1,
		0,0,0,1532,1533,5,6,0,0,1533,1536,3,222,111,0,1534,1535,7,4,0,0,1535,1537,
		3,222,111,0,1536,1534,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,
		1539,5,7,0,0,1539,1541,1,0,0,0,1540,1519,1,0,0,0,1540,1524,1,0,0,0,1540,
		1532,1,0,0,0,1541,223,1,0,0,0,1542,1543,5,35,0,0,1543,1544,7,5,0,0,1544,
		1611,3,176,88,0,1545,1547,5,35,0,0,1546,1548,5,37,0,0,1547,1546,1,0,0,
		0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,5,9,0,0,1550,1551,5,6,
		0,0,1551,1552,3,174,87,0,1552,1553,5,7,0,0,1553,1611,1,0,0,0,1554,1555,
		7,16,0,0,1555,1556,7,5,0,0,1556,1611,3,228,114,0,1557,1559,7,16,0,0,1558,
		1560,5,37,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,
		1562,5,9,0,0,1562,1563,5,6,0,0,1563,1564,3,226,113,0,1564,1565,5,7,0,0,
		1565,1611,1,0,0,0,1566,1571,7,16,0,0,1567,1572,5,38,0,0,1568,1569,5,39,
		0,0,1569,1570,5,37,0,0,1570,1572,5,40,0,0,1571,1567,1,0,0,0,1571,1568,
		1,0,0,0,1572,1574,1,0,0,0,1573,1575,5,41,0,0,1574,1573,1,0,0,0,1574,1575,
		1,0,0,0,1575,1576,1,0,0,0,1576,1611,3,204,102,0,1577,1579,7,16,0,0,1578,
		1580,5,37,0,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,
		1582,5,9,0,0,1582,1583,5,6,0,0,1583,1584,3,206,103,0,1584,1585,5,7,0,0,
		1585,1611,1,0,0,0,1586,1588,7,16,0,0,1587,1589,5,37,0,0,1588,1587,1,0,
		0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1591,5,42,0,0,1591,1611,3,
		228,114,0,1592,1597,7,16,0,0,1593,1598,5,43,0,0,1594,1595,5,39,0,0,1595,
		1596,5,37,0,0,1596,1598,5,44,0,0,1597,1593,1,0,0,0,1597,1594,1,0,0,0,1598,
		1599,1,0,0,0,1599,1600,5,45,0,0,1600,1611,3,228,114,0,1601,1606,7,16,0,
		0,1602,1607,5,46,0,0,1603,1604,5,39,0,0,1604,1605,5,37,0,0,1605,1607,5,
		47,0,0,1606,1602,1,0,0,0,1606,1603,1,0,0,0,1607,1608,1,0,0,0,1608,1609,
		5,45,0,0,1609,1611,3,228,114,0,1610,1542,1,0,0,0,1610,1545,1,0,0,0,1610,
		1554,1,0,0,0,1610,1557,1,0,0,0,1610,1566,1,0,0,0,1610,1577,1,0,0,0,1610,
		1586,1,0,0,0,1610,1592,1,0,0,0,1610,1601,1,0,0,0,1611,225,1,0,0,0,1612,
		1615,3,228,114,0,1613,1614,5,13,0,0,1614,1616,3,226,113,0,1615,1613,1,
		0,0,0,1615,1616,1,0,0,0,1616,227,1,0,0,0,1617,1620,7,9,0,0,1618,1619,5,
		81,0,0,1619,1621,3,228,114,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,
		229,1,0,0,0,1622,1625,3,232,116,0,1623,1624,7,4,0,0,1624,1626,3,230,115,
		0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,231,1,0,0,0,1627,1630,3,234,
		117,0,1628,1629,7,4,0,0,1629,1631,3,232,116,0,1630,1628,1,0,0,0,1630,1631,
		1,0,0,0,1631,1649,1,0,0,0,1632,1633,5,6,0,0,1633,1636,3,234,117,0,1634,
		1635,7,4,0,0,1635,1637,3,232,116,0,1636,1634,1,0,0,0,1636,1637,1,0,0,0,
		1637,1638,1,0,0,0,1638,1639,5,7,0,0,1639,1649,1,0,0,0,1640,1641,5,6,0,
		0,1641,1644,3,232,116,0,1642,1643,7,4,0,0,1643,1645,3,232,116,0,1644,1642,
		1,0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,1646,1647,5,7,0,0,1647,1649,
		1,0,0,0,1648,1627,1,0,0,0,1648,1632,1,0,0,0,1648,1640,1,0,0,0,1649,233,
		1,0,0,0,1650,1651,5,35,0,0,1651,1652,7,5,0,0,1652,1719,3,176,88,0,1653,
		1655,5,35,0,0,1654,1656,5,37,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,
		1657,1,0,0,0,1657,1658,5,9,0,0,1658,1659,5,6,0,0,1659,1660,3,174,87,0,
		1660,1661,5,7,0,0,1661,1719,1,0,0,0,1662,1663,5,14,0,0,1663,1664,7,5,0,
		0,1664,1719,3,228,114,0,1665,1667,5,14,0,0,1666,1668,5,37,0,0,1667,1666,
		1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1670,5,9,0,0,1670,1671,
		5,6,0,0,1671,1672,3,226,113,0,1672,1673,5,7,0,0,1673,1719,1,0,0,0,1674,
		1679,5,14,0,0,1675,1680,5,38,0,0,1676,1677,5,39,0,0,1677,1678,5,37,0,0,
		1678,1680,5,40,0,0,1679,1675,1,0,0,0,1679,1676,1,0,0,0,1680,1682,1,0,0,
		0,1681,1683,5,41,0,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,
		0,0,1684,1719,3,204,102,0,1685,1687,5,14,0,0,1686,1688,5,37,0,0,1687,1686,
		1,0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1690,5,9,0,0,1690,1691,
		5,6,0,0,1691,1692,3,206,103,0,1692,1693,5,7,0,0,1693,1719,1,0,0,0,1694,
		1696,5,14,0,0,1695,1697,5,37,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,
		1698,1,0,0,0,1698,1699,5,42,0,0,1699,1719,3,228,114,0,1700,1705,5,14,0,
		0,1701,1706,5,43,0,0,1702,1703,5,39,0,0,1703,1704,5,37,0,0,1704,1706,5,
		44,0,0,1705,1701,1,0,0,0,1705,1702,1,0,0,0,1706,1707,1,0,0,0,1707,1708,
		5,45,0,0,1708,1719,3,228,114,0,1709,1714,5,14,0,0,1710,1715,5,46,0,0,1711,
		1712,5,39,0,0,1712,1713,5,37,0,0,1713,1715,5,47,0,0,1714,1710,1,0,0,0,
		1714,1711,1,0,0,0,1715,1716,1,0,0,0,1716,1717,5,45,0,0,1717,1719,3,228,
		114,0,1718,1650,1,0,0,0,1718,1653,1,0,0,0,1718,1662,1,0,0,0,1718,1665,
		1,0,0,0,1718,1674,1,0,0,0,1718,1685,1,0,0,0,1718,1694,1,0,0,0,1718,1700,
		1,0,0,0,1718,1709,1,0,0,0,1719,235,1,0,0,0,1720,1723,3,126,63,0,1721,1723,
		3,88,44,0,1722,1720,1,0,0,0,1722,1721,1,0,0,0,1723,237,1,0,0,0,1724,1727,
		3,126,63,0,1725,1727,3,88,44,0,1726,1724,1,0,0,0,1726,1725,1,0,0,0,1727,
		239,1,0,0,0,1728,1731,3,126,63,0,1729,1731,3,88,44,0,1730,1728,1,0,0,0,
		1730,1729,1,0,0,0,1731,241,1,0,0,0,1732,1735,3,126,63,0,1733,1735,3,88,
		44,0,1734,1732,1,0,0,0,1734,1733,1,0,0,0,1735,243,1,0,0,0,1736,1737,5,
		101,0,0,1737,1738,7,9,0,0,1738,245,1,0,0,0,1739,1740,5,102,0,0,1740,1741,
		5,6,0,0,1741,1742,3,298,149,0,1742,1743,5,9,0,0,1743,1744,3,248,124,0,
		1744,1745,5,7,0,0,1745,1746,3,6,3,0,1746,1756,1,0,0,0,1747,1748,5,102,
		0,0,1748,1749,5,6,0,0,1749,1750,3,296,148,0,1750,1751,5,9,0,0,1751,1752,
		3,250,125,0,1752,1753,5,7,0,0,1753,1754,3,6,3,0,1754,1756,1,0,0,0,1755,
		1739,1,0,0,0,1755,1747,1,0,0,0,1756,247,1,0,0,0,1757,1766,3,252,126,0,
		1758,1766,3,256,128,0,1759,1766,3,260,130,0,1760,1766,3,264,132,0,1761,
		1766,3,268,134,0,1762,1766,3,272,136,0,1763,1766,3,276,138,0,1764,1766,
		3,280,140,0,1765,1757,1,0,0,0,1765,1758,1,0,0,0,1765,1759,1,0,0,0,1765,
		1760,1,0,0,0,1765,1761,1,0,0,0,1765,1762,1,0,0,0,1765,1763,1,0,0,0,1765,
		1764,1,0,0,0,1766,249,1,0,0,0,1767,1776,3,254,127,0,1768,1776,3,258,129,
		0,1769,1776,3,262,131,0,1770,1776,3,266,133,0,1771,1776,3,270,135,0,1772,
		1776,3,274,137,0,1773,1776,3,278,139,0,1774,1776,3,282,141,0,1775,1767,
		1,0,0,0,1775,1768,1,0,0,0,1775,1769,1,0,0,0,1775,1770,1,0,0,0,1775,1771,
		1,0,0,0,1775,1772,1,0,0,0,1775,1773,1,0,0,0,1775,1774,1,0,0,0,1776,251,
		1,0,0,0,1777,1784,3,126,63,0,1778,1784,3,286,143,0,1779,1781,5,91,0,0,
		1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,1784,5,58,0,
		0,1783,1777,1,0,0,0,1783,1778,1,0,0,0,1783,1780,1,0,0,0,1784,1787,1,0,
		0,0,1785,1786,5,20,0,0,1786,1788,3,230,115,0,1787,1785,1,0,0,0,1787,1788,
		1,0,0,0,1788,253,1,0,0,0,1789,1795,3,286,143,0,1790,1792,5,91,0,0,1791,
		1790,1,0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,1795,5,58,0,0,1794,
		1789,1,0,0,0,1794,1791,1,0,0,0,1795,1798,1,0,0,0,1796,1797,5,20,0,0,1797,
		1799,3,230,115,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,255,1,0,0,0,
		1800,1804,3,126,63,0,1801,1804,3,288,144,0,1802,1804,3,88,44,0,1803,1800,
		1,0,0,0,1803,1801,1,0,0,0,1803,1802,1,0,0,0,1804,1807,1,0,0,0,1805,1806,
		5,20,0,0,1806,1808,3,164,82,0,1807,1805,1,0,0,0,1807,1808,1,0,0,0,1808,
		257,1,0,0,0,1809,1812,3,288,144,0,1810,1812,3,88,44,0,1811,1809,1,0,0,
		0,1811,1810,1,0,0,0,1812,1815,1,0,0,0,1813,1814,5,20,0,0,1814,1816,3,164,
		82,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,259,1,0,0,0,1817,1821,3,
		126,63,0,1818,1821,3,290,145,0,1819,1821,3,88,44,0,1820,1817,1,0,0,0,1820,
		1818,1,0,0,0,1820,1819,1,0,0,0,1821,1824,1,0,0,0,1822,1823,5,20,0,0,1823,
		1825,3,220,110,0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,1825,261,1,0,0,0,
		1826,1829,3,290,145,0,1827,1829,3,88,44,0,1828,1826,1,0,0,0,1828,1827,
		1,0,0,0,1829,1832,1,0,0,0,1830,1831,5,20,0,0,1831,1833,3,220,110,0,1832,
		1830,1,0,0,0,1832,1833,1,0,0,0,1833,263,1,0,0,0,1834,1838,3,126,63,0,1835,
		1838,3,292,146,0,1836,1838,3,284,142,0,1837,1834,1,0,0,0,1837,1835,1,0,
		0,0,1837,1836,1,0,0,0,1838,1841,1,0,0,0,1839,1840,5,20,0,0,1840,1842,3,
		52,26,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,265,1,0,0,0,1843,1846,
		3,292,146,0,1844,1846,3,284,142,0,1845,1843,1,0,0,0,1845,1844,1,0,0,0,
		1846,1849,1,0,0,0,1847,1848,5,20,0,0,1848,1850,3,52,26,0,1849,1847,1,0,
		0,0,1849,1850,1,0,0,0,1850,267,1,0,0,0,1851,1855,3,126,63,0,1852,1855,
		3,294,147,0,1853,1855,3,84,42,0,1854,1851,1,0,0,0,1854,1852,1,0,0,0,1854,
		1853,1,0,0,0,1855,1858,1,0,0,0,1856,1857,5,20,0,0,1857,1859,3,198,99,0,
		1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,269,1,0,0,0,1860,1863,3,294,147,
		0,1861,1863,3,84,42,0,1862,1860,1,0,0,0,1862,1861,1,0,0,0,1863,1866,1,
		0,0,0,1864,1865,5,20,0,0,1865,1867,3,198,99,0,1866,1864,1,0,0,0,1866,1867,
		1,0,0,0,1867,271,1,0,0,0,1868,1876,3,126,63,0,1869,1870,5,56,0,0,1870,
		1876,3,126,63,0,1871,1872,5,103,0,0,1872,1873,3,226,113,0,1873,1874,5,
		104,0,0,1874,1876,1,0,0,0,1875,1868,1,0,0,0,1875,1869,1,0,0,0,1875,1871,
		1,0,0,0,1876,273,1,0,0,0,1877,1878,5,56,0,0,1878,1881,3,126,63,0,1879,
		1881,3,226,113,0,1880,1877,1,0,0,0,1880,1879,1,0,0,0,1881,275,1,0,0,0,
		1882,1887,3,126,63,0,1883,1884,5,41,0,0,1884,1887,3,126,63,0,1885,1887,
		3,206,103,0,1886,1882,1,0,0,0,1886,1883,1,0,0,0,1886,1885,1,0,0,0,1887,
		277,1,0,0,0,1888,1889,5,41,0,0,1889,1892,3,126,63,0,1890,1892,3,206,103,
		0,1891,1888,1,0,0,0,1891,1890,1,0,0,0,1892,279,1,0,0,0,1893,1898,3,126,
		63,0,1894,1895,5,105,0,0,1895,1898,3,126,63,0,1896,1898,3,174,87,0,1897,
		1893,1,0,0,0,1897,1894,1,0,0,0,1897,1896,1,0,0,0,1898,281,1,0,0,0,1899,
		1900,5,105,0,0,1900,1903,3,126,63,0,1901,1903,3,174,87,0,1902,1899,1,0,
		0,0,1902,1901,1,0,0,0,1903,283,1,0,0,0,1904,1907,3,96,48,0,1905,1907,3,
		98,49,0,1906,1904,1,0,0,0,1906,1905,1,0,0,0,1907,285,1,0,0,0,1908,1909,
		5,54,0,0,1909,1910,3,126,63,0,1910,287,1,0,0,0,1911,1912,5,55,0,0,1912,
		1913,3,126,63,0,1913,289,1,0,0,0,1914,1915,5,5,0,0,1915,1916,3,126,63,
		0,1916,291,1,0,0,0,1917,1918,5,106,0,0,1918,1919,3,126,63,0,1919,293,1,
		0,0,0,1920,1921,5,57,0,0,1921,1922,3,126,63,0,1922,295,1,0,0,0,1923,1924,
		5,53,0,0,1924,1925,5,110,0,0,1925,297,1,0,0,0,1926,1935,3,300,150,0,1927,
		1935,3,302,151,0,1928,1935,3,304,152,0,1929,1935,3,306,153,0,1930,1935,
		3,308,154,0,1931,1935,3,310,155,0,1932,1935,3,312,156,0,1933,1935,3,314,
		157,0,1934,1926,1,0,0,0,1934,1927,1,0,0,0,1934,1928,1,0,0,0,1934,1929,
		1,0,0,0,1934,1930,1,0,0,0,1934,1931,1,0,0,0,1934,1932,1,0,0,0,1934,1933,
		1,0,0,0,1935,299,1,0,0,0,1936,1937,5,54,0,0,1937,1938,5,110,0,0,1938,301,
		1,0,0,0,1939,1940,5,55,0,0,1940,1941,5,110,0,0,1941,303,1,0,0,0,1942,1943,
		5,5,0,0,1943,1944,5,110,0,0,1944,305,1,0,0,0,1945,1946,5,5,0,0,1946,1947,
		5,17,0,0,1947,1948,5,110,0,0,1948,307,1,0,0,0,1949,1950,5,57,0,0,1950,
		1951,5,110,0,0,1951,309,1,0,0,0,1952,1953,5,56,0,0,1953,1954,5,110,0,0,
		1954,311,1,0,0,0,1955,1956,5,41,0,0,1956,1957,5,110,0,0,1957,313,1,0,0,
		0,1958,1959,5,105,0,0,1959,1960,5,110,0,0,1960,315,1,0,0,0,1961,1964,3,
		126,63,0,1962,1964,3,96,48,0,1963,1961,1,0,0,0,1963,1962,1,0,0,0,1964,
		317,1,0,0,0,222,323,414,418,429,434,440,446,454,462,469,474,501,512,520,
		524,535,538,549,554,562,570,577,580,591,596,601,607,615,619,626,638,644,
		653,656,661,670,679,688,692,699,743,745,751,757,763,769,775,782,787,790,
		796,803,807,813,816,823,828,835,838,844,852,870,881,909,913,923,929,933,
		937,941,945,949,953,957,963,981,991,999,1004,1009,1015,1023,1027,1034,
		1046,1058,1061,1066,1075,1084,1093,1097,1102,1133,1138,1143,1146,1156,
		1180,1188,1196,1204,1212,1217,1222,1228,1236,1240,1247,1259,1271,1274,
		1279,1288,1297,1306,1311,1315,1318,1323,1327,1330,1333,1341,1348,1351,
		1355,1362,1367,1374,1379,1386,1389,1393,1400,1405,1412,1417,1421,1424,
		1427,1435,1439,1442,1445,1453,1460,1470,1473,1483,1491,1501,1506,1512,
		1517,1522,1528,1536,1540,1547,1559,1571,1574,1579,1588,1597,1606,1610,
		1615,1620,1625,1630,1636,1644,1648,1655,1667,1679,1682,1687,1696,1705,
		1714,1718,1722,1726,1730,1734,1755,1765,1775,1780,1783,1787,1791,1794,
		1798,1803,1807,1811,1815,1820,1824,1828,1832,1837,1841,1845,1849,1854,
		1858,1862,1866,1875,1880,1886,1891,1897,1902,1906,1934,1963
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
