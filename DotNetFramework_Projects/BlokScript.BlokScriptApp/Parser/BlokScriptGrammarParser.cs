//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, STATEMENTEND=105, WS=106, STRINGLITERAL=107, 
		VARID=108, INTLITERAL=109, REGEXLITERAL=110, LINE_COMMENT=111, BLOCK_COMMENT=112;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_scriptBlockDef = 3, 
		RULE_createDatasourceStatement = 4, RULE_deleteDatasourceStatement = 5, 
		RULE_updateDatasourceStatement = 6, RULE_datasourceUpdateList = 7, RULE_datasourceUpdate = 8, 
		RULE_createDatasourceEntryStatement = 9, RULE_deleteDatasourceEntryStatement = 10, 
		RULE_updateDatasourceEntryStatement = 11, RULE_datasourceEntryFullSpec = 12, 
		RULE_datasourceEntryShortSpec = 13, RULE_datasourceEntryIdentifier = 14, 
		RULE_updateDatasourceEntriesStatement = 15, RULE_deleteDatasourceEntriesStatement = 16, 
		RULE_copyDatasourceEntriesStatement = 17, RULE_syncDatasourceEntriesStatement = 18, 
		RULE_datasourceEntryCopyOptionList = 19, RULE_datasourceEntryCopyOption = 20, 
		RULE_datasourceEntryUpdateList = 21, RULE_datasourceEntryUpdate = 22, 
		RULE_datasourceEntriesSourceLocation = 23, RULE_urlSpec = 24, RULE_datasourceEntriesTargetLocation = 25, 
		RULE_datasourceEntryConstraintExprList = 26, RULE_datasourceEntryConstraintExpr = 27, 
		RULE_datasourceEntryConstraint = 28, RULE_loginStatement = 29, RULE_loginOnlyStatement = 30, 
		RULE_loginWithGlobalUserNameStatement = 31, RULE_loginWithGlobalPasswordStatement = 32, 
		RULE_loginWithGlobalTokenStatement = 33, RULE_loginWithGlobalUserNameAndPasswordStatement = 34, 
		RULE_varStatement = 35, RULE_spaceVarStatement = 36, RULE_blockVarStatement = 37, 
		RULE_stringVarStatement = 38, RULE_regexVarStatement = 39, RULE_storyVarStatement = 40, 
		RULE_datasourceEntryVarStatement = 41, RULE_spaceSpec = 42, RULE_shortSpaceSpec = 43, 
		RULE_longOrShortSpaceSpec = 44, RULE_blockSpec = 45, RULE_storySpec = 46, 
		RULE_datasourceEntrySpec = 47, RULE_datasourceSpec = 48, RULE_datasourceShortSpec = 49, 
		RULE_assignmentStatement = 50, RULE_spaceAssignmentStatement = 51, RULE_blockAssignmentStatement = 52, 
		RULE_stringAssignmentStatement = 53, RULE_copySpacesStatement = 54, RULE_printStatement = 55, 
		RULE_printSpacesStatement = 56, RULE_printVarStatement = 57, RULE_printSpaceStatement = 58, 
		RULE_printStringLiteralStatement = 59, RULE_printSymbolTableStatement = 60, 
		RULE_printLocalCacheStatement = 61, RULE_realDataLocation = 62, RULE_fileSpec = 63, 
		RULE_completeFileSpec = 64, RULE_spaceInputLocation = 65, RULE_spaceOutputLocation = 66, 
		RULE_spacesInputLocation = 67, RULE_spacesOutputLocation = 68, RULE_shortFileSpec = 69, 
		RULE_blockInputLocation = 70, RULE_blockOutputLocation = 71, RULE_blocksInputLocation = 72, 
		RULE_blocksOutputLocation = 73, RULE_storyInputLocation = 74, RULE_storyOutputLocation = 75, 
		RULE_storiesInputLocation = 76, RULE_storiesOutputLocation = 77, RULE_varGetFrom = 78, 
		RULE_createBlockStatement = 79, RULE_updateBlocksStatement = 80, RULE_copyBlocksStatement = 81, 
		RULE_deleteBlocksStatement = 82, RULE_blockConstraintExprList = 83, RULE_blockConstraintExpr = 84, 
		RULE_blockConstraint = 85, RULE_blockUpdateList = 86, RULE_blockUpdate = 87, 
		RULE_intExprList = 88, RULE_intExpr = 89, RULE_verbosityStatement = 90, 
		RULE_waitStatement = 91, RULE_compareStatement = 92, RULE_compareSpacesStatement = 93, 
		RULE_compareBlocksStatement = 94, RULE_compareAllBlocksStatement = 95, 
		RULE_copyStoriesStatement = 96, RULE_publishStoriesStatement = 97, RULE_unpublishStoriesStatement = 98, 
		RULE_deleteStoriesStatement = 99, RULE_storyConstraintExprList = 100, 
		RULE_storyConstraintExpr = 101, RULE_storyConstraint = 102, RULE_regexExpr = 103, 
		RULE_regexExprList = 104, RULE_copyDatasourcesStatement = 105, RULE_updateDatasourcesStatement = 106, 
		RULE_deleteDatasourcesStatement = 107, RULE_syncDatasourcesStatement = 108, 
		RULE_datasourceCopyOptionList = 109, RULE_datasourceCopyOption = 110, 
		RULE_datasourceConstraintExprList = 111, RULE_datasourceConstraintExpr = 112, 
		RULE_datasourceConstraint = 113, RULE_stringExprList = 114, RULE_stringExpr = 115, 
		RULE_spaceConstraintExprList = 116, RULE_spaceConstraintExpr = 117, RULE_spaceConstraint = 118, 
		RULE_datasourcesInputLocation = 119, RULE_datasourcesOutputLocation = 120, 
		RULE_datasourceInputLocation = 121, RULE_datasourceOutputLocation = 122, 
		RULE_dirSpec = 123, RULE_forEachStatement = 124, RULE_foreachEntityListForTypedVarDecl = 125, 
		RULE_foreachEntityListForUntypedVarDecl = 126, RULE_foreachSpaceListForTypedVarDecl = 127, 
		RULE_foreachSpaceListForUntypedVarDecl = 128, RULE_foreachBlockListForTypedVarDecl = 129, 
		RULE_foreachBlockListForUntypedVarDecl = 130, RULE_foreachDatasourceListForTypedVarDecl = 131, 
		RULE_foreachDatasourceListForUntypedVarDecl = 132, RULE_foreachDatasourceEntryListForTypedVarDecl = 133, 
		RULE_foreachDatasourceEntryListForUntypedVarDecl = 134, RULE_foreachStoryListForTypedVarDecl = 135, 
		RULE_foreachStoryListForUntypedVarDecl = 136, RULE_foreachStringListForTypedVarDecl = 137, 
		RULE_foreachStringListForUntypedVarDecl = 138, RULE_foreachRegexListForTypedVarDecl = 139, 
		RULE_foreachRegexListForUntypedVarDecl = 140, RULE_foreachIntegerListForTypedVarDecl = 141, 
		RULE_foreachIntegerListForUntypedVarDecl = 142, RULE_longOrShortDatasourceSpec = 143, 
		RULE_spaceFileSpec = 144, RULE_blockFileSpec = 145, RULE_datasourceFileSpec = 146, 
		RULE_datasourceEntryFileSpec = 147, RULE_storyFileSpec = 148, RULE_untypedVarDecl = 149, 
		RULE_typedVarDecl = 150, RULE_spaceVarDecl = 151, RULE_blockVarDecl = 152, 
		RULE_datasourceVarDecl = 153, RULE_datasourceEntryVarDecl = 154, RULE_storyVarDecl = 155, 
		RULE_stringVarDecl = 156, RULE_regexVarDecl = 157, RULE_integerVarDecl = 158, 
		RULE_datasourceEntriesInputLocation = 159;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "scriptBlockDef", "createDatasourceStatement", 
		"deleteDatasourceStatement", "updateDatasourceStatement", "datasourceUpdateList", 
		"datasourceUpdate", "createDatasourceEntryStatement", "deleteDatasourceEntryStatement", 
		"updateDatasourceEntryStatement", "datasourceEntryFullSpec", "datasourceEntryShortSpec", 
		"datasourceEntryIdentifier", "updateDatasourceEntriesStatement", "deleteDatasourceEntriesStatement", 
		"copyDatasourceEntriesStatement", "syncDatasourceEntriesStatement", "datasourceEntryCopyOptionList", 
		"datasourceEntryCopyOption", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"datasourceEntriesSourceLocation", "urlSpec", "datasourceEntriesTargetLocation", 
		"datasourceEntryConstraintExprList", "datasourceEntryConstraintExpr", 
		"datasourceEntryConstraint", "loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "shortSpaceSpec", "longOrShortSpaceSpec", "blockSpec", "storySpec", 
		"datasourceEntrySpec", "datasourceSpec", "datasourceShortSpec", "assignmentStatement", 
		"spaceAssignmentStatement", "blockAssignmentStatement", "stringAssignmentStatement", 
		"copySpacesStatement", "printStatement", "printSpacesStatement", "printVarStatement", 
		"printSpaceStatement", "printStringLiteralStatement", "printSymbolTableStatement", 
		"printLocalCacheStatement", "realDataLocation", "fileSpec", "completeFileSpec", 
		"spaceInputLocation", "spaceOutputLocation", "spacesInputLocation", "spacesOutputLocation", 
		"shortFileSpec", "blockInputLocation", "blockOutputLocation", "blocksInputLocation", 
		"blocksOutputLocation", "storyInputLocation", "storyOutputLocation", "storiesInputLocation", 
		"storiesOutputLocation", "varGetFrom", "createBlockStatement", "updateBlocksStatement", 
		"copyBlocksStatement", "deleteBlocksStatement", "blockConstraintExprList", 
		"blockConstraintExpr", "blockConstraint", "blockUpdateList", "blockUpdate", 
		"intExprList", "intExpr", "verbosityStatement", "waitStatement", "compareStatement", 
		"compareSpacesStatement", "compareBlocksStatement", "compareAllBlocksStatement", 
		"copyStoriesStatement", "publishStoriesStatement", "unpublishStoriesStatement", 
		"deleteStoriesStatement", "storyConstraintExprList", "storyConstraintExpr", 
		"storyConstraint", "regexExpr", "regexExprList", "copyDatasourcesStatement", 
		"updateDatasourcesStatement", "deleteDatasourcesStatement", "syncDatasourcesStatement", 
		"datasourceCopyOptionList", "datasourceCopyOption", "datasourceConstraintExprList", 
		"datasourceConstraintExpr", "datasourceConstraint", "stringExprList", 
		"stringExpr", "spaceConstraintExprList", "spaceConstraintExpr", "spaceConstraint", 
		"datasourcesInputLocation", "datasourcesOutputLocation", "datasourceInputLocation", 
		"datasourceOutputLocation", "dirSpec", "forEachStatement", "foreachEntityListForTypedVarDecl", 
		"foreachEntityListForUntypedVarDecl", "foreachSpaceListForTypedVarDecl", 
		"foreachSpaceListForUntypedVarDecl", "foreachBlockListForTypedVarDecl", 
		"foreachBlockListForUntypedVarDecl", "foreachDatasourceListForTypedVarDecl", 
		"foreachDatasourceListForUntypedVarDecl", "foreachDatasourceEntryListForTypedVarDecl", 
		"foreachDatasourceEntryListForUntypedVarDecl", "foreachStoryListForTypedVarDecl", 
		"foreachStoryListForUntypedVarDecl", "foreachStringListForTypedVarDecl", 
		"foreachStringListForUntypedVarDecl", "foreachRegexListForTypedVarDecl", 
		"foreachRegexListForUntypedVarDecl", "foreachIntegerListForTypedVarDecl", 
		"foreachIntegerListForUntypedVarDecl", "longOrShortDatasourceSpec", "spaceFileSpec", 
		"blockFileSpec", "datasourceFileSpec", "datasourceEntryFileSpec", "storyFileSpec", 
		"untypedVarDecl", "typedVarDecl", "spaceVarDecl", "blockVarDecl", "datasourceVarDecl", 
		"datasourceEntryVarDecl", "storyVarDecl", "stringVarDecl", "regexVarDecl", 
		"integerVarDecl", "datasourceEntriesInputLocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pass'", "'{'", "'}'", "'create'", "'datasource'", "'('", "')'", 
		"'for'", "'in'", "'delete'", "'update'", "'set'", "','", "'name'", "'='", 
		"'slug'", "'entry'", "'from'", "'entries'", "'where'", "'copy'", "'to'", 
		"'sync'", "'skip'", "'updates'", "'creates'", "'value'", "'csv'", "'json'", 
		"'url'", "'and'", "'or'", "'id'", "'!='", "'not'", "'matches'", "'does'", 
		"'match'", "'regex'", "'like'", "'starts'", "'start'", "'with'", "'ends'", 
		"'end'", "'login'", "'global'", "'username'", "'password'", "'token'", 
		"'var'", "'space'", "'block'", "'string'", "'story'", "'spaces'", "'print'", 
		"'symbol'", "'tables'", "'local'", "'cache'", "'server'", "'file'", "'on'", 
		"'blocks'", "'technical'", "'display'", "'type'", "'nestable'", "'content'", 
		"'universal'", "'add'", "'tag'", "'remove'", "'preview'", "'field'", "'template'", 
		"'screenshot'", "'+'", "'-'", "'*'", "'%'", "'be'", "'quiet'", "'verbose'", 
		"'debugger'", "'wait'", "'compare'", "'all'", "'stories'", "'publish'", 
		"'unpublish'", "'any'", "'tags'", "'do'", "'no'", "'datasources'", "'include'", 
		"'directory'", "'foreach'", "'['", "']'", "'int'", "'datasource entry'", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "STATEMENTEND", 
		"WS", "STRINGLITERAL", "VARID", "INTLITERAL", "REGEXLITERAL", "LINE_COMMENT", 
		"BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 213991900810578998L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 33686335L) != 0)) {
				{
				{
				State = 322;
				statement();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND() { return GetToken(BlokScriptGrammarParser.STATEMENTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourcesStatementContext copyDatasourcesStatement() {
			return GetRuleContext<CopyDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteBlocksStatementContext deleteBlocksStatement() {
			return GetRuleContext<DeleteBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
			return GetRuleContext<DeleteDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceStatementContext createDatasourceStatement() {
			return GetRuleContext<CreateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceStatementContext updateDatasourceStatement() {
			return GetRuleContext<UpdateDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceStatementContext deleteDatasourceStatement() {
			return GetRuleContext<DeleteDatasourceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
			return GetRuleContext<DeleteDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
			return GetRuleContext<UpdateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
			return GetRuleContext<UpdateDatasourcesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				loginStatement();
				State = 329;
				Match(STATEMENTEND);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				varStatement();
				State = 332;
				Match(STATEMENTEND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 334;
				assignmentStatement();
				State = 335;
				Match(STATEMENTEND);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				printStatement();
				State = 338;
				Match(STATEMENTEND);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 340;
				verbosityStatement();
				State = 341;
				Match(STATEMENTEND);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 343;
				waitStatement();
				State = 344;
				Match(STATEMENTEND);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 346;
				compareStatement();
				State = 347;
				Match(STATEMENTEND);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 349;
				copyBlocksStatement();
				State = 350;
				Match(STATEMENTEND);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 352;
				copySpacesStatement();
				State = 353;
				Match(STATEMENTEND);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 355;
				copyBlocksStatement();
				State = 356;
				Match(STATEMENTEND);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 358;
				copyStoriesStatement();
				State = 359;
				Match(STATEMENTEND);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 361;
				publishStoriesStatement();
				State = 362;
				Match(STATEMENTEND);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 364;
				unpublishStoriesStatement();
				State = 365;
				Match(STATEMENTEND);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 367;
				deleteStoriesStatement();
				State = 368;
				Match(STATEMENTEND);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 370;
				copyDatasourcesStatement();
				State = 371;
				Match(STATEMENTEND);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 373;
				deleteBlocksStatement();
				State = 374;
				Match(STATEMENTEND);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 376;
				deleteDatasourcesStatement();
				State = 377;
				Match(STATEMENTEND);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 379;
				createDatasourceStatement();
				State = 380;
				Match(STATEMENTEND);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 382;
				updateDatasourceStatement();
				State = 383;
				Match(STATEMENTEND);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 385;
				deleteDatasourceStatement();
				State = 386;
				Match(STATEMENTEND);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 388;
				createDatasourceEntryStatement();
				State = 389;
				Match(STATEMENTEND);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 391;
				deleteDatasourceEntryStatement();
				State = 392;
				Match(STATEMENTEND);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 394;
				updateDatasourceEntryStatement();
				State = 395;
				Match(STATEMENTEND);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 397;
				updateDatasourceEntriesStatement();
				State = 398;
				Match(STATEMENTEND);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 400;
				deleteDatasourceEntriesStatement();
				State = 401;
				Match(STATEMENTEND);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 403;
				copyDatasourceEntriesStatement();
				State = 404;
				Match(STATEMENTEND);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 406;
				syncDatasourceEntriesStatement();
				State = 407;
				Match(STATEMENTEND);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 409;
				updateDatasourcesStatement();
				State = 410;
				Match(STATEMENTEND);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 412;
				Match(T__0);
				State = 413;
				Match(STATEMENTEND);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 414;
				scriptBlockDef();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 415;
				forEachStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBlockDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptBlockDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBlockDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptBlockDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBlockDefContext scriptBlockDef() {
		ScriptBlockDefContext _localctx = new ScriptBlockDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_scriptBlockDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(T__1);
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 419;
				statementList();
				}
				break;
			}
			State = 422;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public CreateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceStatementContext createDatasourceStatement() {
		CreateDatasourceStatementContext _localctx = new CreateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_createDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(T__3);
			State = 425;
			Match(T__4);
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 426;
				stringExpr();
				}
				break;
			case T__5:
				{
				State = 427;
				Match(T__5);
				State = 428;
				datasourceUpdateList();
				State = 429;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 433;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
			case VARID:
				{
				State = 434;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 435;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DeleteDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceStatementContext deleteDatasourceStatement() {
		DeleteDatasourceStatementContext _localctx = new DeleteDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_deleteDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(T__9);
			State = 439;
			Match(T__4);
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 440;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 441;
				datasourceSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public UpdateDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceStatementContext updateDatasourceStatement() {
		UpdateDatasourceStatementContext _localctx = new UpdateDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_updateDatasourceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(T__10);
			State = 445;
			Match(T__4);
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 446;
				datasourceShortSpec();
				}
				break;
			case 2:
				{
				State = 447;
				datasourceSpec();
				}
				break;
			}
			State = 450;
			Match(T__11);
			State = 451;
			datasourceUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateContext datasourceUpdate() {
			return GetRuleContext<DatasourceUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		public DatasourceUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateListContext datasourceUpdateList() {
		DatasourceUpdateListContext _localctx = new DatasourceUpdateListContext(Context, State);
		EnterRule(_localctx, 14, RULE_datasourceUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			datasourceUpdate();
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 454;
				Match(T__12);
				State = 455;
				datasourceUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceUpdateContext datasourceUpdate() {
		DatasourceUpdateContext _localctx = new DatasourceUpdateContext(Context, State);
		EnterRule(_localctx, 16, RULE_datasourceUpdate);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 458;
				Match(T__13);
				State = 459;
				Match(T__14);
				State = 460;
				stringExpr();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				Match(T__15);
				State = 462;
				Match(T__14);
				State = 463;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(T__3);
			State = 467;
			Match(T__4);
			State = 468;
			Match(T__16);
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
			case VARID:
				{
				State = 469;
				stringExpr();
				}
				break;
			case T__13:
			case T__26:
				{
				State = 470;
				datasourceEntryUpdateList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 473;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 474;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 475;
				datasourceShortSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		public DeleteDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntryStatementContext deleteDatasourceEntryStatement() {
		DeleteDatasourceEntryStatementContext _localctx = new DeleteDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_deleteDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(T__9);
			State = 479;
			Match(T__4);
			State = 480;
			Match(T__16);
			State = 481;
			datasourceEntryShortSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
			return GetRuleContext<DatasourceEntryShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public UpdateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntryStatementContext updateDatasourceEntryStatement() {
		UpdateDatasourceEntryStatementContext _localctx = new UpdateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_updateDatasourceEntryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(T__10);
			State = 484;
			Match(T__4);
			State = 485;
			Match(T__16);
			State = 486;
			datasourceEntryShortSpec();
			State = 487;
			Match(T__11);
			State = 488;
			datasourceEntryUpdateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFullSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryFullSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFullSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFullSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFullSpecContext datasourceEntryFullSpec() {
		DatasourceEntryFullSpecContext _localctx = new DatasourceEntryFullSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_datasourceEntryFullSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(T__4);
			State = 491;
			Match(T__16);
			State = 492;
			datasourceEntryIdentifier();
			State = 493;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 494;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
			return GetRuleContext<DatasourceEntryIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntryShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryShortSpecContext datasourceEntryShortSpec() {
		DatasourceEntryShortSpecContext _localctx = new DatasourceEntryShortSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_datasourceEntryShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			datasourceEntryIdentifier();
			State = 497;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 498;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryIdentifierContext datasourceEntryIdentifier() {
		DatasourceEntryIdentifierContext _localctx = new DatasourceEntryIdentifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_datasourceEntryIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 500;
				intExpr();
				}
				break;
			case 2:
				{
				State = 501;
				stringExpr();
				}
				break;
			case 3:
				{
				State = 502;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(T__10);
			State = 506;
			Match(T__4);
			State = 507;
			Match(T__18);
			State = 508;
			Match(T__8);
			State = 509;
			datasourceSpec();
			State = 510;
			Match(T__11);
			State = 511;
			datasourceEntryUpdateList();
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 512;
				Match(T__19);
				State = 513;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(T__9);
			State = 517;
			Match(T__4);
			State = 518;
			Match(T__18);
			State = 519;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 520;
				datasourceSpec();
				}
				break;
			case 2:
				{
				State = 521;
				datasourceShortSpec();
				}
				break;
			}
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 524;
				Match(T__19);
				State = 525;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(T__20);
			State = 529;
			Match(T__4);
			State = 530;
			Match(T__18);
			State = 531;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 532;
			datasourceEntriesSourceLocation();
			State = 533;
			Match(T__21);
			State = 534;
			datasourceEntriesTargetLocation();
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 535;
				Match(T__19);
				State = 536;
				datasourceEntryConstraintExprList();
				}
			}

			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 539;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(T__22);
			State = 543;
			Match(T__4);
			State = 544;
			Match(T__18);
			State = 545;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 546;
			datasourceEntriesSourceLocation();
			State = 547;
			Match(T__21);
			State = 548;
			datasourceEntriesSourceLocation();
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 549;
				Match(T__19);
				State = 550;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
			return GetRuleContext<DatasourceEntryCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
			return GetRuleContext<DatasourceEntryCopyOptionListContext>(0);
		}
		public DatasourceEntryCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionListContext datasourceEntryCopyOptionList() {
		DatasourceEntryCopyOptionListContext _localctx = new DatasourceEntryCopyOptionListContext(Context, State);
		EnterRule(_localctx, 38, RULE_datasourceEntryCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			datasourceEntryCopyOption();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 554;
				Match(T__12);
				State = 555;
				datasourceEntryCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryCopyOptionContext : ParserRuleContext {
		public DatasourceEntryCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryCopyOptionContext datasourceEntryCopyOption() {
		DatasourceEntryCopyOptionContext _localctx = new DatasourceEntryCopyOptionContext(Context, State);
		EnterRule(_localctx, 40, RULE_datasourceEntryCopyOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(T__23);
			State = 559;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 100665360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 42, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			datasourceEntryUpdate();
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 562;
				Match(T__12);
				State = 563;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 44, RULE_datasourceEntryUpdate);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				Match(T__13);
				State = 567;
				Match(T__14);
				State = 568;
				stringExpr();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569;
				Match(T__26);
				State = 570;
				Match(T__14);
				State = 571;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 46, RULE_datasourceEntriesSourceLocation);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				longOrShortDatasourceSpec();
				}
				break;
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27 || _la==T__28) {
				{
				State = 578;
				_la = TokenStream.LA(1);
				if ( !(_la==T__27 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 581;
			Match(T__29);
			State = 582;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompleteFileSpecContext completeFileSpec() {
			return GetRuleContext<CompleteFileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 50, RULE_datasourceEntriesTargetLocation);
		try {
			State = 586;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				longOrShortDatasourceSpec();
				}
				break;
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				completeFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 52, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			datasourceEntryConstraintExpr();
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 589;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 590;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593;
				datasourceEntryConstraint();
				State = 596;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 594;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 595;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				Match(T__5);
				State = 599;
				datasourceEntryConstraint();
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 600;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 601;
					datasourceEntryConstraintExpr();
					}
				}

				State = 604;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606;
				Match(T__5);
				State = 607;
				datasourceEntryConstraintExpr();
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 608;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 609;
					datasourceEntryConstraintExpr();
					}
				}

				State = 612;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 56, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 616;
				Match(T__32);
				State = 617;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 618;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619;
				Match(T__32);
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 620;
					Match(T__34);
					}
				}

				State = 623;
				Match(T__8);
				State = 624;
				Match(T__5);
				State = 625;
				intExprList();
				State = 626;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 628;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 629;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 630;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 631;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 632;
					Match(T__34);
					}
				}

				State = 635;
				Match(T__8);
				State = 636;
				Match(T__5);
				State = 639;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 637;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 638;
					regexExprList();
					}
					break;
				}
				State = 641;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 643;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 648;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 644;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 645;
					Match(T__36);
					State = 646;
					Match(T__34);
					State = 647;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 650;
					Match(T__38);
					}
				}

				State = 653;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 654;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 655;
					Match(T__34);
					}
				}

				State = 658;
				Match(T__8);
				State = 659;
				Match(T__5);
				State = 660;
				stringExprList();
				State = 661;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 663;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 664;
					Match(T__34);
					}
				}

				State = 667;
				Match(T__39);
				State = 668;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 669;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 674;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 670;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 671;
					Match(T__36);
					State = 672;
					Match(T__34);
					State = 673;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 676;
				Match(T__42);
				State = 677;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 678;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 683;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 679;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 680;
					Match(T__36);
					State = 681;
					Match(T__34);
					State = 682;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 685;
				Match(T__42);
				State = 686;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loginStatement);
		try {
			State = 694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 691;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 692;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 693;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(T__45);
			State = 699;
			Match(T__42);
			State = 700;
			Match(T__46);
			State = 701;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(T__45);
			State = 704;
			Match(T__42);
			State = 705;
			Match(T__46);
			State = 706;
			Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(T__45);
			State = 709;
			Match(T__42);
			State = 710;
			Match(T__46);
			State = 711;
			Match(T__49);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(T__45);
			State = 714;
			Match(T__42);
			State = 715;
			Match(T__46);
			State = 716;
			Match(T__47);
			State = 717;
			Match(T__30);
			State = 718;
			Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_varStatement);
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
				EnterOuterAlt(_localctx, 1);
				{
				State = 720;
				spaceVarStatement();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721;
				blockVarStatement();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 722;
				stringVarStatement();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 4);
				{
				State = 723;
				regexVarStatement();
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 5);
				{
				State = 724;
				storyVarStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 6);
				{
				State = 725;
				datasourceEntryVarStatement();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 7);
				{
				State = 726;
				Match(T__50);
				State = 727;
				Match(VARID);
				State = 728;
				Match(T__14);
				State = 738;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 729;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 730;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 731;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 732;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 733;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 734;
					storySpec();
					}
					break;
				case 7:
					{
					State = 735;
					intExpr();
					}
					break;
				case 8:
					{
					State = 736;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 737;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(T__51);
			State = 743;
			Match(VARID);
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 744;
				Match(T__14);
				State = 745;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(T__52);
			State = 749;
			Match(VARID);
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 750;
				Match(T__14);
				State = 751;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(T__53);
			State = 755;
			Match(VARID);
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 756;
				Match(T__14);
				State = 757;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			Match(T__38);
			State = 761;
			Match(VARID);
			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 762;
				Match(T__14);
				State = 763;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			Match(T__54);
			State = 767;
			Match(VARID);
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 768;
				Match(T__14);
				State = 769;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(T__4);
			State = 773;
			Match(T__16);
			State = 774;
			Match(VARID);
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 775;
				Match(T__14);
				State = 776;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 84, RULE_spaceSpec);
		int _la;
		try {
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779;
				Match(T__51);
				State = 780;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8 || _la==T__63) {
					{
					State = 781;
					varGetFrom();
					}
				}

				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 784;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public ShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortSpaceSpecContext shortSpaceSpec() {
		ShortSpaceSpecContext _localctx = new ShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 86, RULE_shortSpaceSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortSpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public LongOrShortSpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortSpaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
		LongOrShortSpaceSpecContext _localctx = new LongOrShortSpaceSpecContext(Context, State);
		EnterRule(_localctx, 88, RULE_longOrShortSpaceSpec);
		try {
			State = 791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 90, RULE_blockSpec);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793;
				Match(T__52);
				State = 794;
				Match(STRINGLITERAL);
				State = 795;
				Match(T__8);
				State = 798;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
				case VARID:
					{
					State = 796;
					spaceSpec();
					}
					break;
				case T__27:
				case T__28:
				case T__62:
					{
					State = 797;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 800;
				Match(T__52);
				State = 801;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 92, RULE_storySpec);
		int _la;
		try {
			State = 811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 805;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 808;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
				case VARID:
					{
					State = 806;
					spaceSpec();
					}
					break;
				case T__27:
				case T__28:
				case T__62:
					{
					State = 807;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 94, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813;
				Match(T__4);
				State = 814;
				Match(T__16);
				State = 818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 815;
					intExpr();
					}
					break;
				case 2:
					{
					State = 816;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 817;
					Match(VARID);
					}
					break;
				}
				State = 820;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 821;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 822;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 96, RULE_datasourceSpec);
		int _la;
		try {
			State = 833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 825;
				Match(T__4);
				State = 826;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 827;
				_la = TokenStream.LA(1);
				if ( !(_la==T__8 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 830;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__51:
				case VARID:
					{
					State = 828;
					spaceSpec();
					}
					break;
				case STRINGLITERAL:
				case INTLITERAL:
					{
					State = 829;
					shortSpaceSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceShortSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortSpaceSpecContext shortSpaceSpec() {
			return GetRuleContext<ShortSpaceSpecContext>(0);
		}
		public DatasourceShortSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceShortSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceShortSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceShortSpecContext datasourceShortSpec() {
		DatasourceShortSpecContext _localctx = new DatasourceShortSpecContext(Context, State);
		EnterRule(_localctx, 98, RULE_datasourceShortSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 836;
			Match(T__8);
			State = 839;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
			case VARID:
				{
				State = 837;
				spaceSpec();
				}
				break;
			case STRINGLITERAL:
			case INTLITERAL:
				{
				State = 838;
				shortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_assignmentStatement);
		try {
			State = 847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841;
				Match(VARID);
				State = 842;
				Match(T__14);
				State = 843;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 844;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 845;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 846;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(VARID);
			State = 850;
			Match(T__14);
			State = 851;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			Match(VARID);
			State = 854;
			Match(T__14);
			State = 855;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			Match(VARID);
			State = 858;
			Match(T__14);
			State = 859;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			Match(T__20);
			State = 862;
			Match(T__55);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 863;
				Match(T__17);
				State = 864;
				realDataLocation();
				}
			}

			State = 867;
			Match(T__21);
			State = 868;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_printStatement);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 870;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 871;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 872;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 873;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 874;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 875;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(T__56);
			State = 879;
			Match(T__55);
			State = 880;
			Match(T__17);
			State = 881;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(T__56);
			State = 884;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(T__56);
			State = 887;
			Match(T__51);
			State = 888;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			Match(T__56);
			State = 891;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(T__56);
			State = 894;
			Match(T__57);
			State = 895;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(T__56);
			State = 898;
			Match(T__59);
			State = 899;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 124, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__61:
				{
				State = 901;
				Match(T__61);
				}
				break;
			case T__59:
				{
				State = 902;
				Match(T__59);
				State = 903;
				Match(T__60);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 126, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27 || _la==T__28) {
				{
				State = 906;
				_la = TokenStream.LA(1);
				if ( !(_la==T__27 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 909;
			Match(T__62);
			State = 910;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompleteFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public CompleteFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_completeFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompleteFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompleteFileSpecContext completeFileSpec() {
		CompleteFileSpecContext _localctx = new CompleteFileSpecContext(Context, State);
		EnterRule(_localctx, 128, RULE_completeFileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27 || _la==T__28) {
				{
				State = 912;
				_la = TokenStream.LA(1);
				if ( !(_la==T__27 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 915;
			Match(T__62);
			State = 916;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceInputLocationContext spaceInputLocation() {
		SpaceInputLocationContext _localctx = new SpaceInputLocationContext(Context, State);
		EnterRule(_localctx, 130, RULE_spaceInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 132, RULE_spaceOutputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesInputLocationContext spacesInputLocation() {
		SpacesInputLocationContext _localctx = new SpacesInputLocationContext(Context, State);
		EnterRule(_localctx, 134, RULE_spacesInputLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortFileSpecContext shortFileSpec() {
			return GetRuleContext<ShortFileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 136, RULE_spacesOutputLocation);
		try {
			State = 926;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				shortFileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public ShortFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShortFileSpecContext shortFileSpec() {
		ShortFileSpecContext _localctx = new ShortFileSpecContext(Context, State);
		EnterRule(_localctx, 138, RULE_shortFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockInputLocationContext blockInputLocation() {
		BlockInputLocationContext _localctx = new BlockInputLocationContext(Context, State);
		EnterRule(_localctx, 140, RULE_blockInputLocation);
		try {
			State = 932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 930;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 142, RULE_blockOutputLocation);
		try {
			State = 936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 935;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksInputLocationContext blocksInputLocation() {
		BlocksInputLocationContext _localctx = new BlocksInputLocationContext(Context, State);
		EnterRule(_localctx, 144, RULE_blocksInputLocation);
		try {
			State = 940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 938;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 939;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 146, RULE_blocksOutputLocation);
		try {
			State = 944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 943;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryInputLocationContext storyInputLocation() {
		StoryInputLocationContext _localctx = new StoryInputLocationContext(Context, State);
		EnterRule(_localctx, 148, RULE_storyInputLocation);
		try {
			State = 948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 946;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 947;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 150, RULE_storyOutputLocation);
		try {
			State = 952;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 950;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 951;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 152, RULE_storiesInputLocation);
		try {
			State = 956;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 954;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 955;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 154, RULE_storiesOutputLocation);
		try {
			State = 960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 958;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 959;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 156, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				{
				State = 962;
				Match(T__63);
				State = 963;
				Match(T__61);
				}
				break;
			case T__8:
				{
				State = 964;
				Match(T__8);
				State = 965;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public CreateBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateBlockStatementContext createBlockStatement() {
		CreateBlockStatementContext _localctx = new CreateBlockStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_createBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			Match(T__3);
			State = 969;
			Match(T__52);
			State = 970;
			Match(T__5);
			State = 971;
			blockUpdateList();
			State = 972;
			Match(T__6);
			State = 973;
			Match(T__8);
			State = 974;
			longOrShortSpaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public UpdateBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateBlocksStatementContext updateBlocksStatement() {
		UpdateBlocksStatementContext _localctx = new UpdateBlocksStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_updateBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976;
			Match(T__10);
			State = 977;
			Match(T__64);
			State = 978;
			Match(T__8);
			State = 979;
			longOrShortSpaceSpec();
			State = 980;
			Match(T__11);
			State = 981;
			blockUpdateList();
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 982;
				Match(T__19);
				State = 983;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			Match(T__20);
			State = 987;
			Match(T__64);
			State = 988;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 989;
			longOrShortSpaceSpec();
			State = 990;
			Match(T__21);
			State = 991;
			blocksOutputLocation();
			State = 994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 992;
				Match(T__19);
				State = 993;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public DeleteBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteBlocksStatementContext deleteBlocksStatement() {
		DeleteBlocksStatementContext _localctx = new DeleteBlocksStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_deleteBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			Match(T__9);
			State = 997;
			Match(T__64);
			State = 998;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 999;
			longOrShortSpaceSpec();
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1000;
				Match(T__19);
				State = 1001;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr() {
			return GetRuleContext<BlockConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public BlockConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprListContext blockConstraintExprList() {
		BlockConstraintExprListContext _localctx = new BlockConstraintExprListContext(Context, State);
		EnterRule(_localctx, 166, RULE_blockConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			blockConstraintExpr();
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1005;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1006;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext[] blockConstraintExpr() {
			return GetRuleContexts<BlockConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprContext blockConstraintExpr(int i) {
			return GetRuleContext<BlockConstraintExprContext>(i);
		}
		public BlockConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintExprContext blockConstraintExpr() {
		BlockConstraintExprContext _localctx = new BlockConstraintExprContext(Context, State);
		EnterRule(_localctx, 168, RULE_blockConstraintExpr);
		int _la;
		try {
			State = 1030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009;
				blockConstraint();
				State = 1012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 1010;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1011;
					blockConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014;
				Match(T__5);
				State = 1015;
				blockConstraint();
				State = 1018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1016;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1017;
					blockConstraintExpr();
					}
				}

				State = 1020;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1022;
				Match(T__5);
				State = 1023;
				blockConstraintExpr();
				State = 1026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1024;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1025;
					blockConstraintExpr();
					}
				}

				State = 1028;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 170, RULE_blockConstraint);
		int _la;
		try {
			State = 1100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1032;
				Match(T__32);
				State = 1033;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1034;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				Match(T__32);
				State = 1037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1036;
					Match(T__34);
					}
				}

				State = 1039;
				Match(T__8);
				State = 1040;
				Match(T__5);
				State = 1041;
				intExprList();
				State = 1042;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1044;
				Match(T__13);
				State = 1045;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1046;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1047;
				Match(T__13);
				State = 1049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1048;
					Match(T__34);
					}
				}

				State = 1051;
				Match(T__8);
				State = 1052;
				Match(T__5);
				State = 1053;
				stringExprList();
				State = 1054;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1056;
				Match(T__13);
				State = 1061;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1057;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 1058;
					Match(T__36);
					State = 1059;
					Match(T__34);
					State = 1060;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1063;
					Match(T__38);
					}
				}

				State = 1066;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1067;
				Match(T__13);
				State = 1069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1068;
					Match(T__34);
					}
				}

				State = 1071;
				Match(T__8);
				State = 1072;
				Match(T__5);
				State = 1073;
				regexExprList();
				State = 1074;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1076;
				Match(T__13);
				State = 1078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1077;
					Match(T__34);
					}
				}

				State = 1080;
				Match(T__39);
				State = 1081;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1082;
				Match(T__13);
				State = 1087;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1083;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 1084;
					Match(T__36);
					State = 1085;
					Match(T__34);
					State = 1086;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1089;
				Match(T__42);
				State = 1090;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1091;
				Match(T__13);
				State = 1096;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1092;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 1093;
					Match(T__36);
					State = 1094;
					Match(T__34);
					State = 1095;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1098;
				Match(T__42);
				State = 1099;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateContext blockUpdate() {
			return GetRuleContext<BlockUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockUpdateListContext blockUpdateList() {
			return GetRuleContext<BlockUpdateListContext>(0);
		}
		public BlockUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateListContext blockUpdateList() {
		BlockUpdateListContext _localctx = new BlockUpdateListContext(Context, State);
		EnterRule(_localctx, 172, RULE_blockUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			blockUpdate();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1103;
				Match(T__12);
				State = 1104;
				blockUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public BlockUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockUpdateContext blockUpdate() {
		BlockUpdateContext _localctx = new BlockUpdateContext(Context, State);
		EnterRule(_localctx, 174, RULE_blockUpdate);
		int _la;
		try {
			State = 1136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1107;
				Match(T__65);
				State = 1108;
				Match(T__13);
				State = 1109;
				Match(T__14);
				State = 1110;
				stringExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1111;
				Match(T__66);
				State = 1112;
				Match(T__13);
				State = 1113;
				Match(T__14);
				State = 1114;
				stringExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1115;
				Match(T__67);
				State = 1116;
				Match(T__14);
				State = 1117;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1118;
				Match(T__71);
				State = 1119;
				Match(T__72);
				State = 1120;
				stringExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1121;
				Match(T__73);
				State = 1122;
				Match(T__72);
				State = 1123;
				stringExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1124;
				Match(T__74);
				State = 1125;
				Match(T__75);
				State = 1126;
				Match(T__14);
				State = 1127;
				stringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1128;
				Match(T__74);
				State = 1129;
				Match(T__76);
				State = 1130;
				Match(T__14);
				State = 1131;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1132;
				Match(T__74);
				State = 1133;
				Match(T__77);
				State = 1134;
				Match(T__14);
				State = 1135;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 176, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			intExpr();
			State = 1141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1139;
				Match(T__12);
				State = 1140;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 178, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) {
				{
				State = 1144;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1145;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__82) {
				{
				State = 1148;
				Match(T__82);
				}
			}

			State = 1151;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			Match(T__86);
			State = 1154;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_compareStatement);
		try {
			State = 1159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1156;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1157;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1158;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			Match(T__87);
			State = 1162;
			spaceSpec();
			State = 1163;
			Match(T__30);
			State = 1164;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			Match(T__87);
			State = 1167;
			blockSpec();
			State = 1168;
			Match(T__30);
			State = 1169;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171;
			Match(T__87);
			State = 1172;
			Match(T__88);
			State = 1173;
			Match(T__64);
			State = 1174;
			Match(T__8);
			State = 1175;
			spaceSpec();
			State = 1176;
			Match(T__30);
			State = 1177;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			Match(T__20);
			State = 1180;
			Match(T__89);
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__42) {
				{
				State = 1181;
				Match(T__42);
				State = 1182;
				Match(T__69);
				}
			}

			State = 1185;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1186;
			storiesInputLocation();
			State = 1187;
			Match(T__21);
			State = 1188;
			storiesOutputLocation();
			State = 1191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1189;
				Match(T__19);
				State = 1190;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			Match(T__90);
			State = 1194;
			Match(T__89);
			State = 1195;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1196;
			longOrShortSpaceSpec();
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1197;
				Match(T__19);
				State = 1198;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201;
			Match(T__91);
			State = 1202;
			Match(T__89);
			State = 1203;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1204;
			longOrShortSpaceSpec();
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1205;
				Match(T__19);
				State = 1206;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1209;
			Match(T__9);
			State = 1210;
			Match(T__89);
			State = 1211;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1212;
			longOrShortSpaceSpec();
			State = 1215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1213;
				Match(T__19);
				State = 1214;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr() {
			return GetRuleContext<StoryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public StoryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprListContext storyConstraintExprList() {
		StoryConstraintExprListContext _localctx = new StoryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 200, RULE_storyConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217;
			storyConstraintExpr();
			State = 1220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1218;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1219;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext[] storyConstraintExpr() {
			return GetRuleContexts<StoryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprContext storyConstraintExpr(int i) {
			return GetRuleContext<StoryConstraintExprContext>(i);
		}
		public StoryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintExprContext storyConstraintExpr() {
		StoryConstraintExprContext _localctx = new StoryConstraintExprContext(Context, State);
		EnterRule(_localctx, 202, RULE_storyConstraintExpr);
		int _la;
		try {
			State = 1243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1222;
				storyConstraint();
				State = 1225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 1223;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1224;
					storyConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1227;
				Match(T__5);
				State = 1228;
				storyConstraint();
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1229;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1230;
					storyConstraintExpr();
					}
				}

				State = 1233;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1235;
				Match(T__5);
				State = 1236;
				storyConstraintExpr();
				State = 1239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1237;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1238;
					storyConstraintExpr();
					}
				}

				State = 1241;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 204, RULE_storyConstraint);
		int _la;
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245;
				Match(T__32);
				State = 1246;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1247;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				Match(T__32);
				State = 1250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1249;
					Match(T__34);
					}
				}

				State = 1252;
				Match(T__8);
				State = 1253;
				Match(T__5);
				State = 1254;
				intExprList();
				State = 1255;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1257;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1258;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1259;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1260;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1261;
					Match(T__34);
					}
				}

				State = 1264;
				Match(T__8);
				State = 1265;
				Match(T__5);
				State = 1266;
				stringExprList();
				State = 1267;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1269;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1274;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1270;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 1271;
					Match(T__36);
					State = 1272;
					Match(T__34);
					State = 1273;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1276;
					Match(T__38);
					}
				}

				State = 1279;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1280;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1281;
					Match(T__34);
					}
				}

				State = 1284;
				Match(T__8);
				State = 1285;
				Match(T__5);
				State = 1286;
				stringExprList();
				State = 1287;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1289;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1290;
					Match(T__34);
					}
				}

				State = 1293;
				Match(T__39);
				State = 1294;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1295;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1296;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 1297;
					Match(T__36);
					State = 1298;
					Match(T__34);
					State = 1299;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1302;
				Match(T__42);
				State = 1303;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1304;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__29) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1309;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1305;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 1306;
					Match(T__36);
					State = 1307;
					Match(T__34);
					State = 1308;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1311;
				Match(T__42);
				State = 1312;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1321;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1313;
						Match(T__92);
						}
					}

					State = 1316;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1317;
						Match(T__88);
						}
					}

					State = 1320;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1323;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1324;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1333;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1326;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1325;
						Match(T__92);
						}
					}

					State = 1328;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1329;
						Match(T__88);
						}
					}

					State = 1332;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1335;
					Match(T__34);
					}
				}

				State = 1338;
				Match(T__8);
				State = 1339;
				Match(T__5);
				State = 1340;
				stringExprList();
				State = 1341;
				Match(T__6);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1343;
					Match(T__92);
					}
				}

				State = 1346;
				Match(T__72);
				State = 1351;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1347;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 1348;
					Match(T__36);
					State = 1349;
					Match(T__34);
					State = 1350;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1353;
					Match(T__38);
					}
				}

				State = 1356;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1357;
					Match(T__92);
					}
				}

				State = 1360;
				Match(T__72);
				State = 1365;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1361;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 1362;
					Match(T__36);
					State = 1363;
					Match(T__34);
					State = 1364;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1367;
				Match(T__42);
				State = 1368;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__92) {
					{
					State = 1369;
					Match(T__92);
					}
				}

				State = 1372;
				Match(T__72);
				State = 1377;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1373;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 1374;
					Match(T__36);
					State = 1375;
					Match(T__34);
					State = 1376;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1379;
				Match(T__42);
				State = 1380;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1381;
					Match(T__88);
					}
				}

				State = 1384;
				Match(T__93);
				State = 1389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__37:
					{
					State = 1385;
					Match(T__37);
					}
					break;
				case T__94:
					{
					State = 1386;
					Match(T__94);
					State = 1387;
					Match(T__34);
					State = 1388;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1391;
					Match(T__38);
					}
				}

				State = 1394;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1395;
					Match(T__88);
					}
				}

				State = 1398;
				Match(T__93);
				State = 1403;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__41:
					{
					State = 1399;
					Match(T__41);
					}
					break;
				case T__94:
					{
					State = 1400;
					Match(T__94);
					State = 1401;
					Match(T__34);
					State = 1402;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1405;
				Match(T__42);
				State = 1406;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1407;
					Match(T__88);
					}
				}

				State = 1410;
				Match(T__93);
				State = 1415;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__44:
					{
					State = 1411;
					Match(T__44);
					}
					break;
				case T__94:
					{
					State = 1412;
					Match(T__94);
					State = 1413;
					Match(T__34);
					State = 1414;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1417;
				Match(T__42);
				State = 1418;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1427;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1420;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1419;
						Match(T__92);
						}
					}

					State = 1422;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1423;
						Match(T__88);
						}
					}

					State = 1426;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1429;
					Match(T__34);
					}
				}

				State = 1432;
				Match(T__8);
				State = 1433;
				Match(T__5);
				State = 1434;
				regexExprList();
				State = 1435;
				Match(T__6);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1445;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__72:
				case T__92:
					{
					{
					State = 1438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__92) {
						{
						State = 1437;
						Match(T__92);
						}
					}

					State = 1440;
					Match(T__72);
					}
					}
					break;
				case T__88:
				case T__93:
					{
					{
					State = 1442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__88) {
						{
						State = 1441;
						Match(T__88);
						}
					}

					State = 1444;
					Match(T__93);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1447;
					Match(T__34);
					}
				}

				State = 1450;
				Match(T__39);
				State = 1451;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1452;
				Match(T__95);
				State = 1453;
				Match(T__93);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1454;
				Match(T__92);
				State = 1455;
				Match(T__93);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 206, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 208, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460;
			regexExpr();
			State = 1463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1461;
				Match(T__12);
				State = 1462;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465;
			Match(T__20);
			State = 1466;
			Match(T__96);
			State = 1467;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1468;
			longOrShortSpaceSpec();
			State = 1469;
			Match(T__21);
			State = 1470;
			longOrShortSpaceSpec();
			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1471;
				Match(T__19);
				State = 1472;
				datasourceConstraintExprList();
				}
			}

			State = 1476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23 || _la==T__97) {
				{
				State = 1475;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceUpdateListContext datasourceUpdateList() {
			return GetRuleContext<DatasourceUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public UpdateDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourcesStatementContext updateDatasourcesStatement() {
		UpdateDatasourcesStatementContext _localctx = new UpdateDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_updateDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1478;
			Match(T__10);
			State = 1479;
			Match(T__96);
			State = 1480;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1481;
			longOrShortSpaceSpec();
			State = 1482;
			Match(T__11);
			State = 1483;
			datasourceUpdateList();
			State = 1486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1484;
				Match(T__19);
				State = 1485;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DeleteDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourcesStatementContext deleteDatasourcesStatement() {
		DeleteDatasourcesStatementContext _localctx = new DeleteDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_deleteDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			Match(T__9);
			State = 1489;
			Match(T__96);
			State = 1490;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1491;
			longOrShortSpaceSpec();
			State = 1494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1492;
				Match(T__19);
				State = 1493;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext[] longOrShortSpaceSpec() {
			return GetRuleContexts<LongOrShortSpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec(int i) {
			return GetRuleContext<LongOrShortSpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public SyncDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourcesStatementContext syncDatasourcesStatement() {
		SyncDatasourcesStatementContext _localctx = new SyncDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_syncDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496;
			Match(T__20);
			State = 1497;
			Match(T__96);
			State = 1498;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1499;
			longOrShortSpaceSpec();
			State = 1500;
			Match(T__21);
			State = 1501;
			longOrShortSpaceSpec();
			State = 1504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1502;
				Match(T__19);
				State = 1503;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionContext datasourceCopyOption() {
			return GetRuleContext<DatasourceCopyOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceCopyOptionListContext datasourceCopyOptionList() {
			return GetRuleContext<DatasourceCopyOptionListContext>(0);
		}
		public DatasourceCopyOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionListContext datasourceCopyOptionList() {
		DatasourceCopyOptionListContext _localctx = new DatasourceCopyOptionListContext(Context, State);
		EnterRule(_localctx, 218, RULE_datasourceCopyOptionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506;
			datasourceCopyOption();
			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1507;
				Match(T__12);
				State = 1508;
				datasourceCopyOptionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceCopyOptionContext : ParserRuleContext {
		public DatasourceCopyOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceCopyOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceCopyOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceCopyOptionContext datasourceCopyOption() {
		DatasourceCopyOptionContext _localctx = new DatasourceCopyOptionContext(Context, State);
		EnterRule(_localctx, 220, RULE_datasourceCopyOption);
		int _la;
		try {
			State = 1515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511;
				Match(T__23);
				State = 1512;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 100665360L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__97:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1513;
				Match(T__97);
				State = 1514;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public DatasourceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprListContext datasourceConstraintExprList() {
		DatasourceConstraintExprListContext _localctx = new DatasourceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 222, RULE_datasourceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			datasourceConstraintExpr();
			State = 1520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1518;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1519;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext[] datasourceConstraintExpr() {
			return GetRuleContexts<DatasourceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr(int i) {
			return GetRuleContext<DatasourceConstraintExprContext>(i);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 224, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 1543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1522;
				datasourceConstraint();
				State = 1525;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1523;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1524;
					datasourceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1527;
				Match(T__5);
				State = 1528;
				datasourceConstraint();
				State = 1531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1529;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1530;
					datasourceConstraintExpr();
					}
				}

				State = 1533;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1535;
				Match(T__5);
				State = 1536;
				datasourceConstraintExpr();
				State = 1539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1537;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1538;
					datasourceConstraintExpr();
					}
				}

				State = 1541;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 226, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545;
				Match(T__32);
				State = 1546;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1547;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1548;
				Match(T__32);
				State = 1550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1549;
					Match(T__34);
					}
				}

				State = 1552;
				Match(T__8);
				State = 1553;
				Match(T__5);
				State = 1554;
				intExprList();
				State = 1555;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1558;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1559;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1560;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1561;
					Match(T__34);
					}
				}

				State = 1564;
				Match(T__8);
				State = 1565;
				Match(T__5);
				State = 1566;
				stringExprList();
				State = 1567;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1569;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1574;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1570;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 1571;
					Match(T__36);
					State = 1572;
					Match(T__34);
					State = 1573;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1576;
					Match(T__38);
					}
				}

				State = 1579;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1580;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1581;
					Match(T__34);
					}
				}

				State = 1584;
				Match(T__8);
				State = 1585;
				Match(T__5);
				State = 1586;
				regexExprList();
				State = 1587;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1589;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1590;
					Match(T__34);
					}
				}

				State = 1593;
				Match(T__39);
				State = 1594;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1595;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1600;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1596;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 1597;
					Match(T__36);
					State = 1598;
					Match(T__34);
					State = 1599;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1602;
				Match(T__42);
				State = 1603;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1604;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1609;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1605;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 1606;
					Match(T__36);
					State = 1607;
					Match(T__34);
					State = 1608;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1611;
				Match(T__42);
				{
				State = 1612;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 228, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			stringExpr();
			State = 1618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1616;
				Match(T__12);
				State = 1617;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 230, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__78) {
				{
				State = 1621;
				Match(T__78);
				State = 1622;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr() {
			return GetRuleContext<SpaceConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public SpaceConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprListContext spaceConstraintExprList() {
		SpaceConstraintExprListContext _localctx = new SpaceConstraintExprListContext(Context, State);
		EnterRule(_localctx, 232, RULE_spaceConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			spaceConstraintExpr();
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==T__31) {
				{
				State = 1626;
				_la = TokenStream.LA(1);
				if ( !(_la==T__30 || _la==T__31) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1627;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintContext spaceConstraint() {
			return GetRuleContext<SpaceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext[] spaceConstraintExpr() {
			return GetRuleContexts<SpaceConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprContext spaceConstraintExpr(int i) {
			return GetRuleContext<SpaceConstraintExprContext>(i);
		}
		public SpaceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintExprContext spaceConstraintExpr() {
		SpaceConstraintExprContext _localctx = new SpaceConstraintExprContext(Context, State);
		EnterRule(_localctx, 234, RULE_spaceConstraintExpr);
		int _la;
		try {
			State = 1651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1630;
				spaceConstraint();
				State = 1633;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1631;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1632;
					spaceConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635;
				Match(T__5);
				State = 1636;
				spaceConstraint();
				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1637;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1638;
					spaceConstraintExpr();
					}
				}

				State = 1641;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1643;
				Match(T__5);
				State = 1644;
				spaceConstraintExpr();
				State = 1647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30 || _la==T__31) {
					{
					State = 1645;
					_la = TokenStream.LA(1);
					if ( !(_la==T__30 || _la==T__31) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1646;
					spaceConstraintExpr();
					}
				}

				State = 1649;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public SpaceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceConstraintContext spaceConstraint() {
		SpaceConstraintContext _localctx = new SpaceConstraintContext(Context, State);
		EnterRule(_localctx, 236, RULE_spaceConstraint);
		int _la;
		try {
			State = 1721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1653;
				Match(T__32);
				State = 1654;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1655;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1656;
				Match(T__32);
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1657;
					Match(T__34);
					}
				}

				State = 1660;
				Match(T__8);
				State = 1661;
				Match(T__5);
				State = 1662;
				intExprList();
				State = 1663;
				Match(T__6);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1665;
				Match(T__13);
				State = 1666;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__33) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1667;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1668;
				Match(T__13);
				State = 1670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1669;
					Match(T__34);
					}
				}

				State = 1672;
				Match(T__8);
				State = 1673;
				Match(T__5);
				State = 1674;
				stringExprList();
				State = 1675;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1677;
				Match(T__13);
				State = 1682;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1678;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 1679;
					Match(T__36);
					State = 1680;
					Match(T__34);
					State = 1681;
					Match(T__37);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38) {
					{
					State = 1684;
					Match(T__38);
					}
				}

				State = 1687;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1688;
				Match(T__13);
				State = 1690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1689;
					Match(T__34);
					}
				}

				State = 1692;
				Match(T__8);
				State = 1693;
				Match(T__5);
				State = 1694;
				regexExprList();
				State = 1695;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1697;
				Match(T__13);
				State = 1699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 1698;
					Match(T__34);
					}
				}

				State = 1701;
				Match(T__39);
				State = 1702;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1703;
				Match(T__13);
				State = 1708;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__40:
					{
					State = 1704;
					Match(T__40);
					}
					break;
				case T__36:
					{
					State = 1705;
					Match(T__36);
					State = 1706;
					Match(T__34);
					State = 1707;
					Match(T__41);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1710;
				Match(T__42);
				State = 1711;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1712;
				Match(T__13);
				State = 1717;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__43:
					{
					State = 1713;
					Match(T__43);
					}
					break;
				case T__36:
					{
					State = 1714;
					Match(T__36);
					State = 1715;
					Match(T__34);
					State = 1716;
					Match(T__44);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1719;
				Match(T__42);
				{
				State = 1720;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesInputLocationContext datasourcesInputLocation() {
		DatasourcesInputLocationContext _localctx = new DatasourcesInputLocationContext(Context, State);
		EnterRule(_localctx, 238, RULE_datasourcesInputLocation);
		try {
			State = 1725;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1723;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1724;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourcesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourcesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourcesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourcesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourcesOutputLocationContext datasourcesOutputLocation() {
		DatasourcesOutputLocationContext _localctx = new DatasourcesOutputLocationContext(Context, State);
		EnterRule(_localctx, 240, RULE_datasourcesOutputLocation);
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1727;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1728;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceInputLocationContext datasourceInputLocation() {
		DatasourceInputLocationContext _localctx = new DatasourceInputLocationContext(Context, State);
		EnterRule(_localctx, 242, RULE_datasourceInputLocation);
		try {
			State = 1733;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1732;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		public DatasourceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceOutputLocationContext datasourceOutputLocation() {
		DatasourceOutputLocationContext _localctx = new DatasourceOutputLocationContext(Context, State);
		EnterRule(_localctx, 244, RULE_datasourceOutputLocation);
		try {
			State = 1737;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1735;
				fileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1736;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DirSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dirSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirSpecContext dirSpec() {
		DirSpecContext _localctx = new DirSpecContext(Context, State);
		EnterRule(_localctx, 246, RULE_dirSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739;
			Match(T__98);
			State = 1740;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedVarDeclContext typedVarDecl() {
			return GetRuleContext<TypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
			return GetRuleContext<ForeachEntityListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptBlockDefContext scriptBlockDef() {
			return GetRuleContext<ScriptBlockDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UntypedVarDeclContext untypedVarDecl() {
			return GetRuleContext<UntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
			return GetRuleContext<ForeachEntityListForUntypedVarDeclContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_forEachStatement);
		try {
			State = 1758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1742;
				Match(T__99);
				State = 1743;
				Match(T__5);
				State = 1744;
				typedVarDecl();
				State = 1745;
				Match(T__8);
				State = 1746;
				foreachEntityListForTypedVarDecl();
				State = 1747;
				Match(T__6);
				State = 1748;
				scriptBlockDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750;
				Match(T__99);
				State = 1751;
				Match(T__5);
				State = 1752;
				untypedVarDecl();
				State = 1753;
				Match(T__8);
				State = 1754;
				foreachEntityListForUntypedVarDecl();
				State = 1755;
				Match(T__6);
				State = 1756;
				scriptBlockDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
			return GetRuleContext<ForeachBlockListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
			return GetRuleContext<ForeachStoryListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
			return GetRuleContext<ForeachStringListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
			return GetRuleContext<ForeachRegexListForTypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForTypedVarDeclContext>(0);
		}
		public ForeachEntityListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForTypedVarDeclContext foreachEntityListForTypedVarDecl() {
		ForeachEntityListForTypedVarDeclContext _localctx = new ForeachEntityListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 250, RULE_foreachEntityListForTypedVarDecl);
		try {
			State = 1768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1760;
				foreachSpaceListForTypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1761;
				foreachBlockListForTypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1762;
				foreachDatasourceListForTypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1763;
				foreachDatasourceEntryListForTypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1764;
				foreachStoryListForTypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1765;
				foreachStringListForTypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1766;
				foreachRegexListForTypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1767;
				foreachIntegerListForTypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachEntityListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
			return GetRuleContext<ForeachSpaceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
			return GetRuleContext<ForeachBlockListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
			return GetRuleContext<ForeachDatasourceEntryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
			return GetRuleContext<ForeachStoryListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
			return GetRuleContext<ForeachStringListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
			return GetRuleContext<ForeachRegexListForUntypedVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
			return GetRuleContext<ForeachIntegerListForUntypedVarDeclContext>(0);
		}
		public ForeachEntityListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachEntityListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachEntityListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachEntityListForUntypedVarDeclContext foreachEntityListForUntypedVarDecl() {
		ForeachEntityListForUntypedVarDeclContext _localctx = new ForeachEntityListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 252, RULE_foreachEntityListForUntypedVarDecl);
		try {
			State = 1778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1770;
				foreachSpaceListForUntypedVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1771;
				foreachBlockListForUntypedVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1772;
				foreachDatasourceListForUntypedVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1773;
				foreachDatasourceEntryListForUntypedVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1774;
				foreachStoryListForUntypedVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1775;
				foreachStringListForUntypedVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1776;
				foreachRegexListForUntypedVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1777;
				foreachIntegerListForUntypedVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForTypedVarDeclContext foreachSpaceListForTypedVarDecl() {
		ForeachSpaceListForTypedVarDeclContext _localctx = new ForeachSpaceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 254, RULE_foreachSpaceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				{
				State = 1780;
				fileSpec();
				}
				break;
			case T__51:
				{
				State = 1781;
				spaceFileSpec();
				}
				break;
			case T__55:
			case T__88:
				{
				State = 1783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1782;
					Match(T__88);
					}
				}

				State = 1785;
				Match(T__55);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1788;
				Match(T__19);
				State = 1789;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachSpaceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceFileSpecContext spaceFileSpec() {
			return GetRuleContext<SpaceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceConstraintExprListContext spaceConstraintExprList() {
			return GetRuleContext<SpaceConstraintExprListContext>(0);
		}
		public ForeachSpaceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachSpaceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachSpaceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachSpaceListForUntypedVarDeclContext foreachSpaceListForUntypedVarDecl() {
		ForeachSpaceListForUntypedVarDeclContext _localctx = new ForeachSpaceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 256, RULE_foreachSpaceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
				{
				State = 1792;
				spaceFileSpec();
				}
				break;
			case T__55:
			case T__88:
				{
				State = 1794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__88) {
					{
					State = 1793;
					Match(T__88);
					}
				}

				State = 1796;
				Match(T__55);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1799;
				Match(T__19);
				State = 1800;
				spaceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForTypedVarDeclContext foreachBlockListForTypedVarDecl() {
		ForeachBlockListForTypedVarDeclContext _localctx = new ForeachBlockListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 258, RULE_foreachBlockListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				{
				State = 1803;
				fileSpec();
				}
				break;
			case T__52:
				{
				State = 1804;
				blockFileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1805;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1808;
				Match(T__19);
				State = 1809;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockFileSpecContext blockFileSpec() {
			return GetRuleContext<BlockFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintExprListContext blockConstraintExprList() {
			return GetRuleContext<BlockConstraintExprListContext>(0);
		}
		public ForeachBlockListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlockListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlockListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockListForUntypedVarDeclContext foreachBlockListForUntypedVarDecl() {
		ForeachBlockListForUntypedVarDeclContext _localctx = new ForeachBlockListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 260, RULE_foreachBlockListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__52:
				{
				State = 1812;
				blockFileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1813;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1816;
				Match(T__19);
				State = 1817;
				blockConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForTypedVarDeclContext foreachDatasourceListForTypedVarDecl() {
		ForeachDatasourceListForTypedVarDeclContext _localctx = new ForeachDatasourceListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 262, RULE_foreachDatasourceListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				{
				State = 1820;
				fileSpec();
				}
				break;
			case T__4:
				{
				State = 1821;
				datasourceFileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1822;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1825;
				Match(T__19);
				State = 1826;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceFileSpecContext datasourceFileSpec() {
			return GetRuleContext<DatasourceFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortSpaceSpecContext longOrShortSpaceSpec() {
			return GetRuleContext<LongOrShortSpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprListContext datasourceConstraintExprList() {
			return GetRuleContext<DatasourceConstraintExprListContext>(0);
		}
		public ForeachDatasourceListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceListForUntypedVarDeclContext foreachDatasourceListForUntypedVarDecl() {
		ForeachDatasourceListForUntypedVarDeclContext _localctx = new ForeachDatasourceListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 264, RULE_foreachDatasourceListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 1829;
				datasourceFileSpec();
				}
				break;
			case T__51:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1830;
				longOrShortSpaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1833;
				Match(T__19);
				State = 1834;
				datasourceConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForTypedVarDeclContext foreachDatasourceEntryListForTypedVarDecl() {
		ForeachDatasourceEntryListForTypedVarDeclContext _localctx = new ForeachDatasourceEntryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 266, RULE_foreachDatasourceEntryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				{
				State = 1837;
				fileSpec();
				}
				break;
			case T__103:
				{
				State = 1838;
				datasourceEntryFileSpec();
				}
				break;
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1839;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1842;
				Match(T__19);
				State = 1843;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachDatasourceEntryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
			return GetRuleContext<DatasourceEntryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
			return GetRuleContext<LongOrShortDatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public ForeachDatasourceEntryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachDatasourceEntryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachDatasourceEntryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachDatasourceEntryListForUntypedVarDeclContext foreachDatasourceEntryListForUntypedVarDecl() {
		ForeachDatasourceEntryListForUntypedVarDeclContext _localctx = new ForeachDatasourceEntryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 268, RULE_foreachDatasourceEntryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1848;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__103:
				{
				State = 1846;
				datasourceEntryFileSpec();
				}
				break;
			case T__4:
			case STRINGLITERAL:
			case VARID:
			case INTLITERAL:
				{
				State = 1847;
				longOrShortDatasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1850;
				Match(T__19);
				State = 1851;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForTypedVarDeclContext foreachStoryListForTypedVarDecl() {
		ForeachStoryListForTypedVarDeclContext _localctx = new ForeachStoryListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 270, RULE_foreachStoryListForTypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				{
				State = 1854;
				fileSpec();
				}
				break;
			case T__54:
				{
				State = 1855;
				storyFileSpec();
				}
				break;
			case T__51:
			case VARID:
				{
				State = 1856;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1859;
				Match(T__19);
				State = 1860;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStoryListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFileSpecContext storyFileSpec() {
			return GetRuleContext<StoryFileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintExprListContext storyConstraintExprList() {
			return GetRuleContext<StoryConstraintExprListContext>(0);
		}
		public ForeachStoryListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStoryListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStoryListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStoryListForUntypedVarDeclContext foreachStoryListForUntypedVarDecl() {
		ForeachStoryListForUntypedVarDeclContext _localctx = new ForeachStoryListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 272, RULE_foreachStoryListForUntypedVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__54:
				{
				State = 1863;
				storyFileSpec();
				}
				break;
			case T__51:
			case VARID:
				{
				State = 1864;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 1867;
				Match(T__19);
				State = 1868;
				storyConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public ForeachStringListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForTypedVarDeclContext foreachStringListForTypedVarDecl() {
		ForeachStringListForTypedVarDeclContext _localctx = new ForeachStringListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 274, RULE_foreachStringListForTypedVarDecl);
		try {
			State = 1878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1871;
				fileSpec();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1872;
				Match(T__53);
				State = 1873;
				fileSpec();
				}
				break;
			case T__100:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1874;
				Match(T__100);
				State = 1875;
				stringExprList();
				State = 1876;
				Match(T__101);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStringListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public ForeachStringListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStringListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStringListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStringListForUntypedVarDeclContext foreachStringListForUntypedVarDecl() {
		ForeachStringListForUntypedVarDeclContext _localctx = new ForeachStringListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 276, RULE_foreachStringListForUntypedVarDecl);
		try {
			State = 1883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				Match(T__53);
				State = 1881;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1882;
				stringExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public ForeachRegexListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForTypedVarDeclContext foreachRegexListForTypedVarDecl() {
		ForeachRegexListForTypedVarDeclContext _localctx = new ForeachRegexListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 278, RULE_foreachRegexListForTypedVarDecl);
		try {
			State = 1889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1885;
				fileSpec();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1886;
				Match(T__38);
				State = 1887;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
			case REGEXLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1888;
				regexExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachRegexListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public ForeachRegexListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachRegexListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachRegexListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachRegexListForUntypedVarDeclContext foreachRegexListForUntypedVarDecl() {
		ForeachRegexListForUntypedVarDeclContext _localctx = new ForeachRegexListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 280, RULE_foreachRegexListForUntypedVarDecl);
		try {
			State = 1894;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1891;
				Match(T__38);
				State = 1892;
				fileSpec();
				}
				break;
			case STRINGLITERAL:
			case VARID:
			case REGEXLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1893;
				regexExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForTypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public ForeachIntegerListForTypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForTypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForTypedVarDeclContext foreachIntegerListForTypedVarDecl() {
		ForeachIntegerListForTypedVarDeclContext _localctx = new ForeachIntegerListForTypedVarDeclContext(Context, State);
		EnterRule(_localctx, 282, RULE_foreachIntegerListForTypedVarDecl);
		try {
			State = 1900;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1896;
				fileSpec();
				}
				break;
			case T__102:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1897;
				Match(T__102);
				State = 1898;
				fileSpec();
				}
				break;
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1899;
				intExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachIntegerListForUntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public ForeachIntegerListForUntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachIntegerListForUntypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachIntegerListForUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachIntegerListForUntypedVarDeclContext foreachIntegerListForUntypedVarDecl() {
		ForeachIntegerListForUntypedVarDeclContext _localctx = new ForeachIntegerListForUntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 284, RULE_foreachIntegerListForUntypedVarDecl);
		try {
			State = 1905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__102:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1902;
				Match(T__102);
				State = 1903;
				fileSpec();
				}
				break;
			case VARID:
			case INTLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1904;
				intExprList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongOrShortDatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceShortSpecContext datasourceShortSpec() {
			return GetRuleContext<DatasourceShortSpecContext>(0);
		}
		public LongOrShortDatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longOrShortDatasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongOrShortDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongOrShortDatasourceSpecContext longOrShortDatasourceSpec() {
		LongOrShortDatasourceSpecContext _localctx = new LongOrShortDatasourceSpecContext(Context, State);
		EnterRule(_localctx, 286, RULE_longOrShortDatasourceSpec);
		try {
			State = 1909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907;
				datasourceSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1908;
				datasourceShortSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceFileSpecContext spaceFileSpec() {
		SpaceFileSpecContext _localctx = new SpaceFileSpecContext(Context, State);
		EnterRule(_localctx, 288, RULE_spaceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1911;
			Match(T__51);
			State = 1912;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public BlockFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockFileSpecContext blockFileSpec() {
		BlockFileSpecContext _localctx = new BlockFileSpecContext(Context, State);
		EnterRule(_localctx, 290, RULE_blockFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			Match(T__52);
			State = 1915;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceFileSpecContext datasourceFileSpec() {
		DatasourceFileSpecContext _localctx = new DatasourceFileSpecContext(Context, State);
		EnterRule(_localctx, 292, RULE_datasourceFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917;
			Match(T__4);
			State = 1918;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryFileSpecContext datasourceEntryFileSpec() {
		DatasourceEntryFileSpecContext _localctx = new DatasourceEntryFileSpecContext(Context, State);
		EnterRule(_localctx, 294, RULE_datasourceEntryFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1920;
			Match(T__103);
			State = 1921;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StoryFileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryFileSpecContext storyFileSpec() {
		StoryFileSpecContext _localctx = new StoryFileSpecContext(Context, State);
		EnterRule(_localctx, 296, RULE_storyFileSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			Match(T__54);
			State = 1924;
			fileSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public UntypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untypedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntypedVarDeclContext untypedVarDecl() {
		UntypedVarDeclContext _localctx = new UntypedVarDeclContext(Context, State);
		EnterRule(_localctx, 298, RULE_untypedVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926;
			Match(T__50);
			State = 1927;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarDeclContext spaceVarDecl() {
			return GetRuleContext<SpaceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarDeclContext blockVarDecl() {
			return GetRuleContext<BlockVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceVarDeclContext datasourceVarDecl() {
			return GetRuleContext<DatasourceVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
			return GetRuleContext<DatasourceEntryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarDeclContext storyVarDecl() {
			return GetRuleContext<StoryVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarDeclContext regexVarDecl() {
			return GetRuleContext<RegexVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerVarDeclContext integerVarDecl() {
			return GetRuleContext<IntegerVarDeclContext>(0);
		}
		public TypedVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedVarDeclContext typedVarDecl() {
		TypedVarDeclContext _localctx = new TypedVarDeclContext(Context, State);
		EnterRule(_localctx, 300, RULE_typedVarDecl);
		try {
			State = 1937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1929;
				spaceVarDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1930;
				blockVarDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1931;
				datasourceVarDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1932;
				datasourceEntryVarDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1933;
				storyVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1934;
				stringVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1935;
				regexVarDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1936;
				integerVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public SpaceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarDeclContext spaceVarDecl() {
		SpaceVarDeclContext _localctx = new SpaceVarDeclContext(Context, State);
		EnterRule(_localctx, 302, RULE_spaceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939;
			Match(T__51);
			State = 1940;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarDeclContext blockVarDecl() {
		BlockVarDeclContext _localctx = new BlockVarDeclContext(Context, State);
		EnterRule(_localctx, 304, RULE_blockVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942;
			Match(T__52);
			State = 1943;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceVarDeclContext datasourceVarDecl() {
		DatasourceVarDeclContext _localctx = new DatasourceVarDeclContext(Context, State);
		EnterRule(_localctx, 306, RULE_datasourceVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			Match(T__4);
			State = 1946;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarDeclContext datasourceEntryVarDecl() {
		DatasourceEntryVarDeclContext _localctx = new DatasourceEntryVarDeclContext(Context, State);
		EnterRule(_localctx, 308, RULE_datasourceEntryVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1948;
			Match(T__4);
			State = 1949;
			Match(T__16);
			State = 1950;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StoryVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarDeclContext storyVarDecl() {
		StoryVarDeclContext _localctx = new StoryVarDeclContext(Context, State);
		EnterRule(_localctx, 310, RULE_storyVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952;
			Match(T__54);
			State = 1953;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 312, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			Match(T__53);
			State = 1956;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarDeclContext regexVarDecl() {
		RegexVarDeclContext _localctx = new RegexVarDeclContext(Context, State);
		EnterRule(_localctx, 314, RULE_regexVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			Match(T__38);
			State = 1959;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public IntegerVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerVarDeclContext integerVarDecl() {
		IntegerVarDeclContext _localctx = new IntegerVarDeclContext(Context, State);
		EnterRule(_localctx, 316, RULE_integerVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1961;
			Match(T__102);
			State = 1962;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public DatasourceEntriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesInputLocationContext datasourceEntriesInputLocation() {
		DatasourceEntriesInputLocationContext _localctx = new DatasourceEntriesInputLocationContext(Context, State);
		EnterRule(_localctx, 318, RULE_datasourceEntriesInputLocation);
		try {
			State = 1966;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case T__28:
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1964;
				fileSpec();
				}
				break;
			case T__4:
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1965;
				datasourceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,112,1969,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,1,0,1,0,1,1,5,1,324,8,1,10,1,12,1,327,9,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,417,8,2,1,
		3,1,3,3,3,421,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,432,8,4,1,4,
		1,4,1,4,3,4,437,8,4,1,5,1,5,1,5,1,5,3,5,443,8,5,1,6,1,6,1,6,1,6,3,6,449,
		8,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,457,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,465,
		8,8,1,9,1,9,1,9,1,9,1,9,3,9,472,8,9,1,9,1,9,1,9,3,9,477,8,9,1,10,1,10,
		1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,504,8,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,515,8,15,1,16,1,16,1,16,1,16,1,16,
		1,16,3,16,523,8,16,1,16,1,16,3,16,527,8,16,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,538,8,17,1,17,3,17,541,8,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,3,18,552,8,18,1,19,1,19,1,19,3,19,557,8,19,1,
		20,1,20,1,20,1,21,1,21,1,21,3,21,565,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
		3,22,573,8,22,1,23,1,23,3,23,577,8,23,1,24,3,24,580,8,24,1,24,1,24,1,24,
		1,25,1,25,3,25,587,8,25,1,26,1,26,1,26,3,26,592,8,26,1,27,1,27,1,27,3,
		27,597,8,27,1,27,1,27,1,27,1,27,3,27,603,8,27,1,27,1,27,1,27,1,27,1,27,
		1,27,3,27,611,8,27,1,27,1,27,3,27,615,8,27,1,28,1,28,1,28,1,28,1,28,3,
		28,622,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,634,
		8,28,1,28,1,28,1,28,1,28,3,28,640,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,3,28,649,8,28,1,28,3,28,652,8,28,1,28,1,28,1,28,3,28,657,8,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,666,8,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,3,28,675,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,684,8,28,
		1,28,1,28,3,28,688,8,28,1,29,1,29,1,29,1,29,1,29,3,29,695,8,29,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
		33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,739,
		8,35,3,35,741,8,35,1,36,1,36,1,36,1,36,3,36,747,8,36,1,37,1,37,1,37,1,
		37,3,37,753,8,37,1,38,1,38,1,38,1,38,3,38,759,8,38,1,39,1,39,1,39,1,39,
		3,39,765,8,39,1,40,1,40,1,40,1,40,3,40,771,8,40,1,41,1,41,1,41,1,41,1,
		41,3,41,778,8,41,1,42,1,42,1,42,3,42,783,8,42,1,42,3,42,786,8,42,1,43,
		1,43,1,44,1,44,3,44,792,8,44,1,45,1,45,1,45,1,45,1,45,3,45,799,8,45,1,
		45,1,45,3,45,803,8,45,1,46,1,46,1,46,1,46,3,46,809,8,46,1,46,3,46,812,
		8,46,1,47,1,47,1,47,1,47,1,47,3,47,819,8,47,1,47,1,47,1,47,3,47,824,8,
		47,1,48,1,48,1,48,1,48,1,48,3,48,831,8,48,1,48,3,48,834,8,48,1,49,1,49,
		1,49,1,49,3,49,840,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,848,8,50,1,
		51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
		54,1,54,3,54,866,8,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
		877,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,
		59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,3,
		62,905,8,62,1,63,3,63,908,8,63,1,63,1,63,1,63,1,64,3,64,914,8,64,1,64,
		1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,3,68,927,8,68,1,69,1,
		69,1,70,1,70,3,70,933,8,70,1,71,1,71,3,71,937,8,71,1,72,1,72,3,72,941,
		8,72,1,73,1,73,3,73,945,8,73,1,74,1,74,3,74,949,8,74,1,75,1,75,3,75,953,
		8,75,1,76,1,76,3,76,957,8,76,1,77,1,77,3,77,961,8,77,1,78,1,78,1,78,1,
		78,3,78,967,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,3,80,985,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,
		81,1,81,3,81,995,8,81,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1003,8,82,1,83,
		1,83,1,83,3,83,1008,8,83,1,84,1,84,1,84,3,84,1013,8,84,1,84,1,84,1,84,
		1,84,3,84,1019,8,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1027,8,84,1,84,
		1,84,3,84,1031,8,84,1,85,1,85,1,85,1,85,1,85,3,85,1038,8,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1050,8,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1062,8,85,1,85,3,85,1065,8,85,
		1,85,1,85,1,85,3,85,1070,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,
		1079,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1088,8,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,3,85,1097,8,85,1,85,1,85,3,85,1101,8,85,1,86,
		1,86,1,86,3,86,1106,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,1,87,3,87,1137,8,87,1,88,1,88,1,88,3,88,1142,
		8,88,1,89,1,89,1,89,3,89,1147,8,89,1,90,3,90,1150,8,90,1,90,1,90,1,91,
		1,91,1,91,1,92,1,92,1,92,3,92,1160,8,92,1,93,1,93,1,93,1,93,1,93,1,94,
		1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,
		1,96,1,96,3,96,1184,8,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1192,8,96,
		1,97,1,97,1,97,1,97,1,97,1,97,3,97,1200,8,97,1,98,1,98,1,98,1,98,1,98,
		1,98,3,98,1208,8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1216,8,99,1,100,
		1,100,1,100,3,100,1221,8,100,1,101,1,101,1,101,3,101,1226,8,101,1,101,
		1,101,1,101,1,101,3,101,1232,8,101,1,101,1,101,1,101,1,101,1,101,1,101,
		3,101,1240,8,101,1,101,1,101,3,101,1244,8,101,1,102,1,102,1,102,1,102,
		1,102,3,102,1251,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		1,102,1,102,3,102,1263,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		1,102,1,102,1,102,3,102,1275,8,102,1,102,3,102,1278,8,102,1,102,1,102,
		1,102,3,102,1283,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
		1292,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1301,8,102,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1310,8,102,1,102,1,102,
		1,102,3,102,1315,8,102,1,102,1,102,3,102,1319,8,102,1,102,3,102,1322,8,
		102,1,102,1,102,1,102,3,102,1327,8,102,1,102,1,102,3,102,1331,8,102,1,
		102,3,102,1334,8,102,1,102,3,102,1337,8,102,1,102,1,102,1,102,1,102,1,
		102,1,102,3,102,1345,8,102,1,102,1,102,1,102,1,102,1,102,3,102,1352,8,
		102,1,102,3,102,1355,8,102,1,102,1,102,3,102,1359,8,102,1,102,1,102,1,
		102,1,102,1,102,3,102,1366,8,102,1,102,1,102,1,102,3,102,1371,8,102,1,
		102,1,102,1,102,1,102,1,102,3,102,1378,8,102,1,102,1,102,1,102,3,102,1383,
		8,102,1,102,1,102,1,102,1,102,1,102,3,102,1390,8,102,1,102,3,102,1393,
		8,102,1,102,1,102,3,102,1397,8,102,1,102,1,102,1,102,1,102,1,102,3,102,
		1404,8,102,1,102,1,102,1,102,3,102,1409,8,102,1,102,1,102,1,102,1,102,
		1,102,3,102,1416,8,102,1,102,1,102,1,102,3,102,1421,8,102,1,102,1,102,
		3,102,1425,8,102,1,102,3,102,1428,8,102,1,102,3,102,1431,8,102,1,102,1,
		102,1,102,1,102,1,102,1,102,3,102,1439,8,102,1,102,1,102,3,102,1443,8,
		102,1,102,3,102,1446,8,102,1,102,3,102,1449,8,102,1,102,1,102,1,102,1,
		102,1,102,1,102,3,102,1457,8,102,1,103,1,103,1,104,1,104,1,104,3,104,1464,
		8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1474,8,105,
		1,105,3,105,1477,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		3,106,1487,8,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1495,8,107,
		1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1505,8,108,1,109,
		1,109,1,109,3,109,1510,8,109,1,110,1,110,1,110,1,110,3,110,1516,8,110,
		1,111,1,111,1,111,3,111,1521,8,111,1,112,1,112,1,112,3,112,1526,8,112,
		1,112,1,112,1,112,1,112,3,112,1532,8,112,1,112,1,112,1,112,1,112,1,112,
		1,112,3,112,1540,8,112,1,112,1,112,3,112,1544,8,112,1,113,1,113,1,113,
		1,113,1,113,3,113,1551,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,3,113,1563,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,1,113,1,113,3,113,1575,8,113,1,113,3,113,1578,8,113,1,113,
		1,113,1,113,3,113,1583,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		3,113,1592,8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1601,
		8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1610,8,113,1,113,
		1,113,3,113,1614,8,113,1,114,1,114,1,114,3,114,1619,8,114,1,115,1,115,
		1,115,3,115,1624,8,115,1,116,1,116,1,116,3,116,1629,8,116,1,117,1,117,
		1,117,3,117,1634,8,117,1,117,1,117,1,117,1,117,3,117,1640,8,117,1,117,
		1,117,1,117,1,117,1,117,1,117,3,117,1648,8,117,1,117,1,117,3,117,1652,
		8,117,1,118,1,118,1,118,1,118,1,118,3,118,1659,8,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1671,8,118,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1683,8,118,1,118,
		3,118,1686,8,118,1,118,1,118,1,118,3,118,1691,8,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,3,118,1700,8,118,1,118,1,118,1,118,1,118,1,118,
		1,118,1,118,3,118,1709,8,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
		3,118,1718,8,118,1,118,1,118,3,118,1722,8,118,1,119,1,119,3,119,1726,8,
		119,1,120,1,120,3,120,1730,8,120,1,121,1,121,3,121,1734,8,121,1,122,1,
		122,3,122,1738,8,122,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,
		124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,
		1759,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1769,
		8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,1779,8,126,
		1,127,1,127,1,127,3,127,1784,8,127,1,127,3,127,1787,8,127,1,127,1,127,
		3,127,1791,8,127,1,128,1,128,3,128,1795,8,128,1,128,3,128,1798,8,128,1,
		128,1,128,3,128,1802,8,128,1,129,1,129,1,129,3,129,1807,8,129,1,129,1,
		129,3,129,1811,8,129,1,130,1,130,3,130,1815,8,130,1,130,1,130,3,130,1819,
		8,130,1,131,1,131,1,131,3,131,1824,8,131,1,131,1,131,3,131,1828,8,131,
		1,132,1,132,3,132,1832,8,132,1,132,1,132,3,132,1836,8,132,1,133,1,133,
		1,133,3,133,1841,8,133,1,133,1,133,3,133,1845,8,133,1,134,1,134,3,134,
		1849,8,134,1,134,1,134,3,134,1853,8,134,1,135,1,135,1,135,3,135,1858,8,
		135,1,135,1,135,3,135,1862,8,135,1,136,1,136,3,136,1866,8,136,1,136,1,
		136,3,136,1870,8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,1879,
		8,137,1,138,1,138,1,138,3,138,1884,8,138,1,139,1,139,1,139,1,139,3,139,
		1890,8,139,1,140,1,140,1,140,3,140,1895,8,140,1,141,1,141,1,141,1,141,
		3,141,1901,8,141,1,142,1,142,1,142,3,142,1906,8,142,1,143,1,143,3,143,
		1910,8,143,1,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,1,147,
		1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,149,1,150,1,150,1,150,1,150,
		1,150,1,150,1,150,1,150,3,150,1938,8,150,1,151,1,151,1,151,1,152,1,152,
		1,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,156,
		1,156,1,156,1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,3,159,1967,
		8,159,1,159,0,0,160,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
		126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
		162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
		198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
		234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
		270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
		306,308,310,312,314,316,318,0,17,1,0,8,9,2,0,9,9,18,18,3,0,4,4,11,11,25,
		26,1,0,28,29,1,0,31,32,2,0,15,15,34,34,2,0,14,14,27,27,1,0,107,109,2,0,
		107,107,109,109,1,0,107,108,1,0,69,71,1,0,108,109,1,0,79,82,1,0,84,86,
		2,0,14,14,30,30,2,0,107,108,110,110,2,0,14,14,16,16,2168,0,320,1,0,0,0,
		2,325,1,0,0,0,4,416,1,0,0,0,6,418,1,0,0,0,8,424,1,0,0,0,10,438,1,0,0,0,
		12,444,1,0,0,0,14,453,1,0,0,0,16,464,1,0,0,0,18,466,1,0,0,0,20,478,1,0,
		0,0,22,483,1,0,0,0,24,490,1,0,0,0,26,496,1,0,0,0,28,503,1,0,0,0,30,505,
		1,0,0,0,32,516,1,0,0,0,34,528,1,0,0,0,36,542,1,0,0,0,38,553,1,0,0,0,40,
		558,1,0,0,0,42,561,1,0,0,0,44,572,1,0,0,0,46,576,1,0,0,0,48,579,1,0,0,
		0,50,586,1,0,0,0,52,588,1,0,0,0,54,614,1,0,0,0,56,687,1,0,0,0,58,694,1,
		0,0,0,60,696,1,0,0,0,62,698,1,0,0,0,64,703,1,0,0,0,66,708,1,0,0,0,68,713,
		1,0,0,0,70,740,1,0,0,0,72,742,1,0,0,0,74,748,1,0,0,0,76,754,1,0,0,0,78,
		760,1,0,0,0,80,766,1,0,0,0,82,772,1,0,0,0,84,785,1,0,0,0,86,787,1,0,0,
		0,88,791,1,0,0,0,90,802,1,0,0,0,92,811,1,0,0,0,94,823,1,0,0,0,96,833,1,
		0,0,0,98,835,1,0,0,0,100,847,1,0,0,0,102,849,1,0,0,0,104,853,1,0,0,0,106,
		857,1,0,0,0,108,861,1,0,0,0,110,876,1,0,0,0,112,878,1,0,0,0,114,883,1,
		0,0,0,116,886,1,0,0,0,118,890,1,0,0,0,120,893,1,0,0,0,122,897,1,0,0,0,
		124,904,1,0,0,0,126,907,1,0,0,0,128,913,1,0,0,0,130,918,1,0,0,0,132,920,
		1,0,0,0,134,922,1,0,0,0,136,926,1,0,0,0,138,928,1,0,0,0,140,932,1,0,0,
		0,142,936,1,0,0,0,144,940,1,0,0,0,146,944,1,0,0,0,148,948,1,0,0,0,150,
		952,1,0,0,0,152,956,1,0,0,0,154,960,1,0,0,0,156,966,1,0,0,0,158,968,1,
		0,0,0,160,976,1,0,0,0,162,986,1,0,0,0,164,996,1,0,0,0,166,1004,1,0,0,0,
		168,1030,1,0,0,0,170,1100,1,0,0,0,172,1102,1,0,0,0,174,1136,1,0,0,0,176,
		1138,1,0,0,0,178,1143,1,0,0,0,180,1149,1,0,0,0,182,1153,1,0,0,0,184,1159,
		1,0,0,0,186,1161,1,0,0,0,188,1166,1,0,0,0,190,1171,1,0,0,0,192,1179,1,
		0,0,0,194,1193,1,0,0,0,196,1201,1,0,0,0,198,1209,1,0,0,0,200,1217,1,0,
		0,0,202,1243,1,0,0,0,204,1456,1,0,0,0,206,1458,1,0,0,0,208,1460,1,0,0,
		0,210,1465,1,0,0,0,212,1478,1,0,0,0,214,1488,1,0,0,0,216,1496,1,0,0,0,
		218,1506,1,0,0,0,220,1515,1,0,0,0,222,1517,1,0,0,0,224,1543,1,0,0,0,226,
		1613,1,0,0,0,228,1615,1,0,0,0,230,1620,1,0,0,0,232,1625,1,0,0,0,234,1651,
		1,0,0,0,236,1721,1,0,0,0,238,1725,1,0,0,0,240,1729,1,0,0,0,242,1733,1,
		0,0,0,244,1737,1,0,0,0,246,1739,1,0,0,0,248,1758,1,0,0,0,250,1768,1,0,
		0,0,252,1778,1,0,0,0,254,1786,1,0,0,0,256,1797,1,0,0,0,258,1806,1,0,0,
		0,260,1814,1,0,0,0,262,1823,1,0,0,0,264,1831,1,0,0,0,266,1840,1,0,0,0,
		268,1848,1,0,0,0,270,1857,1,0,0,0,272,1865,1,0,0,0,274,1878,1,0,0,0,276,
		1883,1,0,0,0,278,1889,1,0,0,0,280,1894,1,0,0,0,282,1900,1,0,0,0,284,1905,
		1,0,0,0,286,1909,1,0,0,0,288,1911,1,0,0,0,290,1914,1,0,0,0,292,1917,1,
		0,0,0,294,1920,1,0,0,0,296,1923,1,0,0,0,298,1926,1,0,0,0,300,1937,1,0,
		0,0,302,1939,1,0,0,0,304,1942,1,0,0,0,306,1945,1,0,0,0,308,1948,1,0,0,
		0,310,1952,1,0,0,0,312,1955,1,0,0,0,314,1958,1,0,0,0,316,1961,1,0,0,0,
		318,1966,1,0,0,0,320,321,3,2,1,0,321,1,1,0,0,0,322,324,3,4,2,0,323,322,
		1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,3,1,0,0,0,
		327,325,1,0,0,0,328,329,3,58,29,0,329,330,5,105,0,0,330,417,1,0,0,0,331,
		332,3,70,35,0,332,333,5,105,0,0,333,417,1,0,0,0,334,335,3,100,50,0,335,
		336,5,105,0,0,336,417,1,0,0,0,337,338,3,110,55,0,338,339,5,105,0,0,339,
		417,1,0,0,0,340,341,3,180,90,0,341,342,5,105,0,0,342,417,1,0,0,0,343,344,
		3,182,91,0,344,345,5,105,0,0,345,417,1,0,0,0,346,347,3,184,92,0,347,348,
		5,105,0,0,348,417,1,0,0,0,349,350,3,162,81,0,350,351,5,105,0,0,351,417,
		1,0,0,0,352,353,3,108,54,0,353,354,5,105,0,0,354,417,1,0,0,0,355,356,3,
		162,81,0,356,357,5,105,0,0,357,417,1,0,0,0,358,359,3,192,96,0,359,360,
		5,105,0,0,360,417,1,0,0,0,361,362,3,194,97,0,362,363,5,105,0,0,363,417,
		1,0,0,0,364,365,3,196,98,0,365,366,5,105,0,0,366,417,1,0,0,0,367,368,3,
		198,99,0,368,369,5,105,0,0,369,417,1,0,0,0,370,371,3,210,105,0,371,372,
		5,105,0,0,372,417,1,0,0,0,373,374,3,164,82,0,374,375,5,105,0,0,375,417,
		1,0,0,0,376,377,3,214,107,0,377,378,5,105,0,0,378,417,1,0,0,0,379,380,
		3,8,4,0,380,381,5,105,0,0,381,417,1,0,0,0,382,383,3,12,6,0,383,384,5,105,
		0,0,384,417,1,0,0,0,385,386,3,10,5,0,386,387,5,105,0,0,387,417,1,0,0,0,
		388,389,3,18,9,0,389,390,5,105,0,0,390,417,1,0,0,0,391,392,3,20,10,0,392,
		393,5,105,0,0,393,417,1,0,0,0,394,395,3,22,11,0,395,396,5,105,0,0,396,
		417,1,0,0,0,397,398,3,30,15,0,398,399,5,105,0,0,399,417,1,0,0,0,400,401,
		3,32,16,0,401,402,5,105,0,0,402,417,1,0,0,0,403,404,3,34,17,0,404,405,
		5,105,0,0,405,417,1,0,0,0,406,407,3,36,18,0,407,408,5,105,0,0,408,417,
		1,0,0,0,409,410,3,212,106,0,410,411,5,105,0,0,411,417,1,0,0,0,412,413,
		5,1,0,0,413,417,5,105,0,0,414,417,3,6,3,0,415,417,3,248,124,0,416,328,
		1,0,0,0,416,331,1,0,0,0,416,334,1,0,0,0,416,337,1,0,0,0,416,340,1,0,0,
		0,416,343,1,0,0,0,416,346,1,0,0,0,416,349,1,0,0,0,416,352,1,0,0,0,416,
		355,1,0,0,0,416,358,1,0,0,0,416,361,1,0,0,0,416,364,1,0,0,0,416,367,1,
		0,0,0,416,370,1,0,0,0,416,373,1,0,0,0,416,376,1,0,0,0,416,379,1,0,0,0,
		416,382,1,0,0,0,416,385,1,0,0,0,416,388,1,0,0,0,416,391,1,0,0,0,416,394,
		1,0,0,0,416,397,1,0,0,0,416,400,1,0,0,0,416,403,1,0,0,0,416,406,1,0,0,
		0,416,409,1,0,0,0,416,412,1,0,0,0,416,414,1,0,0,0,416,415,1,0,0,0,417,
		5,1,0,0,0,418,420,5,2,0,0,419,421,3,2,1,0,420,419,1,0,0,0,420,421,1,0,
		0,0,421,422,1,0,0,0,422,423,5,3,0,0,423,7,1,0,0,0,424,425,5,4,0,0,425,
		431,5,5,0,0,426,432,3,230,115,0,427,428,5,6,0,0,428,429,3,14,7,0,429,430,
		5,7,0,0,430,432,1,0,0,0,431,426,1,0,0,0,431,427,1,0,0,0,432,433,1,0,0,
		0,433,436,7,0,0,0,434,437,3,84,42,0,435,437,3,86,43,0,436,434,1,0,0,0,
		436,435,1,0,0,0,437,9,1,0,0,0,438,439,5,10,0,0,439,442,5,5,0,0,440,443,
		3,98,49,0,441,443,3,96,48,0,442,440,1,0,0,0,442,441,1,0,0,0,443,11,1,0,
		0,0,444,445,5,11,0,0,445,448,5,5,0,0,446,449,3,98,49,0,447,449,3,96,48,
		0,448,446,1,0,0,0,448,447,1,0,0,0,449,450,1,0,0,0,450,451,5,12,0,0,451,
		452,3,14,7,0,452,13,1,0,0,0,453,456,3,16,8,0,454,455,5,13,0,0,455,457,
		3,14,7,0,456,454,1,0,0,0,456,457,1,0,0,0,457,15,1,0,0,0,458,459,5,14,0,
		0,459,460,5,15,0,0,460,465,3,230,115,0,461,462,5,16,0,0,462,463,5,15,0,
		0,463,465,3,230,115,0,464,458,1,0,0,0,464,461,1,0,0,0,465,17,1,0,0,0,466,
		467,5,4,0,0,467,468,5,5,0,0,468,471,5,17,0,0,469,472,3,230,115,0,470,472,
		3,42,21,0,471,469,1,0,0,0,471,470,1,0,0,0,472,473,1,0,0,0,473,476,7,0,
		0,0,474,477,3,96,48,0,475,477,3,98,49,0,476,474,1,0,0,0,476,475,1,0,0,
		0,477,19,1,0,0,0,478,479,5,10,0,0,479,480,5,5,0,0,480,481,5,17,0,0,481,
		482,3,26,13,0,482,21,1,0,0,0,483,484,5,11,0,0,484,485,5,5,0,0,485,486,
		5,17,0,0,486,487,3,26,13,0,487,488,5,12,0,0,488,489,3,42,21,0,489,23,1,
		0,0,0,490,491,5,5,0,0,491,492,5,17,0,0,492,493,3,28,14,0,493,494,7,1,0,
		0,494,495,3,96,48,0,495,25,1,0,0,0,496,497,3,28,14,0,497,498,7,1,0,0,498,
		499,3,96,48,0,499,27,1,0,0,0,500,504,3,178,89,0,501,504,3,230,115,0,502,
		504,5,108,0,0,503,500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,29,1,
		0,0,0,505,506,5,11,0,0,506,507,5,5,0,0,507,508,5,19,0,0,508,509,5,9,0,
		0,509,510,3,96,48,0,510,511,5,12,0,0,511,514,3,42,21,0,512,513,5,20,0,
		0,513,515,3,52,26,0,514,512,1,0,0,0,514,515,1,0,0,0,515,31,1,0,0,0,516,
		517,5,10,0,0,517,518,5,5,0,0,518,519,5,19,0,0,519,522,7,1,0,0,520,523,
		3,96,48,0,521,523,3,98,49,0,522,520,1,0,0,0,522,521,1,0,0,0,523,526,1,
		0,0,0,524,525,5,20,0,0,525,527,3,52,26,0,526,524,1,0,0,0,526,527,1,0,0,
		0,527,33,1,0,0,0,528,529,5,21,0,0,529,530,5,5,0,0,530,531,5,19,0,0,531,
		532,7,1,0,0,532,533,3,46,23,0,533,534,5,22,0,0,534,537,3,50,25,0,535,536,
		5,20,0,0,536,538,3,52,26,0,537,535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,
		0,0,539,541,3,38,19,0,540,539,1,0,0,0,540,541,1,0,0,0,541,35,1,0,0,0,542,
		543,5,23,0,0,543,544,5,5,0,0,544,545,5,19,0,0,545,546,7,1,0,0,546,547,
		3,46,23,0,547,548,5,22,0,0,548,551,3,46,23,0,549,550,5,20,0,0,550,552,
		3,52,26,0,551,549,1,0,0,0,551,552,1,0,0,0,552,37,1,0,0,0,553,556,3,40,
		20,0,554,555,5,13,0,0,555,557,3,38,19,0,556,554,1,0,0,0,556,557,1,0,0,
		0,557,39,1,0,0,0,558,559,5,24,0,0,559,560,7,2,0,0,560,41,1,0,0,0,561,564,
		3,44,22,0,562,563,5,13,0,0,563,565,3,42,21,0,564,562,1,0,0,0,564,565,1,
		0,0,0,565,43,1,0,0,0,566,567,5,14,0,0,567,568,5,15,0,0,568,573,3,230,115,
		0,569,570,5,27,0,0,570,571,5,15,0,0,571,573,3,230,115,0,572,566,1,0,0,
		0,572,569,1,0,0,0,573,45,1,0,0,0,574,577,3,286,143,0,575,577,3,128,64,
		0,576,574,1,0,0,0,576,575,1,0,0,0,577,47,1,0,0,0,578,580,7,3,0,0,579,578,
		1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,5,30,0,0,582,583,3,230,
		115,0,583,49,1,0,0,0,584,587,3,286,143,0,585,587,3,128,64,0,586,584,1,
		0,0,0,586,585,1,0,0,0,587,51,1,0,0,0,588,591,3,54,27,0,589,590,7,4,0,0,
		590,592,3,52,26,0,591,589,1,0,0,0,591,592,1,0,0,0,592,53,1,0,0,0,593,596,
		3,56,28,0,594,595,7,4,0,0,595,597,3,54,27,0,596,594,1,0,0,0,596,597,1,
		0,0,0,597,615,1,0,0,0,598,599,5,6,0,0,599,602,3,56,28,0,600,601,7,4,0,
		0,601,603,3,54,27,0,602,600,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,
		605,5,7,0,0,605,615,1,0,0,0,606,607,5,6,0,0,607,610,3,54,27,0,608,609,
		7,4,0,0,609,611,3,54,27,0,610,608,1,0,0,0,610,611,1,0,0,0,611,612,1,0,
		0,0,612,613,5,7,0,0,613,615,1,0,0,0,614,593,1,0,0,0,614,598,1,0,0,0,614,
		606,1,0,0,0,615,55,1,0,0,0,616,617,5,33,0,0,617,618,7,5,0,0,618,688,3,
		178,89,0,619,621,5,33,0,0,620,622,5,35,0,0,621,620,1,0,0,0,621,622,1,0,
		0,0,622,623,1,0,0,0,623,624,5,9,0,0,624,625,5,6,0,0,625,626,3,176,88,0,
		626,627,5,7,0,0,627,688,1,0,0,0,628,629,7,6,0,0,629,630,7,5,0,0,630,688,
		3,230,115,0,631,633,7,6,0,0,632,634,5,35,0,0,633,632,1,0,0,0,633,634,1,
		0,0,0,634,635,1,0,0,0,635,636,5,9,0,0,636,639,5,6,0,0,637,640,3,228,114,
		0,638,640,3,208,104,0,639,637,1,0,0,0,639,638,1,0,0,0,640,641,1,0,0,0,
		641,642,5,7,0,0,642,688,1,0,0,0,643,648,7,6,0,0,644,649,5,36,0,0,645,646,
		5,37,0,0,646,647,5,35,0,0,647,649,5,38,0,0,648,644,1,0,0,0,648,645,1,0,
		0,0,649,651,1,0,0,0,650,652,5,39,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,
		653,1,0,0,0,653,688,3,206,103,0,654,656,7,6,0,0,655,657,5,35,0,0,656,655,
		1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,659,5,9,0,0,659,660,5,6,0,
		0,660,661,3,228,114,0,661,662,5,7,0,0,662,688,1,0,0,0,663,665,7,6,0,0,
		664,666,5,35,0,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,
		5,40,0,0,668,688,3,230,115,0,669,674,7,6,0,0,670,675,5,41,0,0,671,672,
		5,37,0,0,672,673,5,35,0,0,673,675,5,42,0,0,674,670,1,0,0,0,674,671,1,0,
		0,0,675,676,1,0,0,0,676,677,5,43,0,0,677,688,3,230,115,0,678,683,7,6,0,
		0,679,684,5,44,0,0,680,681,5,37,0,0,681,682,5,35,0,0,682,684,5,45,0,0,
		683,679,1,0,0,0,683,680,1,0,0,0,684,685,1,0,0,0,685,686,5,43,0,0,686,688,
		3,230,115,0,687,616,1,0,0,0,687,619,1,0,0,0,687,628,1,0,0,0,687,631,1,
		0,0,0,687,643,1,0,0,0,687,654,1,0,0,0,687,663,1,0,0,0,687,669,1,0,0,0,
		687,678,1,0,0,0,688,57,1,0,0,0,689,695,3,60,30,0,690,695,3,62,31,0,691,
		695,3,64,32,0,692,695,3,66,33,0,693,695,3,68,34,0,694,689,1,0,0,0,694,
		690,1,0,0,0,694,691,1,0,0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,59,1,0,
		0,0,696,697,5,46,0,0,697,61,1,0,0,0,698,699,5,46,0,0,699,700,5,43,0,0,
		700,701,5,47,0,0,701,702,5,48,0,0,702,63,1,0,0,0,703,704,5,46,0,0,704,
		705,5,43,0,0,705,706,5,47,0,0,706,707,5,49,0,0,707,65,1,0,0,0,708,709,
		5,46,0,0,709,710,5,43,0,0,710,711,5,47,0,0,711,712,5,50,0,0,712,67,1,0,
		0,0,713,714,5,46,0,0,714,715,5,43,0,0,715,716,5,47,0,0,716,717,5,48,0,
		0,717,718,5,31,0,0,718,719,5,49,0,0,719,69,1,0,0,0,720,741,3,72,36,0,721,
		741,3,74,37,0,722,741,3,76,38,0,723,741,3,78,39,0,724,741,3,80,40,0,725,
		741,3,82,41,0,726,727,5,51,0,0,727,728,5,108,0,0,728,738,5,15,0,0,729,
		739,5,108,0,0,730,739,3,84,42,0,731,739,3,90,45,0,732,739,3,230,115,0,
		733,739,3,206,103,0,734,739,3,92,46,0,735,739,3,178,89,0,736,739,3,94,
		47,0,737,739,3,96,48,0,738,729,1,0,0,0,738,730,1,0,0,0,738,731,1,0,0,0,
		738,732,1,0,0,0,738,733,1,0,0,0,738,734,1,0,0,0,738,735,1,0,0,0,738,736,
		1,0,0,0,738,737,1,0,0,0,739,741,1,0,0,0,740,720,1,0,0,0,740,721,1,0,0,
		0,740,722,1,0,0,0,740,723,1,0,0,0,740,724,1,0,0,0,740,725,1,0,0,0,740,
		726,1,0,0,0,741,71,1,0,0,0,742,743,5,52,0,0,743,746,5,108,0,0,744,745,
		5,15,0,0,745,747,3,84,42,0,746,744,1,0,0,0,746,747,1,0,0,0,747,73,1,0,
		0,0,748,749,5,53,0,0,749,752,5,108,0,0,750,751,5,15,0,0,751,753,3,90,45,
		0,752,750,1,0,0,0,752,753,1,0,0,0,753,75,1,0,0,0,754,755,5,54,0,0,755,
		758,5,108,0,0,756,757,5,15,0,0,757,759,3,230,115,0,758,756,1,0,0,0,758,
		759,1,0,0,0,759,77,1,0,0,0,760,761,5,39,0,0,761,764,5,108,0,0,762,763,
		5,15,0,0,763,765,3,206,103,0,764,762,1,0,0,0,764,765,1,0,0,0,765,79,1,
		0,0,0,766,767,5,55,0,0,767,770,5,108,0,0,768,769,5,15,0,0,769,771,3,92,
		46,0,770,768,1,0,0,0,770,771,1,0,0,0,771,81,1,0,0,0,772,773,5,5,0,0,773,
		774,5,17,0,0,774,777,5,108,0,0,775,776,5,15,0,0,776,778,3,94,47,0,777,
		775,1,0,0,0,777,778,1,0,0,0,778,83,1,0,0,0,779,780,5,52,0,0,780,782,7,
		7,0,0,781,783,3,156,78,0,782,781,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,
		0,784,786,5,108,0,0,785,779,1,0,0,0,785,784,1,0,0,0,786,85,1,0,0,0,787,
		788,7,8,0,0,788,87,1,0,0,0,789,792,3,84,42,0,790,792,3,86,43,0,791,789,
		1,0,0,0,791,790,1,0,0,0,792,89,1,0,0,0,793,794,5,53,0,0,794,795,5,107,
		0,0,795,798,5,9,0,0,796,799,3,84,42,0,797,799,3,126,63,0,798,796,1,0,0,
		0,798,797,1,0,0,0,799,803,1,0,0,0,800,801,5,53,0,0,801,803,5,108,0,0,802,
		793,1,0,0,0,802,800,1,0,0,0,803,91,1,0,0,0,804,805,7,7,0,0,805,808,7,1,
		0,0,806,809,3,84,42,0,807,809,3,126,63,0,808,806,1,0,0,0,808,807,1,0,0,
		0,809,812,1,0,0,0,810,812,5,108,0,0,811,804,1,0,0,0,811,810,1,0,0,0,812,
		93,1,0,0,0,813,814,5,5,0,0,814,818,5,17,0,0,815,819,3,178,89,0,816,819,
		3,230,115,0,817,819,5,108,0,0,818,815,1,0,0,0,818,816,1,0,0,0,818,817,
		1,0,0,0,819,820,1,0,0,0,820,821,7,1,0,0,821,824,3,96,48,0,822,824,5,108,
		0,0,823,813,1,0,0,0,823,822,1,0,0,0,824,95,1,0,0,0,825,826,5,5,0,0,826,
		827,7,7,0,0,827,830,7,1,0,0,828,831,3,84,42,0,829,831,3,86,43,0,830,828,
		1,0,0,0,830,829,1,0,0,0,831,834,1,0,0,0,832,834,5,108,0,0,833,825,1,0,
		0,0,833,832,1,0,0,0,834,97,1,0,0,0,835,836,7,7,0,0,836,839,5,9,0,0,837,
		840,3,84,42,0,838,840,3,86,43,0,839,837,1,0,0,0,839,838,1,0,0,0,840,99,
		1,0,0,0,841,842,5,108,0,0,842,843,5,15,0,0,843,848,5,108,0,0,844,848,3,
		102,51,0,845,848,3,106,53,0,846,848,3,104,52,0,847,841,1,0,0,0,847,844,
		1,0,0,0,847,845,1,0,0,0,847,846,1,0,0,0,848,101,1,0,0,0,849,850,5,108,
		0,0,850,851,5,15,0,0,851,852,3,84,42,0,852,103,1,0,0,0,853,854,5,108,0,
		0,854,855,5,15,0,0,855,856,3,90,45,0,856,105,1,0,0,0,857,858,5,108,0,0,
		858,859,5,15,0,0,859,860,5,107,0,0,860,107,1,0,0,0,861,862,5,21,0,0,862,
		865,5,56,0,0,863,864,5,18,0,0,864,866,3,124,62,0,865,863,1,0,0,0,865,866,
		1,0,0,0,866,867,1,0,0,0,867,868,5,22,0,0,868,869,3,136,68,0,869,109,1,
		0,0,0,870,877,3,112,56,0,871,877,3,114,57,0,872,877,3,116,58,0,873,877,
		3,118,59,0,874,877,3,120,60,0,875,877,3,122,61,0,876,870,1,0,0,0,876,871,
		1,0,0,0,876,872,1,0,0,0,876,873,1,0,0,0,876,874,1,0,0,0,876,875,1,0,0,
		0,877,111,1,0,0,0,878,879,5,57,0,0,879,880,5,56,0,0,880,881,5,18,0,0,881,
		882,3,124,62,0,882,113,1,0,0,0,883,884,5,57,0,0,884,885,5,108,0,0,885,
		115,1,0,0,0,886,887,5,57,0,0,887,888,5,52,0,0,888,889,7,9,0,0,889,117,
		1,0,0,0,890,891,5,57,0,0,891,892,5,107,0,0,892,119,1,0,0,0,893,894,5,57,
		0,0,894,895,5,58,0,0,895,896,5,59,0,0,896,121,1,0,0,0,897,898,5,57,0,0,
		898,899,5,60,0,0,899,900,5,61,0,0,900,123,1,0,0,0,901,905,5,62,0,0,902,
		903,5,60,0,0,903,905,5,61,0,0,904,901,1,0,0,0,904,902,1,0,0,0,905,125,
		1,0,0,0,906,908,7,3,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,
		0,909,910,5,63,0,0,910,911,3,230,115,0,911,127,1,0,0,0,912,914,7,3,0,0,
		913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,5,63,0,0,916,917,
		3,230,115,0,917,129,1,0,0,0,918,919,3,126,63,0,919,131,1,0,0,0,920,921,
		3,126,63,0,921,133,1,0,0,0,922,923,3,126,63,0,923,135,1,0,0,0,924,927,
		3,126,63,0,925,927,3,138,69,0,926,924,1,0,0,0,926,925,1,0,0,0,927,137,
		1,0,0,0,928,929,3,230,115,0,929,139,1,0,0,0,930,933,3,126,63,0,931,933,
		3,88,44,0,932,930,1,0,0,0,932,931,1,0,0,0,933,141,1,0,0,0,934,937,3,126,
		63,0,935,937,3,88,44,0,936,934,1,0,0,0,936,935,1,0,0,0,937,143,1,0,0,0,
		938,941,3,126,63,0,939,941,3,88,44,0,940,938,1,0,0,0,940,939,1,0,0,0,941,
		145,1,0,0,0,942,945,3,126,63,0,943,945,3,88,44,0,944,942,1,0,0,0,944,943,
		1,0,0,0,945,147,1,0,0,0,946,949,3,126,63,0,947,949,3,88,44,0,948,946,1,
		0,0,0,948,947,1,0,0,0,949,149,1,0,0,0,950,953,3,126,63,0,951,953,3,88,
		44,0,952,950,1,0,0,0,952,951,1,0,0,0,953,151,1,0,0,0,954,957,3,126,63,
		0,955,957,3,88,44,0,956,954,1,0,0,0,956,955,1,0,0,0,957,153,1,0,0,0,958,
		961,3,126,63,0,959,961,3,88,44,0,960,958,1,0,0,0,960,959,1,0,0,0,961,155,
		1,0,0,0,962,963,5,64,0,0,963,967,5,62,0,0,964,965,5,9,0,0,965,967,3,126,
		63,0,966,962,1,0,0,0,966,964,1,0,0,0,967,157,1,0,0,0,968,969,5,4,0,0,969,
		970,5,53,0,0,970,971,5,6,0,0,971,972,3,172,86,0,972,973,5,7,0,0,973,974,
		5,9,0,0,974,975,3,88,44,0,975,159,1,0,0,0,976,977,5,11,0,0,977,978,5,65,
		0,0,978,979,5,9,0,0,979,980,3,88,44,0,980,981,5,12,0,0,981,984,3,172,86,
		0,982,983,5,20,0,0,983,985,3,166,83,0,984,982,1,0,0,0,984,985,1,0,0,0,
		985,161,1,0,0,0,986,987,5,21,0,0,987,988,5,65,0,0,988,989,7,1,0,0,989,
		990,3,88,44,0,990,991,5,22,0,0,991,994,3,146,73,0,992,993,5,20,0,0,993,
		995,3,166,83,0,994,992,1,0,0,0,994,995,1,0,0,0,995,163,1,0,0,0,996,997,
		5,10,0,0,997,998,5,65,0,0,998,999,7,1,0,0,999,1002,3,88,44,0,1000,1001,
		5,20,0,0,1001,1003,3,166,83,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,
		165,1,0,0,0,1004,1007,3,168,84,0,1005,1006,7,4,0,0,1006,1008,3,166,83,
		0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,167,1,0,0,0,1009,1012,3,170,
		85,0,1010,1011,7,4,0,0,1011,1013,3,168,84,0,1012,1010,1,0,0,0,1012,1013,
		1,0,0,0,1013,1031,1,0,0,0,1014,1015,5,6,0,0,1015,1018,3,170,85,0,1016,
		1017,7,4,0,0,1017,1019,3,168,84,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,
		1019,1020,1,0,0,0,1020,1021,5,7,0,0,1021,1031,1,0,0,0,1022,1023,5,6,0,
		0,1023,1026,3,168,84,0,1024,1025,7,4,0,0,1025,1027,3,168,84,0,1026,1024,
		1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1029,5,7,0,0,1029,1031,
		1,0,0,0,1030,1009,1,0,0,0,1030,1014,1,0,0,0,1030,1022,1,0,0,0,1031,169,
		1,0,0,0,1032,1033,5,33,0,0,1033,1034,7,5,0,0,1034,1101,3,178,89,0,1035,
		1037,5,33,0,0,1036,1038,5,35,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
		1039,1,0,0,0,1039,1040,5,9,0,0,1040,1041,5,6,0,0,1041,1042,3,176,88,0,
		1042,1043,5,7,0,0,1043,1101,1,0,0,0,1044,1045,5,14,0,0,1045,1046,7,5,0,
		0,1046,1101,3,230,115,0,1047,1049,5,14,0,0,1048,1050,5,35,0,0,1049,1048,
		1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1052,5,9,0,0,1052,1053,
		5,6,0,0,1053,1054,3,228,114,0,1054,1055,5,7,0,0,1055,1101,1,0,0,0,1056,
		1061,5,14,0,0,1057,1062,5,36,0,0,1058,1059,5,37,0,0,1059,1060,5,35,0,0,
		1060,1062,5,38,0,0,1061,1057,1,0,0,0,1061,1058,1,0,0,0,1062,1064,1,0,0,
		0,1063,1065,5,39,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,
		0,0,1066,1101,3,206,103,0,1067,1069,5,14,0,0,1068,1070,5,35,0,0,1069,1068,
		1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1072,5,9,0,0,1072,1073,
		5,6,0,0,1073,1074,3,208,104,0,1074,1075,5,7,0,0,1075,1101,1,0,0,0,1076,
		1078,5,14,0,0,1077,1079,5,35,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,
		1080,1,0,0,0,1080,1081,5,40,0,0,1081,1101,3,230,115,0,1082,1087,5,14,0,
		0,1083,1088,5,41,0,0,1084,1085,5,37,0,0,1085,1086,5,35,0,0,1086,1088,5,
		42,0,0,1087,1083,1,0,0,0,1087,1084,1,0,0,0,1088,1089,1,0,0,0,1089,1090,
		5,43,0,0,1090,1101,3,230,115,0,1091,1096,5,14,0,0,1092,1097,5,44,0,0,1093,
		1094,5,37,0,0,1094,1095,5,35,0,0,1095,1097,5,45,0,0,1096,1092,1,0,0,0,
		1096,1093,1,0,0,0,1097,1098,1,0,0,0,1098,1099,5,43,0,0,1099,1101,3,230,
		115,0,1100,1032,1,0,0,0,1100,1035,1,0,0,0,1100,1044,1,0,0,0,1100,1047,
		1,0,0,0,1100,1056,1,0,0,0,1100,1067,1,0,0,0,1100,1076,1,0,0,0,1100,1082,
		1,0,0,0,1100,1091,1,0,0,0,1101,171,1,0,0,0,1102,1105,3,174,87,0,1103,1104,
		5,13,0,0,1104,1106,3,172,86,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,
		173,1,0,0,0,1107,1108,5,66,0,0,1108,1109,5,14,0,0,1109,1110,5,15,0,0,1110,
		1137,3,230,115,0,1111,1112,5,67,0,0,1112,1113,5,14,0,0,1113,1114,5,15,
		0,0,1114,1137,3,230,115,0,1115,1116,5,68,0,0,1116,1117,5,15,0,0,1117,1137,
		7,10,0,0,1118,1119,5,72,0,0,1119,1120,5,73,0,0,1120,1137,3,230,115,0,1121,
		1122,5,74,0,0,1122,1123,5,73,0,0,1123,1137,3,230,115,0,1124,1125,5,75,
		0,0,1125,1126,5,76,0,0,1126,1127,5,15,0,0,1127,1137,3,230,115,0,1128,1129,
		5,75,0,0,1129,1130,5,77,0,0,1130,1131,5,15,0,0,1131,1137,3,230,115,0,1132,
		1133,5,75,0,0,1133,1134,5,78,0,0,1134,1135,5,15,0,0,1135,1137,3,230,115,
		0,1136,1107,1,0,0,0,1136,1111,1,0,0,0,1136,1115,1,0,0,0,1136,1118,1,0,
		0,0,1136,1121,1,0,0,0,1136,1124,1,0,0,0,1136,1128,1,0,0,0,1136,1132,1,
		0,0,0,1137,175,1,0,0,0,1138,1141,3,178,89,0,1139,1140,5,13,0,0,1140,1142,
		3,176,88,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,177,1,0,0,0,1143,1146,
		7,11,0,0,1144,1145,7,12,0,0,1145,1147,3,178,89,0,1146,1144,1,0,0,0,1146,
		1147,1,0,0,0,1147,179,1,0,0,0,1148,1150,5,83,0,0,1149,1148,1,0,0,0,1149,
		1150,1,0,0,0,1150,1151,1,0,0,0,1151,1152,7,13,0,0,1152,181,1,0,0,0,1153,
		1154,5,87,0,0,1154,1155,5,109,0,0,1155,183,1,0,0,0,1156,1160,3,186,93,
		0,1157,1160,3,188,94,0,1158,1160,3,190,95,0,1159,1156,1,0,0,0,1159,1157,
		1,0,0,0,1159,1158,1,0,0,0,1160,185,1,0,0,0,1161,1162,5,88,0,0,1162,1163,
		3,84,42,0,1163,1164,5,31,0,0,1164,1165,3,84,42,0,1165,187,1,0,0,0,1166,
		1167,5,88,0,0,1167,1168,3,90,45,0,1168,1169,5,31,0,0,1169,1170,3,90,45,
		0,1170,189,1,0,0,0,1171,1172,5,88,0,0,1172,1173,5,89,0,0,1173,1174,5,65,
		0,0,1174,1175,5,9,0,0,1175,1176,3,84,42,0,1176,1177,5,31,0,0,1177,1178,
		3,84,42,0,1178,191,1,0,0,0,1179,1180,5,21,0,0,1180,1183,5,90,0,0,1181,
		1182,5,43,0,0,1182,1184,5,70,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,
		1185,1,0,0,0,1185,1186,7,1,0,0,1186,1187,3,152,76,0,1187,1188,5,22,0,0,
		1188,1191,3,154,77,0,1189,1190,5,20,0,0,1190,1192,3,200,100,0,1191,1189,
		1,0,0,0,1191,1192,1,0,0,0,1192,193,1,0,0,0,1193,1194,5,91,0,0,1194,1195,
		5,90,0,0,1195,1196,7,1,0,0,1196,1199,3,88,44,0,1197,1198,5,20,0,0,1198,
		1200,3,200,100,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,195,1,0,0,0,
		1201,1202,5,92,0,0,1202,1203,5,90,0,0,1203,1204,7,1,0,0,1204,1207,3,88,
		44,0,1205,1206,5,20,0,0,1206,1208,3,200,100,0,1207,1205,1,0,0,0,1207,1208,
		1,0,0,0,1208,197,1,0,0,0,1209,1210,5,10,0,0,1210,1211,5,90,0,0,1211,1212,
		7,1,0,0,1212,1215,3,88,44,0,1213,1214,5,20,0,0,1214,1216,3,200,100,0,1215,
		1213,1,0,0,0,1215,1216,1,0,0,0,1216,199,1,0,0,0,1217,1220,3,202,101,0,
		1218,1219,7,4,0,0,1219,1221,3,200,100,0,1220,1218,1,0,0,0,1220,1221,1,
		0,0,0,1221,201,1,0,0,0,1222,1225,3,204,102,0,1223,1224,7,4,0,0,1224,1226,
		3,202,101,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1244,1,0,0,0,1227,
		1228,5,6,0,0,1228,1231,3,204,102,0,1229,1230,7,4,0,0,1230,1232,3,202,101,
		0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1234,5,7,
		0,0,1234,1244,1,0,0,0,1235,1236,5,6,0,0,1236,1239,3,202,101,0,1237,1238,
		7,4,0,0,1238,1240,3,202,101,0,1239,1237,1,0,0,0,1239,1240,1,0,0,0,1240,
		1241,1,0,0,0,1241,1242,5,7,0,0,1242,1244,1,0,0,0,1243,1222,1,0,0,0,1243,
		1227,1,0,0,0,1243,1235,1,0,0,0,1244,203,1,0,0,0,1245,1246,5,33,0,0,1246,
		1247,7,5,0,0,1247,1457,3,178,89,0,1248,1250,5,33,0,0,1249,1251,5,35,0,
		0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,5,9,
		0,0,1253,1254,5,6,0,0,1254,1255,3,176,88,0,1255,1256,5,7,0,0,1256,1457,
		1,0,0,0,1257,1258,7,14,0,0,1258,1259,7,5,0,0,1259,1457,3,230,115,0,1260,
		1262,7,14,0,0,1261,1263,5,35,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,
		1264,1,0,0,0,1264,1265,5,9,0,0,1265,1266,5,6,0,0,1266,1267,3,228,114,0,
		1267,1268,5,7,0,0,1268,1457,1,0,0,0,1269,1274,7,14,0,0,1270,1275,5,36,
		0,0,1271,1272,5,37,0,0,1272,1273,5,35,0,0,1273,1275,5,38,0,0,1274,1270,
		1,0,0,0,1274,1271,1,0,0,0,1275,1277,1,0,0,0,1276,1278,5,39,0,0,1277,1276,
		1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1457,3,206,103,0,1280,
		1282,7,14,0,0,1281,1283,5,35,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,
		1284,1,0,0,0,1284,1285,5,9,0,0,1285,1286,5,6,0,0,1286,1287,3,228,114,0,
		1287,1288,5,7,0,0,1288,1457,1,0,0,0,1289,1291,7,14,0,0,1290,1292,5,35,
		0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,5,
		40,0,0,1294,1457,3,230,115,0,1295,1300,7,14,0,0,1296,1301,5,41,0,0,1297,
		1298,5,37,0,0,1298,1299,5,35,0,0,1299,1301,5,42,0,0,1300,1296,1,0,0,0,
		1300,1297,1,0,0,0,1301,1302,1,0,0,0,1302,1303,5,43,0,0,1303,1457,3,230,
		115,0,1304,1309,7,14,0,0,1305,1310,5,44,0,0,1306,1307,5,37,0,0,1307,1308,
		5,35,0,0,1308,1310,5,45,0,0,1309,1305,1,0,0,0,1309,1306,1,0,0,0,1310,1311,
		1,0,0,0,1311,1312,5,43,0,0,1312,1457,3,230,115,0,1313,1315,5,93,0,0,1314,
		1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1322,5,73,0,0,1317,
		1319,5,89,0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,
		1322,5,94,0,0,1321,1314,1,0,0,0,1321,1318,1,0,0,0,1322,1323,1,0,0,0,1323,
		1324,7,5,0,0,1324,1457,3,230,115,0,1325,1327,5,93,0,0,1326,1325,1,0,0,
		0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1334,5,73,0,0,1329,1331,5,89,
		0,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,1334,5,
		94,0,0,1333,1326,1,0,0,0,1333,1330,1,0,0,0,1334,1336,1,0,0,0,1335,1337,
		5,35,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1339,
		5,9,0,0,1339,1340,5,6,0,0,1340,1341,3,228,114,0,1341,1342,5,7,0,0,1342,
		1457,1,0,0,0,1343,1345,5,93,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
		1346,1,0,0,0,1346,1351,5,73,0,0,1347,1352,5,36,0,0,1348,1349,5,37,0,0,
		1349,1350,5,35,0,0,1350,1352,5,38,0,0,1351,1347,1,0,0,0,1351,1348,1,0,
		0,0,1352,1354,1,0,0,0,1353,1355,5,39,0,0,1354,1353,1,0,0,0,1354,1355,1,
		0,0,0,1355,1356,1,0,0,0,1356,1457,3,206,103,0,1357,1359,5,93,0,0,1358,
		1357,1,0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1365,5,73,0,0,1361,
		1366,5,41,0,0,1362,1363,5,37,0,0,1363,1364,5,35,0,0,1364,1366,5,42,0,0,
		1365,1361,1,0,0,0,1365,1362,1,0,0,0,1366,1367,1,0,0,0,1367,1368,5,43,0,
		0,1368,1457,3,230,115,0,1369,1371,5,93,0,0,1370,1369,1,0,0,0,1370,1371,
		1,0,0,0,1371,1372,1,0,0,0,1372,1377,5,73,0,0,1373,1378,5,44,0,0,1374,1375,
		5,37,0,0,1375,1376,5,35,0,0,1376,1378,5,45,0,0,1377,1373,1,0,0,0,1377,
		1374,1,0,0,0,1378,1379,1,0,0,0,1379,1380,5,43,0,0,1380,1457,3,230,115,
		0,1381,1383,5,89,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,
		0,0,1384,1389,5,94,0,0,1385,1390,5,38,0,0,1386,1387,5,95,0,0,1387,1388,
		5,35,0,0,1388,1390,5,38,0,0,1389,1385,1,0,0,0,1389,1386,1,0,0,0,1390,1392,
		1,0,0,0,1391,1393,5,39,0,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,
		1,0,0,0,1394,1457,3,206,103,0,1395,1397,5,89,0,0,1396,1395,1,0,0,0,1396,
		1397,1,0,0,0,1397,1398,1,0,0,0,1398,1403,5,94,0,0,1399,1404,5,42,0,0,1400,
		1401,5,95,0,0,1401,1402,5,35,0,0,1402,1404,5,42,0,0,1403,1399,1,0,0,0,
		1403,1400,1,0,0,0,1404,1405,1,0,0,0,1405,1406,5,43,0,0,1406,1457,3,230,
		115,0,1407,1409,5,89,0,0,1408,1407,1,0,0,0,1408,1409,1,0,0,0,1409,1410,
		1,0,0,0,1410,1415,5,94,0,0,1411,1416,5,45,0,0,1412,1413,5,95,0,0,1413,
		1414,5,35,0,0,1414,1416,5,45,0,0,1415,1411,1,0,0,0,1415,1412,1,0,0,0,1416,
		1417,1,0,0,0,1417,1418,5,43,0,0,1418,1457,3,230,115,0,1419,1421,5,93,0,
		0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1428,5,73,
		0,0,1423,1425,5,89,0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,
		0,0,0,1426,1428,5,94,0,0,1427,1420,1,0,0,0,1427,1424,1,0,0,0,1428,1430,
		1,0,0,0,1429,1431,5,35,0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,
		1,0,0,0,1432,1433,5,9,0,0,1433,1434,5,6,0,0,1434,1435,3,208,104,0,1435,
		1436,5,7,0,0,1436,1457,1,0,0,0,1437,1439,5,93,0,0,1438,1437,1,0,0,0,1438,
		1439,1,0,0,0,1439,1440,1,0,0,0,1440,1446,5,73,0,0,1441,1443,5,89,0,0,1442,
		1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1446,5,94,0,0,1445,
		1438,1,0,0,0,1445,1442,1,0,0,0,1446,1448,1,0,0,0,1447,1449,5,35,0,0,1448,
		1447,1,0,0,0,1448,1449,1,0,0,0,1449,1450,1,0,0,0,1450,1451,5,40,0,0,1451,
		1457,3,230,115,0,1452,1453,5,96,0,0,1453,1457,5,94,0,0,1454,1455,5,93,
		0,0,1455,1457,5,94,0,0,1456,1245,1,0,0,0,1456,1248,1,0,0,0,1456,1257,1,
		0,0,0,1456,1260,1,0,0,0,1456,1269,1,0,0,0,1456,1280,1,0,0,0,1456,1289,
		1,0,0,0,1456,1295,1,0,0,0,1456,1304,1,0,0,0,1456,1321,1,0,0,0,1456,1333,
		1,0,0,0,1456,1344,1,0,0,0,1456,1358,1,0,0,0,1456,1370,1,0,0,0,1456,1382,
		1,0,0,0,1456,1396,1,0,0,0,1456,1408,1,0,0,0,1456,1427,1,0,0,0,1456,1445,
		1,0,0,0,1456,1452,1,0,0,0,1456,1454,1,0,0,0,1457,205,1,0,0,0,1458,1459,
		7,15,0,0,1459,207,1,0,0,0,1460,1463,3,206,103,0,1461,1462,5,13,0,0,1462,
		1464,3,208,104,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,209,1,0,0,0,
		1465,1466,5,21,0,0,1466,1467,5,97,0,0,1467,1468,7,1,0,0,1468,1469,3,88,
		44,0,1469,1470,5,22,0,0,1470,1473,3,88,44,0,1471,1472,5,20,0,0,1472,1474,
		3,222,111,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,
		1477,3,218,109,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,211,1,0,0,0,
		1478,1479,5,11,0,0,1479,1480,5,97,0,0,1480,1481,7,1,0,0,1481,1482,3,88,
		44,0,1482,1483,5,12,0,0,1483,1486,3,14,7,0,1484,1485,5,20,0,0,1485,1487,
		3,222,111,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,213,1,0,0,0,1488,
		1489,5,10,0,0,1489,1490,5,97,0,0,1490,1491,7,1,0,0,1491,1494,3,88,44,0,
		1492,1493,5,20,0,0,1493,1495,3,222,111,0,1494,1492,1,0,0,0,1494,1495,1,
		0,0,0,1495,215,1,0,0,0,1496,1497,5,21,0,0,1497,1498,5,97,0,0,1498,1499,
		7,1,0,0,1499,1500,3,88,44,0,1500,1501,5,22,0,0,1501,1504,3,88,44,0,1502,
		1503,5,20,0,0,1503,1505,3,222,111,0,1504,1502,1,0,0,0,1504,1505,1,0,0,
		0,1505,217,1,0,0,0,1506,1509,3,220,110,0,1507,1508,5,13,0,0,1508,1510,
		3,218,109,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,219,1,0,0,0,1511,
		1512,5,24,0,0,1512,1516,7,2,0,0,1513,1514,5,98,0,0,1514,1516,5,19,0,0,
		1515,1511,1,0,0,0,1515,1513,1,0,0,0,1516,221,1,0,0,0,1517,1520,3,224,112,
		0,1518,1519,7,4,0,0,1519,1521,3,222,111,0,1520,1518,1,0,0,0,1520,1521,
		1,0,0,0,1521,223,1,0,0,0,1522,1525,3,226,113,0,1523,1524,7,4,0,0,1524,
		1526,3,224,112,0,1525,1523,1,0,0,0,1525,1526,1,0,0,0,1526,1544,1,0,0,0,
		1527,1528,5,6,0,0,1528,1531,3,226,113,0,1529,1530,7,4,0,0,1530,1532,3,
		224,112,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1534,
		5,7,0,0,1534,1544,1,0,0,0,1535,1536,5,6,0,0,1536,1539,3,224,112,0,1537,
		1538,7,4,0,0,1538,1540,3,224,112,0,1539,1537,1,0,0,0,1539,1540,1,0,0,0,
		1540,1541,1,0,0,0,1541,1542,5,7,0,0,1542,1544,1,0,0,0,1543,1522,1,0,0,
		0,1543,1527,1,0,0,0,1543,1535,1,0,0,0,1544,225,1,0,0,0,1545,1546,5,33,
		0,0,1546,1547,7,5,0,0,1547,1614,3,178,89,0,1548,1550,5,33,0,0,1549,1551,
		5,35,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1552,1,0,0,0,1552,1553,
		5,9,0,0,1553,1554,5,6,0,0,1554,1555,3,176,88,0,1555,1556,5,7,0,0,1556,
		1614,1,0,0,0,1557,1558,7,16,0,0,1558,1559,7,5,0,0,1559,1614,3,230,115,
		0,1560,1562,7,16,0,0,1561,1563,5,35,0,0,1562,1561,1,0,0,0,1562,1563,1,
		0,0,0,1563,1564,1,0,0,0,1564,1565,5,9,0,0,1565,1566,5,6,0,0,1566,1567,
		3,228,114,0,1567,1568,5,7,0,0,1568,1614,1,0,0,0,1569,1574,7,16,0,0,1570,
		1575,5,36,0,0,1571,1572,5,37,0,0,1572,1573,5,35,0,0,1573,1575,5,38,0,0,
		1574,1570,1,0,0,0,1574,1571,1,0,0,0,1575,1577,1,0,0,0,1576,1578,5,39,0,
		0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,1579,1614,3,206,
		103,0,1580,1582,7,16,0,0,1581,1583,5,35,0,0,1582,1581,1,0,0,0,1582,1583,
		1,0,0,0,1583,1584,1,0,0,0,1584,1585,5,9,0,0,1585,1586,5,6,0,0,1586,1587,
		3,208,104,0,1587,1588,5,7,0,0,1588,1614,1,0,0,0,1589,1591,7,16,0,0,1590,
		1592,5,35,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,1593,
		1594,5,40,0,0,1594,1614,3,230,115,0,1595,1600,7,16,0,0,1596,1601,5,41,
		0,0,1597,1598,5,37,0,0,1598,1599,5,35,0,0,1599,1601,5,42,0,0,1600,1596,
		1,0,0,0,1600,1597,1,0,0,0,1601,1602,1,0,0,0,1602,1603,5,43,0,0,1603,1614,
		3,230,115,0,1604,1609,7,16,0,0,1605,1610,5,44,0,0,1606,1607,5,37,0,0,1607,
		1608,5,35,0,0,1608,1610,5,45,0,0,1609,1605,1,0,0,0,1609,1606,1,0,0,0,1610,
		1611,1,0,0,0,1611,1612,5,43,0,0,1612,1614,3,230,115,0,1613,1545,1,0,0,
		0,1613,1548,1,0,0,0,1613,1557,1,0,0,0,1613,1560,1,0,0,0,1613,1569,1,0,
		0,0,1613,1580,1,0,0,0,1613,1589,1,0,0,0,1613,1595,1,0,0,0,1613,1604,1,
		0,0,0,1614,227,1,0,0,0,1615,1618,3,230,115,0,1616,1617,5,13,0,0,1617,1619,
		3,228,114,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,229,1,0,0,0,1620,
		1623,7,9,0,0,1621,1622,5,79,0,0,1622,1624,3,230,115,0,1623,1621,1,0,0,
		0,1623,1624,1,0,0,0,1624,231,1,0,0,0,1625,1628,3,234,117,0,1626,1627,7,
		4,0,0,1627,1629,3,232,116,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,233,
		1,0,0,0,1630,1633,3,236,118,0,1631,1632,7,4,0,0,1632,1634,3,234,117,0,
		1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,1652,1,0,0,0,1635,1636,5,6,0,
		0,1636,1639,3,236,118,0,1637,1638,7,4,0,0,1638,1640,3,234,117,0,1639,1637,
		1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,0,1641,1642,5,7,0,0,1642,1652,
		1,0,0,0,1643,1644,5,6,0,0,1644,1647,3,234,117,0,1645,1646,7,4,0,0,1646,
		1648,3,234,117,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,
		1649,1650,5,7,0,0,1650,1652,1,0,0,0,1651,1630,1,0,0,0,1651,1635,1,0,0,
		0,1651,1643,1,0,0,0,1652,235,1,0,0,0,1653,1654,5,33,0,0,1654,1655,7,5,
		0,0,1655,1722,3,178,89,0,1656,1658,5,33,0,0,1657,1659,5,35,0,0,1658,1657,
		1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,5,9,0,0,1661,1662,
		5,6,0,0,1662,1663,3,176,88,0,1663,1664,5,7,0,0,1664,1722,1,0,0,0,1665,
		1666,5,14,0,0,1666,1667,7,5,0,0,1667,1722,3,230,115,0,1668,1670,5,14,0,
		0,1669,1671,5,35,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,
		0,0,1672,1673,5,9,0,0,1673,1674,5,6,0,0,1674,1675,3,228,114,0,1675,1676,
		5,7,0,0,1676,1722,1,0,0,0,1677,1682,5,14,0,0,1678,1683,5,36,0,0,1679,1680,
		5,37,0,0,1680,1681,5,35,0,0,1681,1683,5,38,0,0,1682,1678,1,0,0,0,1682,
		1679,1,0,0,0,1683,1685,1,0,0,0,1684,1686,5,39,0,0,1685,1684,1,0,0,0,1685,
		1686,1,0,0,0,1686,1687,1,0,0,0,1687,1722,3,206,103,0,1688,1690,5,14,0,
		0,1689,1691,5,35,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,
		0,0,1692,1693,5,9,0,0,1693,1694,5,6,0,0,1694,1695,3,208,104,0,1695,1696,
		5,7,0,0,1696,1722,1,0,0,0,1697,1699,5,14,0,0,1698,1700,5,35,0,0,1699,1698,
		1,0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1702,5,40,0,0,1702,1722,
		3,230,115,0,1703,1708,5,14,0,0,1704,1709,5,41,0,0,1705,1706,5,37,0,0,1706,
		1707,5,35,0,0,1707,1709,5,42,0,0,1708,1704,1,0,0,0,1708,1705,1,0,0,0,1709,
		1710,1,0,0,0,1710,1711,5,43,0,0,1711,1722,3,230,115,0,1712,1717,5,14,0,
		0,1713,1718,5,44,0,0,1714,1715,5,37,0,0,1715,1716,5,35,0,0,1716,1718,5,
		45,0,0,1717,1713,1,0,0,0,1717,1714,1,0,0,0,1718,1719,1,0,0,0,1719,1720,
		5,43,0,0,1720,1722,3,230,115,0,1721,1653,1,0,0,0,1721,1656,1,0,0,0,1721,
		1665,1,0,0,0,1721,1668,1,0,0,0,1721,1677,1,0,0,0,1721,1688,1,0,0,0,1721,
		1697,1,0,0,0,1721,1703,1,0,0,0,1721,1712,1,0,0,0,1722,237,1,0,0,0,1723,
		1726,3,126,63,0,1724,1726,3,88,44,0,1725,1723,1,0,0,0,1725,1724,1,0,0,
		0,1726,239,1,0,0,0,1727,1730,3,126,63,0,1728,1730,3,88,44,0,1729,1727,
		1,0,0,0,1729,1728,1,0,0,0,1730,241,1,0,0,0,1731,1734,3,126,63,0,1732,1734,
		3,88,44,0,1733,1731,1,0,0,0,1733,1732,1,0,0,0,1734,243,1,0,0,0,1735,1738,
		3,126,63,0,1736,1738,3,88,44,0,1737,1735,1,0,0,0,1737,1736,1,0,0,0,1738,
		245,1,0,0,0,1739,1740,5,99,0,0,1740,1741,7,9,0,0,1741,247,1,0,0,0,1742,
		1743,5,100,0,0,1743,1744,5,6,0,0,1744,1745,3,300,150,0,1745,1746,5,9,0,
		0,1746,1747,3,250,125,0,1747,1748,5,7,0,0,1748,1749,3,6,3,0,1749,1759,
		1,0,0,0,1750,1751,5,100,0,0,1751,1752,5,6,0,0,1752,1753,3,298,149,0,1753,
		1754,5,9,0,0,1754,1755,3,252,126,0,1755,1756,5,7,0,0,1756,1757,3,6,3,0,
		1757,1759,1,0,0,0,1758,1742,1,0,0,0,1758,1750,1,0,0,0,1759,249,1,0,0,0,
		1760,1769,3,254,127,0,1761,1769,3,258,129,0,1762,1769,3,262,131,0,1763,
		1769,3,266,133,0,1764,1769,3,270,135,0,1765,1769,3,274,137,0,1766,1769,
		3,278,139,0,1767,1769,3,282,141,0,1768,1760,1,0,0,0,1768,1761,1,0,0,0,
		1768,1762,1,0,0,0,1768,1763,1,0,0,0,1768,1764,1,0,0,0,1768,1765,1,0,0,
		0,1768,1766,1,0,0,0,1768,1767,1,0,0,0,1769,251,1,0,0,0,1770,1779,3,256,
		128,0,1771,1779,3,260,130,0,1772,1779,3,264,132,0,1773,1779,3,268,134,
		0,1774,1779,3,272,136,0,1775,1779,3,276,138,0,1776,1779,3,280,140,0,1777,
		1779,3,284,142,0,1778,1770,1,0,0,0,1778,1771,1,0,0,0,1778,1772,1,0,0,0,
		1778,1773,1,0,0,0,1778,1774,1,0,0,0,1778,1775,1,0,0,0,1778,1776,1,0,0,
		0,1778,1777,1,0,0,0,1779,253,1,0,0,0,1780,1787,3,126,63,0,1781,1787,3,
		288,144,0,1782,1784,5,89,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,
		1785,1,0,0,0,1785,1787,5,56,0,0,1786,1780,1,0,0,0,1786,1781,1,0,0,0,1786,
		1783,1,0,0,0,1787,1790,1,0,0,0,1788,1789,5,20,0,0,1789,1791,3,232,116,
		0,1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,255,1,0,0,0,1792,1798,3,288,
		144,0,1793,1795,5,89,0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,
		1,0,0,0,1796,1798,5,56,0,0,1797,1792,1,0,0,0,1797,1794,1,0,0,0,1798,1801,
		1,0,0,0,1799,1800,5,20,0,0,1800,1802,3,232,116,0,1801,1799,1,0,0,0,1801,
		1802,1,0,0,0,1802,257,1,0,0,0,1803,1807,3,126,63,0,1804,1807,3,290,145,
		0,1805,1807,3,88,44,0,1806,1803,1,0,0,0,1806,1804,1,0,0,0,1806,1805,1,
		0,0,0,1807,1810,1,0,0,0,1808,1809,5,20,0,0,1809,1811,3,166,83,0,1810,1808,
		1,0,0,0,1810,1811,1,0,0,0,1811,259,1,0,0,0,1812,1815,3,290,145,0,1813,
		1815,3,88,44,0,1814,1812,1,0,0,0,1814,1813,1,0,0,0,1815,1818,1,0,0,0,1816,
		1817,5,20,0,0,1817,1819,3,166,83,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,
		1819,261,1,0,0,0,1820,1824,3,126,63,0,1821,1824,3,292,146,0,1822,1824,
		3,88,44,0,1823,1820,1,0,0,0,1823,1821,1,0,0,0,1823,1822,1,0,0,0,1824,1827,
		1,0,0,0,1825,1826,5,20,0,0,1826,1828,3,222,111,0,1827,1825,1,0,0,0,1827,
		1828,1,0,0,0,1828,263,1,0,0,0,1829,1832,3,292,146,0,1830,1832,3,88,44,
		0,1831,1829,1,0,0,0,1831,1830,1,0,0,0,1832,1835,1,0,0,0,1833,1834,5,20,
		0,0,1834,1836,3,222,111,0,1835,1833,1,0,0,0,1835,1836,1,0,0,0,1836,265,
		1,0,0,0,1837,1841,3,126,63,0,1838,1841,3,294,147,0,1839,1841,3,286,143,
		0,1840,1837,1,0,0,0,1840,1838,1,0,0,0,1840,1839,1,0,0,0,1841,1844,1,0,
		0,0,1842,1843,5,20,0,0,1843,1845,3,52,26,0,1844,1842,1,0,0,0,1844,1845,
		1,0,0,0,1845,267,1,0,0,0,1846,1849,3,294,147,0,1847,1849,3,286,143,0,1848,
		1846,1,0,0,0,1848,1847,1,0,0,0,1849,1852,1,0,0,0,1850,1851,5,20,0,0,1851,
		1853,3,52,26,0,1852,1850,1,0,0,0,1852,1853,1,0,0,0,1853,269,1,0,0,0,1854,
		1858,3,126,63,0,1855,1858,3,296,148,0,1856,1858,3,84,42,0,1857,1854,1,
		0,0,0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,1861,1,0,0,0,1859,1860,
		5,20,0,0,1860,1862,3,200,100,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,
		271,1,0,0,0,1863,1866,3,296,148,0,1864,1866,3,84,42,0,1865,1863,1,0,0,
		0,1865,1864,1,0,0,0,1866,1869,1,0,0,0,1867,1868,5,20,0,0,1868,1870,3,200,
		100,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,273,1,0,0,0,1871,1879,3,
		126,63,0,1872,1873,5,54,0,0,1873,1879,3,126,63,0,1874,1875,5,101,0,0,1875,
		1876,3,228,114,0,1876,1877,5,102,0,0,1877,1879,1,0,0,0,1878,1871,1,0,0,
		0,1878,1872,1,0,0,0,1878,1874,1,0,0,0,1879,275,1,0,0,0,1880,1881,5,54,
		0,0,1881,1884,3,126,63,0,1882,1884,3,228,114,0,1883,1880,1,0,0,0,1883,
		1882,1,0,0,0,1884,277,1,0,0,0,1885,1890,3,126,63,0,1886,1887,5,39,0,0,
		1887,1890,3,126,63,0,1888,1890,3,208,104,0,1889,1885,1,0,0,0,1889,1886,
		1,0,0,0,1889,1888,1,0,0,0,1890,279,1,0,0,0,1891,1892,5,39,0,0,1892,1895,
		3,126,63,0,1893,1895,3,208,104,0,1894,1891,1,0,0,0,1894,1893,1,0,0,0,1895,
		281,1,0,0,0,1896,1901,3,126,63,0,1897,1898,5,103,0,0,1898,1901,3,126,63,
		0,1899,1901,3,176,88,0,1900,1896,1,0,0,0,1900,1897,1,0,0,0,1900,1899,1,
		0,0,0,1901,283,1,0,0,0,1902,1903,5,103,0,0,1903,1906,3,126,63,0,1904,1906,
		3,176,88,0,1905,1902,1,0,0,0,1905,1904,1,0,0,0,1906,285,1,0,0,0,1907,1910,
		3,96,48,0,1908,1910,3,98,49,0,1909,1907,1,0,0,0,1909,1908,1,0,0,0,1910,
		287,1,0,0,0,1911,1912,5,52,0,0,1912,1913,3,126,63,0,1913,289,1,0,0,0,1914,
		1915,5,53,0,0,1915,1916,3,126,63,0,1916,291,1,0,0,0,1917,1918,5,5,0,0,
		1918,1919,3,126,63,0,1919,293,1,0,0,0,1920,1921,5,104,0,0,1921,1922,3,
		126,63,0,1922,295,1,0,0,0,1923,1924,5,55,0,0,1924,1925,3,126,63,0,1925,
		297,1,0,0,0,1926,1927,5,51,0,0,1927,1928,5,108,0,0,1928,299,1,0,0,0,1929,
		1938,3,302,151,0,1930,1938,3,304,152,0,1931,1938,3,306,153,0,1932,1938,
		3,308,154,0,1933,1938,3,310,155,0,1934,1938,3,312,156,0,1935,1938,3,314,
		157,0,1936,1938,3,316,158,0,1937,1929,1,0,0,0,1937,1930,1,0,0,0,1937,1931,
		1,0,0,0,1937,1932,1,0,0,0,1937,1933,1,0,0,0,1937,1934,1,0,0,0,1937,1935,
		1,0,0,0,1937,1936,1,0,0,0,1938,301,1,0,0,0,1939,1940,5,52,0,0,1940,1941,
		5,108,0,0,1941,303,1,0,0,0,1942,1943,5,53,0,0,1943,1944,5,108,0,0,1944,
		305,1,0,0,0,1945,1946,5,5,0,0,1946,1947,5,108,0,0,1947,307,1,0,0,0,1948,
		1949,5,5,0,0,1949,1950,5,17,0,0,1950,1951,5,108,0,0,1951,309,1,0,0,0,1952,
		1953,5,55,0,0,1953,1954,5,108,0,0,1954,311,1,0,0,0,1955,1956,5,54,0,0,
		1956,1957,5,108,0,0,1957,313,1,0,0,0,1958,1959,5,39,0,0,1959,1960,5,108,
		0,0,1960,315,1,0,0,0,1961,1962,5,103,0,0,1962,1963,5,108,0,0,1963,317,
		1,0,0,0,1964,1967,3,126,63,0,1965,1967,3,96,48,0,1966,1964,1,0,0,0,1966,
		1965,1,0,0,0,1967,319,1,0,0,0,223,325,416,420,431,436,442,448,456,464,
		471,476,503,514,522,526,537,540,551,556,564,572,576,579,586,591,596,602,
		610,614,621,633,639,648,651,656,665,674,683,687,694,738,740,746,752,758,
		764,770,777,782,785,791,798,802,808,811,818,823,830,833,839,847,865,876,
		904,907,913,926,932,936,940,944,948,952,956,960,966,984,994,1002,1007,
		1012,1018,1026,1030,1037,1049,1061,1064,1069,1078,1087,1096,1100,1105,
		1136,1141,1146,1149,1159,1183,1191,1199,1207,1215,1220,1225,1231,1239,
		1243,1250,1262,1274,1277,1282,1291,1300,1309,1314,1318,1321,1326,1330,
		1333,1336,1344,1351,1354,1358,1365,1370,1377,1382,1389,1392,1396,1403,
		1408,1415,1420,1424,1427,1430,1438,1442,1445,1448,1456,1463,1473,1476,
		1486,1494,1504,1509,1515,1520,1525,1531,1539,1543,1550,1562,1574,1577,
		1582,1591,1600,1609,1613,1618,1623,1628,1633,1639,1647,1651,1658,1670,
		1682,1685,1690,1699,1708,1717,1721,1725,1729,1733,1737,1758,1768,1778,
		1783,1786,1790,1794,1797,1801,1806,1810,1814,1818,1823,1827,1831,1835,
		1840,1844,1848,1852,1857,1861,1865,1869,1878,1883,1889,1894,1900,1905,
		1909,1937,1966
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
