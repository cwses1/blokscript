//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BlokScriptGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BlokScript.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BlokScriptGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, STATEMENTEND=86, WS=87, 
		STRINGLITERAL=88, VARID=89, INTLITERAL=90, REGEXLITERAL=91;
	public const int
		RULE_script = 0, RULE_statementList = 1, RULE_statement = 2, RULE_createDatasourceEntryStatement = 3, 
		RULE_updateDatasourceEntriesStatement = 4, RULE_datasourceEntryUpdateList = 5, 
		RULE_datasourceEntryUpdate = 6, RULE_deleteDatasourceEntriesStatement = 7, 
		RULE_copyDatasourceEntriesStatement = 8, RULE_syncDatasourceEntriesStatement = 9, 
		RULE_datasourceEntriesSourceLocation = 10, RULE_urlSpec = 11, RULE_datasourceEntriesTargetLocation = 12, 
		RULE_datasourceEntryConstraintExprList = 13, RULE_datasourceEntryConstraintExpr = 14, 
		RULE_datasourceEntryConstraint = 15, RULE_datasourceConstraintExpr = 16, 
		RULE_loginStatement = 17, RULE_loginOnlyStatement = 18, RULE_loginWithGlobalUserNameStatement = 19, 
		RULE_loginWithGlobalPasswordStatement = 20, RULE_loginWithGlobalTokenStatement = 21, 
		RULE_loginWithGlobalUserNameAndPasswordStatement = 22, RULE_varStatement = 23, 
		RULE_spaceVarStatement = 24, RULE_blockVarStatement = 25, RULE_stringVarStatement = 26, 
		RULE_regexVarStatement = 27, RULE_storyVarStatement = 28, RULE_datasourceEntryVarStatement = 29, 
		RULE_spaceSpec = 30, RULE_blockSpec = 31, RULE_storySpec = 32, RULE_datasourceEntrySpec = 33, 
		RULE_datasourceSpec = 34, RULE_assignmentStatement = 35, RULE_spaceAssignmentStatement = 36, 
		RULE_blockAssignmentStatement = 37, RULE_stringAssignmentStatement = 38, 
		RULE_copyStatement = 39, RULE_copyBlockStatement = 40, RULE_copySpaceStatement = 41, 
		RULE_copySpacesStatement = 42, RULE_printStatement = 43, RULE_printSpacesStatement = 44, 
		RULE_printVarStatement = 45, RULE_printSpaceStatement = 46, RULE_printStringLiteralStatement = 47, 
		RULE_printSymbolTableStatement = 48, RULE_printLocalCacheStatement = 49, 
		RULE_realDataLocation = 50, RULE_spacesOutputLocation = 51, RULE_fileSpec = 52, 
		RULE_blockOutputLocation = 53, RULE_blocksOutputLocation = 54, RULE_storyOutputLocation = 55, 
		RULE_filesSpec = 56, RULE_spaceOutputLocation = 57, RULE_varGetFrom = 58, 
		RULE_copyBlocksStatement = 59, RULE_copyStoryStatement = 60, RULE_blockConstraintList = 61, 
		RULE_blockConstraint = 62, RULE_intExprList = 63, RULE_intExpr = 64, RULE_verbosityStatement = 65, 
		RULE_waitStatement = 66, RULE_compareStatement = 67, RULE_compareSpacesStatement = 68, 
		RULE_compareBlocksStatement = 69, RULE_compareAllBlocksStatement = 70, 
		RULE_publishStoryStatement = 71, RULE_unpublishStoryStatement = 72, RULE_deleteStoryStatement = 73, 
		RULE_storiesInputLocation = 74, RULE_storiesOutputLocation = 75, RULE_copyStoriesStatement = 76, 
		RULE_publishStoriesStatement = 77, RULE_unpublishStoriesStatement = 78, 
		RULE_deleteStoriesStatement = 79, RULE_storyConstraintList = 80, RULE_storyConstraint = 81, 
		RULE_regexExpr = 82, RULE_regexExprList = 83, RULE_copyDatasourceStatement = 84, 
		RULE_copyDatasourcesStatement = 85, RULE_datasourceConstraint = 86, RULE_stringExpr = 87, 
		RULE_stringExprList = 88, RULE_forEachStatement = 89;
	public static readonly string[] ruleNames = {
		"script", "statementList", "statement", "createDatasourceEntryStatement", 
		"updateDatasourceEntriesStatement", "datasourceEntryUpdateList", "datasourceEntryUpdate", 
		"deleteDatasourceEntriesStatement", "copyDatasourceEntriesStatement", 
		"syncDatasourceEntriesStatement", "datasourceEntriesSourceLocation", "urlSpec", 
		"datasourceEntriesTargetLocation", "datasourceEntryConstraintExprList", 
		"datasourceEntryConstraintExpr", "datasourceEntryConstraint", "datasourceConstraintExpr", 
		"loginStatement", "loginOnlyStatement", "loginWithGlobalUserNameStatement", 
		"loginWithGlobalPasswordStatement", "loginWithGlobalTokenStatement", "loginWithGlobalUserNameAndPasswordStatement", 
		"varStatement", "spaceVarStatement", "blockVarStatement", "stringVarStatement", 
		"regexVarStatement", "storyVarStatement", "datasourceEntryVarStatement", 
		"spaceSpec", "blockSpec", "storySpec", "datasourceEntrySpec", "datasourceSpec", 
		"assignmentStatement", "spaceAssignmentStatement", "blockAssignmentStatement", 
		"stringAssignmentStatement", "copyStatement", "copyBlockStatement", "copySpaceStatement", 
		"copySpacesStatement", "printStatement", "printSpacesStatement", "printVarStatement", 
		"printSpaceStatement", "printStringLiteralStatement", "printSymbolTableStatement", 
		"printLocalCacheStatement", "realDataLocation", "spacesOutputLocation", 
		"fileSpec", "blockOutputLocation", "blocksOutputLocation", "storyOutputLocation", 
		"filesSpec", "spaceOutputLocation", "varGetFrom", "copyBlocksStatement", 
		"copyStoryStatement", "blockConstraintList", "blockConstraint", "intExprList", 
		"intExpr", "verbosityStatement", "waitStatement", "compareStatement", 
		"compareSpacesStatement", "compareBlocksStatement", "compareAllBlocksStatement", 
		"publishStoryStatement", "unpublishStoryStatement", "deleteStoryStatement", 
		"storiesInputLocation", "storiesOutputLocation", "copyStoriesStatement", 
		"publishStoriesStatement", "unpublishStoriesStatement", "deleteStoriesStatement", 
		"storyConstraintList", "storyConstraint", "regexExpr", "regexExprList", 
		"copyDatasourceStatement", "copyDatasourcesStatement", "datasourceConstraint", 
		"stringExpr", "stringExprList", "forEachStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'create'", "'datasource'", "'entry'", "'('", "'name'", "'='", "','", 
		"'value'", "')'", "'for'", "'in'", "'update'", "'entries'", "'set'", "'where'", 
		"'delete'", "'copy'", "'from'", "'to'", "'sync'", "'local cache'", "'csv'", 
		"'json'", "'url'", "'console'", "'and'", "'or'", "'id'", "'!='", "'not'", 
		"'matches'", "'does'", "'match'", "'regex'", "'like'", "'starts'", "'start'", 
		"'with'", "'ends'", "'end'", "'login'", "'global'", "'username'", "'password'", 
		"'token'", "'var'", "'space'", "'block'", "'string'", "'story'", "'all'", 
		"'spaces'", "'print'", "'symbol'", "'tables'", "'local'", "'cache'", "'server'", 
		"'file'", "'files'", "'on'", "'demand'", "'blocks'", "'+'", "'-'", "'*'", 
		"'%'", "'be'", "'verbose'", "'quiet'", "'wait'", "'compare'", "'publish'", 
		"'unpublish'", "'stories'", "'any'", "'tag'", "'tags'", "'do'", "'no'", 
		"'datasources'", "'slug'", "'foreach'", "'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STATEMENTEND", "WS", "STRINGLITERAL", "VARID", "INTLITERAL", 
		"REGEXLITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BlokScriptGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BlokScriptGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BlokScriptGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BlokScriptGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			statementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENTEND() { return GetTokens(BlokScriptGrammarParser.STATEMENTEND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENTEND(int i) {
			return GetToken(BlokScriptGrammarParser.STATEMENTEND, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 182;
				statement();
				State = 183;
				Match(STATEMENTEND);
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 11190846528622598L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 2097279L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginStatementContext loginStatement() {
			return GetRuleContext<LoginStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarStatementContext varStatement() {
			return GetRuleContext<VarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStatementContext copyStatement() {
			return GetRuleContext<CopyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VerbosityStatementContext verbosityStatement() {
			return GetRuleContext<VerbosityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitStatementContext waitStatement() {
			return GetRuleContext<WaitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareStatementContext compareStatement() {
			return GetRuleContext<CompareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoryStatementContext publishStoryStatement() {
			return GetRuleContext<PublishStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoryStatementContext unpublishStoryStatement() {
			return GetRuleContext<UnpublishStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoryStatementContext deleteStoryStatement() {
			return GetRuleContext<DeleteStoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoriesStatementContext copyStoriesStatement() {
			return GetRuleContext<CopyStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PublishStoriesStatementContext publishStoriesStatement() {
			return GetRuleContext<PublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnpublishStoriesStatementContext unpublishStoriesStatement() {
			return GetRuleContext<UnpublishStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStoriesStatementContext deleteStoriesStatement() {
			return GetRuleContext<DeleteStoriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
			return GetRuleContext<CreateDatasourceEntryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
			return GetRuleContext<UpdateDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
			return GetRuleContext<DeleteDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
			return GetRuleContext<CopyDatasourceEntriesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
			return GetRuleContext<SyncDatasourceEntriesStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				loginStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				varStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				copyStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192;
				assignmentStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193;
				printStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 194;
				verbosityStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 195;
				waitStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 196;
				compareStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 197;
				publishStoryStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 198;
				unpublishStoryStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 199;
				deleteStoryStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 200;
				copyStoriesStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 201;
				publishStoriesStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 202;
				unpublishStoriesStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 203;
				deleteStoriesStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 204;
				createDatasourceEntryStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 205;
				updateDatasourceEntriesStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 206;
				deleteDatasourceEntriesStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 207;
				copyDatasourceEntriesStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 208;
				syncDatasourceEntriesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatasourceEntryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext[] stringExpr() {
			return GetRuleContexts<StringExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr(int i) {
			return GetRuleContext<StringExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public CreateDatasourceEntryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatasourceEntryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatasourceEntryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatasourceEntryStatementContext createDatasourceEntryStatement() {
		CreateDatasourceEntryStatementContext _localctx = new CreateDatasourceEntryStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_createDatasourceEntryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__0);
			State = 212;
			Match(T__1);
			State = 213;
			Match(T__2);
			State = 214;
			Match(T__3);
			State = 215;
			Match(T__4);
			State = 216;
			Match(T__5);
			State = 217;
			stringExpr();
			State = 218;
			Match(T__6);
			State = 219;
			Match(T__7);
			State = 220;
			Match(T__5);
			State = 221;
			stringExpr();
			State = 222;
			Match(T__8);
			State = 223;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 224;
			datasourceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public UpdateDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateDatasourceEntriesStatementContext updateDatasourceEntriesStatement() {
		UpdateDatasourceEntriesStatementContext _localctx = new UpdateDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_updateDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(T__11);
			State = 227;
			Match(T__1);
			State = 228;
			Match(T__12);
			State = 229;
			Match(T__10);
			State = 230;
			datasourceSpec();
			State = 231;
			Match(T__13);
			State = 232;
			datasourceEntryUpdateList();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 233;
				Match(T__14);
				State = 234;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateContext datasourceEntryUpdate() {
			return GetRuleContext<DatasourceEntryUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
			return GetRuleContext<DatasourceEntryUpdateListContext>(0);
		}
		public DatasourceEntryUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateListContext datasourceEntryUpdateList() {
		DatasourceEntryUpdateListContext _localctx = new DatasourceEntryUpdateListContext(Context, State);
		EnterRule(_localctx, 10, RULE_datasourceEntryUpdateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			datasourceEntryUpdate();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 238;
				Match(T__6);
				State = 239;
				datasourceEntryUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public DatasourceEntryUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryUpdateContext datasourceEntryUpdate() {
		DatasourceEntryUpdateContext _localctx = new DatasourceEntryUpdateContext(Context, State);
		EnterRule(_localctx, 12, RULE_datasourceEntryUpdate);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(T__4);
				State = 243;
				Match(T__5);
				State = 244;
				stringExpr();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				Match(T__7);
				State = 246;
				Match(T__5);
				State = 247;
				stringExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DeleteDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteDatasourceEntriesStatementContext deleteDatasourceEntriesStatement() {
		DeleteDatasourceEntriesStatementContext _localctx = new DeleteDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_deleteDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(T__15);
			State = 251;
			Match(T__1);
			State = 252;
			Match(T__12);
			State = 253;
			Match(T__10);
			State = 254;
			datasourceSpec();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 255;
				Match(T__14);
				State = 256;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
			return GetRuleContext<DatasourceEntriesTargetLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public CopyDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceEntriesStatementContext copyDatasourceEntriesStatement() {
		CopyDatasourceEntriesStatementContext _localctx = new CopyDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_copyDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(T__16);
			State = 260;
			Match(T__1);
			State = 261;
			Match(T__12);
			State = 262;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 263;
			datasourceEntriesSourceLocation();
			State = 264;
			Match(T__18);
			State = 265;
			datasourceEntriesTargetLocation();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 266;
				Match(T__14);
				State = 267;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyncDatasourceEntriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext[] datasourceEntriesSourceLocation() {
			return GetRuleContexts<DatasourceEntriesSourceLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation(int i) {
			return GetRuleContext<DatasourceEntriesSourceLocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public SyncDatasourceEntriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syncDatasourceEntriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyncDatasourceEntriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyncDatasourceEntriesStatementContext syncDatasourceEntriesStatement() {
		SyncDatasourceEntriesStatementContext _localctx = new SyncDatasourceEntriesStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_syncDatasourceEntriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(T__19);
			State = 271;
			Match(T__1);
			State = 272;
			Match(T__12);
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 274;
			datasourceEntriesSourceLocation();
			State = 275;
			Match(T__18);
			State = 276;
			datasourceEntriesSourceLocation();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 277;
				Match(T__14);
				State = 278;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesSourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesSourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesSourceLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesSourceLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesSourceLocationContext datasourceEntriesSourceLocation() {
		DatasourceEntriesSourceLocationContext _localctx = new DatasourceEntriesSourceLocationContext(Context, State);
		EnterRule(_localctx, 20, RULE_datasourceEntriesSourceLocation);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				datasourceSpec();
				}
				break;
			case T__21:
			case T__22:
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				urlSpec();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283;
				fileSpec();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 284;
				Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public UrlSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_urlSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrlSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlSpecContext urlSpec() {
		UrlSpecContext _localctx = new UrlSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_urlSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21 || _la==T__22) {
				{
				State = 287;
				_la = TokenStream.LA(1);
				if ( !(_la==T__21 || _la==T__22) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 290;
			Match(T__23);
			State = 291;
			stringExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntriesTargetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlSpecContext urlSpec() {
			return GetRuleContext<UrlSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public DatasourceEntriesTargetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntriesTargetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntriesTargetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntriesTargetLocationContext datasourceEntriesTargetLocation() {
		DatasourceEntriesTargetLocationContext _localctx = new DatasourceEntriesTargetLocationContext(Context, State);
		EnterRule(_localctx, 24, RULE_datasourceEntriesTargetLocation);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				datasourceSpec();
				}
				break;
			case T__21:
			case T__22:
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294;
				urlSpec();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295;
				fileSpec();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 296;
				Match(T__20);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 5);
				{
				State = 297;
				Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
			return GetRuleContext<DatasourceEntryConstraintExprListContext>(0);
		}
		public DatasourceEntryConstraintExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprListContext datasourceEntryConstraintExprList() {
		DatasourceEntryConstraintExprListContext _localctx = new DatasourceEntryConstraintExprListContext(Context, State);
		EnterRule(_localctx, 26, RULE_datasourceEntryConstraintExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			datasourceEntryConstraintExpr();
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25 || _la==T__26) {
				{
				State = 301;
				_la = TokenStream.LA(1);
				if ( !(_la==T__25 || _la==T__26) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 302;
				datasourceEntryConstraintExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintContext datasourceEntryConstraint() {
			return GetRuleContext<DatasourceEntryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext[] datasourceEntryConstraintExpr() {
			return GetRuleContexts<DatasourceEntryConstraintExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr(int i) {
			return GetRuleContext<DatasourceEntryConstraintExprContext>(i);
		}
		public DatasourceEntryConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintExprContext datasourceEntryConstraintExpr() {
		DatasourceEntryConstraintExprContext _localctx = new DatasourceEntryConstraintExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_datasourceEntryConstraintExpr);
		int _la;
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				datasourceEntryConstraint();
				State = 308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 306;
					_la = TokenStream.LA(1);
					if ( !(_la==T__25 || _la==T__26) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 307;
					datasourceEntryConstraintExpr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(T__3);
				State = 311;
				datasourceEntryConstraint();
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25 || _la==T__26) {
					{
					State = 312;
					_la = TokenStream.LA(1);
					if ( !(_la==T__25 || _la==T__26) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 313;
					datasourceEntryConstraintExpr();
					}
				}

				State = 316;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				Match(T__3);
				State = 319;
				datasourceEntryConstraintExpr();
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25 || _la==T__26) {
					{
					State = 320;
					_la = TokenStream.LA(1);
					if ( !(_la==T__25 || _la==T__26) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 321;
					datasourceEntryConstraintExpr();
					}
				}

				State = 324;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public DatasourceEntryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryConstraintContext datasourceEntryConstraint() {
		DatasourceEntryConstraintContext _localctx = new DatasourceEntryConstraintContext(Context, State);
		EnterRule(_localctx, 30, RULE_datasourceEntryConstraint);
		int _la;
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				Match(T__27);
				State = 329;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 330;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				Match(T__27);
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 332;
					Match(T__29);
					}
				}

				State = 335;
				Match(T__10);
				State = 336;
				Match(T__3);
				State = 337;
				intExprList();
				State = 338;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 341;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 342;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 343;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 344;
					Match(T__29);
					}
				}

				State = 347;
				Match(T__10);
				State = 348;
				Match(T__3);
				State = 351;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 349;
					stringExprList();
					}
					break;
				case 2:
					{
					State = 350;
					regexExprList();
					}
					break;
				}
				State = 353;
				Match(T__8);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 355;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 360;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 356;
					Match(T__30);
					}
					break;
				case T__31:
					{
					State = 357;
					Match(T__31);
					State = 358;
					Match(T__29);
					State = 359;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 362;
					Match(T__33);
					}
				}

				State = 365;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 366;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 367;
					Match(T__29);
					}
				}

				State = 370;
				Match(T__10);
				State = 371;
				Match(T__3);
				State = 372;
				stringExprList();
				State = 373;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 375;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 376;
					Match(T__29);
					}
				}

				State = 379;
				Match(T__34);
				State = 380;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 381;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 386;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 382;
					Match(T__35);
					}
					break;
				case T__31:
					{
					State = 383;
					Match(T__31);
					State = 384;
					Match(T__29);
					State = 385;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 388;
				Match(T__37);
				State = 389;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 390;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__7) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 395;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 391;
					Match(T__38);
					}
					break;
				case T__31:
					{
					State = 392;
					Match(T__31);
					State = 393;
					Match(T__29);
					State = 394;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 397;
				Match(T__37);
				State = 398;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintContext datasourceConstraint() {
			return GetRuleContext<DatasourceConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		public DatasourceConstraintExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraintExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintExprContext datasourceConstraintExpr() {
		DatasourceConstraintExprContext _localctx = new DatasourceConstraintExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_datasourceConstraintExpr);
		int _la;
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__27:
			case T__81:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				datasourceConstraint();
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25 || _la==T__26) {
					{
					State = 402;
					_la = TokenStream.LA(1);
					if ( !(_la==T__25 || _la==T__26) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 403;
					datasourceConstraintExpr();
					}
				}

				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(T__3);
				State = 407;
				datasourceConstraint();
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25 || _la==T__26) {
					{
					State = 408;
					_la = TokenStream.LA(1);
					if ( !(_la==T__25 || _la==T__26) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 409;
					datasourceConstraintExpr();
					}
				}

				State = 412;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoginOnlyStatementContext loginOnlyStatement() {
			return GetRuleContext<LoginOnlyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
			return GetRuleContext<LoginWithGlobalUserNameStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
			return GetRuleContext<LoginWithGlobalPasswordStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
			return GetRuleContext<LoginWithGlobalTokenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
			return GetRuleContext<LoginWithGlobalUserNameAndPasswordStatementContext>(0);
		}
		public LoginStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginStatementContext loginStatement() {
		LoginStatementContext _localctx = new LoginStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_loginStatement);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				loginOnlyStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				loginWithGlobalUserNameStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				loginWithGlobalPasswordStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				loginWithGlobalTokenStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 420;
				loginWithGlobalUserNameAndPasswordStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginOnlyStatementContext : ParserRuleContext {
		public LoginOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginOnlyStatementContext loginOnlyStatement() {
		LoginOnlyStatementContext _localctx = new LoginOnlyStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_loginOnlyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameStatementContext loginWithGlobalUserNameStatement() {
		LoginWithGlobalUserNameStatementContext _localctx = new LoginWithGlobalUserNameStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_loginWithGlobalUserNameStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__40);
			State = 426;
			Match(T__37);
			State = 427;
			Match(T__41);
			State = 428;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalPasswordStatementContext loginWithGlobalPasswordStatement() {
		LoginWithGlobalPasswordStatementContext _localctx = new LoginWithGlobalPasswordStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_loginWithGlobalPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(T__40);
			State = 431;
			Match(T__37);
			State = 432;
			Match(T__41);
			State = 433;
			Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalTokenStatementContext : ParserRuleContext {
		public LoginWithGlobalTokenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalTokenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalTokenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalTokenStatementContext loginWithGlobalTokenStatement() {
		LoginWithGlobalTokenStatementContext _localctx = new LoginWithGlobalTokenStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_loginWithGlobalTokenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(T__40);
			State = 436;
			Match(T__37);
			State = 437;
			Match(T__41);
			State = 438;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoginWithGlobalUserNameAndPasswordStatementContext : ParserRuleContext {
		public LoginWithGlobalUserNameAndPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loginWithGlobalUserNameAndPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoginWithGlobalUserNameAndPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoginWithGlobalUserNameAndPasswordStatementContext loginWithGlobalUserNameAndPasswordStatement() {
		LoginWithGlobalUserNameAndPasswordStatementContext _localctx = new LoginWithGlobalUserNameAndPasswordStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_loginWithGlobalUserNameAndPasswordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(T__40);
			State = 441;
			Match(T__37);
			State = 442;
			Match(T__41);
			State = 443;
			Match(T__42);
			State = 444;
			Match(T__25);
			State = 445;
			Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceVarStatementContext spaceVarStatement() {
			return GetRuleContext<SpaceVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockVarStatementContext blockVarStatement() {
			return GetRuleContext<BlockVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringVarStatementContext stringVarStatement() {
			return GetRuleContext<StringVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexVarStatementContext regexVarStatement() {
			return GetRuleContext<RegexVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVarStatementContext storyVarStatement() {
			return GetRuleContext<StoryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
			return GetRuleContext<DatasourceEntryVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		public VarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarStatementContext varStatement() {
		VarStatementContext _localctx = new VarStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_varStatement);
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				spaceVarStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				blockVarStatement();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449;
				stringVarStatement();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450;
				regexVarStatement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451;
				storyVarStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 452;
				datasourceEntryVarStatement();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453;
				Match(T__45);
				State = 454;
				Match(VARID);
				State = 455;
				Match(T__5);
				State = 465;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 456;
					Match(VARID);
					}
					break;
				case 2:
					{
					State = 457;
					spaceSpec();
					}
					break;
				case 3:
					{
					State = 458;
					blockSpec();
					}
					break;
				case 4:
					{
					State = 459;
					stringExpr();
					}
					break;
				case 5:
					{
					State = 460;
					regexExpr();
					}
					break;
				case 6:
					{
					State = 461;
					storySpec();
					}
					break;
				case 7:
					{
					State = 462;
					intExpr();
					}
					break;
				case 8:
					{
					State = 463;
					datasourceEntrySpec();
					}
					break;
				case 9:
					{
					State = 464;
					datasourceSpec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceVarStatementContext spaceVarStatement() {
		SpaceVarStatementContext _localctx = new SpaceVarStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_spaceVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(T__46);
			State = 470;
			Match(VARID);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 471;
				Match(T__5);
				State = 472;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockVarStatementContext blockVarStatement() {
		BlockVarStatementContext _localctx = new BlockVarStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_blockVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(T__47);
			State = 476;
			Match(VARID);
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 477;
				Match(T__5);
				State = 478;
				blockSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarStatementContext stringVarStatement() {
		StringVarStatementContext _localctx = new StringVarStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_stringVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(T__48);
			State = 482;
			Match(VARID);
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 483;
				Match(T__5);
				State = 484;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		public RegexVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexVarStatementContext regexVarStatement() {
		RegexVarStatementContext _localctx = new RegexVarStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_regexVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(T__33);
			State = 488;
			Match(VARID);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 489;
				Match(T__5);
				State = 490;
				regexExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		public StoryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryVarStatementContext storyVarStatement() {
		StoryVarStatementContext _localctx = new StoryVarStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_storyVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(T__49);
			State = 494;
			Match(VARID);
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 495;
				Match(T__5);
				State = 496;
				storySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntryVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceEntrySpecContext datasourceEntrySpec() {
			return GetRuleContext<DatasourceEntrySpecContext>(0);
		}
		public DatasourceEntryVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntryVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntryVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntryVarStatementContext datasourceEntryVarStatement() {
		DatasourceEntryVarStatementContext _localctx = new DatasourceEntryVarStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_datasourceEntryVarStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(T__1);
			State = 500;
			Match(T__2);
			State = 501;
			Match(VARID);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 502;
				Match(T__5);
				State = 503;
				datasourceEntrySpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarGetFromContext varGetFrom() {
			return GetRuleContext<VarGetFromContext>(0);
		}
		public SpaceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceSpecContext spaceSpec() {
		SpaceSpecContext _localctx = new SpaceSpecContext(Context, State);
		EnterRule(_localctx, 60, RULE_spaceSpec);
		int _la;
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				Match(T__46);
				State = 507;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 508;
					varGetFrom();
					}
					break;
				}
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public BlockSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSpecContext blockSpec() {
		BlockSpecContext _localctx = new BlockSpecContext(Context, State);
		EnterRule(_localctx, 62, RULE_blockSpec);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				Match(T__47);
				State = 515;
				Match(STRINGLITERAL);
				State = 516;
				Match(T__10);
				State = 519;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
				case VARID:
					{
					State = 517;
					spaceSpec();
					}
					break;
				case T__58:
					{
					State = 518;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				Match(T__47);
				State = 522;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public StorySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorySpecContext storySpec() {
		StorySpecContext _localctx = new StorySpecContext(Context, State);
		EnterRule(_localctx, 64, RULE_storySpec);
		int _la;
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 526;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 529;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__46:
				case VARID:
					{
					State = 527;
					spaceSpec();
					}
					break;
				case T__58:
					{
					State = 528;
					fileSpec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 531;
				Match(VARID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceEntrySpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceSpecContext datasourceSpec() {
			return GetRuleContext<DatasourceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceEntrySpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceEntrySpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceEntrySpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceEntrySpecContext datasourceEntrySpec() {
		DatasourceEntrySpecContext _localctx = new DatasourceEntrySpecContext(Context, State);
		EnterRule(_localctx, 66, RULE_datasourceEntrySpec);
		int _la;
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534;
				Match(T__1);
				State = 535;
				Match(T__2);
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 536;
					intExpr();
					}
					break;
				case 2:
					{
					State = 537;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 538;
					Match(VARID);
					}
					break;
				}
				State = 541;
				_la = TokenStream.LA(1);
				if ( !(_la==T__10 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 542;
				datasourceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public DatasourceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceSpecContext datasourceSpec() {
		DatasourceSpecContext _localctx = new DatasourceSpecContext(Context, State);
		EnterRule(_localctx, 68, RULE_datasourceSpec);
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				Match(T__1);
				State = 550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 547;
					intExpr();
					}
					break;
				case 2:
					{
					State = 548;
					stringExpr();
					}
					break;
				case 3:
					{
					State = 549;
					Match(VARID);
					}
					break;
				}
				State = 552;
				Match(T__10);
				State = 553;
				spaceSpec();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554;
				Match(VARID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceAssignmentStatementContext spaceAssignmentStatement() {
			return GetRuleContext<SpaceAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringAssignmentStatementContext stringAssignmentStatement() {
			return GetRuleContext<StringAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockAssignmentStatementContext blockAssignmentStatement() {
			return GetRuleContext<BlockAssignmentStatementContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_assignmentStatement);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				Match(VARID);
				State = 558;
				Match(T__5);
				State = 559;
				Match(VARID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560;
				spaceAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561;
				stringAssignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 562;
				blockAssignmentStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public SpaceAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceAssignmentStatementContext spaceAssignmentStatement() {
		SpaceAssignmentStatementContext _localctx = new SpaceAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_spaceAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(VARID);
			State = 566;
			Match(T__5);
			State = 567;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		public BlockAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockAssignmentStatementContext blockAssignmentStatement() {
		BlockAssignmentStatementContext _localctx = new BlockAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_blockAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(VARID);
			State = 570;
			Match(T__5);
			State = 571;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public StringAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAssignmentStatementContext stringAssignmentStatement() {
		StringAssignmentStatementContext _localctx = new StringAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(VARID);
			State = 574;
			Match(T__5);
			State = 575;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlockStatementContext copyBlockStatement() {
			return GetRuleContext<CopyBlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpaceStatementContext copySpaceStatement() {
			return GetRuleContext<CopySpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopySpacesStatementContext copySpacesStatement() {
			return GetRuleContext<CopySpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyBlocksStatementContext copyBlocksStatement() {
			return GetRuleContext<CopyBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyStoryStatementContext copyStoryStatement() {
			return GetRuleContext<CopyStoryStatementContext>(0);
		}
		public CopyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStatementContext copyStatement() {
		CopyStatementContext _localctx = new CopyStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_copyStatement);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577;
				copyBlockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 578;
				copySpaceStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 579;
				copySpacesStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 580;
				copyBlocksStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 581;
				copyStoryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec() {
			return GetRuleContext<BlockSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockOutputLocationContext blockOutputLocation() {
			return GetRuleContext<BlockOutputLocationContext>(0);
		}
		public CopyBlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlockStatementContext copyBlockStatement() {
		CopyBlockStatementContext _localctx = new CopyBlockStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_copyBlockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(T__16);
			State = 585;
			blockSpec();
			State = 586;
			Match(T__18);
			State = 587;
			blockOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceOutputLocationContext spaceOutputLocation() {
			return GetRuleContext<SpaceOutputLocationContext>(0);
		}
		public CopySpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpaceStatementContext copySpaceStatement() {
		CopySpaceStatementContext _localctx = new CopySpaceStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_copySpaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(T__16);
			State = 590;
			spaceSpec();
			State = 591;
			Match(T__18);
			State = 592;
			spaceOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopySpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpacesOutputLocationContext spacesOutputLocation() {
			return GetRuleContext<SpacesOutputLocationContext>(0);
		}
		public CopySpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copySpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopySpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopySpacesStatementContext copySpacesStatement() {
		CopySpacesStatementContext _localctx = new CopySpacesStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_copySpacesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(T__16);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__50) {
				{
				State = 595;
				Match(T__50);
				}
			}

			State = 598;
			Match(T__51);
			State = 599;
			Match(T__17);
			State = 600;
			realDataLocation();
			State = 601;
			Match(T__18);
			State = 602;
			spacesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpacesStatementContext printSpacesStatement() {
			return GetRuleContext<PrintSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintVarStatementContext printVarStatement() {
			return GetRuleContext<PrintVarStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSpaceStatementContext printSpaceStatement() {
			return GetRuleContext<PrintSpaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStringLiteralStatementContext printStringLiteralStatement() {
			return GetRuleContext<PrintStringLiteralStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintSymbolTableStatementContext printSymbolTableStatement() {
			return GetRuleContext<PrintSymbolTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintLocalCacheStatementContext printLocalCacheStatement() {
			return GetRuleContext<PrintLocalCacheStatementContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_printStatement);
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604;
				printSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605;
				printVarStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606;
				printSpaceStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 607;
				printStringLiteralStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 608;
				printSymbolTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 609;
				printLocalCacheStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RealDataLocationContext realDataLocation() {
			return GetRuleContext<RealDataLocationContext>(0);
		}
		public PrintSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpacesStatementContext printSpacesStatement() {
		PrintSpacesStatementContext _localctx = new PrintSpacesStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_printSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(T__52);
			State = 613;
			Match(T__51);
			State = 614;
			Match(T__17);
			State = 615;
			realDataLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintVarStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public PrintVarStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printVarStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintVarStatementContext printVarStatement() {
		PrintVarStatementContext _localctx = new PrintVarStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_printVarStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			Match(T__52);
			State = 618;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSpaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintSpaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSpaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSpaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSpaceStatementContext printSpaceStatement() {
		PrintSpaceStatementContext _localctx = new PrintSpaceStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_printSpaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(T__52);
			State = 621;
			Match(T__46);
			State = 622;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStringLiteralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		public PrintStringLiteralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStringLiteralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStringLiteralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStringLiteralStatementContext printStringLiteralStatement() {
		PrintStringLiteralStatementContext _localctx = new PrintStringLiteralStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_printStringLiteralStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(T__52);
			State = 625;
			Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintSymbolTableStatementContext : ParserRuleContext {
		public PrintSymbolTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printSymbolTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintSymbolTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintSymbolTableStatementContext printSymbolTableStatement() {
		PrintSymbolTableStatementContext _localctx = new PrintSymbolTableStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_printSymbolTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(T__52);
			State = 628;
			Match(T__53);
			State = 629;
			Match(T__54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintLocalCacheStatementContext : ParserRuleContext {
		public PrintLocalCacheStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printLocalCacheStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintLocalCacheStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintLocalCacheStatementContext printLocalCacheStatement() {
		PrintLocalCacheStatementContext _localctx = new PrintLocalCacheStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_printLocalCacheStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(T__52);
			State = 632;
			Match(T__55);
			State = 633;
			Match(T__56);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealDataLocationContext : ParserRuleContext {
		public RealDataLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realDataLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealDataLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealDataLocationContext realDataLocation() {
		RealDataLocationContext _localctx = new RealDataLocationContext(Context, State);
		EnterRule(_localctx, 100, RULE_realDataLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				{
				State = 635;
				Match(T__57);
				}
				break;
			case T__55:
				{
				State = 636;
				Match(T__55);
				State = 637;
				Match(T__56);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpacesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpacesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spacesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpacesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpacesOutputLocationContext spacesOutputLocation() {
		SpacesOutputLocationContext _localctx = new SpacesOutputLocationContext(Context, State);
		EnterRule(_localctx, 102, RULE_spacesOutputLocation);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				Match(T__55);
				State = 642;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 643;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public FileSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSpecContext fileSpec() {
		FileSpecContext _localctx = new FileSpecContext(Context, State);
		EnterRule(_localctx, 104, RULE_fileSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(T__58);
			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL || _la==VARID) {
				{
				State = 647;
				_la = TokenStream.LA(1);
				if ( !(_la==STRINGLITERAL || _la==VARID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlockOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockOutputLocationContext blockOutputLocation() {
		BlockOutputLocationContext _localctx = new BlockOutputLocationContext(Context, State);
		EnterRule(_localctx, 106, RULE_blockOutputLocation);
		int _la;
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 650;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651;
				Match(T__55);
				State = 652;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653;
				Match(T__58);
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRINGLITERAL) {
					{
					State = 654;
					Match(STRINGLITERAL);
					}
				}

				}
				break;
			case T__46:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocksOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public BlocksOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocksOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocksOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocksOutputLocationContext blocksOutputLocation() {
		BlocksOutputLocationContext _localctx = new BlocksOutputLocationContext(Context, State);
		EnterRule(_localctx, 108, RULE_blocksOutputLocation);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661;
				Match(T__55);
				State = 662;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 663;
				fileSpec();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 4);
				{
				State = 664;
				filesSpec();
				}
				break;
			case T__46:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 665;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoryOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryOutputLocationContext storyOutputLocation() {
		StoryOutputLocationContext _localctx = new StoryOutputLocationContext(Context, State);
		EnterRule(_localctx, 110, RULE_storyOutputLocation);
		try {
			State = 673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 668;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669;
				Match(T__55);
				State = 670;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 671;
				fileSpec();
				}
				break;
			case T__46:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 672;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilesSpecContext : ParserRuleContext {
		public FilesSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filesSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilesSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilesSpecContext filesSpec() {
		FilesSpecContext _localctx = new FilesSpecContext(Context, State);
		EnterRule(_localctx, 112, RULE_filesSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public SpaceOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceOutputLocationContext spaceOutputLocation() {
		SpaceOutputLocationContext _localctx = new SpaceOutputLocationContext(Context, State);
		EnterRule(_localctx, 114, RULE_spaceOutputLocation);
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 677;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				Match(T__55);
				State = 679;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 680;
				fileSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarGetFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		public VarGetFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varGetFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarGetFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarGetFromContext varGetFrom() {
		VarGetFromContext _localctx = new VarGetFromContext(Context, State);
		EnterRule(_localctx, 116, RULE_varGetFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 683;
				Match(T__60);
				State = 684;
				Match(T__61);
				}
				break;
			case 2:
				{
				State = 685;
				Match(T__10);
				State = 686;
				Match(T__55);
				State = 687;
				Match(T__56);
				}
				break;
			case 3:
				{
				State = 688;
				Match(T__60);
				State = 689;
				Match(T__57);
				}
				break;
			case 4:
				{
				State = 690;
				Match(T__10);
				State = 691;
				fileSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocksOutputLocationContext blocksOutputLocation() {
			return GetRuleContext<BlocksOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintListContext blockConstraintList() {
			return GetRuleContext<BlockConstraintListContext>(0);
		}
		public CopyBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyBlocksStatementContext copyBlocksStatement() {
		CopyBlocksStatementContext _localctx = new CopyBlocksStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_copyBlocksStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(T__16);
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__50) {
				{
				State = 695;
				Match(T__50);
				}
			}

			State = 698;
			Match(T__62);
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 699;
				Match(T__14);
				State = 700;
				blockConstraintList();
				}
			}

			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 704;
			spaceSpec();
			State = 705;
			Match(T__18);
			State = 706;
			blocksOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryOutputLocationContext storyOutputLocation() {
			return GetRuleContext<StoryOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public CopyStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoryStatementContext copyStoryStatement() {
		CopyStoryStatementContext _localctx = new CopyStoryStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_copyStoryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(T__16);
			State = 709;
			Match(T__49);
			State = 710;
			storySpec();
			State = 711;
			Match(T__18);
			State = 714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 712;
				storyOutputLocation();
				}
				break;
			case 2:
				{
				State = 713;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintContext blockConstraint() {
			return GetRuleContext<BlockConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockConstraintListContext blockConstraintList() {
			return GetRuleContext<BlockConstraintListContext>(0);
		}
		public BlockConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintListContext blockConstraintList() {
		BlockConstraintListContext _localctx = new BlockConstraintListContext(Context, State);
		EnterRule(_localctx, 122, RULE_blockConstraintList);
		int _la;
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716;
				blockConstraint();
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 717;
					Match(T__25);
					State = 718;
					blockConstraintList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 721;
				blockConstraint();
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__26) {
					{
					State = 722;
					Match(T__26);
					State = 723;
					blockConstraintList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public BlockConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockConstraintContext blockConstraint() {
		BlockConstraintContext _localctx = new BlockConstraintContext(Context, State);
		EnterRule(_localctx, 124, RULE_blockConstraint);
		int _la;
		try {
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728;
				Match(T__27);
				State = 729;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 730;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 731;
				Match(T__27);
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 732;
					Match(T__29);
					}
				}

				State = 735;
				Match(T__10);
				State = 736;
				Match(T__3);
				State = 737;
				intExprList();
				State = 738;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 740;
				Match(T__4);
				State = 741;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 742;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 743;
				Match(T__4);
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 744;
					Match(T__29);
					}
				}

				State = 747;
				Match(T__10);
				State = 748;
				Match(T__3);
				State = 749;
				stringExprList();
				State = 750;
				Match(T__8);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 752;
				Match(T__4);
				State = 757;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 753;
					Match(T__30);
					}
					break;
				case T__31:
					{
					State = 754;
					Match(T__31);
					State = 755;
					Match(T__29);
					State = 756;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 759;
					Match(T__33);
					}
				}

				State = 762;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 763;
				Match(T__4);
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 764;
					Match(T__29);
					}
				}

				State = 767;
				Match(T__10);
				State = 768;
				Match(T__3);
				State = 769;
				regexExprList();
				State = 770;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 772;
				Match(T__4);
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 773;
					Match(T__29);
					}
				}

				State = 776;
				Match(T__34);
				State = 777;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 778;
				Match(T__4);
				State = 783;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 779;
					Match(T__35);
					}
					break;
				case T__31:
					{
					State = 780;
					Match(T__31);
					State = 781;
					Match(T__29);
					State = 782;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 785;
				Match(T__37);
				State = 786;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 787;
				Match(T__4);
				State = 792;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 788;
					Match(T__38);
					}
					break;
				case T__31:
					{
					State = 789;
					Match(T__31);
					State = 790;
					Match(T__29);
					State = 791;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 794;
				Match(T__37);
				State = 795;
				stringExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		public IntExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprListContext intExprList() {
		IntExprListContext _localctx = new IntExprListContext(Context, State);
		EnterRule(_localctx, 126, RULE_intExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			intExpr();
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 799;
				Match(T__6);
				State = 800;
				intExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 128, RULE_intExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_la = TokenStream.LA(1);
			if ( !(_la==VARID || _la==INTLITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) {
				{
				State = 804;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 805;
				intExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbosityStatementContext : ParserRuleContext {
		public VerbosityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbosityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbosityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbosityStatementContext verbosityStatement() {
		VerbosityStatementContext _localctx = new VerbosityStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_verbosityStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__67) {
				{
				State = 808;
				Match(T__67);
				}
			}

			State = 811;
			_la = TokenStream.LA(1);
			if ( !(_la==T__68 || _la==T__69) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		public WaitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitStatementContext waitStatement() {
		WaitStatementContext _localctx = new WaitStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_waitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(T__70);
			State = 814;
			Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareSpacesStatementContext compareSpacesStatement() {
			return GetRuleContext<CompareSpacesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareBlocksStatementContext compareBlocksStatement() {
			return GetRuleContext<CompareBlocksStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareAllBlocksStatementContext compareAllBlocksStatement() {
			return GetRuleContext<CompareAllBlocksStatementContext>(0);
		}
		public CompareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareStatementContext compareStatement() {
		CompareStatementContext _localctx = new CompareStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_compareStatement);
		try {
			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 816;
				compareSpacesStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 817;
				compareBlocksStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 818;
				compareAllBlocksStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareSpacesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareSpacesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareSpacesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareSpacesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareSpacesStatementContext compareSpacesStatement() {
		CompareSpacesStatementContext _localctx = new CompareSpacesStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_compareSpacesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(T__71);
			State = 822;
			spaceSpec();
			State = 823;
			Match(T__25);
			State = 824;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext[] blockSpec() {
			return GetRuleContexts<BlockSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockSpecContext blockSpec(int i) {
			return GetRuleContext<BlockSpecContext>(i);
		}
		public CompareBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareBlocksStatementContext compareBlocksStatement() {
		CompareBlocksStatementContext _localctx = new CompareBlocksStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_compareBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(T__71);
			State = 827;
			blockSpec();
			State = 828;
			Match(T__25);
			State = 829;
			blockSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareAllBlocksStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CompareAllBlocksStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareAllBlocksStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareAllBlocksStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareAllBlocksStatementContext compareAllBlocksStatement() {
		CompareAllBlocksStatementContext _localctx = new CompareAllBlocksStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_compareAllBlocksStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			Match(T__71);
			State = 832;
			Match(T__50);
			State = 833;
			Match(T__62);
			State = 834;
			Match(T__10);
			State = 835;
			spaceSpec();
			State = 836;
			Match(T__25);
			State = 837;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public PublishStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoryStatementContext publishStoryStatement() {
		PublishStoryStatementContext _localctx = new PublishStoryStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_publishStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(T__72);
			State = 840;
			Match(T__49);
			State = 841;
			storySpec();
			State = 844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 842;
				Match(T__10);
				State = 843;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public UnpublishStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoryStatementContext unpublishStoryStatement() {
		UnpublishStoryStatementContext _localctx = new UnpublishStoryStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_unpublishStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(T__73);
			State = 847;
			Match(T__49);
			State = 848;
			storySpec();
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 849;
				Match(T__10);
				State = 850;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorySpecContext storySpec() {
			return GetRuleContext<StorySpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public DeleteStoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoryStatementContext deleteStoryStatement() {
		DeleteStoryStatementContext _localctx = new DeleteStoryStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_deleteStoryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			Match(T__15);
			State = 854;
			Match(T__49);
			State = 855;
			storySpec();
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 856;
				Match(T__10);
				State = 857;
				spaceSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesInputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoriesInputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesInputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesInputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesInputLocationContext storiesInputLocation() {
		StoriesInputLocationContext _localctx = new StoriesInputLocationContext(Context, State);
		EnterRule(_localctx, 148, RULE_storiesInputLocation);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__55:
				EnterOuterAlt(_localctx, 1);
				{
				State = 860;
				Match(T__55);
				State = 861;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862;
				fileSpec();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 3);
				{
				State = 863;
				filesSpec();
				}
				break;
			case T__46:
			case VARID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 864;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoriesOutputLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileSpecContext fileSpec() {
			return GetRuleContext<FileSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilesSpecContext filesSpec() {
			return GetRuleContext<FilesSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		public StoriesOutputLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storiesOutputLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoriesOutputLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoriesOutputLocationContext storiesOutputLocation() {
		StoriesOutputLocationContext _localctx = new StoriesOutputLocationContext(Context, State);
		EnterRule(_localctx, 150, RULE_storiesOutputLocation);
		try {
			State = 873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				State = 867;
				Match(T__24);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 868;
				Match(T__55);
				State = 869;
				Match(T__56);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 3);
				{
				State = 870;
				fileSpec();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 4);
				{
				State = 871;
				filesSpec();
				}
				break;
			case T__46:
			case VARID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 872;
				spaceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoriesInputLocationContext storiesInputLocation() {
			return GetRuleContext<StoriesInputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoriesOutputLocationContext storiesOutputLocation() {
			return GetRuleContext<StoriesOutputLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public CopyStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyStoriesStatementContext copyStoriesStatement() {
		CopyStoriesStatementContext _localctx = new CopyStoriesStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_copyStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(T__16);
			State = 876;
			Match(T__74);
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14 || _la==T__37) {
				{
				State = 877;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 878;
				storyConstraintList();
				}
			}

			State = 881;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 882;
			storiesInputLocation();
			State = 883;
			Match(T__18);
			State = 884;
			storiesOutputLocation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public PublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublishStoriesStatementContext publishStoriesStatement() {
		PublishStoriesStatementContext _localctx = new PublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_publishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(T__72);
			State = 887;
			Match(T__74);
			State = 890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14 || _la==T__37) {
				{
				State = 888;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 889;
				storyConstraintList();
				}
			}

			State = 892;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 893;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpublishStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public UnpublishStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpublishStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpublishStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpublishStoriesStatementContext unpublishStoriesStatement() {
		UnpublishStoriesStatementContext _localctx = new UnpublishStoriesStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_unpublishStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(T__73);
			State = 896;
			Match(T__74);
			State = 899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14 || _la==T__37) {
				{
				State = 897;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 898;
				storyConstraintList();
				}
			}

			State = 901;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 902;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStoriesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec() {
			return GetRuleContext<SpaceSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public DeleteStoriesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStoriesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStoriesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStoriesStatementContext deleteStoriesStatement() {
		DeleteStoriesStatementContext _localctx = new DeleteStoriesStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_deleteStoriesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(T__15);
			State = 905;
			Match(T__74);
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14 || _la==T__37) {
				{
				State = 906;
				_la = TokenStream.LA(1);
				if ( !(_la==T__14 || _la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 907;
				storyConstraintList();
				}
			}

			State = 910;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 911;
			spaceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintContext storyConstraint() {
			return GetRuleContext<StoryConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryConstraintListContext storyConstraintList() {
			return GetRuleContext<StoryConstraintListContext>(0);
		}
		public StoryConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintListContext storyConstraintList() {
		StoryConstraintListContext _localctx = new StoryConstraintListContext(Context, State);
		EnterRule(_localctx, 160, RULE_storyConstraintList);
		int _la;
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 913;
				storyConstraint();
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 914;
					Match(T__25);
					State = 915;
					storyConstraintList();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 918;
				storyConstraint();
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__26) {
					{
					State = 919;
					Match(T__26);
					State = 920;
					storyConstraintList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public StoryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryConstraintContext storyConstraint() {
		StoryConstraintContext _localctx = new StoryConstraintContext(Context, State);
		EnterRule(_localctx, 162, RULE_storyConstraint);
		int _la;
		try {
			State = 1136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925;
				Match(T__27);
				State = 926;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 927;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 928;
				Match(T__27);
				State = 930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 929;
					Match(T__29);
					}
				}

				State = 932;
				Match(T__10);
				State = 933;
				Match(T__3);
				State = 934;
				intExprList();
				State = 935;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 937;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 938;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 939;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 940;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 941;
					Match(T__29);
					}
				}

				State = 944;
				Match(T__10);
				State = 945;
				Match(T__3);
				State = 946;
				stringExprList();
				State = 947;
				Match(T__8);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 949;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 954;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 950;
					Match(T__30);
					}
					break;
				case T__31:
					{
					State = 951;
					Match(T__31);
					State = 952;
					Match(T__29);
					State = 953;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 956;
					Match(T__33);
					}
				}

				State = 959;
				regexExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 960;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 961;
					Match(T__29);
					}
				}

				State = 964;
				Match(T__10);
				State = 965;
				Match(T__3);
				State = 966;
				stringExprList();
				State = 967;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 969;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 970;
					Match(T__29);
					}
				}

				State = 973;
				Match(T__34);
				State = 974;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 975;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 980;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 976;
					Match(T__35);
					}
					break;
				case T__31:
					{
					State = 977;
					Match(T__31);
					State = 978;
					Match(T__29);
					State = 979;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 982;
				Match(T__37);
				State = 983;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 984;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__23) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 989;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 985;
					Match(T__38);
					}
					break;
				case T__31:
					{
					State = 986;
					Match(T__31);
					State = 987;
					Match(T__29);
					State = 988;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 991;
				Match(T__37);
				State = 992;
				stringExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1001;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__75:
				case T__76:
					{
					{
					State = 994;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__75) {
						{
						State = 993;
						Match(T__75);
						}
					}

					State = 996;
					Match(T__76);
					}
					}
					break;
				case T__50:
				case T__77:
					{
					{
					State = 998;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__50) {
						{
						State = 997;
						Match(T__50);
						}
					}

					State = 1000;
					Match(T__77);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1003;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1004;
				stringExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__75:
				case T__76:
					{
					{
					State = 1006;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__75) {
						{
						State = 1005;
						Match(T__75);
						}
					}

					State = 1008;
					Match(T__76);
					}
					}
					break;
				case T__50:
				case T__77:
					{
					{
					State = 1010;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__50) {
						{
						State = 1009;
						Match(T__50);
						}
					}

					State = 1012;
					Match(T__77);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1015;
					Match(T__29);
					}
				}

				State = 1018;
				Match(T__10);
				State = 1019;
				Match(T__3);
				State = 1020;
				stringExprList();
				State = 1021;
				Match(T__8);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__75) {
					{
					State = 1023;
					Match(T__75);
					}
				}

				State = 1026;
				Match(T__76);
				State = 1031;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 1027;
					Match(T__30);
					}
					break;
				case T__31:
					{
					State = 1028;
					Match(T__31);
					State = 1029;
					Match(T__29);
					State = 1030;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1033;
					Match(T__33);
					}
				}

				State = 1036;
				regexExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__75) {
					{
					State = 1037;
					Match(T__75);
					}
				}

				State = 1040;
				Match(T__76);
				State = 1045;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1041;
					Match(T__35);
					}
					break;
				case T__31:
					{
					State = 1042;
					Match(T__31);
					State = 1043;
					Match(T__29);
					State = 1044;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1047;
				Match(T__37);
				State = 1048;
				stringExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__75) {
					{
					State = 1049;
					Match(T__75);
					}
				}

				State = 1052;
				Match(T__76);
				State = 1057;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 1053;
					Match(T__38);
					}
					break;
				case T__31:
					{
					State = 1054;
					Match(T__31);
					State = 1055;
					Match(T__29);
					State = 1056;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1059;
				Match(T__37);
				State = 1060;
				stringExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50) {
					{
					State = 1061;
					Match(T__50);
					}
				}

				State = 1064;
				Match(T__77);
				State = 1069;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__32:
					{
					State = 1065;
					Match(T__32);
					}
					break;
				case T__78:
					{
					State = 1066;
					Match(T__78);
					State = 1067;
					Match(T__29);
					State = 1068;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1071;
					Match(T__33);
					}
				}

				State = 1074;
				regexExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50) {
					{
					State = 1075;
					Match(T__50);
					}
				}

				State = 1078;
				Match(T__77);
				State = 1083;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 1079;
					Match(T__36);
					}
					break;
				case T__78:
					{
					State = 1080;
					Match(T__78);
					State = 1081;
					Match(T__29);
					State = 1082;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1085;
				Match(T__37);
				State = 1086;
				stringExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50) {
					{
					State = 1087;
					Match(T__50);
					}
				}

				State = 1090;
				Match(T__77);
				State = 1095;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__39:
					{
					State = 1091;
					Match(T__39);
					}
					break;
				case T__78:
					{
					State = 1092;
					Match(T__78);
					State = 1093;
					Match(T__29);
					State = 1094;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1097;
				Match(T__37);
				State = 1098;
				stringExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1107;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__75:
				case T__76:
					{
					{
					State = 1100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__75) {
						{
						State = 1099;
						Match(T__75);
						}
					}

					State = 1102;
					Match(T__76);
					}
					}
					break;
				case T__50:
				case T__77:
					{
					{
					State = 1104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__50) {
						{
						State = 1103;
						Match(T__50);
						}
					}

					State = 1106;
					Match(T__77);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1109;
					Match(T__29);
					}
				}

				State = 1112;
				Match(T__10);
				State = 1113;
				Match(T__3);
				State = 1114;
				regexExprList();
				State = 1115;
				Match(T__8);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__75:
				case T__76:
					{
					{
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__75) {
						{
						State = 1117;
						Match(T__75);
						}
					}

					State = 1120;
					Match(T__76);
					}
					}
					break;
				case T__50:
				case T__77:
					{
					{
					State = 1122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__50) {
						{
						State = 1121;
						Match(T__50);
						}
					}

					State = 1124;
					Match(T__77);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1127;
					Match(T__29);
					}
				}

				State = 1130;
				Match(T__34);
				State = 1131;
				stringExpr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1132;
				Match(T__79);
				State = 1133;
				Match(T__77);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1134;
				Match(T__75);
				State = 1135;
				Match(T__77);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		public RegexExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprContext regexExpr() {
		RegexExprContext _localctx = new RegexExprContext(Context, State);
		EnterRule(_localctx, 164, RULE_regexExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprContext regexExpr() {
			return GetRuleContext<RegexExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public RegexExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexExprListContext regexExprList() {
		RegexExprListContext _localctx = new RegexExprListContext(Context, State);
		EnterRule(_localctx, 166, RULE_regexExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			regexExpr();
			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1141;
				Match(T__6);
				State = 1142;
				regexExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(BlokScriptGrammarParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		public CopyDatasourceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourceStatementContext copyDatasourceStatement() {
		CopyDatasourceStatementContext _localctx = new CopyDatasourceStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_copyDatasourceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(T__16);
			State = 1146;
			Match(T__1);
			State = 1147;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1148;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 1149;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 1150;
				Match(VARID);
				}
				break;
			}
			State = 1153;
			Match(T__18);
			State = 1156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1154;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 1155;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyDatasourcesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext[] spaceSpec() {
			return GetRuleContexts<SpaceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpaceSpecContext spaceSpec(int i) {
			return GetRuleContext<SpaceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(BlokScriptGrammarParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(BlokScriptGrammarParser.VARID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatasourceConstraintExprContext datasourceConstraintExpr() {
			return GetRuleContext<DatasourceConstraintExprContext>(0);
		}
		public CopyDatasourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyDatasourcesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyDatasourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CopyDatasourcesStatementContext copyDatasourcesStatement() {
		CopyDatasourcesStatementContext _localctx = new CopyDatasourcesStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_copyDatasourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			Match(T__16);
			State = 1159;
			Match(T__80);
			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 268435504L) != 0) || _la==T__81) {
				{
				State = 1160;
				datasourceConstraintExpr();
				}
			}

			State = 1163;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1164;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 1165;
				Match(VARID);
				}
				break;
			}
			State = 1168;
			Match(T__18);
			State = 1171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1169;
				spaceSpec();
				}
				break;
			case 2:
				{
				State = 1170;
				Match(VARID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasourceConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprListContext intExprList() {
			return GetRuleContext<IntExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXLITERAL() { return GetToken(BlokScriptGrammarParser.REGEXLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegexExprListContext regexExprList() {
			return GetRuleContext<RegexExprListContext>(0);
		}
		public DatasourceConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasourceConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasourceConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasourceConstraintContext datasourceConstraint() {
		DatasourceConstraintContext _localctx = new DatasourceConstraintContext(Context, State);
		EnterRule(_localctx, 172, RULE_datasourceConstraint);
		int _la;
		try {
			State = 1244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1173;
				Match(T__27);
				State = 1174;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1175;
				intExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1176;
				Match(T__27);
				State = 1178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1177;
					Match(T__29);
					}
				}

				State = 1180;
				Match(T__10);
				State = 1181;
				Match(T__3);
				State = 1182;
				intExprList();
				State = 1183;
				Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1185;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1186;
				_la = TokenStream.LA(1);
				if ( !(_la==T__5 || _la==T__28) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1187;
				stringExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1188;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1189;
					Match(T__29);
					}
				}

				State = 1192;
				Match(T__10);
				State = 1193;
				Match(T__3);
				State = 1194;
				stringExprList();
				State = 1195;
				Match(T__8);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1197;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
					{
					State = 1198;
					Match(T__30);
					}
					break;
				case T__31:
					{
					State = 1199;
					Match(T__31);
					State = 1200;
					Match(T__29);
					State = 1201;
					Match(T__32);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33) {
					{
					State = 1204;
					Match(T__33);
					}
				}

				State = 1209;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRINGLITERAL:
				case VARID:
					{
					State = 1207;
					stringExpr();
					}
					break;
				case REGEXLITERAL:
					{
					State = 1208;
					Match(REGEXLITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1211;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1212;
					Match(T__29);
					}
				}

				State = 1215;
				Match(T__10);
				State = 1216;
				Match(T__3);
				State = 1217;
				regexExprList();
				State = 1218;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1220;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 1221;
					Match(T__29);
					}
				}

				State = 1224;
				Match(T__34);
				State = 1225;
				stringExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1226;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1231;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 1227;
					Match(T__35);
					}
					break;
				case T__31:
					{
					State = 1228;
					Match(T__31);
					State = 1229;
					Match(T__29);
					State = 1230;
					Match(T__36);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1233;
				Match(T__37);
				State = 1234;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1235;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__81) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1240;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 1236;
					Match(T__38);
					}
					break;
				case T__31:
					{
					State = 1237;
					Match(T__31);
					State = 1238;
					Match(T__29);
					State = 1239;
					Match(T__39);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1242;
				Match(T__37);
				{
				State = 1243;
				stringExpr();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BlokScriptGrammarParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(BlokScriptGrammarParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 174, RULE_stringExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			_la = TokenStream.LA(1);
			if ( !(_la==STRINGLITERAL || _la==VARID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 1247;
				Match(T__63);
				State = 1248;
				stringExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprListContext stringExprList() {
			return GetRuleContext<StringExprListContext>(0);
		}
		public StringExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprListContext stringExprList() {
		StringExprListContext _localctx = new StringExprListContext(Context, State);
		EnterRule(_localctx, 176, RULE_stringExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			stringExpr();
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1252;
				Match(T__6);
				State = 1253;
				stringExprList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBlokScriptGrammarVisitor<TResult> typedVisitor = visitor as IBlokScriptGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			Match(T__82);
			State = 1257;
			Match(T__3);
			State = 1258;
			Match(T__8);
			State = 1259;
			Match(T__83);
			State = 1260;
			statementList();
			State = 1261;
			Match(T__84);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,91,1264,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,1,1,1,1,1,
		4,1,186,8,1,11,1,12,1,187,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,210,8,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,3,4,236,8,4,1,5,1,5,1,5,3,5,241,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,249,
		8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,258,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,3,8,269,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,280,8,9,
		1,10,1,10,1,10,1,10,3,10,286,8,10,1,11,3,11,289,8,11,1,11,1,11,1,11,1,
		12,1,12,1,12,1,12,1,12,3,12,299,8,12,1,13,1,13,1,13,3,13,304,8,13,1,14,
		1,14,1,14,3,14,309,8,14,1,14,1,14,1,14,1,14,3,14,315,8,14,1,14,1,14,1,
		14,1,14,1,14,1,14,3,14,323,8,14,1,14,1,14,3,14,327,8,14,1,15,1,15,1,15,
		1,15,1,15,3,15,334,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,3,15,346,8,15,1,15,1,15,1,15,1,15,3,15,352,8,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,3,15,361,8,15,1,15,3,15,364,8,15,1,15,1,15,1,15,3,15,369,
		8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,378,8,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,3,15,387,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
		396,8,15,1,15,1,15,3,15,400,8,15,1,16,1,16,1,16,3,16,405,8,16,1,16,1,16,
		1,16,1,16,3,16,411,8,16,1,16,1,16,3,16,415,8,16,1,17,1,17,1,17,1,17,1,
		17,3,17,422,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,3,23,466,8,23,3,23,468,8,23,1,24,1,24,1,24,1,24,3,24,474,
		8,24,1,25,1,25,1,25,1,25,3,25,480,8,25,1,26,1,26,1,26,1,26,3,26,486,8,
		26,1,27,1,27,1,27,1,27,3,27,492,8,27,1,28,1,28,1,28,1,28,3,28,498,8,28,
		1,29,1,29,1,29,1,29,1,29,3,29,505,8,29,1,30,1,30,1,30,3,30,510,8,30,1,
		30,3,30,513,8,30,1,31,1,31,1,31,1,31,1,31,3,31,520,8,31,1,31,1,31,3,31,
		524,8,31,1,32,1,32,1,32,1,32,3,32,530,8,32,1,32,3,32,533,8,32,1,33,1,33,
		1,33,1,33,1,33,3,33,540,8,33,1,33,1,33,1,33,3,33,545,8,33,1,34,1,34,1,
		34,1,34,3,34,551,8,34,1,34,1,34,1,34,3,34,556,8,34,1,35,1,35,1,35,1,35,
		1,35,1,35,3,35,564,8,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,
		38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,39,583,8,39,1,40,1,40,1,40,1,40,
		1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,3,42,597,8,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,611,8,43,1,44,1,44,1,44,
		1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
		1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,3,50,639,8,50,1,51,1,51,1,
		51,1,51,3,51,645,8,51,1,52,1,52,3,52,649,8,52,1,53,1,53,1,53,1,53,1,53,
		3,53,656,8,53,1,53,3,53,659,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,667,
		8,54,1,55,1,55,1,55,1,55,1,55,3,55,674,8,55,1,56,1,56,1,57,1,57,1,57,1,
		57,3,57,682,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,693,
		8,58,1,59,1,59,3,59,697,8,59,1,59,1,59,1,59,3,59,702,8,59,1,59,1,59,1,
		59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,3,60,715,8,60,1,61,1,61,1,61,
		3,61,720,8,61,1,61,1,61,1,61,3,61,725,8,61,3,61,727,8,61,1,62,1,62,1,62,
		1,62,1,62,3,62,734,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,3,62,746,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
		758,8,62,1,62,3,62,761,8,62,1,62,1,62,1,62,3,62,766,8,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,3,62,775,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
		62,784,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,793,8,62,1,62,1,62,
		3,62,797,8,62,1,63,1,63,1,63,3,63,802,8,63,1,64,1,64,1,64,3,64,807,8,64,
		1,65,3,65,810,8,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,3,67,820,8,
		67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,
		70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,845,8,71,1,72,1,72,
		1,72,1,72,1,72,3,72,852,8,72,1,73,1,73,1,73,1,73,1,73,3,73,859,8,73,1,
		74,1,74,1,74,1,74,1,74,3,74,866,8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,
		874,8,75,1,76,1,76,1,76,1,76,3,76,880,8,76,1,76,1,76,1,76,1,76,1,76,1,
		77,1,77,1,77,1,77,3,77,891,8,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,
		900,8,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,909,8,79,1,79,1,79,1,
		79,1,80,1,80,1,80,3,80,917,8,80,1,80,1,80,1,80,3,80,922,8,80,3,80,924,
		8,80,1,81,1,81,1,81,1,81,1,81,3,81,931,8,81,1,81,1,81,1,81,1,81,1,81,1,
		81,1,81,1,81,1,81,1,81,3,81,943,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,3,81,955,8,81,1,81,3,81,958,8,81,1,81,1,81,1,81,3,81,963,
		8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,972,8,81,1,81,1,81,1,81,1,
		81,1,81,1,81,1,81,3,81,981,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		990,8,81,1,81,1,81,1,81,3,81,995,8,81,1,81,1,81,3,81,999,8,81,1,81,3,81,
		1002,8,81,1,81,1,81,1,81,3,81,1007,8,81,1,81,1,81,3,81,1011,8,81,1,81,
		3,81,1014,8,81,1,81,3,81,1017,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		1025,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1032,8,81,1,81,3,81,1035,8,81,
		1,81,1,81,3,81,1039,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1046,8,81,1,81,
		1,81,1,81,3,81,1051,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1058,8,81,1,81,
		1,81,1,81,3,81,1063,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1070,8,81,1,81,
		3,81,1073,8,81,1,81,1,81,3,81,1077,8,81,1,81,1,81,1,81,1,81,1,81,3,81,
		1084,8,81,1,81,1,81,1,81,3,81,1089,8,81,1,81,1,81,1,81,1,81,1,81,3,81,
		1096,8,81,1,81,1,81,1,81,3,81,1101,8,81,1,81,1,81,3,81,1105,8,81,1,81,
		3,81,1108,8,81,1,81,3,81,1111,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
		1119,8,81,1,81,1,81,3,81,1123,8,81,1,81,3,81,1126,8,81,1,81,3,81,1129,
		8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1137,8,81,1,82,1,82,1,83,1,83,
		1,83,3,83,1144,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1152,8,84,1,84,
		1,84,1,84,3,84,1157,8,84,1,85,1,85,1,85,3,85,1162,8,85,1,85,1,85,1,85,
		3,85,1167,8,85,1,85,1,85,1,85,3,85,1172,8,85,1,86,1,86,1,86,1,86,1,86,
		3,86,1179,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,
		1191,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1203,
		8,86,1,86,3,86,1206,8,86,1,86,1,86,3,86,1210,8,86,1,86,1,86,3,86,1214,
		8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1223,8,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,3,86,1232,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		3,86,1241,8,86,1,86,1,86,3,86,1245,8,86,1,87,1,87,1,87,3,87,1250,8,87,
		1,88,1,88,1,88,3,88,1255,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		0,0,90,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,0,15,1,0,10,11,2,0,11,11,18,18,1,0,22,23,1,0,26,
		27,2,0,6,6,29,29,2,0,5,5,8,8,1,0,88,90,1,0,88,89,1,0,89,90,1,0,64,67,1,
		0,69,70,2,0,15,15,38,38,2,0,5,5,24,24,2,0,88,89,91,91,2,0,5,5,82,82,1428,
		0,180,1,0,0,0,2,185,1,0,0,0,4,209,1,0,0,0,6,211,1,0,0,0,8,226,1,0,0,0,
		10,237,1,0,0,0,12,248,1,0,0,0,14,250,1,0,0,0,16,259,1,0,0,0,18,270,1,0,
		0,0,20,285,1,0,0,0,22,288,1,0,0,0,24,298,1,0,0,0,26,300,1,0,0,0,28,326,
		1,0,0,0,30,399,1,0,0,0,32,414,1,0,0,0,34,421,1,0,0,0,36,423,1,0,0,0,38,
		425,1,0,0,0,40,430,1,0,0,0,42,435,1,0,0,0,44,440,1,0,0,0,46,467,1,0,0,
		0,48,469,1,0,0,0,50,475,1,0,0,0,52,481,1,0,0,0,54,487,1,0,0,0,56,493,1,
		0,0,0,58,499,1,0,0,0,60,512,1,0,0,0,62,523,1,0,0,0,64,532,1,0,0,0,66,544,
		1,0,0,0,68,555,1,0,0,0,70,563,1,0,0,0,72,565,1,0,0,0,74,569,1,0,0,0,76,
		573,1,0,0,0,78,582,1,0,0,0,80,584,1,0,0,0,82,589,1,0,0,0,84,594,1,0,0,
		0,86,610,1,0,0,0,88,612,1,0,0,0,90,617,1,0,0,0,92,620,1,0,0,0,94,624,1,
		0,0,0,96,627,1,0,0,0,98,631,1,0,0,0,100,638,1,0,0,0,102,644,1,0,0,0,104,
		646,1,0,0,0,106,658,1,0,0,0,108,666,1,0,0,0,110,673,1,0,0,0,112,675,1,
		0,0,0,114,681,1,0,0,0,116,692,1,0,0,0,118,694,1,0,0,0,120,708,1,0,0,0,
		122,726,1,0,0,0,124,796,1,0,0,0,126,798,1,0,0,0,128,803,1,0,0,0,130,809,
		1,0,0,0,132,813,1,0,0,0,134,819,1,0,0,0,136,821,1,0,0,0,138,826,1,0,0,
		0,140,831,1,0,0,0,142,839,1,0,0,0,144,846,1,0,0,0,146,853,1,0,0,0,148,
		865,1,0,0,0,150,873,1,0,0,0,152,875,1,0,0,0,154,886,1,0,0,0,156,895,1,
		0,0,0,158,904,1,0,0,0,160,923,1,0,0,0,162,1136,1,0,0,0,164,1138,1,0,0,
		0,166,1140,1,0,0,0,168,1145,1,0,0,0,170,1158,1,0,0,0,172,1244,1,0,0,0,
		174,1246,1,0,0,0,176,1251,1,0,0,0,178,1256,1,0,0,0,180,181,3,2,1,0,181,
		1,1,0,0,0,182,183,3,4,2,0,183,184,5,86,0,0,184,186,1,0,0,0,185,182,1,0,
		0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,3,1,0,0,0,189,
		210,3,34,17,0,190,210,3,46,23,0,191,210,3,78,39,0,192,210,3,70,35,0,193,
		210,3,86,43,0,194,210,3,130,65,0,195,210,3,132,66,0,196,210,3,134,67,0,
		197,210,3,142,71,0,198,210,3,144,72,0,199,210,3,146,73,0,200,210,3,152,
		76,0,201,210,3,154,77,0,202,210,3,156,78,0,203,210,3,158,79,0,204,210,
		3,6,3,0,205,210,3,8,4,0,206,210,3,14,7,0,207,210,3,16,8,0,208,210,3,18,
		9,0,209,189,1,0,0,0,209,190,1,0,0,0,209,191,1,0,0,0,209,192,1,0,0,0,209,
		193,1,0,0,0,209,194,1,0,0,0,209,195,1,0,0,0,209,196,1,0,0,0,209,197,1,
		0,0,0,209,198,1,0,0,0,209,199,1,0,0,0,209,200,1,0,0,0,209,201,1,0,0,0,
		209,202,1,0,0,0,209,203,1,0,0,0,209,204,1,0,0,0,209,205,1,0,0,0,209,206,
		1,0,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,5,1,0,0,0,211,212,5,1,0,0,
		212,213,5,2,0,0,213,214,5,3,0,0,214,215,5,4,0,0,215,216,5,5,0,0,216,217,
		5,6,0,0,217,218,3,174,87,0,218,219,5,7,0,0,219,220,5,8,0,0,220,221,5,6,
		0,0,221,222,3,174,87,0,222,223,5,9,0,0,223,224,7,0,0,0,224,225,3,68,34,
		0,225,7,1,0,0,0,226,227,5,12,0,0,227,228,5,2,0,0,228,229,5,13,0,0,229,
		230,5,11,0,0,230,231,3,68,34,0,231,232,5,14,0,0,232,235,3,10,5,0,233,234,
		5,15,0,0,234,236,3,26,13,0,235,233,1,0,0,0,235,236,1,0,0,0,236,9,1,0,0,
		0,237,240,3,12,6,0,238,239,5,7,0,0,239,241,3,10,5,0,240,238,1,0,0,0,240,
		241,1,0,0,0,241,11,1,0,0,0,242,243,5,5,0,0,243,244,5,6,0,0,244,249,3,174,
		87,0,245,246,5,8,0,0,246,247,5,6,0,0,247,249,3,174,87,0,248,242,1,0,0,
		0,248,245,1,0,0,0,249,13,1,0,0,0,250,251,5,16,0,0,251,252,5,2,0,0,252,
		253,5,13,0,0,253,254,5,11,0,0,254,257,3,68,34,0,255,256,5,15,0,0,256,258,
		3,26,13,0,257,255,1,0,0,0,257,258,1,0,0,0,258,15,1,0,0,0,259,260,5,17,
		0,0,260,261,5,2,0,0,261,262,5,13,0,0,262,263,7,1,0,0,263,264,3,20,10,0,
		264,265,5,19,0,0,265,268,3,24,12,0,266,267,5,15,0,0,267,269,3,26,13,0,
		268,266,1,0,0,0,268,269,1,0,0,0,269,17,1,0,0,0,270,271,5,20,0,0,271,272,
		5,2,0,0,272,273,5,13,0,0,273,274,7,1,0,0,274,275,3,20,10,0,275,276,5,19,
		0,0,276,279,3,20,10,0,277,278,5,15,0,0,278,280,3,26,13,0,279,277,1,0,0,
		0,279,280,1,0,0,0,280,19,1,0,0,0,281,286,3,68,34,0,282,286,3,22,11,0,283,
		286,3,104,52,0,284,286,5,21,0,0,285,281,1,0,0,0,285,282,1,0,0,0,285,283,
		1,0,0,0,285,284,1,0,0,0,286,21,1,0,0,0,287,289,7,2,0,0,288,287,1,0,0,0,
		288,289,1,0,0,0,289,290,1,0,0,0,290,291,5,24,0,0,291,292,3,174,87,0,292,
		23,1,0,0,0,293,299,3,68,34,0,294,299,3,22,11,0,295,299,3,104,52,0,296,
		299,5,21,0,0,297,299,5,25,0,0,298,293,1,0,0,0,298,294,1,0,0,0,298,295,
		1,0,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,25,1,0,0,0,300,303,3,28,14,
		0,301,302,7,3,0,0,302,304,3,26,13,0,303,301,1,0,0,0,303,304,1,0,0,0,304,
		27,1,0,0,0,305,308,3,30,15,0,306,307,7,3,0,0,307,309,3,28,14,0,308,306,
		1,0,0,0,308,309,1,0,0,0,309,327,1,0,0,0,310,311,5,4,0,0,311,314,3,30,15,
		0,312,313,7,3,0,0,313,315,3,28,14,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
		316,1,0,0,0,316,317,5,9,0,0,317,327,1,0,0,0,318,319,5,4,0,0,319,322,3,
		28,14,0,320,321,7,3,0,0,321,323,3,28,14,0,322,320,1,0,0,0,322,323,1,0,
		0,0,323,324,1,0,0,0,324,325,5,9,0,0,325,327,1,0,0,0,326,305,1,0,0,0,326,
		310,1,0,0,0,326,318,1,0,0,0,327,29,1,0,0,0,328,329,5,28,0,0,329,330,7,
		4,0,0,330,400,3,128,64,0,331,333,5,28,0,0,332,334,5,30,0,0,333,332,1,0,
		0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,5,11,0,0,336,337,5,4,0,0,337,
		338,3,126,63,0,338,339,5,9,0,0,339,400,1,0,0,0,340,341,7,5,0,0,341,342,
		7,4,0,0,342,400,3,174,87,0,343,345,7,5,0,0,344,346,5,30,0,0,345,344,1,
		0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,5,11,0,0,348,351,5,4,0,0,
		349,352,3,176,88,0,350,352,3,166,83,0,351,349,1,0,0,0,351,350,1,0,0,0,
		352,353,1,0,0,0,353,354,5,9,0,0,354,400,1,0,0,0,355,360,7,5,0,0,356,361,
		5,31,0,0,357,358,5,32,0,0,358,359,5,30,0,0,359,361,5,33,0,0,360,356,1,
		0,0,0,360,357,1,0,0,0,361,363,1,0,0,0,362,364,5,34,0,0,363,362,1,0,0,0,
		363,364,1,0,0,0,364,365,1,0,0,0,365,400,3,164,82,0,366,368,7,5,0,0,367,
		369,5,30,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,371,5,
		11,0,0,371,372,5,4,0,0,372,373,3,176,88,0,373,374,5,9,0,0,374,400,1,0,
		0,0,375,377,7,5,0,0,376,378,5,30,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,
		379,1,0,0,0,379,380,5,35,0,0,380,400,3,174,87,0,381,386,7,5,0,0,382,387,
		5,36,0,0,383,384,5,32,0,0,384,385,5,30,0,0,385,387,5,37,0,0,386,382,1,
		0,0,0,386,383,1,0,0,0,387,388,1,0,0,0,388,389,5,38,0,0,389,400,3,174,87,
		0,390,395,7,5,0,0,391,396,5,39,0,0,392,393,5,32,0,0,393,394,5,30,0,0,394,
		396,5,40,0,0,395,391,1,0,0,0,395,392,1,0,0,0,396,397,1,0,0,0,397,398,5,
		38,0,0,398,400,3,174,87,0,399,328,1,0,0,0,399,331,1,0,0,0,399,340,1,0,
		0,0,399,343,1,0,0,0,399,355,1,0,0,0,399,366,1,0,0,0,399,375,1,0,0,0,399,
		381,1,0,0,0,399,390,1,0,0,0,400,31,1,0,0,0,401,404,3,172,86,0,402,403,
		7,3,0,0,403,405,3,32,16,0,404,402,1,0,0,0,404,405,1,0,0,0,405,415,1,0,
		0,0,406,407,5,4,0,0,407,410,3,172,86,0,408,409,7,3,0,0,409,411,3,32,16,
		0,410,408,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,5,9,0,0,413,
		415,1,0,0,0,414,401,1,0,0,0,414,406,1,0,0,0,415,33,1,0,0,0,416,422,3,36,
		18,0,417,422,3,38,19,0,418,422,3,40,20,0,419,422,3,42,21,0,420,422,3,44,
		22,0,421,416,1,0,0,0,421,417,1,0,0,0,421,418,1,0,0,0,421,419,1,0,0,0,421,
		420,1,0,0,0,422,35,1,0,0,0,423,424,5,41,0,0,424,37,1,0,0,0,425,426,5,41,
		0,0,426,427,5,38,0,0,427,428,5,42,0,0,428,429,5,43,0,0,429,39,1,0,0,0,
		430,431,5,41,0,0,431,432,5,38,0,0,432,433,5,42,0,0,433,434,5,44,0,0,434,
		41,1,0,0,0,435,436,5,41,0,0,436,437,5,38,0,0,437,438,5,42,0,0,438,439,
		5,45,0,0,439,43,1,0,0,0,440,441,5,41,0,0,441,442,5,38,0,0,442,443,5,42,
		0,0,443,444,5,43,0,0,444,445,5,26,0,0,445,446,5,44,0,0,446,45,1,0,0,0,
		447,468,3,48,24,0,448,468,3,50,25,0,449,468,3,52,26,0,450,468,3,54,27,
		0,451,468,3,56,28,0,452,468,3,58,29,0,453,454,5,46,0,0,454,455,5,89,0,
		0,455,465,5,6,0,0,456,466,5,89,0,0,457,466,3,60,30,0,458,466,3,62,31,0,
		459,466,3,174,87,0,460,466,3,164,82,0,461,466,3,64,32,0,462,466,3,128,
		64,0,463,466,3,66,33,0,464,466,3,68,34,0,465,456,1,0,0,0,465,457,1,0,0,
		0,465,458,1,0,0,0,465,459,1,0,0,0,465,460,1,0,0,0,465,461,1,0,0,0,465,
		462,1,0,0,0,465,463,1,0,0,0,465,464,1,0,0,0,466,468,1,0,0,0,467,447,1,
		0,0,0,467,448,1,0,0,0,467,449,1,0,0,0,467,450,1,0,0,0,467,451,1,0,0,0,
		467,452,1,0,0,0,467,453,1,0,0,0,468,47,1,0,0,0,469,470,5,47,0,0,470,473,
		5,89,0,0,471,472,5,6,0,0,472,474,3,60,30,0,473,471,1,0,0,0,473,474,1,0,
		0,0,474,49,1,0,0,0,475,476,5,48,0,0,476,479,5,89,0,0,477,478,5,6,0,0,478,
		480,3,62,31,0,479,477,1,0,0,0,479,480,1,0,0,0,480,51,1,0,0,0,481,482,5,
		49,0,0,482,485,5,89,0,0,483,484,5,6,0,0,484,486,3,174,87,0,485,483,1,0,
		0,0,485,486,1,0,0,0,486,53,1,0,0,0,487,488,5,34,0,0,488,491,5,89,0,0,489,
		490,5,6,0,0,490,492,3,164,82,0,491,489,1,0,0,0,491,492,1,0,0,0,492,55,
		1,0,0,0,493,494,5,50,0,0,494,497,5,89,0,0,495,496,5,6,0,0,496,498,3,64,
		32,0,497,495,1,0,0,0,497,498,1,0,0,0,498,57,1,0,0,0,499,500,5,2,0,0,500,
		501,5,3,0,0,501,504,5,89,0,0,502,503,5,6,0,0,503,505,3,66,33,0,504,502,
		1,0,0,0,504,505,1,0,0,0,505,59,1,0,0,0,506,507,5,47,0,0,507,509,7,6,0,
		0,508,510,3,116,58,0,509,508,1,0,0,0,509,510,1,0,0,0,510,513,1,0,0,0,511,
		513,5,89,0,0,512,506,1,0,0,0,512,511,1,0,0,0,513,61,1,0,0,0,514,515,5,
		48,0,0,515,516,5,88,0,0,516,519,5,11,0,0,517,520,3,60,30,0,518,520,3,104,
		52,0,519,517,1,0,0,0,519,518,1,0,0,0,520,524,1,0,0,0,521,522,5,48,0,0,
		522,524,5,89,0,0,523,514,1,0,0,0,523,521,1,0,0,0,524,63,1,0,0,0,525,526,
		7,6,0,0,526,529,7,1,0,0,527,530,3,60,30,0,528,530,3,104,52,0,529,527,1,
		0,0,0,529,528,1,0,0,0,530,533,1,0,0,0,531,533,5,89,0,0,532,525,1,0,0,0,
		532,531,1,0,0,0,533,65,1,0,0,0,534,535,5,2,0,0,535,539,5,3,0,0,536,540,
		3,128,64,0,537,540,3,174,87,0,538,540,5,89,0,0,539,536,1,0,0,0,539,537,
		1,0,0,0,539,538,1,0,0,0,540,541,1,0,0,0,541,542,7,1,0,0,542,545,3,68,34,
		0,543,545,5,89,0,0,544,534,1,0,0,0,544,543,1,0,0,0,545,67,1,0,0,0,546,
		550,5,2,0,0,547,551,3,128,64,0,548,551,3,174,87,0,549,551,5,89,0,0,550,
		547,1,0,0,0,550,548,1,0,0,0,550,549,1,0,0,0,551,552,1,0,0,0,552,553,5,
		11,0,0,553,556,3,60,30,0,554,556,5,89,0,0,555,546,1,0,0,0,555,554,1,0,
		0,0,556,69,1,0,0,0,557,558,5,89,0,0,558,559,5,6,0,0,559,564,5,89,0,0,560,
		564,3,72,36,0,561,564,3,76,38,0,562,564,3,74,37,0,563,557,1,0,0,0,563,
		560,1,0,0,0,563,561,1,0,0,0,563,562,1,0,0,0,564,71,1,0,0,0,565,566,5,89,
		0,0,566,567,5,6,0,0,567,568,3,60,30,0,568,73,1,0,0,0,569,570,5,89,0,0,
		570,571,5,6,0,0,571,572,3,62,31,0,572,75,1,0,0,0,573,574,5,89,0,0,574,
		575,5,6,0,0,575,576,5,88,0,0,576,77,1,0,0,0,577,583,3,80,40,0,578,583,
		3,82,41,0,579,583,3,84,42,0,580,583,3,118,59,0,581,583,3,120,60,0,582,
		577,1,0,0,0,582,578,1,0,0,0,582,579,1,0,0,0,582,580,1,0,0,0,582,581,1,
		0,0,0,583,79,1,0,0,0,584,585,5,17,0,0,585,586,3,62,31,0,586,587,5,19,0,
		0,587,588,3,106,53,0,588,81,1,0,0,0,589,590,5,17,0,0,590,591,3,60,30,0,
		591,592,5,19,0,0,592,593,3,114,57,0,593,83,1,0,0,0,594,596,5,17,0,0,595,
		597,5,51,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,5,
		52,0,0,599,600,5,18,0,0,600,601,3,100,50,0,601,602,5,19,0,0,602,603,3,
		102,51,0,603,85,1,0,0,0,604,611,3,88,44,0,605,611,3,90,45,0,606,611,3,
		92,46,0,607,611,3,94,47,0,608,611,3,96,48,0,609,611,3,98,49,0,610,604,
		1,0,0,0,610,605,1,0,0,0,610,606,1,0,0,0,610,607,1,0,0,0,610,608,1,0,0,
		0,610,609,1,0,0,0,611,87,1,0,0,0,612,613,5,53,0,0,613,614,5,52,0,0,614,
		615,5,18,0,0,615,616,3,100,50,0,616,89,1,0,0,0,617,618,5,53,0,0,618,619,
		5,89,0,0,619,91,1,0,0,0,620,621,5,53,0,0,621,622,5,47,0,0,622,623,7,7,
		0,0,623,93,1,0,0,0,624,625,5,53,0,0,625,626,5,88,0,0,626,95,1,0,0,0,627,
		628,5,53,0,0,628,629,5,54,0,0,629,630,5,55,0,0,630,97,1,0,0,0,631,632,
		5,53,0,0,632,633,5,56,0,0,633,634,5,57,0,0,634,99,1,0,0,0,635,639,5,58,
		0,0,636,637,5,56,0,0,637,639,5,57,0,0,638,635,1,0,0,0,638,636,1,0,0,0,
		639,101,1,0,0,0,640,645,5,25,0,0,641,642,5,56,0,0,642,645,5,57,0,0,643,
		645,3,104,52,0,644,640,1,0,0,0,644,641,1,0,0,0,644,643,1,0,0,0,645,103,
		1,0,0,0,646,648,5,59,0,0,647,649,7,7,0,0,648,647,1,0,0,0,648,649,1,0,0,
		0,649,105,1,0,0,0,650,659,5,25,0,0,651,652,5,56,0,0,652,659,5,57,0,0,653,
		655,5,59,0,0,654,656,5,88,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,659,
		1,0,0,0,657,659,3,60,30,0,658,650,1,0,0,0,658,651,1,0,0,0,658,653,1,0,
		0,0,658,657,1,0,0,0,659,107,1,0,0,0,660,667,5,25,0,0,661,662,5,56,0,0,
		662,667,5,57,0,0,663,667,3,104,52,0,664,667,3,112,56,0,665,667,3,60,30,
		0,666,660,1,0,0,0,666,661,1,0,0,0,666,663,1,0,0,0,666,664,1,0,0,0,666,
		665,1,0,0,0,667,109,1,0,0,0,668,674,5,25,0,0,669,670,5,56,0,0,670,674,
		5,57,0,0,671,674,3,104,52,0,672,674,3,60,30,0,673,668,1,0,0,0,673,669,
		1,0,0,0,673,671,1,0,0,0,673,672,1,0,0,0,674,111,1,0,0,0,675,676,5,60,0,
		0,676,113,1,0,0,0,677,682,5,25,0,0,678,679,5,56,0,0,679,682,5,57,0,0,680,
		682,3,104,52,0,681,677,1,0,0,0,681,678,1,0,0,0,681,680,1,0,0,0,682,115,
		1,0,0,0,683,684,5,61,0,0,684,693,5,62,0,0,685,686,5,11,0,0,686,687,5,56,
		0,0,687,693,5,57,0,0,688,689,5,61,0,0,689,693,5,58,0,0,690,691,5,11,0,
		0,691,693,3,104,52,0,692,683,1,0,0,0,692,685,1,0,0,0,692,688,1,0,0,0,692,
		690,1,0,0,0,693,117,1,0,0,0,694,696,5,17,0,0,695,697,5,51,0,0,696,695,
		1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,701,5,63,0,0,699,700,5,15,
		0,0,700,702,3,122,61,0,701,699,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,
		703,704,7,1,0,0,704,705,3,60,30,0,705,706,5,19,0,0,706,707,3,108,54,0,
		707,119,1,0,0,0,708,709,5,17,0,0,709,710,5,50,0,0,710,711,3,64,32,0,711,
		714,5,19,0,0,712,715,3,110,55,0,713,715,5,89,0,0,714,712,1,0,0,0,714,713,
		1,0,0,0,715,121,1,0,0,0,716,719,3,124,62,0,717,718,5,26,0,0,718,720,3,
		122,61,0,719,717,1,0,0,0,719,720,1,0,0,0,720,727,1,0,0,0,721,724,3,124,
		62,0,722,723,5,27,0,0,723,725,3,122,61,0,724,722,1,0,0,0,724,725,1,0,0,
		0,725,727,1,0,0,0,726,716,1,0,0,0,726,721,1,0,0,0,727,123,1,0,0,0,728,
		729,5,28,0,0,729,730,7,4,0,0,730,797,3,128,64,0,731,733,5,28,0,0,732,734,
		5,30,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,5,11,
		0,0,736,737,5,4,0,0,737,738,3,126,63,0,738,739,5,9,0,0,739,797,1,0,0,0,
		740,741,5,5,0,0,741,742,7,4,0,0,742,797,3,174,87,0,743,745,5,5,0,0,744,
		746,5,30,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,748,5,
		11,0,0,748,749,5,4,0,0,749,750,3,176,88,0,750,751,5,9,0,0,751,797,1,0,
		0,0,752,757,5,5,0,0,753,758,5,31,0,0,754,755,5,32,0,0,755,756,5,30,0,0,
		756,758,5,33,0,0,757,753,1,0,0,0,757,754,1,0,0,0,758,760,1,0,0,0,759,761,
		5,34,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,797,3,164,
		82,0,763,765,5,5,0,0,764,766,5,30,0,0,765,764,1,0,0,0,765,766,1,0,0,0,
		766,767,1,0,0,0,767,768,5,11,0,0,768,769,5,4,0,0,769,770,3,166,83,0,770,
		771,5,9,0,0,771,797,1,0,0,0,772,774,5,5,0,0,773,775,5,30,0,0,774,773,1,
		0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,5,35,0,0,777,797,3,174,87,
		0,778,783,5,5,0,0,779,784,5,36,0,0,780,781,5,32,0,0,781,782,5,30,0,0,782,
		784,5,37,0,0,783,779,1,0,0,0,783,780,1,0,0,0,784,785,1,0,0,0,785,786,5,
		38,0,0,786,797,3,174,87,0,787,792,5,5,0,0,788,793,5,39,0,0,789,790,5,32,
		0,0,790,791,5,30,0,0,791,793,5,40,0,0,792,788,1,0,0,0,792,789,1,0,0,0,
		793,794,1,0,0,0,794,795,5,38,0,0,795,797,3,174,87,0,796,728,1,0,0,0,796,
		731,1,0,0,0,796,740,1,0,0,0,796,743,1,0,0,0,796,752,1,0,0,0,796,763,1,
		0,0,0,796,772,1,0,0,0,796,778,1,0,0,0,796,787,1,0,0,0,797,125,1,0,0,0,
		798,801,3,128,64,0,799,800,5,7,0,0,800,802,3,126,63,0,801,799,1,0,0,0,
		801,802,1,0,0,0,802,127,1,0,0,0,803,806,7,8,0,0,804,805,7,9,0,0,805,807,
		3,128,64,0,806,804,1,0,0,0,806,807,1,0,0,0,807,129,1,0,0,0,808,810,5,68,
		0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,7,10,0,0,812,
		131,1,0,0,0,813,814,5,71,0,0,814,815,5,90,0,0,815,133,1,0,0,0,816,820,
		3,136,68,0,817,820,3,138,69,0,818,820,3,140,70,0,819,816,1,0,0,0,819,817,
		1,0,0,0,819,818,1,0,0,0,820,135,1,0,0,0,821,822,5,72,0,0,822,823,3,60,
		30,0,823,824,5,26,0,0,824,825,3,60,30,0,825,137,1,0,0,0,826,827,5,72,0,
		0,827,828,3,62,31,0,828,829,5,26,0,0,829,830,3,62,31,0,830,139,1,0,0,0,
		831,832,5,72,0,0,832,833,5,51,0,0,833,834,5,63,0,0,834,835,5,11,0,0,835,
		836,3,60,30,0,836,837,5,26,0,0,837,838,3,60,30,0,838,141,1,0,0,0,839,840,
		5,73,0,0,840,841,5,50,0,0,841,844,3,64,32,0,842,843,5,11,0,0,843,845,3,
		60,30,0,844,842,1,0,0,0,844,845,1,0,0,0,845,143,1,0,0,0,846,847,5,74,0,
		0,847,848,5,50,0,0,848,851,3,64,32,0,849,850,5,11,0,0,850,852,3,60,30,
		0,851,849,1,0,0,0,851,852,1,0,0,0,852,145,1,0,0,0,853,854,5,16,0,0,854,
		855,5,50,0,0,855,858,3,64,32,0,856,857,5,11,0,0,857,859,3,60,30,0,858,
		856,1,0,0,0,858,859,1,0,0,0,859,147,1,0,0,0,860,861,5,56,0,0,861,866,5,
		57,0,0,862,866,3,104,52,0,863,866,3,112,56,0,864,866,3,60,30,0,865,860,
		1,0,0,0,865,862,1,0,0,0,865,863,1,0,0,0,865,864,1,0,0,0,866,149,1,0,0,
		0,867,874,5,25,0,0,868,869,5,56,0,0,869,874,5,57,0,0,870,874,3,104,52,
		0,871,874,3,112,56,0,872,874,3,60,30,0,873,867,1,0,0,0,873,868,1,0,0,0,
		873,870,1,0,0,0,873,871,1,0,0,0,873,872,1,0,0,0,874,151,1,0,0,0,875,876,
		5,17,0,0,876,879,5,75,0,0,877,878,7,11,0,0,878,880,3,160,80,0,879,877,
		1,0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,7,1,0,0,882,883,3,148,
		74,0,883,884,5,19,0,0,884,885,3,150,75,0,885,153,1,0,0,0,886,887,5,73,
		0,0,887,890,5,75,0,0,888,889,7,11,0,0,889,891,3,160,80,0,890,888,1,0,0,
		0,890,891,1,0,0,0,891,892,1,0,0,0,892,893,7,1,0,0,893,894,3,60,30,0,894,
		155,1,0,0,0,895,896,5,74,0,0,896,899,5,75,0,0,897,898,7,11,0,0,898,900,
		3,160,80,0,899,897,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,902,7,1,
		0,0,902,903,3,60,30,0,903,157,1,0,0,0,904,905,5,16,0,0,905,908,5,75,0,
		0,906,907,7,11,0,0,907,909,3,160,80,0,908,906,1,0,0,0,908,909,1,0,0,0,
		909,910,1,0,0,0,910,911,7,1,0,0,911,912,3,60,30,0,912,159,1,0,0,0,913,
		916,3,162,81,0,914,915,5,26,0,0,915,917,3,160,80,0,916,914,1,0,0,0,916,
		917,1,0,0,0,917,924,1,0,0,0,918,921,3,162,81,0,919,920,5,27,0,0,920,922,
		3,160,80,0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,913,1,0,
		0,0,923,918,1,0,0,0,924,161,1,0,0,0,925,926,5,28,0,0,926,927,7,4,0,0,927,
		1137,3,128,64,0,928,930,5,28,0,0,929,931,5,30,0,0,930,929,1,0,0,0,930,
		931,1,0,0,0,931,932,1,0,0,0,932,933,5,11,0,0,933,934,5,4,0,0,934,935,3,
		126,63,0,935,936,5,9,0,0,936,1137,1,0,0,0,937,938,7,12,0,0,938,939,7,4,
		0,0,939,1137,3,174,87,0,940,942,7,12,0,0,941,943,5,30,0,0,942,941,1,0,
		0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,5,11,0,0,945,946,5,4,0,0,946,
		947,3,176,88,0,947,948,5,9,0,0,948,1137,1,0,0,0,949,954,7,12,0,0,950,955,
		5,31,0,0,951,952,5,32,0,0,952,953,5,30,0,0,953,955,5,33,0,0,954,950,1,
		0,0,0,954,951,1,0,0,0,955,957,1,0,0,0,956,958,5,34,0,0,957,956,1,0,0,0,
		957,958,1,0,0,0,958,959,1,0,0,0,959,1137,3,164,82,0,960,962,7,12,0,0,961,
		963,5,30,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,965,5,
		11,0,0,965,966,5,4,0,0,966,967,3,176,88,0,967,968,5,9,0,0,968,1137,1,0,
		0,0,969,971,7,12,0,0,970,972,5,30,0,0,971,970,1,0,0,0,971,972,1,0,0,0,
		972,973,1,0,0,0,973,974,5,35,0,0,974,1137,3,174,87,0,975,980,7,12,0,0,
		976,981,5,36,0,0,977,978,5,32,0,0,978,979,5,30,0,0,979,981,5,37,0,0,980,
		976,1,0,0,0,980,977,1,0,0,0,981,982,1,0,0,0,982,983,5,38,0,0,983,1137,
		3,174,87,0,984,989,7,12,0,0,985,990,5,39,0,0,986,987,5,32,0,0,987,988,
		5,30,0,0,988,990,5,40,0,0,989,985,1,0,0,0,989,986,1,0,0,0,990,991,1,0,
		0,0,991,992,5,38,0,0,992,1137,3,174,87,0,993,995,5,76,0,0,994,993,1,0,
		0,0,994,995,1,0,0,0,995,996,1,0,0,0,996,1002,5,77,0,0,997,999,5,51,0,0,
		998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,1002,5,78,0,0,1001,
		994,1,0,0,0,1001,998,1,0,0,0,1002,1003,1,0,0,0,1003,1004,7,4,0,0,1004,
		1137,3,174,87,0,1005,1007,5,76,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,0,
		1007,1008,1,0,0,0,1008,1014,5,77,0,0,1009,1011,5,51,0,0,1010,1009,1,0,
		0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1014,5,78,0,0,1013,1006,1,
		0,0,0,1013,1010,1,0,0,0,1014,1016,1,0,0,0,1015,1017,5,30,0,0,1016,1015,
		1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,5,11,0,0,1019,1020,
		5,4,0,0,1020,1021,3,176,88,0,1021,1022,5,9,0,0,1022,1137,1,0,0,0,1023,
		1025,5,76,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,
		1031,5,77,0,0,1027,1032,5,31,0,0,1028,1029,5,32,0,0,1029,1030,5,30,0,0,
		1030,1032,5,33,0,0,1031,1027,1,0,0,0,1031,1028,1,0,0,0,1032,1034,1,0,0,
		0,1033,1035,5,34,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,
		0,0,1036,1137,3,164,82,0,1037,1039,5,76,0,0,1038,1037,1,0,0,0,1038,1039,
		1,0,0,0,1039,1040,1,0,0,0,1040,1045,5,77,0,0,1041,1046,5,36,0,0,1042,1043,
		5,32,0,0,1043,1044,5,30,0,0,1044,1046,5,37,0,0,1045,1041,1,0,0,0,1045,
		1042,1,0,0,0,1046,1047,1,0,0,0,1047,1048,5,38,0,0,1048,1137,3,174,87,0,
		1049,1051,5,76,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,
		0,1052,1057,5,77,0,0,1053,1058,5,39,0,0,1054,1055,5,32,0,0,1055,1056,5,
		30,0,0,1056,1058,5,40,0,0,1057,1053,1,0,0,0,1057,1054,1,0,0,0,1058,1059,
		1,0,0,0,1059,1060,5,38,0,0,1060,1137,3,174,87,0,1061,1063,5,51,0,0,1062,
		1061,1,0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1069,5,78,0,0,1065,
		1070,5,33,0,0,1066,1067,5,79,0,0,1067,1068,5,30,0,0,1068,1070,5,33,0,0,
		1069,1065,1,0,0,0,1069,1066,1,0,0,0,1070,1072,1,0,0,0,1071,1073,5,34,0,
		0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1137,3,164,
		82,0,1075,1077,5,51,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,
		1,0,0,0,1078,1083,5,78,0,0,1079,1084,5,37,0,0,1080,1081,5,79,0,0,1081,
		1082,5,30,0,0,1082,1084,5,37,0,0,1083,1079,1,0,0,0,1083,1080,1,0,0,0,1084,
		1085,1,0,0,0,1085,1086,5,38,0,0,1086,1137,3,174,87,0,1087,1089,5,51,0,
		0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1095,5,78,
		0,0,1091,1096,5,40,0,0,1092,1093,5,79,0,0,1093,1094,5,30,0,0,1094,1096,
		5,40,0,0,1095,1091,1,0,0,0,1095,1092,1,0,0,0,1096,1097,1,0,0,0,1097,1098,
		5,38,0,0,1098,1137,3,174,87,0,1099,1101,5,76,0,0,1100,1099,1,0,0,0,1100,
		1101,1,0,0,0,1101,1102,1,0,0,0,1102,1108,5,77,0,0,1103,1105,5,51,0,0,1104,
		1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1108,5,78,0,0,1107,
		1100,1,0,0,0,1107,1104,1,0,0,0,1108,1110,1,0,0,0,1109,1111,5,30,0,0,1110,
		1109,1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,1113,5,11,0,0,1113,
		1114,5,4,0,0,1114,1115,3,166,83,0,1115,1116,5,9,0,0,1116,1137,1,0,0,0,
		1117,1119,5,76,0,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,
		0,1120,1126,5,77,0,0,1121,1123,5,51,0,0,1122,1121,1,0,0,0,1122,1123,1,
		0,0,0,1123,1124,1,0,0,0,1124,1126,5,78,0,0,1125,1118,1,0,0,0,1125,1122,
		1,0,0,0,1126,1128,1,0,0,0,1127,1129,5,30,0,0,1128,1127,1,0,0,0,1128,1129,
		1,0,0,0,1129,1130,1,0,0,0,1130,1131,5,35,0,0,1131,1137,3,174,87,0,1132,
		1133,5,80,0,0,1133,1137,5,78,0,0,1134,1135,5,76,0,0,1135,1137,5,78,0,0,
		1136,925,1,0,0,0,1136,928,1,0,0,0,1136,937,1,0,0,0,1136,940,1,0,0,0,1136,
		949,1,0,0,0,1136,960,1,0,0,0,1136,969,1,0,0,0,1136,975,1,0,0,0,1136,984,
		1,0,0,0,1136,1001,1,0,0,0,1136,1013,1,0,0,0,1136,1024,1,0,0,0,1136,1038,
		1,0,0,0,1136,1050,1,0,0,0,1136,1062,1,0,0,0,1136,1076,1,0,0,0,1136,1088,
		1,0,0,0,1136,1107,1,0,0,0,1136,1125,1,0,0,0,1136,1132,1,0,0,0,1136,1134,
		1,0,0,0,1137,163,1,0,0,0,1138,1139,7,13,0,0,1139,165,1,0,0,0,1140,1143,
		3,164,82,0,1141,1142,5,7,0,0,1142,1144,3,166,83,0,1143,1141,1,0,0,0,1143,
		1144,1,0,0,0,1144,167,1,0,0,0,1145,1146,5,17,0,0,1146,1147,5,2,0,0,1147,
		1148,7,6,0,0,1148,1151,7,1,0,0,1149,1152,3,60,30,0,1150,1152,5,89,0,0,
		1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,1153,1,0,0,0,1153,1156,5,19,0,
		0,1154,1157,3,60,30,0,1155,1157,5,89,0,0,1156,1154,1,0,0,0,1156,1155,1,
		0,0,0,1157,169,1,0,0,0,1158,1159,5,17,0,0,1159,1161,5,81,0,0,1160,1162,
		3,32,16,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1166,
		7,1,0,0,1164,1167,3,60,30,0,1165,1167,5,89,0,0,1166,1164,1,0,0,0,1166,
		1165,1,0,0,0,1167,1168,1,0,0,0,1168,1171,5,19,0,0,1169,1172,3,60,30,0,
		1170,1172,5,89,0,0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,171,1,0,0,
		0,1173,1174,5,28,0,0,1174,1175,7,4,0,0,1175,1245,3,128,64,0,1176,1178,
		5,28,0,0,1177,1179,5,30,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,
		1,0,0,0,1180,1181,5,11,0,0,1181,1182,5,4,0,0,1182,1183,3,126,63,0,1183,
		1184,5,9,0,0,1184,1245,1,0,0,0,1185,1186,7,14,0,0,1186,1187,7,4,0,0,1187,
		1245,3,174,87,0,1188,1190,7,14,0,0,1189,1191,5,30,0,0,1190,1189,1,0,0,
		0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,11,0,0,1193,1194,5,4,
		0,0,1194,1195,3,176,88,0,1195,1196,5,9,0,0,1196,1245,1,0,0,0,1197,1202,
		7,14,0,0,1198,1203,5,31,0,0,1199,1200,5,32,0,0,1200,1201,5,30,0,0,1201,
		1203,5,33,0,0,1202,1198,1,0,0,0,1202,1199,1,0,0,0,1203,1205,1,0,0,0,1204,
		1206,5,34,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1209,1,0,0,0,1207,
		1210,3,174,87,0,1208,1210,5,91,0,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,
		1210,1245,1,0,0,0,1211,1213,7,14,0,0,1212,1214,5,30,0,0,1213,1212,1,0,
		0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,5,11,0,0,1216,1217,5,
		4,0,0,1217,1218,3,166,83,0,1218,1219,5,9,0,0,1219,1245,1,0,0,0,1220,1222,
		7,14,0,0,1221,1223,5,30,0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,
		1,0,0,0,1224,1225,5,35,0,0,1225,1245,3,174,87,0,1226,1231,7,14,0,0,1227,
		1232,5,36,0,0,1228,1229,5,32,0,0,1229,1230,5,30,0,0,1230,1232,5,37,0,0,
		1231,1227,1,0,0,0,1231,1228,1,0,0,0,1232,1233,1,0,0,0,1233,1234,5,38,0,
		0,1234,1245,3,174,87,0,1235,1240,7,14,0,0,1236,1241,5,39,0,0,1237,1238,
		5,32,0,0,1238,1239,5,30,0,0,1239,1241,5,40,0,0,1240,1236,1,0,0,0,1240,
		1237,1,0,0,0,1241,1242,1,0,0,0,1242,1243,5,38,0,0,1243,1245,3,174,87,0,
		1244,1173,1,0,0,0,1244,1176,1,0,0,0,1244,1185,1,0,0,0,1244,1188,1,0,0,
		0,1244,1197,1,0,0,0,1244,1211,1,0,0,0,1244,1220,1,0,0,0,1244,1226,1,0,
		0,0,1244,1235,1,0,0,0,1245,173,1,0,0,0,1246,1249,7,7,0,0,1247,1248,5,64,
		0,0,1248,1250,3,174,87,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,175,
		1,0,0,0,1251,1254,3,174,87,0,1252,1253,5,7,0,0,1253,1255,3,176,88,0,1254,
		1252,1,0,0,0,1254,1255,1,0,0,0,1255,177,1,0,0,0,1256,1257,5,83,0,0,1257,
		1258,5,4,0,0,1258,1259,5,9,0,0,1259,1260,5,84,0,0,1260,1261,3,2,1,0,1261,
		1262,5,85,0,0,1262,179,1,0,0,0,148,187,209,235,240,248,257,268,279,285,
		288,298,303,308,314,322,326,333,345,351,360,363,368,377,386,395,399,404,
		410,414,421,465,467,473,479,485,491,497,504,509,512,519,523,529,532,539,
		544,550,555,563,582,596,610,638,644,648,655,658,666,673,681,692,696,701,
		714,719,724,726,733,745,757,760,765,774,783,792,796,801,806,809,819,844,
		851,858,865,873,879,890,899,908,916,921,923,930,942,954,957,962,971,980,
		989,994,998,1001,1006,1010,1013,1016,1024,1031,1034,1038,1045,1050,1057,
		1062,1069,1072,1076,1083,1088,1095,1100,1104,1107,1110,1118,1122,1125,
		1128,1136,1143,1151,1156,1161,1166,1171,1178,1190,1202,1205,1209,1213,
		1222,1231,1240,1244,1249,1254
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BlokScript.Parser
